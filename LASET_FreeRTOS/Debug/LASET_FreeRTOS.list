
LASET_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  080076a8  080076a8  000176a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bbc  08007bbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007bbc  08007bbc  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bbc  08007bbc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003270  200001f8  08007db8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000400  20003468  08007db8  00023468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bbf  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae0  00000000  00000000  00031ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007d64  00000000  00000000  000348bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  0003d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000503f  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e693  00000000  00000000  00043337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005eece  00000000  00000000  000519ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b0898  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003510  00000000  00000000  000b08ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007690 	.word	0x08007690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08007690 	.word	0x08007690

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8000bdc:	f000 fd08 	bl	80015f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <pvPortMalloc+0x9c>)
 8000be2:	6898      	ldr	r0, [r3, #8]
 8000be4:	b970      	cbnz	r0, 8000c04 <pvPortMalloc+0x2c>
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
	xEnd.pxNextFreeBlock = NULL;
 8000be6:	4619      	mov	r1, r3
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000be8:	f642 75f8 	movw	r5, #12280	; 0x2ff8
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000bec:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <pvPortMalloc+0xa0>)
	xEnd.pxNextFreeBlock = NULL;
 8000bee:	f841 0f0c 	str.w	r0, [r1, #12]!
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000bf2:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8000bf6:	e9c3 2000 	strd	r2, r0, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000bfa:	e9c2 1500 	strd	r1, r5, [r2]
			xHeapHasBeenInitialised = pdTRUE;
 8000bfe:	2201      	movs	r2, #1
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000c00:	611d      	str	r5, [r3, #16]
			xHeapHasBeenInitialised = pdTRUE;
 8000c02:	609a      	str	r2, [r3, #8]
		if( xWantedSize > 0 )
 8000c04:	b12c      	cbz	r4, 8000c12 <pvPortMalloc+0x3a>
			xWantedSize += heapSTRUCT_SIZE;
 8000c06:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c08:	0762      	lsls	r2, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f024 0407 	bicne.w	r4, r4, #7
 8000c10:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000c12:	f642 72f6 	movw	r2, #12278	; 0x2ff6
 8000c16:	1e61      	subs	r1, r4, #1
 8000c18:	4291      	cmp	r1, r2
 8000c1a:	d829      	bhi.n	8000c70 <pvPortMalloc+0x98>
			pxBlock = xStart.pxNextFreeBlock;
 8000c1c:	681b      	ldr	r3, [r3, #0]
			pxPreviousBlock = &xStart;
 8000c1e:	4815      	ldr	r0, [pc, #84]	; (8000c74 <pvPortMalloc+0x9c>)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	d201      	bcs.n	8000c2a <pvPortMalloc+0x52>
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	b9fa      	cbnz	r2, 8000c6a <pvPortMalloc+0x92>
			if( pxBlock != &xEnd )
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <pvPortMalloc+0xa4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d01f      	beq.n	8000c70 <pvPortMalloc+0x98>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8000c30:	6805      	ldr	r5, [r0, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c32:	681e      	ldr	r6, [r3, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c34:	1b09      	subs	r1, r1, r4
 8000c36:	2910      	cmp	r1, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8000c38:	f105 0508 	add.w	r5, r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c3c:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c3e:	d90b      	bls.n	8000c58 <pvPortMalloc+0x80>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c40:	1918      	adds	r0, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c42:	6041      	str	r1, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
 8000c44:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000c46:	6844      	ldr	r4, [r0, #4]
 8000c48:	3a0c      	subs	r2, #12
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	6856      	ldr	r6, [r2, #4]
 8000c50:	42a6      	cmp	r6, r4
 8000c52:	d3fa      	bcc.n	8000c4a <pvPortMalloc+0x72>
 8000c54:	6002      	str	r2, [r0, #0]
 8000c56:	6008      	str	r0, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c58:	4909      	ldr	r1, [pc, #36]	; (8000c80 <pvPortMalloc+0xa8>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	680a      	ldr	r2, [r1, #0]
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
 8000c62:	f000 fd61 	bl	8001728 <xTaskResumeAll>
}
 8000c66:	4628      	mov	r0, r5
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	e7d7      	b.n	8000c20 <pvPortMalloc+0x48>
void *pvReturn = NULL;
 8000c70:	2500      	movs	r5, #0
 8000c72:	e7f6      	b.n	8000c62 <pvPortMalloc+0x8a>
 8000c74:	20000214 	.word	0x20000214
 8000c78:	20000230 	.word	0x20000230
 8000c7c:	20000220 	.word	0x20000220
 8000c80:	20000000 	.word	0x20000000

08000c84 <vPortFree>:
{
 8000c84:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8000c86:	4604      	mov	r4, r0
 8000c88:	b1b0      	cbz	r0, 8000cb8 <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
 8000c8a:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
 8000c8e:	f000 fcaf 	bl	80015f0 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c92:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <vPortFree+0x38>)
 8000c98:	461a      	mov	r2, r3
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6858      	ldr	r0, [r3, #4]
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d3fa      	bcc.n	8000c98 <vPortFree+0x14>
 8000ca2:	f844 3c08 	str.w	r3, [r4, #-8]
 8000ca6:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <vPortFree+0x3c>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	440b      	add	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
 8000cb4:	f000 bd38 	b.w	8001728 <xTaskResumeAll>
}
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000214 	.word	0x20000214
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc8:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ccc:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cd0:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cd2:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000cd8:	4770      	bx	lr

08000cda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000cde:	4770      	bx	lr

08000ce0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000ce0:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ce2:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000ce4:	1c63      	adds	r3, r4, #1
 8000ce6:	d10a      	bne.n	8000cfe <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ce8:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cee:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000cf0:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8000cf2:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8000cf4:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8000cf6:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	6003      	str	r3, [r0, #0]
}
 8000cfc:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000cfe:	f100 0208 	add.w	r2, r0, #8
 8000d02:	4613      	mov	r3, r2
 8000d04:	6852      	ldr	r2, [r2, #4]
 8000d06:	6815      	ldr	r5, [r2, #0]
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	d9fa      	bls.n	8000d02 <vListInsert+0x22>
 8000d0c:	e7ed      	b.n	8000cea <vListInsert+0xa>

08000d0e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000d0e:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d10:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8000d14:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d16:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000d18:	6859      	ldr	r1, [r3, #4]
 8000d1a:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d1c:	bf08      	it	eq
 8000d1e:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000d20:	2200      	movs	r2, #0
 8000d22:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000d2a:	6818      	ldr	r0, [r3, #0]
}
 8000d2c:	4770      	bx	lr

08000d2e <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8000d2e:	2300      	movs	r3, #0
{
 8000d30:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8000d32:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d34:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d38:	f383 8811 	msr	BASEPRI, r3
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d44:	9b01      	ldr	r3, [sp, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0fc      	beq.n	8000d44 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	4770      	bx	lr
	...

08000d50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <prvPortStartFirstTask+0x1c>)
 8000d52:	6800      	ldr	r0, [r0, #0]
 8000d54:	6800      	ldr	r0, [r0, #0]
 8000d56:	f380 8808 	msr	MSP, r0
 8000d5a:	b662      	cpsie	i
 8000d5c:	b661      	cpsie	f
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	df00      	svc	0
 8000d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d6a:	0000      	.short	0x0000
 8000d6c:	e000ed08 	.word	0xe000ed08

08000d70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000d7a:	f021 0101 	bic.w	r1, r1, #1
 8000d7e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000d82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000d86:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8000d8a:	3840      	subs	r0, #64	; 0x40
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08000d2f 	.word	0x08000d2f
	...

08000da0 <SVC_Handler>:
	__asm volatile (
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <pxCurrentTCBConst2>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	6808      	ldr	r0, [r1, #0]
 8000da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000daa:	f380 8809 	msr	PSP, r0
 8000dae:	f3bf 8f6f 	isb	sy
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	f380 8811 	msr	BASEPRI, r0
 8000dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8000dbe:	4770      	bx	lr

08000dc0 <pxCurrentTCBConst2>:
 8000dc0:	2000322c 	.word	0x2000322c

08000dc4 <vPortEnterCritical>:
 8000dc4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000dd4:	4a02      	ldr	r2, [pc, #8]	; (8000de0 <vPortEnterCritical+0x1c>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000004 	.word	0x20000004

08000de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <vPortExitCritical+0x10>)
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000dec:	b90b      	cbnz	r3, 8000df2 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000dee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000df2:	4770      	bx	lr
 8000df4:	20000004 	.word	0x20000004
	...

08000e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e00:	f3ef 8009 	mrs	r0, PSP
 8000e04:	f3bf 8f6f 	isb	sy
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <pxCurrentTCBConst>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e10:	6010      	str	r0, [r2, #0]
 8000e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e16:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000e1a:	f380 8811 	msr	BASEPRI, r0
 8000e1e:	f000 fd1f 	bl	8001860 <vTaskSwitchContext>
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	f380 8811 	msr	BASEPRI, r0
 8000e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	6808      	ldr	r0, [r1, #0]
 8000e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e36:	f380 8809 	msr	PSP, r0
 8000e3a:	f3bf 8f6f 	isb	sy
 8000e3e:	4770      	bx	lr

08000e40 <pxCurrentTCBConst>:
 8000e40:	2000322c 	.word	0x2000322c

08000e44 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e44:	b508      	push	{r3, lr}
	__asm volatile
 8000e46:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e4a:	f383 8811 	msr	BASEPRI, r3
 8000e4e:	f3bf 8f6f 	isb	sy
 8000e52:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e56:	f000 fbd5 	bl	8001604 <xTaskIncrementTick>
 8000e5a:	b118      	cbz	r0, 8000e64 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <SysTick_Handler+0x28>)
 8000e62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000e64:	2300      	movs	r3, #0
 8000e66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e6a:	bd08      	pop	{r3, pc}
 8000e6c:	e000ed04 	.word	0xe000ed04

08000e70 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e70:	2200      	movs	r2, #0
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000e74:	4905      	ldr	r1, [pc, #20]	; (8000e8c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e76:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000e78:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <vPortSetupTimerInterrupt+0x20>)
 8000e7c:	4905      	ldr	r1, [pc, #20]	; (8000e94 <vPortSetupTimerInterrupt+0x24>)
 8000e7e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010
 8000e8c:	e000e018 	.word	0xe000e018
 8000e90:	e000e014 	.word	0xe000e014
 8000e94:	0001193f 	.word	0x0001193f

08000e98 <xPortStartScheduler>:
{
 8000e98:	b510      	push	{r4, lr}
	uxCriticalNesting = 0;
 8000e9a:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <xPortStartScheduler+0x30>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8000ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8000eac:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000eae:	f7ff ffdf 	bl	8000e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <xPortStartScheduler+0x34>)
 8000eb4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8000eb6:	f7ff ff4b 	bl	8000d50 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8000eba:	f000 fcd1 	bl	8001860 <vTaskSwitchContext>
	prvTaskExitError();
 8000ebe:	f7ff ff36 	bl	8000d2e <prvTaskExitError>
}
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000ed20 	.word	0xe000ed20
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ed4:	f7ff ff76 	bl	8000dc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000ed8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8000eda:	f7ff ff83 	bl	8000de4 <vPortExitCritical>

    return xReturn;
}
 8000ede:	fab4 f084 	clz	r0, r4
 8000ee2:	0940      	lsrs	r0, r0, #5
 8000ee4:	bd10      	pop	{r4, pc}

08000ee6 <prvCopyDataToQueue>:
{
 8000ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee8:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000eea:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8000eec:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000eee:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000ef0:	b952      	cbnz	r2, 8000f08 <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ef2:	6807      	ldr	r7, [r0, #0]
 8000ef4:	bb47      	cbnz	r7, 8000f48 <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000ef6:	6880      	ldr	r0, [r0, #8]
 8000ef8:	f000 fd7c 	bl	80019f4 <xTaskPriorityDisinherit>
 8000efc:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000efe:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f00:	3601      	adds	r6, #1
}
 8000f02:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000f04:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8000f08:	b965      	cbnz	r5, 8000f24 <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f0a:	6840      	ldr	r0, [r0, #4]
 8000f0c:	f001 ffb0 	bl	8002e70 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f14:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f16:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f18:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d3f0      	bcc.n	8000f00 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	6063      	str	r3, [r4, #4]
 8000f22:	e7ed      	b.n	8000f00 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000f24:	68c0      	ldr	r0, [r0, #12]
 8000f26:	f001 ffa3 	bl	8002e70 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f2c:	68e3      	ldr	r3, [r4, #12]
 8000f2e:	4251      	negs	r1, r2
 8000f30:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f32:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f34:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f36:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f38:	bf3e      	ittt	cc
 8000f3a:	68a3      	ldrcc	r3, [r4, #8]
 8000f3c:	185b      	addcc	r3, r3, r1
 8000f3e:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8000f40:	2d02      	cmp	r5, #2
 8000f42:	d101      	bne.n	8000f48 <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f44:	b116      	cbz	r6, 8000f4c <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 8000f46:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e7d9      	b.n	8000f00 <prvCopyDataToQueue+0x1a>
 8000f4c:	4635      	mov	r5, r6
 8000f4e:	e7d7      	b.n	8000f00 <prvCopyDataToQueue+0x1a>

08000f50 <prvCopyDataFromQueue>:
{
 8000f50:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8000f54:	4608      	mov	r0, r1
 8000f56:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f58:	b162      	cbz	r2, 8000f74 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f5a:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f5c:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f5e:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f60:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f62:	bf28      	it	cs
 8000f64:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f66:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000f68:	bf28      	it	cs
 8000f6a:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f6c:	68d9      	ldr	r1, [r3, #12]
}
 8000f6e:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f70:	f001 bf7e 	b.w	8002e70 <memcpy>
}
 8000f74:	bc10      	pop	{r4}
 8000f76:	4770      	bx	lr

08000f78 <prvUnlockQueue>:
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000f7c:	f7ff ff22 	bl	8000dc4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8000f80:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f84:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8000f88:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	dc14      	bgt.n	8000fb8 <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 8000f8e:	23ff      	movs	r3, #255	; 0xff
 8000f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8000f94:	f7ff ff26 	bl	8000de4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8000f98:	f7ff ff14 	bl	8000dc4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8000f9c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fa0:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8000fa4:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	dc12      	bgt.n	8000fd0 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 8000faa:	23ff      	movs	r3, #255	; 0xff
 8000fac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8000fb4:	f7ff bf16 	b.w	8000de4 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0e7      	beq.n	8000f8e <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f000 fc86 	bl	80018d0 <xTaskRemoveFromEventList>
 8000fc4:	b108      	cbz	r0, 8000fca <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 8000fc6:	f000 fd0d 	bl	80019e4 <vTaskMissedYield>
            --cTxLock;
 8000fca:	3d01      	subs	r5, #1
 8000fcc:	b26d      	sxtb	r5, r5
 8000fce:	e7dc      	b.n	8000f8a <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd0:	6923      	ldr	r3, [r4, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0e9      	beq.n	8000faa <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f000 fc7a 	bl	80018d0 <xTaskRemoveFromEventList>
 8000fdc:	b108      	cbz	r0, 8000fe2 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8000fde:	f000 fd01 	bl	80019e4 <vTaskMissedYield>
                --cRxLock;
 8000fe2:	3d01      	subs	r5, #1
 8000fe4:	b26d      	sxtb	r5, r5
 8000fe6:	e7de      	b.n	8000fa6 <prvUnlockQueue+0x2e>

08000fe8 <xQueueGenericReset>:
{
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 8000fec:	4604      	mov	r4, r0
 8000fee:	b310      	cbz	r0, 8001036 <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 8000ff0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000ff2:	b300      	cbz	r0, 8001036 <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000ff4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000ff6:	fba5 3500 	umull	r3, r5, r5, r0
 8000ffa:	b9dd      	cbnz	r5, 8001034 <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 8000ffc:	f7ff fee2 	bl	8000dc4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001000:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8001004:	434b      	muls	r3, r1
 8001006:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001008:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800100a:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	4413      	add	r3, r2
 8001010:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001012:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001014:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001016:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800101a:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 800101c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001020:	b156      	cbz	r6, 8001038 <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001022:	f104 0010 	add.w	r0, r4, #16
 8001026:	f7ff fe4d 	bl	8000cc4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800102a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800102e:	f7ff fe49 	bl	8000cc4 <vListInitialise>
 8001032:	e010      	b.n	8001056 <xQueueGenericReset+0x6e>
        xReturn = pdFAIL;
 8001034:	2000      	movs	r0, #0
}
 8001036:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001038:	6923      	ldr	r3, [r4, #16]
 800103a:	b163      	cbz	r3, 8001056 <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800103c:	f104 0010 	add.w	r0, r4, #16
 8001040:	f000 fc46 	bl	80018d0 <xTaskRemoveFromEventList>
 8001044:	b138      	cbz	r0, 8001056 <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <xQueueGenericReset+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8001056:	f7ff fec5 	bl	8000de4 <vPortExitCritical>
 800105a:	2001      	movs	r0, #1
 800105c:	e7eb      	b.n	8001036 <xQueueGenericReset+0x4e>
 800105e:	bf00      	nop
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <xQueueGenericCreate>:
    {
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	460d      	mov	r5, r1
 8001068:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800106a:	4606      	mov	r6, r0
 800106c:	b910      	cbnz	r0, 8001074 <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 800106e:	2400      	movs	r4, #0
    }
 8001070:	4620      	mov	r0, r4
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001074:	fba0 2301 	umull	r2, r3, r0, r1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f8      	bne.n	800106e <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800107c:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800107e:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8001082:	d8f4      	bhi.n	800106e <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001084:	3050      	adds	r0, #80	; 0x50
 8001086:	f7ff fda7 	bl	8000bd8 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800108a:	4604      	mov	r4, r0
 800108c:	2800      	cmp	r0, #0
 800108e:	d0ee      	beq.n	800106e <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001090:	b15d      	cbz	r5, 80010aa <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001092:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001096:	2101      	movs	r1, #1
 8001098:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 800109a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 800109e:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010a0:	f7ff ffa2 	bl	8000fe8 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80010a4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 80010a8:	e7e2      	b.n	8001070 <xQueueGenericCreate+0xc>
 80010aa:	4603      	mov	r3, r0
 80010ac:	e7f3      	b.n	8001096 <xQueueGenericCreate+0x32>
	...

080010b0 <xQueueGenericSend>:
{
 80010b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010b4:	f04f 0800 	mov.w	r8, #0
{
 80010b8:	4604      	mov	r4, r0
 80010ba:	460f      	mov	r7, r1
 80010bc:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 80010be:	46c1      	mov	r9, r8
                    portYIELD_WITHIN_API();
 80010c0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80011b0 <xQueueGenericSend+0x100>
{
 80010c4:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 80010c6:	f7ff fe7d 	bl	8000dc4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d301      	bcc.n	80010d6 <xQueueGenericSend+0x26>
 80010d2:	2e02      	cmp	r6, #2
 80010d4:	d119      	bne.n	800110a <xQueueGenericSend+0x5a>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80010d6:	4632      	mov	r2, r6
 80010d8:	4639      	mov	r1, r7
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff ff03 	bl	8000ee6 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010e2:	b11b      	cbz	r3, 80010ec <xQueueGenericSend+0x3c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80010e8:	f000 fbf2 	bl	80018d0 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 80010ec:	b138      	cbz	r0, 80010fe <xQueueGenericSend+0x4e>
                            queueYIELD_IF_USING_PREEMPTION();
 80010ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <xQueueGenericSend+0x100>)
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80010fe:	f7ff fe71 	bl	8000de4 <vPortExitCritical>
                return pdPASS;
 8001102:	2001      	movs	r0, #1
}
 8001104:	b004      	add	sp, #16
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 800110a:	9d01      	ldr	r5, [sp, #4]
 800110c:	b91d      	cbnz	r5, 8001116 <xQueueGenericSend+0x66>
                    taskEXIT_CRITICAL();
 800110e:	f7ff fe69 	bl	8000de4 <vPortExitCritical>
            return errQUEUE_FULL;
 8001112:	2000      	movs	r0, #0
 8001114:	e7f6      	b.n	8001104 <xQueueGenericSend+0x54>
                else if( xEntryTimeSet == pdFALSE )
 8001116:	f1b8 0f00 	cmp.w	r8, #0
 800111a:	d102      	bne.n	8001122 <xQueueGenericSend+0x72>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800111c:	a802      	add	r0, sp, #8
 800111e:	f000 fc31 	bl	8001984 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001122:	f7ff fe5f 	bl	8000de4 <vPortExitCritical>
        vTaskSuspendAll();
 8001126:	f000 fa63 	bl	80015f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800112a:	f7ff fe4b 	bl	8000dc4 <vPortEnterCritical>
 800112e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	bf08      	it	eq
 8001136:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800113a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	bf08      	it	eq
 8001142:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8001146:	f7ff fe4d 	bl	8000de4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114a:	a901      	add	r1, sp, #4
 800114c:	a802      	add	r0, sp, #8
 800114e:	f000 fc23 	bl	8001998 <xTaskCheckForTimeOut>
 8001152:	bb30      	cbnz	r0, 80011a2 <xQueueGenericSend+0xf2>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001154:	f7ff fe36 	bl	8000dc4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800115a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800115c:	429a      	cmp	r2, r3
 800115e:	d10f      	bne.n	8001180 <xQueueGenericSend+0xd0>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8001160:	f7ff fe40 	bl	8000de4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001164:	9901      	ldr	r1, [sp, #4]
 8001166:	f104 0010 	add.w	r0, r4, #16
 800116a:	f000 fba1 	bl	80018b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff02 	bl	8000f78 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001174:	f000 fad8 	bl	8001728 <xTaskResumeAll>
 8001178:	b150      	cbz	r0, 8001190 <xQueueGenericSend+0xe0>
{
 800117a:	f04f 0801 	mov.w	r8, #1
 800117e:	e7a2      	b.n	80010c6 <xQueueGenericSend+0x16>
    taskEXIT_CRITICAL();
 8001180:	f7ff fe30 	bl	8000de4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fef7 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800118a:	f000 facd 	bl	8001728 <xTaskResumeAll>
 800118e:	e7f4      	b.n	800117a <xQueueGenericSend+0xca>
                    portYIELD_WITHIN_API();
 8001190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001194:	f8ca 3000 	str.w	r3, [sl]
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	e7eb      	b.n	800117a <xQueueGenericSend+0xca>
            prvUnlockQueue( pxQueue );
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fee8 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80011a8:	f000 fabe 	bl	8001728 <xTaskResumeAll>
 80011ac:	e7b1      	b.n	8001112 <xQueueGenericSend+0x62>
 80011ae:	bf00      	nop
 80011b0:	e000ed04 	.word	0xe000ed04

080011b4 <xQueueGenericSendFromISR>:
{
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b6:	4617      	mov	r7, r2
 80011b8:	4604      	mov	r4, r0
 80011ba:	461a      	mov	r2, r3
	__asm volatile
 80011bc:	f3ef 8611 	mrs	r6, BASEPRI
 80011c0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011c4:	f383 8811 	msr	BASEPRI, r3
 80011c8:	f3bf 8f6f 	isb	sy
 80011cc:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80011d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011d4:	4298      	cmp	r0, r3
 80011d6:	d301      	bcc.n	80011dc <xQueueGenericSendFromISR+0x28>
 80011d8:	2a02      	cmp	r2, #2
 80011da:	d11e      	bne.n	800121a <xQueueGenericSendFromISR+0x66>
            const int8_t cTxLock = pxQueue->cTxLock;
 80011dc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011e0:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 80011e2:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011e6:	f7ff fe7e 	bl	8000ee6 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80011ea:	1c6b      	adds	r3, r5, #1
 80011ec:	d110      	bne.n	8001210 <xQueueGenericSendFromISR+0x5c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f0:	b90b      	cbnz	r3, 80011f6 <xQueueGenericSendFromISR+0x42>
            xReturn = pdPASS;
 80011f2:	2001      	movs	r0, #1
 80011f4:	e009      	b.n	800120a <xQueueGenericSendFromISR+0x56>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80011fa:	f000 fb69 	bl	80018d0 <xTaskRemoveFromEventList>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0f7      	beq.n	80011f2 <xQueueGenericSendFromISR+0x3e>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001202:	2f00      	cmp	r7, #0
 8001204:	d0f5      	beq.n	80011f2 <xQueueGenericSendFromISR+0x3e>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001206:	2001      	movs	r0, #1
 8001208:	6038      	str	r0, [r7, #0]
	__asm volatile
 800120a:	f386 8811 	msr	BASEPRI, r6
}
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001210:	3501      	adds	r5, #1
 8001212:	b26d      	sxtb	r5, r5
 8001214:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001218:	e7eb      	b.n	80011f2 <xQueueGenericSendFromISR+0x3e>
            xReturn = errQUEUE_FULL;
 800121a:	2000      	movs	r0, #0
 800121c:	e7f5      	b.n	800120a <xQueueGenericSendFromISR+0x56>
	...

08001220 <xQueueReceive>:
{
 8001220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8001224:	2700      	movs	r7, #0
{
 8001226:	4604      	mov	r4, r0
 8001228:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 800122a:	46b8      	mov	r8, r7
{
 800122c:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 800122e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800130c <xQueueReceive+0xec>
{
 8001232:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8001234:	f7ff fdc6 	bl	8000dc4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001238:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800123a:	b1d5      	cbz	r5, 8001272 <xQueueReceive+0x52>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800123c:	4631      	mov	r1, r6
 800123e:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001240:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001242:	f7ff fe85 	bl	8000f50 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001246:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	b163      	cbz	r3, 8001266 <xQueueReceive+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800124c:	f104 0010 	add.w	r0, r4, #16
 8001250:	f000 fb3e 	bl	80018d0 <xTaskRemoveFromEventList>
 8001254:	b138      	cbz	r0, 8001266 <xQueueReceive+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8001256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <xQueueReceive+0xec>)
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f3bf 8f4f 	dsb	sy
 8001262:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001266:	f7ff fdbd 	bl	8000de4 <vPortExitCritical>
                return pdPASS;
 800126a:	2001      	movs	r0, #1
}
 800126c:	b005      	add	sp, #20
 800126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8001272:	9d01      	ldr	r5, [sp, #4]
 8001274:	b91d      	cbnz	r5, 800127e <xQueueReceive+0x5e>
                    taskEXIT_CRITICAL();
 8001276:	f7ff fdb5 	bl	8000de4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 800127a:	2000      	movs	r0, #0
 800127c:	e7f6      	b.n	800126c <xQueueReceive+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 800127e:	b917      	cbnz	r7, 8001286 <xQueueReceive+0x66>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001280:	a802      	add	r0, sp, #8
 8001282:	f000 fb7f 	bl	8001984 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001286:	f7ff fdad 	bl	8000de4 <vPortExitCritical>
        vTaskSuspendAll();
 800128a:	f000 f9b1 	bl	80015f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800128e:	f7ff fd99 	bl	8000dc4 <vPortEnterCritical>
 8001292:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	bf08      	it	eq
 800129a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800129e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	bf08      	it	eq
 80012a6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80012aa:	f7ff fd9b 	bl	8000de4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	a802      	add	r0, sp, #8
 80012b2:	f000 fb71 	bl	8001998 <xTaskCheckForTimeOut>
 80012b6:	b9f0      	cbnz	r0, 80012f6 <xQueueReceive+0xd6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff fe09 	bl	8000ed0 <prvIsQueueEmpty>
 80012be:	b1a0      	cbz	r0, 80012ea <xQueueReceive+0xca>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012c0:	9901      	ldr	r1, [sp, #4]
 80012c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80012c6:	f000 faf3 	bl	80018b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fe54 	bl	8000f78 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80012d0:	f000 fa2a 	bl	8001728 <xTaskResumeAll>
 80012d4:	b938      	cbnz	r0, 80012e6 <xQueueReceive+0xc6>
                    portYIELD_WITHIN_API();
 80012d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012da:	f8c9 3000 	str.w	r3, [r9]
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	f3bf 8f6f 	isb	sy
{
 80012e6:	2701      	movs	r7, #1
 80012e8:	e7a4      	b.n	8001234 <xQueueReceive+0x14>
                prvUnlockQueue( pxQueue );
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fe44 	bl	8000f78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012f0:	f000 fa1a 	bl	8001728 <xTaskResumeAll>
 80012f4:	e7f7      	b.n	80012e6 <xQueueReceive+0xc6>
            prvUnlockQueue( pxQueue );
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff fe3e 	bl	8000f78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012fc:	f000 fa14 	bl	8001728 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fde5 	bl	8000ed0 <prvIsQueueEmpty>
 8001306:	2800      	cmp	r0, #0
 8001308:	d0ed      	beq.n	80012e6 <xQueueReceive+0xc6>
 800130a:	e7b6      	b.n	800127a <xQueueReceive+0x5a>
 800130c:	e000ed04 	.word	0xe000ed04

08001310 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001312:	4c1e      	ldr	r4, [pc, #120]	; (800138c <prvAddCurrentTaskToDelayedList+0x7c>)
{
 8001314:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 8001316:	6825      	ldr	r5, [r4, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001318:	6860      	ldr	r0, [r4, #4]
{
 800131a:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800131c:	3004      	adds	r0, #4
 800131e:	f7ff fcf6 	bl	8000d0e <uxListRemove>
 8001322:	b938      	cbnz	r0, 8001334 <prvAddCurrentTaskToDelayedList+0x24>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001324:	6862      	ldr	r2, [r4, #4]
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800132a:	2201      	movs	r2, #1
 800132c:	408a      	lsls	r2, r1
 800132e:	ea23 0302 	bic.w	r3, r3, r2
 8001332:	60a3      	str	r3, [r4, #8]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001334:	1c73      	adds	r3, r6, #1
 8001336:	d114      	bne.n	8001362 <prvAddCurrentTaskToDelayedList+0x52>
 8001338:	b19f      	cbz	r7, 8001362 <prvAddCurrentTaskToDelayedList+0x52>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800133a:	6862      	ldr	r2, [r4, #4]
 800133c:	6923      	ldr	r3, [r4, #16]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	6093      	str	r3, [r2, #8]
 8001342:	6862      	ldr	r2, [r4, #4]
 8001344:	60d1      	str	r1, [r2, #12]
 8001346:	6862      	ldr	r2, [r4, #4]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	3204      	adds	r2, #4
 800134c:	604a      	str	r2, [r1, #4]
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	3204      	adds	r2, #4
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <prvAddCurrentTaskToDelayedList+0x80>)
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	68e3      	ldr	r3, [r4, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60e3      	str	r3, [r4, #12]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001362:	6863      	ldr	r3, [r4, #4]
 8001364:	19ad      	adds	r5, r5, r6
 8001366:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001368:	d306      	bcc.n	8001378 <prvAddCurrentTaskToDelayedList+0x68>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800136a:	6a20      	ldr	r0, [r4, #32]
 800136c:	6861      	ldr	r1, [r4, #4]
}
 800136e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001372:	3104      	adds	r1, #4
 8001374:	f7ff bcb4 	b.w	8000ce0 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001378:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800137a:	6861      	ldr	r1, [r4, #4]
 800137c:	3104      	adds	r1, #4
 800137e:	f7ff fcaf 	bl	8000ce0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001384:	42ab      	cmp	r3, r5
                        xNextTaskUnblockTime = xTimeToWake;
 8001386:	bf88      	it	hi
 8001388:	62a5      	strhi	r5, [r4, #40]	; 0x28
}
 800138a:	e7e9      	b.n	8001360 <prvAddCurrentTaskToDelayedList+0x50>
 800138c:	20003228 	.word	0x20003228
 8001390:	20003234 	.word	0x20003234

08001394 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <prvResetNextTaskUnblockTime+0x18>)
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	b91a      	cbnz	r2, 80013a4 <prvResetNextTaskUnblockTime+0x10>
        xNextTaskUnblockTime = portMAX_DELAY;
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a2:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	68d2      	ldr	r2, [r2, #12]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	e7f9      	b.n	80013a0 <prvResetNextTaskUnblockTime+0xc>
 80013ac:	20003228 	.word	0x20003228

080013b0 <prvIdleTask>:
{
 80013b0:	b580      	push	{r7, lr}
                    taskYIELD();
 80013b2:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013b6:	4c11      	ldr	r4, [pc, #68]	; (80013fc <prvIdleTask+0x4c>)
                    taskYIELD();
 80013b8:	4e11      	ldr	r6, [pc, #68]	; (8001400 <prvIdleTask+0x50>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013bc:	b943      	cbnz	r3, 80013d0 <prvIdleTask+0x20>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80013be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d9fa      	bls.n	80013ba <prvIdleTask+0xa>
                    taskYIELD();
 80013c4:	6037      	str	r7, [r6, #0]
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	e7f4      	b.n	80013ba <prvIdleTask+0xa>
                taskENTER_CRITICAL();
 80013d0:	f7ff fcf8 	bl	8000dc4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013d6:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013d8:	1d28      	adds	r0, r5, #4
 80013da:	f7ff fc98 	bl	8000d0e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80013de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013e0:	3b01      	subs	r3, #1
 80013e2:	6423      	str	r3, [r4, #64]	; 0x40
                    --uxDeletedTasksWaitingCleanUp;
 80013e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6463      	str	r3, [r4, #68]	; 0x44
                taskEXIT_CRITICAL();
 80013ea:	f7ff fcfb 	bl	8000de4 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 80013ee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80013f0:	f7ff fc48 	bl	8000c84 <vPortFree>
                vPortFree( pxTCB );
 80013f4:	4628      	mov	r0, r5
 80013f6:	f7ff fc45 	bl	8000c84 <vPortFree>
    }
 80013fa:	e7de      	b.n	80013ba <prvIdleTask+0xa>
 80013fc:	20003228 	.word	0x20003228
 8001400:	e000ed04 	.word	0xe000ed04

08001404 <xTaskCreate>:
    {
 8001404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001408:	0096      	lsls	r6, r2, #2
    {
 800140a:	4680      	mov	r8, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800140c:	4630      	mov	r0, r6
    {
 800140e:	460d      	mov	r5, r1
 8001410:	4699      	mov	r9, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001412:	f7ff fbe1 	bl	8000bd8 <pvPortMalloc>
                if( pxStack != NULL )
 8001416:	4607      	mov	r7, r0
 8001418:	b198      	cbz	r0, 8001442 <xTaskCreate+0x3e>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800141a:	205c      	movs	r0, #92	; 0x5c
 800141c:	f7ff fbdc 	bl	8000bd8 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8001420:	4604      	mov	r4, r0
 8001422:	b158      	cbz	r0, 800143c <xTaskCreate+0x38>
                        pxNewTCB->pxStack = pxStack;
 8001424:	6307      	str	r7, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001426:	4632      	mov	r2, r6
 8001428:	21a5      	movs	r1, #165	; 0xa5
 800142a:	4638      	mov	r0, r7
 800142c:	f001 fd2e 	bl	8002e8c <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001430:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8001434:	b945      	cbnz	r5, 8001448 <xTaskCreate+0x44>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001436:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800143a:	e014      	b.n	8001466 <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 800143c:	4638      	mov	r0, r7
 800143e:	f7ff fc21 	bl	8000c84 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001442:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001446:	e093      	b.n	8001570 <xTaskCreate+0x16c>
 8001448:	1e6b      	subs	r3, r5, #1
 800144a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800144e:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001450:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001454:	f802 1b01 	strb.w	r1, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8001458:	7819      	ldrb	r1, [r3, #0]
 800145a:	b109      	cbz	r1, 8001460 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800145c:	42ab      	cmp	r3, r5
 800145e:	d1f7      	bne.n	8001450 <xTaskCreate+0x4c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001460:	2300      	movs	r3, #0
 8001462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001466:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8001468:	f04f 0a00 	mov.w	sl, #0
 800146c:	2d0e      	cmp	r5, #14
 800146e:	bf28      	it	cs
 8001470:	250e      	movcs	r5, #14
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001472:	1d27      	adds	r7, r4, #4
 8001474:	4638      	mov	r0, r7
    pxNewTCB->uxPriority = uxPriority;
 8001476:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8001478:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800147a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800147e:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001480:	f7ff fc2b 	bl	8000cda <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001484:	f1c5 050f 	rsb	r5, r5, #15
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001488:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800148c:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800148e:	f7ff fc24 	bl	8000cda <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001492:	464a      	mov	r2, r9
 8001494:	4641      	mov	r1, r8
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001496:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001498:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800149a:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800149c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80014a0:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80014a4:	f026 0007 	bic.w	r0, r6, #7
 80014a8:	f7ff fc62 	bl	8000d70 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 80014ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80014ae:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80014b0:	b103      	cbz	r3, 80014b4 <xTaskCreate+0xb0>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80014b2:	601c      	str	r4, [r3, #0]
        uxCurrentNumberOfTasks++;
 80014b4:	4d35      	ldr	r5, [pc, #212]	; (800158c <xTaskCreate+0x188>)
    taskENTER_CRITICAL();
 80014b6:	f7ff fc85 	bl	8000dc4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80014ba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80014bc:	f105 0848 	add.w	r8, r5, #72	; 0x48
 80014c0:	3301      	adds	r3, #1
 80014c2:	642b      	str	r3, [r5, #64]	; 0x40
        if( pxCurrentTCB == NULL )
 80014c4:	686e      	ldr	r6, [r5, #4]
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d155      	bne.n	8001576 <xTaskCreate+0x172>
            pxCurrentTCB = pxNewTCB;
 80014ca:	606c      	str	r4, [r5, #4]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014cc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d120      	bne.n	8001514 <xTaskCreate+0x110>
 80014d2:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014d4:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014d6:	3601      	adds	r6, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014d8:	f7ff fbf4 	bl	8000cc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014dc:	2e0f      	cmp	r6, #15
 80014de:	f109 0914 	add.w	r9, r9, #20
 80014e2:	d1f7      	bne.n	80014d4 <xTaskCreate+0xd0>
    vListInitialise( &xDelayedTaskList1 );
 80014e4:	4e2a      	ldr	r6, [pc, #168]	; (8001590 <xTaskCreate+0x18c>)
 80014e6:	4630      	mov	r0, r6
    vListInitialise( &xDelayedTaskList2 );
 80014e8:	f106 0914 	add.w	r9, r6, #20
    vListInitialise( &xDelayedTaskList1 );
 80014ec:	f7ff fbea 	bl	8000cc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80014f0:	4648      	mov	r0, r9
 80014f2:	f7ff fbe7 	bl	8000cc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80014f6:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80014fa:	f7ff fbe3 	bl	8000cc4 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 80014fe:	f5a6 70a4 	sub.w	r0, r6, #328	; 0x148
 8001502:	f7ff fbdf 	bl	8000cc4 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8001506:	f5a6 70b4 	sub.w	r0, r6, #360	; 0x168
 800150a:	f7ff fbdb 	bl	8000cc4 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800150e:	626e      	str	r6, [r5, #36]	; 0x24
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001510:	f8c5 9020 	str.w	r9, [r5, #32]
        prvAddTaskToReadyList( pxNewTCB );
 8001514:	2601      	movs	r6, #1
        uxTaskNumber++;
 8001516:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 800151a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        uxTaskNumber++;
 800151c:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800151e:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8001520:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 8001524:	68ab      	ldr	r3, [r5, #8]
 8001526:	fa06 f201 	lsl.w	r2, r6, r1
 800152a:	431a      	orrs	r2, r3
 800152c:	2314      	movs	r3, #20
 800152e:	434b      	muls	r3, r1
 8001530:	18e8      	adds	r0, r5, r3
 8001532:	60aa      	str	r2, [r5, #8]
 8001534:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001536:	4443      	add	r3, r8
 8001538:	6891      	ldr	r1, [r2, #8]
 800153a:	60a2      	str	r2, [r4, #8]
 800153c:	60e1      	str	r1, [r4, #12]
 800153e:	6891      	ldr	r1, [r2, #8]
 8001540:	604f      	str	r7, [r1, #4]
 8001542:	6097      	str	r7, [r2, #8]
 8001544:	6163      	str	r3, [r4, #20]
 8001546:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001548:	4433      	add	r3, r6
 800154a:	6483      	str	r3, [r0, #72]	; 0x48
    taskEXIT_CRITICAL();
 800154c:	f7ff fc4a 	bl	8000de4 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8001550:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 8001554:	b163      	cbz	r3, 8001570 <xTaskCreate+0x16c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001556:	686b      	ldr	r3, [r5, #4]
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <xTaskCreate+0x16c>
            taskYIELD_IF_USING_PREEMPTION();
 8001560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <xTaskCreate+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f3bf 8f4f 	dsb	sy
 800156c:	f3bf 8f6f 	isb	sy
    }
 8001570:	4630      	mov	r0, r6
 8001572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8001576:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ca      	bne.n	8001514 <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800157e:	686b      	ldr	r3, [r5, #4]
 8001580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8001586:	bf28      	it	cs
 8001588:	606c      	strcs	r4, [r5, #4]
 800158a:	e7c3      	b.n	8001514 <xTaskCreate+0x110>
 800158c:	20003228 	.word	0x20003228
 8001590:	2000339c 	.word	0x2000339c
 8001594:	e000ed04 	.word	0xe000ed04

08001598 <vTaskStartScheduler>:
{
 8001598:	b537      	push	{r0, r1, r2, r4, r5, lr}
            xReturn = xTaskCreate( prvIdleTask,
 800159a:	2500      	movs	r5, #0
 800159c:	4c10      	ldr	r4, [pc, #64]	; (80015e0 <vTaskStartScheduler+0x48>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	490f      	ldr	r1, [pc, #60]	; (80015e4 <vTaskStartScheduler+0x4c>)
 80015a8:	462b      	mov	r3, r5
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <vTaskStartScheduler+0x50>)
 80015ac:	9500      	str	r5, [sp, #0]
 80015ae:	f7ff ff29 	bl	8001404 <xTaskCreate>
    if( xReturn == pdPASS )
 80015b2:	2801      	cmp	r0, #1
 80015b4:	d10f      	bne.n	80015d6 <vTaskStartScheduler+0x3e>
	__asm volatile
 80015b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ca:	62a3      	str	r3, [r4, #40]	; 0x28
        xSchedulerRunning = pdTRUE;
 80015cc:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80015d0:	6025      	str	r5, [r4, #0]
        if( xPortStartScheduler() != pdFALSE )
 80015d2:	f7ff fc61 	bl	8000e98 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <vTaskStartScheduler+0x54>)
 80015d8:	681b      	ldr	r3, [r3, #0]
}
 80015da:	b003      	add	sp, #12
 80015dc:	bd30      	pop	{r4, r5, pc}
 80015de:	bf00      	nop
 80015e0:	20003228 	.word	0x20003228
 80015e4:	080076a8 	.word	0x080076a8
 80015e8:	080013b1 	.word	0x080013b1
 80015ec:	20000008 	.word	0x20000008

080015f0 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <vTaskSuspendAll+0x10>)
 80015f2:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20003228 	.word	0x20003228

08001604 <xTaskIncrementTick>:
{
 8001604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <xTaskIncrementTick+0x11c>)
 800160a:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800160e:	4619      	mov	r1, r3
 8001610:	2a00      	cmp	r2, #0
 8001612:	d17e      	bne.n	8001712 <xTaskIncrementTick+0x10e>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001614:	681c      	ldr	r4, [r3, #0]
 8001616:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8001618:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800161a:	b954      	cbnz	r4, 8001632 <xTaskIncrementTick+0x2e>
            taskSWITCH_DELAYED_LISTS();
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	6a0a      	ldr	r2, [r1, #32]
 8001620:	624a      	str	r2, [r1, #36]	; 0x24
 8001622:	620b      	str	r3, [r1, #32]
 8001624:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001628:	3301      	adds	r3, #1
 800162a:	f8c1 31c4 	str.w	r3, [r1, #452]	; 0x1c4
 800162e:	f7ff feb1 	bl	8001394 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001632:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    BaseType_t xSwitchRequired = pdFALSE;
 8001634:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001636:	429c      	cmp	r4, r3
 8001638:	d20f      	bcs.n	800165a <xTaskIncrementTick+0x56>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800163a:	2214      	movs	r2, #20
 800163c:	684b      	ldr	r3, [r1, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	fb02 1303 	mla	r3, r2, r3, r1
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    xSwitchRequired = pdTRUE;
 8001646:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 8001648:	f8d1 31bc 	ldr.w	r3, [r1, #444]	; 0x1bc
                    xSwitchRequired = pdTRUE;
 800164c:	bf28      	it	cs
 800164e:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf18      	it	ne
 8001654:	2001      	movne	r0, #1
}
 8001656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    prvAddTaskToReadyList( pxTCB );
 800165a:	f04f 0801 	mov.w	r8, #1
 800165e:	f04f 0e14 	mov.w	lr, #20
 8001662:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001724 <xTaskIncrementTick+0x120>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001666:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b91b      	cbnz	r3, 8001674 <xTaskIncrementTick+0x70>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800166c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001670:	628b      	str	r3, [r1, #40]	; 0x28
                    break;
 8001672:	e7e2      	b.n	800163a <xTaskIncrementTick+0x36>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001674:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800167a:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 800167c:	4294      	cmp	r4, r2
 800167e:	d201      	bcs.n	8001684 <xTaskIncrementTick+0x80>
                        xNextTaskUnblockTime = xItemValue;
 8001680:	628a      	str	r2, [r1, #40]	; 0x28
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001682:	e7da      	b.n	800163a <xTaskIncrementTick+0x36>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001684:	695f      	ldr	r7, [r3, #20]
 8001686:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 800168a:	f8c2 9008 	str.w	r9, [r2, #8]
 800168e:	f8c9 2004 	str.w	r2, [r9, #4]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	1d1d      	adds	r5, r3, #4
 8001696:	42aa      	cmp	r2, r5
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	bf08      	it	eq
 800169e:	f8c7 9004 	streq.w	r9, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	3a01      	subs	r2, #1
 80016a8:	603a      	str	r2, [r7, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016aa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80016ac:	b18f      	cbz	r7, 80016d2 <xTaskIncrementTick+0xce>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016ae:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 80016b2:	f8c9 2008 	str.w	r2, [r9, #8]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	f8c2 9004 	str.w	r9, [r2, #4]
 80016be:	f103 0918 	add.w	r9, r3, #24
 80016c2:	454e      	cmp	r6, r9
 80016c4:	bf08      	it	eq
 80016c6:	607a      	streq	r2, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	3a01      	subs	r2, #1
 80016d0:	603a      	str	r2, [r7, #0]
                    prvAddTaskToReadyList( pxTCB );
 80016d2:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
 80016d6:	688f      	ldr	r7, [r1, #8]
 80016d8:	fa08 f20a 	lsl.w	r2, r8, sl
 80016dc:	433a      	orrs	r2, r7
 80016de:	608a      	str	r2, [r1, #8]
 80016e0:	fb0e f20a 	mul.w	r2, lr, sl
 80016e4:	eb01 0b02 	add.w	fp, r1, r2
 80016e8:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 80016ec:	4462      	add	r2, ip
 80016ee:	68be      	ldr	r6, [r7, #8]
 80016f0:	609f      	str	r7, [r3, #8]
 80016f2:	60de      	str	r6, [r3, #12]
 80016f4:	68be      	ldr	r6, [r7, #8]
 80016f6:	6075      	str	r5, [r6, #4]
 80016f8:	60bd      	str	r5, [r7, #8]
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8001700:	3301      	adds	r3, #1
 8001702:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001706:	684b      	ldr	r3, [r1, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 800170a:	459a      	cmp	sl, r3
 800170c:	bf28      	it	cs
 800170e:	2001      	movcs	r0, #1
 8001710:	e7a9      	b.n	8001666 <xTaskIncrementTick+0x62>
        ++xPendedTicks;
 8001712:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
    BaseType_t xSwitchRequired = pdFALSE;
 8001716:	2000      	movs	r0, #0
        ++xPendedTicks;
 8001718:	3201      	adds	r2, #1
 800171a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    return xSwitchRequired;
 800171e:	e79a      	b.n	8001656 <xTaskIncrementTick+0x52>
 8001720:	20003228 	.word	0x20003228
 8001724:	20003270 	.word	0x20003270

08001728 <xTaskResumeAll>:
{
 8001728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        --uxSchedulerSuspended;
 800172c:	4c3e      	ldr	r4, [pc, #248]	; (8001828 <xTaskResumeAll+0x100>)
    taskENTER_CRITICAL();
 800172e:	f7ff fb49 	bl	8000dc4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8001732:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001736:	3b01      	subs	r3, #1
 8001738:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800173c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001740:	b12b      	cbz	r3, 800174e <xTaskResumeAll+0x26>
    BaseType_t xAlreadyYielded = pdFALSE;
 8001742:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001744:	f7ff fb4e 	bl	8000de4 <vPortExitCritical>
}
 8001748:	4620      	mov	r0, r4
 800174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800174e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001750:	2a00      	cmp	r2, #0
 8001752:	d0f6      	beq.n	8001742 <xTaskResumeAll+0x1a>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001754:	469c      	mov	ip, r3
                    prvAddTaskToReadyList( pxTCB );
 8001756:	f04f 0a01 	mov.w	sl, #1
 800175a:	f04f 0e14 	mov.w	lr, #20
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800175e:	f8d4 61a8 	ldr.w	r6, [r4, #424]	; 0x1a8
                    prvAddTaskToReadyList( pxTCB );
 8001762:	f104 0848 	add.w	r8, r4, #72	; 0x48
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001766:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800176a:	b9ea      	cbnz	r2, 80017a8 <xTaskResumeAll+0x80>
                if( pxTCB != NULL )
 800176c:	b10b      	cbz	r3, 8001772 <xTaskResumeAll+0x4a>
                    prvResetNextTaskUnblockTime();
 800176e:	f7ff fe11 	bl	8001394 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001772:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001776:	b14d      	cbz	r5, 800178c <xTaskResumeAll+0x64>
                                xYieldPending = pdTRUE;
 8001778:	2601      	movs	r6, #1
                            if( xTaskIncrementTick() != pdFALSE )
 800177a:	f7ff ff43 	bl	8001604 <xTaskIncrementTick>
 800177e:	b108      	cbz	r0, 8001784 <xTaskResumeAll+0x5c>
                                xYieldPending = pdTRUE;
 8001780:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001784:	3d01      	subs	r5, #1
 8001786:	d1f8      	bne.n	800177a <xTaskResumeAll+0x52>
                        xPendedTicks = 0;
 8001788:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
                if( xYieldPending != pdFALSE )
 800178c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0d6      	beq.n	8001742 <xTaskResumeAll+0x1a>
                    taskYIELD_IF_USING_PREEMPTION();
 8001794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <xTaskResumeAll+0x104>)
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 80017a4:	2401      	movs	r4, #1
 80017a6:	e7cd      	b.n	8001744 <xTaskResumeAll+0x1c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017a8:	68f3      	ldr	r3, [r6, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017ac:	e9d3 7007 	ldrd	r7, r0, [r3, #28]
 80017b0:	60b8      	str	r0, [r7, #8]
 80017b2:	6a1a      	ldr	r2, [r3, #32]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017b4:	f103 0904 	add.w	r9, r3, #4
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017b8:	6057      	str	r7, [r2, #4]
 80017ba:	684a      	ldr	r2, [r1, #4]
 80017bc:	f103 0718 	add.w	r7, r3, #24
 80017c0:	42ba      	cmp	r2, r7
 80017c2:	680a      	ldr	r2, [r1, #0]
 80017c4:	bf08      	it	eq
 80017c6:	6048      	streq	r0, [r1, #4]
 80017c8:	3a01      	subs	r2, #1
 80017ca:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 80017ce:	600a      	str	r2, [r1, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017d0:	6959      	ldr	r1, [r3, #20]
 80017d2:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	684a      	ldr	r2, [r1, #4]
 80017da:	68d8      	ldr	r0, [r3, #12]
 80017dc:	454a      	cmp	r2, r9
 80017de:	680a      	ldr	r2, [r1, #0]
 80017e0:	6047      	str	r7, [r0, #4]
 80017e2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80017e6:	bf08      	it	eq
 80017e8:	6048      	streq	r0, [r1, #4]
 80017ea:	600a      	str	r2, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	68a0      	ldr	r0, [r4, #8]
 80017f0:	fa0a f201 	lsl.w	r2, sl, r1
 80017f4:	4302      	orrs	r2, r0
 80017f6:	60a2      	str	r2, [r4, #8]
 80017f8:	fb0e f201 	mul.w	r2, lr, r1
 80017fc:	18a0      	adds	r0, r4, r2
 80017fe:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001800:	4442      	add	r2, r8
 8001802:	68bd      	ldr	r5, [r7, #8]
 8001804:	609f      	str	r7, [r3, #8]
 8001806:	60dd      	str	r5, [r3, #12]
 8001808:	68bd      	ldr	r5, [r7, #8]
 800180a:	f8c5 9004 	str.w	r9, [r5, #4]
 800180e:	f8c7 9008 	str.w	r9, [r7, #8]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001816:	3201      	adds	r2, #1
 8001818:	6482      	str	r2, [r0, #72]	; 0x48
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800181a:	6862      	ldr	r2, [r4, #4]
 800181c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800181e:	4291      	cmp	r1, r2
                        xYieldPending = pdTRUE;
 8001820:	bf28      	it	cs
 8001822:	f8c4 a1bc 	strcs.w	sl, [r4, #444]	; 0x1bc
 8001826:	e79e      	b.n	8001766 <xTaskResumeAll+0x3e>
 8001828:	20003228 	.word	0x20003228
 800182c:	e000ed04 	.word	0xe000ed04

08001830 <vTaskDelay>:
    {
 8001830:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001832:	b940      	cbnz	r0, 8001846 <vTaskDelay+0x16>
            portYIELD_WITHIN_API();
 8001834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <vTaskDelay+0x2c>)
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f3bf 8f4f 	dsb	sy
 8001840:	f3bf 8f6f 	isb	sy
    }
 8001844:	bd08      	pop	{r3, pc}
            vTaskSuspendAll();
 8001846:	f7ff fed3 	bl	80015f0 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800184a:	2100      	movs	r1, #0
 800184c:	f7ff fd60 	bl	8001310 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8001850:	f7ff ff6a 	bl	8001728 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8001854:	2800      	cmp	r0, #0
 8001856:	d0ed      	beq.n	8001834 <vTaskDelay+0x4>
 8001858:	e7f4      	b.n	8001844 <vTaskDelay+0x14>
 800185a:	bf00      	nop
 800185c:	e000ed04 	.word	0xe000ed04

08001860 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <vTaskSwitchContext+0x4c>)
{
 8001862:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001864:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 8001868:	461a      	mov	r2, r3
 800186a:	b119      	cbz	r1, 8001874 <vTaskSwitchContext+0x14>
        xYieldPending = pdTRUE;
 800186c:	2201      	movs	r2, #1
 800186e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 8001872:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8001874:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001878:	689b      	ldr	r3, [r3, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	2014      	movs	r0, #20
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f1c3 031f 	rsb	r3, r3, #31
 8001886:	fb00 f103 	mul.w	r1, r0, r3
 800188a:	1854      	adds	r4, r2, r1
 800188c:	4621      	mov	r1, r4
 800188e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001890:	3150      	adds	r1, #80	; 0x50
 8001892:	686d      	ldr	r5, [r5, #4]
 8001894:	fb00 2303 	mla	r3, r0, r3, r2
 8001898:	428d      	cmp	r5, r1
 800189a:	bf08      	it	eq
 800189c:	6869      	ldreq	r1, [r5, #4]
 800189e:	64e5      	str	r5, [r4, #76]	; 0x4c
 80018a0:	bf08      	it	eq
 80018a2:	64e1      	streq	r1, [r4, #76]	; 0x4c
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	6053      	str	r3, [r2, #4]
}
 80018aa:	e7e2      	b.n	8001872 <vTaskSwitchContext+0x12>
 80018ac:	20003228 	.word	0x20003228

080018b0 <vTaskPlaceOnEventList>:
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <vTaskPlaceOnEventList+0x1c>)
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	3118      	adds	r1, #24
 80018ba:	f7ff fa11 	bl	8000ce0 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018be:	4620      	mov	r0, r4
}
 80018c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018c4:	2101      	movs	r1, #1
 80018c6:	f7ff bd23 	b.w	8001310 <prvAddCurrentTaskToDelayedList>
 80018ca:	bf00      	nop
 80018cc:	20003228 	.word	0x20003228

080018d0 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018d0:	68c3      	ldr	r3, [r0, #12]
{
 80018d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018d4:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80018d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d8:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 80018dc:	6854      	ldr	r4, [r2, #4]
 80018de:	6081      	str	r1, [r0, #8]
 80018e0:	6048      	str	r0, [r1, #4]
 80018e2:	f103 0018 	add.w	r0, r3, #24
 80018e6:	4284      	cmp	r4, r0
 80018e8:	bf08      	it	eq
 80018ea:	6051      	streq	r1, [r2, #4]
 80018ec:	2100      	movs	r1, #0
 80018ee:	6299      	str	r1, [r3, #40]	; 0x28
 80018f0:	6811      	ldr	r1, [r2, #0]
 80018f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80018f4:	3901      	subs	r1, #1
 80018f6:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <xTaskRemoveFromEventList+0xac>)
 80018fa:	f8d2 11b8 	ldr.w	r1, [r2, #440]	; 0x1b8
 80018fe:	2900      	cmp	r1, #0
 8001900:	d12b      	bne.n	800195a <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001902:	e9d3 5002 	ldrd	r5, r0, [r3, #8]
 8001906:	6959      	ldr	r1, [r3, #20]
 8001908:	60a8      	str	r0, [r5, #8]
 800190a:	68d8      	ldr	r0, [r3, #12]
 800190c:	1d1e      	adds	r6, r3, #4
 800190e:	6045      	str	r5, [r0, #4]
 8001910:	684d      	ldr	r5, [r1, #4]
 8001912:	42b5      	cmp	r5, r6
 8001914:	bf08      	it	eq
 8001916:	6048      	streq	r0, [r1, #4]
 8001918:	6808      	ldr	r0, [r1, #0]
 800191a:	3801      	subs	r0, #1
 800191c:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800191e:	2101      	movs	r1, #1
 8001920:	6890      	ldr	r0, [r2, #8]
 8001922:	40a1      	lsls	r1, r4
 8001924:	4301      	orrs	r1, r0
 8001926:	6091      	str	r1, [r2, #8]
 8001928:	2114      	movs	r1, #20
 800192a:	4361      	muls	r1, r4
 800192c:	1855      	adds	r5, r2, r1
 800192e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8001930:	6887      	ldr	r7, [r0, #8]
 8001932:	6098      	str	r0, [r3, #8]
 8001934:	60df      	str	r7, [r3, #12]
 8001936:	6887      	ldr	r7, [r0, #8]
 8001938:	607e      	str	r6, [r7, #4]
 800193a:	6086      	str	r6, [r0, #8]
 800193c:	4810      	ldr	r0, [pc, #64]	; (8001980 <xTaskRemoveFromEventList+0xb0>)
 800193e:	4401      	add	r1, r0
 8001940:	6159      	str	r1, [r3, #20]
 8001942:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001944:	3301      	adds	r3, #1
 8001946:	64ab      	str	r3, [r5, #72]	; 0x48
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001948:	6853      	ldr	r3, [r2, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	429c      	cmp	r4, r3
        xYieldPending = pdTRUE;
 800194e:	bf8a      	itet	hi
 8001950:	2001      	movhi	r0, #1
        xReturn = pdFALSE;
 8001952:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 8001954:	f8c2 01bc 	strhi.w	r0, [r2, #444]	; 0x1bc
}
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800195a:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
 800195e:	688d      	ldr	r5, [r1, #8]
 8001960:	61d9      	str	r1, [r3, #28]
 8001962:	621d      	str	r5, [r3, #32]
 8001964:	688d      	ldr	r5, [r1, #8]
 8001966:	6068      	str	r0, [r5, #4]
 8001968:	6088      	str	r0, [r1, #8]
 800196a:	f502 71ce 	add.w	r1, r2, #412	; 0x19c
 800196e:	6299      	str	r1, [r3, #40]	; 0x28
 8001970:	f8d2 319c 	ldr.w	r3, [r2, #412]	; 0x19c
 8001974:	3301      	adds	r3, #1
 8001976:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 800197a:	e7e5      	b.n	8001948 <xTaskRemoveFromEventList+0x78>
 800197c:	20003228 	.word	0x20003228
 8001980:	20003270 	.word	0x20003270

08001984 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <vTaskInternalSetTimeOutState+0x10>)
 8001986:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
    pxTimeOut->xTimeOnEntering = xTickCount;
 800198a:	681b      	ldr	r3, [r3, #0]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800198c:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800198e:	6043      	str	r3, [r0, #4]
}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20003228 	.word	0x20003228

08001998 <xTaskCheckForTimeOut>:
{
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	460d      	mov	r5, r1
 800199c:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800199e:	f7ff fa11 	bl	8000dc4 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 80019a2:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 80019a4:	480e      	ldr	r0, [pc, #56]	; (80019e0 <xTaskCheckForTimeOut+0x48>)
            if( *pxTicksToWait == portMAX_DELAY )
 80019a6:	1c5a      	adds	r2, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 80019a8:	6801      	ldr	r1, [r0, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80019aa:	d017      	beq.n	80019dc <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80019ac:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
 80019b0:	6826      	ldr	r6, [r4, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019b2:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80019b4:	4286      	cmp	r6, r0
 80019b6:	d008      	beq.n	80019ca <xTaskCheckForTimeOut+0x32>
 80019b8:	428a      	cmp	r2, r1
 80019ba:	d806      	bhi.n	80019ca <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 80019bc:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80019be:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80019c0:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80019c2:	f7ff fa0f 	bl	8000de4 <vPortExitCritical>
}
 80019c6:	4620      	mov	r0, r4
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80019ca:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80019cc:	4283      	cmp	r3, r0
 80019ce:	d9f5      	bls.n	80019bc <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 80019d0:	1a5b      	subs	r3, r3, r1
 80019d2:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 80019d4:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 80019d6:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80019d8:	f7ff ffd4 	bl	8001984 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 80019dc:	2400      	movs	r4, #0
 80019de:	e7f0      	b.n	80019c2 <xTaskCheckForTimeOut+0x2a>
 80019e0:	20003228 	.word	0x20003228

080019e4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 80019e4:	2201      	movs	r2, #1
 80019e6:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <vTaskMissedYield+0xc>)
 80019e8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20003228 	.word	0x20003228

080019f4 <xTaskPriorityDisinherit>:
    {
 80019f4:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 80019f6:	4604      	mov	r4, r0
 80019f8:	b908      	cbnz	r0, 80019fe <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 80019fa:	2000      	movs	r0, #0
    }
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
            ( pxTCB->uxMutexesHeld )--;
 80019fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a02:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8001a04:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a06:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8001a08:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a0a:	d0f6      	beq.n	80019fa <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f4      	bne.n	80019fa <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a10:	1d05      	adds	r5, r0, #4
 8001a12:	4628      	mov	r0, r5
 8001a14:	f7ff f97b 	bl	8000d0e <uxListRemove>
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <xTaskPriorityDisinherit+0x70>)
 8001a1a:	b930      	cbnz	r0, 8001a2a <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4081      	lsls	r1, r0
 8001a24:	ea22 0201 	bic.w	r2, r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
                    prvAddTaskToReadyList( pxTCB );
 8001a2a:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8001a2e:	689e      	ldr	r6, [r3, #8]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a30:	f1c1 020f 	rsb	r2, r1, #15
 8001a34:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a36:	fa00 f201 	lsl.w	r2, r0, r1
 8001a3a:	4332      	orrs	r2, r6
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	2214      	movs	r2, #20
 8001a40:	434a      	muls	r2, r1
 8001a42:	4413      	add	r3, r2
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a44:	62e1      	str	r1, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8001a46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001a48:	688e      	ldr	r6, [r1, #8]
 8001a4a:	60a1      	str	r1, [r4, #8]
 8001a4c:	60e6      	str	r6, [r4, #12]
 8001a4e:	688e      	ldr	r6, [r1, #8]
 8001a50:	6075      	str	r5, [r6, #4]
 8001a52:	608d      	str	r5, [r1, #8]
 8001a54:	4904      	ldr	r1, [pc, #16]	; (8001a68 <xTaskPriorityDisinherit+0x74>)
 8001a56:	440a      	add	r2, r1
 8001a58:	6162      	str	r2, [r4, #20]
 8001a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a5c:	4402      	add	r2, r0
 8001a5e:	649a      	str	r2, [r3, #72]	; 0x48
        return xReturn;
 8001a60:	e7cc      	b.n	80019fc <xTaskPriorityDisinherit+0x8>
 8001a62:	bf00      	nop
 8001a64:	20003228 	.word	0x20003228
 8001a68:	20003270 	.word	0x20003270

08001a6c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <NVIC_PriorityGroupConfig+0x10>)
 8001a6e:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001a72:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001a76:	60d8      	str	r0, [r3, #12]
}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	2501      	movs	r5, #1
 8001a84:	7801      	ldrb	r1, [r0, #0]
 8001a86:	f001 031f 	and.w	r3, r1, #31
 8001a8a:	409d      	lsls	r5, r3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001a8c:	78c3      	ldrb	r3, [r0, #3]
 8001a8e:	094c      	lsrs	r4, r1, #5
 8001a90:	b1c3      	cbz	r3, 8001ac4 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <NVIC_Init+0x50>)
 8001a94:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001a96:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001a98:	43d2      	mvns	r2, r2
 8001a9a:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001a9e:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001aa2:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001aa6:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001aae:	4013      	ands	r3, r2
 8001ab0:	4333      	orrs	r3, r6
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 8001ab4:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4411      	add	r1, r2
 8001aba:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001abe:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <NVIC_Init+0x54>)
 8001ac6:	3420      	adds	r4, #32
 8001ac8:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 8001acc:	e7f9      	b.n	8001ac2 <NVIC_Init+0x42>
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8001ad8:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <FLASH_SetLatency+0x10>)
 8001ada:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8001adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8001ae0:	4303      	orrs	r3, r0
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <FLASH_PrefetchBufferCmd+0x14>)
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	f021 0110 	bic.w	r1, r1, #16
 8001af4:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4302      	orrs	r2, r0
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000

08001b04 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001b08:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001b0a:	880e      	ldrh	r6, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001b0c:	06da      	lsls	r2, r3, #27
 8001b0e:	bf48      	it	mi
 8001b10:	788a      	ldrbmi	r2, [r1, #2]
 8001b12:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001b16:	bf48      	it	mi
 8001b18:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001b1a:	780a      	ldrb	r2, [r1, #0]
 8001b1c:	b1d2      	cbz	r2, 8001b54 <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001b1e:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001b20:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001b24:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 8001b28:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 8001b2a:	fa0c f701 	lsl.w	r7, ip, r1
      if (currentpin == pos)
 8001b2e:	ea37 0406 	bics.w	r4, r7, r6
 8001b32:	d10b      	bne.n	8001b4c <GPIO_Init+0x48>
        pos = pinpos << 2;
 8001b34:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 8001b36:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 8001b3a:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001b3e:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001b42:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8001b44:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001b48:	d124      	bne.n	8001b94 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001b4a:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001b4c:	3101      	adds	r1, #1
 8001b4e:	2908      	cmp	r1, #8
 8001b50:	d1eb      	bne.n	8001b2a <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001b52:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001b54:	2eff      	cmp	r6, #255	; 0xff
 8001b56:	d91b      	bls.n	8001b90 <GPIO_Init+0x8c>
  {
    tmpreg = GPIOx->CRH;
 8001b58:	2408      	movs	r4, #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b5a:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001b5e:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 8001b62:	6841      	ldr	r1, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b64:	fa0c f704 	lsl.w	r7, ip, r4
      if (currentpin == pos)
 8001b68:	ea37 0206 	bics.w	r2, r7, r6
 8001b6c:	d10c      	bne.n	8001b88 <GPIO_Init+0x84>
        pos = pinpos << 2;
 8001b6e:	00a2      	lsls	r2, r4, #2
 8001b70:	3a20      	subs	r2, #32
        pinmask = ((uint32_t)0x0F) << pos;
 8001b72:	fa0e f802 	lsl.w	r8, lr, r2
        tmpreg &= ~pinmask;
 8001b76:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001b7a:	fa05 f202 	lsl.w	r2, r5, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001b7e:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8001b80:	ea41 0102 	orr.w	r1, r1, r2
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001b84:	d10a      	bne.n	8001b9c <GPIO_Init+0x98>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b86:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001b88:	3401      	adds	r4, #1
 8001b8a:	2c10      	cmp	r4, #16
 8001b8c:	d1ea      	bne.n	8001b64 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001b8e:	6041      	str	r1, [r0, #4]
  }
}
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001b94:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001b96:	bf08      	it	eq
 8001b98:	6107      	streq	r7, [r0, #16]
 8001b9a:	e7d7      	b.n	8001b4c <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001b9c:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001b9e:	bf08      	it	eq
 8001ba0:	6107      	streq	r7, [r0, #16]
 8001ba2:	e7f1      	b.n	8001b88 <GPIO_Init+0x84>

08001ba4 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <RCC_DeInit+0x38>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f042 0201 	orr.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <RCC_DeInit+0x3c>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001bbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001bd2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001bd6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	f8ff0000 	.word	0xf8ff0000

08001be4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001be6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bf0:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf8:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 8001bfa:	d003      	beq.n	8001c04 <RCC_HSEConfig+0x20>
 8001bfc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8001c00:	d005      	beq.n	8001c0e <RCC_HSEConfig+0x2a>
 8001c02:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001c0a:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 8001c0c:	4770      	bx	lr
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001c14:	e7f9      	b.n	8001c0a <RCC_HSEConfig+0x26>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <RCC_PLLConfig+0x10>)
 8001c1e:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001c20:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001c24:	430b      	orrs	r3, r1
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001c26:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c28:	6053      	str	r3, [r2, #4]
}
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000

08001c30 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <RCC_PLLCmd+0x8>)
 8001c32:	6018      	str	r0, [r3, #0]
}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	42420060 	.word	0x42420060

08001c3c <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <RCC_SYSCLKConfig+0x10>)
 8001c3e:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001c40:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001c44:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c46:	6053      	str	r3, [r2, #4]
}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <RCC_GetSYSCLKSource+0xc>)
 8001c52:	6858      	ldr	r0, [r3, #4]
}
 8001c54:	f000 000c 	and.w	r0, r0, #12
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <RCC_HCLKConfig+0x10>)
 8001c62:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001c68:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c6a:	6053      	str	r3, [r2, #4]
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <RCC_PCLK1Config+0x10>)
 8001c76:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001c7c:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c7e:	6053      	str	r3, [r2, #4]
}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <RCC_PCLK2Config+0x10>)
 8001c8a:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001c8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001c90:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c94:	6053      	str	r3, [r2, #4]
}
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000

08001c9c <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <RCC_GetClocksFreq+0x78>)
{
 8001c9e:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001ca0:	6853      	ldr	r3, [r2, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d021      	beq.n	8001cee <RCC_GetClocksFreq+0x52>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d021      	beq.n	8001cf2 <RCC_GetClocksFreq+0x56>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <RCC_GetClocksFreq+0x7c>)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001cb0:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001cb2:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001cb4:	4919      	ldr	r1, [pc, #100]	; (8001d1c <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 8001cb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001cba:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	40e3      	lsrs	r3, r4
 8001cc0:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001cc2:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8001cc4:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8001cc8:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001cca:	fa23 f404 	lsr.w	r4, r3, r4
 8001cce:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001cd0:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8001cd2:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8001cd6:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001cd8:	40e3      	lsrs	r3, r4
 8001cda:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001cdc:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8001cde:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8001ce2:	4411      	add	r1, r2
 8001ce4:	7c0a      	ldrb	r2, [r1, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cea:	6103      	str	r3, [r0, #16]
}
 8001cec:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <RCC_GetClocksFreq+0x84>)
 8001cf0:	e7de      	b.n	8001cb0 <RCC_GetClocksFreq+0x14>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001cf2:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001cf4:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8001cf6:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8001cfa:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8001cfc:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8001d00:	d402      	bmi.n	8001d08 <RCC_GetClocksFreq+0x6c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <RCC_GetClocksFreq+0x88>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001d04:	434b      	muls	r3, r1
 8001d06:	e7d3      	b.n	8001cb0 <RCC_GetClocksFreq+0x14>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001d08:	6851      	ldr	r1, [r2, #4]
 8001d0a:	0389      	lsls	r1, r1, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001d0c:	bf4c      	ite	mi
 8001d0e:	4906      	ldrmi	r1, [pc, #24]	; (8001d28 <RCC_GetClocksFreq+0x8c>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001d10:	4903      	ldrpl	r1, [pc, #12]	; (8001d20 <RCC_GetClocksFreq+0x84>)
 8001d12:	e7f7      	b.n	8001d04 <RCC_GetClocksFreq+0x68>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	007a1200 	.word	0x007a1200
 8001d1c:	2000000c 	.word	0x2000000c
 8001d20:	00b71b00 	.word	0x00b71b00
 8001d24:	003d0900 	.word	0x003d0900
 8001d28:	005b8d80 	.word	0x005b8d80

08001d2c <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d2e:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8001d30:	b111      	cbz	r1, 8001d38 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d32:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d34:	6198      	str	r0, [r3, #24]
  }
}
 8001d36:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d38:	ea22 0000 	bic.w	r0, r2, r0
 8001d3c:	e7fa      	b.n	8001d34 <RCC_APB2PeriphClockCmd+0x8>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001d46:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 8001d48:	b111      	cbz	r1, 8001d50 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 8001d4a:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001d4c:	61d8      	str	r0, [r3, #28]
  }
}
 8001d4e:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001d50:	ea22 0000 	bic.w	r0, r2, r0
 8001d54:	e7fa      	b.n	8001d4c <RCC_APB1PeriphClockCmd+0x8>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <RCC_APB2PeriphResetCmd+0x14>)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001d5e:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 8001d60:	b111      	cbz	r1, 8001d68 <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001d62:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001d64:	60d8      	str	r0, [r3, #12]
  }
}
 8001d66:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001d68:	ea22 0000 	bic.w	r0, r2, r0
 8001d6c:	e7fa      	b.n	8001d64 <RCC_APB2PeriphResetCmd+0x8>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <RCC_APB1PeriphResetCmd+0x14>)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001d76:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 8001d78:	b111      	cbz	r1, 8001d80 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001d7a:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001d7c:	6118      	str	r0, [r3, #16]
  }
}
 8001d7e:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001d80:	ea22 0000 	bic.w	r0, r2, r0
 8001d84:	e7fa      	b.n	8001d7c <RCC_APB1PeriphResetCmd+0x8>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001d8c:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001d8e:	2a01      	cmp	r2, #1
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <RCC_GetFlagStatus+0x24>)
 8001d92:	d107      	bne.n	8001da4 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8001d94:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001d96:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001d9a:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8001d9e:	f000 0001 	and.w	r0, r0, #1
 8001da2:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001da4:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 8001da6:	bf0c      	ite	eq
 8001da8:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 8001daa:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8001dac:	e7f3      	b.n	8001d96 <RCC_GetFlagStatus+0xa>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <RCC_WaitForHSEStartUp>:
  __IO uint32_t StartUpCounter = 0;
 8001db4:	2300      	movs	r3, #0
{
 8001db6:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8001db8:	9301      	str	r3, [sp, #4]
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001dba:	2031      	movs	r0, #49	; 0x31
 8001dbc:	f7ff ffe6 	bl	8001d8c <RCC_GetFlagStatus>
    StartUpCounter++;  
 8001dc0:	9b01      	ldr	r3, [sp, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001dc6:	9b01      	ldr	r3, [sp, #4]
 8001dc8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001dcc:	d001      	beq.n	8001dd2 <RCC_WaitForHSEStartUp+0x1e>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d0f3      	beq.n	8001dba <RCC_WaitForHSEStartUp+0x6>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	2031      	movs	r0, #49	; 0x31
 8001dd4:	f7ff ffda 	bl	8001d8c <RCC_GetFlagStatus>
}
 8001dd8:	3800      	subs	r0, #0
 8001dda:	bf18      	it	ne
 8001ddc:	2001      	movne	r0, #1
 8001dde:	b003      	add	sp, #12
 8001de0:	f85d fb04 	ldr.w	pc, [sp], #4

08001de4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001de6:	8c06      	ldrh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001de8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001dec:	f026 0601 	bic.w	r6, r6, #1
 8001df0:	0436      	lsls	r6, r6, #16
 8001df2:	0c36      	lsrs	r6, r6, #16
 8001df4:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001df6:	8b04      	ldrh	r4, [r0, #24]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <TI1_Config+0x6c>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001dfa:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8001dfe:	0424      	lsls	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001e00:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001e02:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e04:	4314      	orrs	r4, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e06:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 8001e08:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e0a:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e0c:	d012      	beq.n	8001e34 <TI1_Config+0x50>
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	4298      	cmp	r0, r3
 8001e14:	d00e      	beq.n	8001e34 <TI1_Config+0x50>
 8001e16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e1a:	d00b      	beq.n	8001e34 <TI1_Config+0x50>
 8001e1c:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8001e20:	4298      	cmp	r0, r3
 8001e22:	d007      	beq.n	8001e34 <TI1_Config+0x50>
 8001e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	d003      	beq.n	8001e34 <TI1_Config+0x50>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e30:	4298      	cmp	r0, r3
 8001e32:	d108      	bne.n	8001e46 <TI1_Config+0x62>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001e34:	f025 0302 	bic.w	r3, r5, #2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e38:	ea41 0503 	orr.w	r5, r1, r3
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e3c:	f045 0501 	orr.w	r5, r5, #1
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e40:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e42:	8405      	strh	r5, [r0, #32]
}
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e46:	f025 050a 	bic.w	r5, r5, #10
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e4a:	430d      	orrs	r5, r1
 8001e4c:	e7f6      	b.n	8001e3c <TI1_Config+0x58>
 8001e4e:	bf00      	nop
 8001e50:	40012c00 	.word	0x40012c00

08001e54 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001e56:	8c04      	ldrh	r4, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e58:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001e5a:	f024 0410 	bic.w	r4, r4, #16
 8001e5e:	0424      	lsls	r4, r4, #16
 8001e60:	0c24      	lsrs	r4, r4, #16
 8001e62:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e64:	8b05      	ldrh	r5, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e66:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001e6a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <TI2_Config+0x70>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001e70:	052d      	lsls	r5, r5, #20
  tmpccer = TIMx->CCER;
 8001e72:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001e74:	0d2d      	lsrs	r5, r5, #20
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001e76:	010e      	lsls	r6, r1, #4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e78:	4315      	orrs	r5, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e7a:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 8001e7c:	b2a4      	uxth	r4, r4
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001e7e:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001e80:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e82:	d012      	beq.n	8001eaa <TI2_Config+0x56>
 8001e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	d00e      	beq.n	8001eaa <TI2_Config+0x56>
 8001e8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e90:	d00b      	beq.n	8001eaa <TI2_Config+0x56>
 8001e92:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8001e96:	4298      	cmp	r0, r3
 8001e98:	d007      	beq.n	8001eaa <TI2_Config+0x56>
 8001e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e9e:	4298      	cmp	r0, r3
 8001ea0:	d003      	beq.n	8001eaa <TI2_Config+0x56>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea6:	4298      	cmp	r0, r3
 8001ea8:	d108      	bne.n	8001ebc <TI2_Config+0x68>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8001eaa:	f024 0420 	bic.w	r4, r4, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001eae:	ea46 0104 	orr.w	r1, r6, r4
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001eb2:	f041 0110 	orr.w	r1, r1, #16
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001eb6:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8001eb8:	8401      	strh	r1, [r0, #32]
}
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001ebc:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001ec0:	4321      	orrs	r1, r4
 8001ec2:	e7f6      	b.n	8001eb2 <TI2_Config+0x5e>
 8001ec4:	40012c00 	.word	0x40012c00

08001ec8 <TIM_DeInit>:
{
 8001ec8:	b508      	push	{r3, lr}
  if (TIMx == TIM1)
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <TIM_DeInit+0x188>)
 8001ecc:	4298      	cmp	r0, r3
 8001ece:	d10b      	bne.n	8001ee8 <TIM_DeInit+0x20>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ed6:	f7ff ff41 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001eda:	2100      	movs	r1, #0
 8001edc:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8001ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8001ee4:	f7ff bf3a 	b.w	8001d5c <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 8001ee8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001eec:	d109      	bne.n	8001f02 <TIM_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	f7ff ff3f 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2001      	movs	r0, #1
}
 8001efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001efe:	f7ff bf39 	b.w	8001d74 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <TIM_DeInit+0x18c>)
 8001f04:	4298      	cmp	r0, r3
 8001f06:	d106      	bne.n	8001f16 <TIM_DeInit+0x4e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff ff32 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001f10:	2100      	movs	r1, #0
 8001f12:	2002      	movs	r0, #2
 8001f14:	e7f1      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM4)
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <TIM_DeInit+0x190>)
 8001f18:	4298      	cmp	r0, r3
 8001f1a:	d106      	bne.n	8001f2a <TIM_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	2004      	movs	r0, #4
 8001f20:	f7ff ff28 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2004      	movs	r0, #4
 8001f28:	e7e7      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM5)
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <TIM_DeInit+0x194>)
 8001f2c:	4298      	cmp	r0, r3
 8001f2e:	d106      	bne.n	8001f3e <TIM_DeInit+0x76>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001f30:	2101      	movs	r1, #1
 8001f32:	2008      	movs	r0, #8
 8001f34:	f7ff ff1e 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	e7dd      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 8001f3e:	4b48      	ldr	r3, [pc, #288]	; (8002060 <TIM_DeInit+0x198>)
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d106      	bne.n	8001f52 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001f44:	2101      	movs	r1, #1
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff ff14 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2010      	movs	r0, #16
 8001f50:	e7d3      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM7)
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <TIM_DeInit+0x19c>)
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d106      	bne.n	8001f66 <TIM_DeInit+0x9e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	2020      	movs	r0, #32
 8001f5c:	f7ff ff0a 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001f60:	2100      	movs	r1, #0
 8001f62:	2020      	movs	r0, #32
 8001f64:	e7c9      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM8)
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <TIM_DeInit+0x1a0>)
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d108      	bne.n	8001f7e <TIM_DeInit+0xb6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f72:	f7ff fef3 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8001f76:	2100      	movs	r1, #0
 8001f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f7c:	e7b0      	b.n	8001ee0 <TIM_DeInit+0x18>
  else if (TIMx == TIM9)
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <TIM_DeInit+0x1a4>)
 8001f80:	4298      	cmp	r0, r3
 8001f82:	d108      	bne.n	8001f96 <TIM_DeInit+0xce>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001f84:	2101      	movs	r1, #1
 8001f86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f8a:	f7ff fee7 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f94:	e7a4      	b.n	8001ee0 <TIM_DeInit+0x18>
  else if (TIMx == TIM10)
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <TIM_DeInit+0x1a8>)
 8001f98:	4298      	cmp	r0, r3
 8001f9a:	d108      	bne.n	8001fae <TIM_DeInit+0xe6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fa2:	f7ff fedb 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fac:	e798      	b.n	8001ee0 <TIM_DeInit+0x18>
  else if (TIMx == TIM11) 
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <TIM_DeInit+0x1ac>)
 8001fb0:	4298      	cmp	r0, r3
 8001fb2:	d108      	bne.n	8001fc6 <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fba:	f7ff fecf 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fc4:	e78c      	b.n	8001ee0 <TIM_DeInit+0x18>
  else if (TIMx == TIM12)
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <TIM_DeInit+0x1b0>)
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	d106      	bne.n	8001fda <TIM_DeInit+0x112>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2040      	movs	r0, #64	; 0x40
 8001fd0:	f7ff fed0 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2040      	movs	r0, #64	; 0x40
 8001fd8:	e78f      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM13) 
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <TIM_DeInit+0x1b4>)
 8001fdc:	4298      	cmp	r0, r3
 8001fde:	d106      	bne.n	8001fee <TIM_DeInit+0x126>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2080      	movs	r0, #128	; 0x80
 8001fe4:	f7ff fec6 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2080      	movs	r0, #128	; 0x80
 8001fec:	e785      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <TIM_DeInit+0x1b8>)
 8001ff0:	4298      	cmp	r0, r3
 8001ff2:	d108      	bne.n	8002006 <TIM_DeInit+0x13e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ffa:	f7ff febb 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001ffe:	2100      	movs	r1, #0
 8002000:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002004:	e779      	b.n	8001efa <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <TIM_DeInit+0x1bc>)
 8002008:	4298      	cmp	r0, r3
 800200a:	d108      	bne.n	800201e <TIM_DeInit+0x156>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800200c:	2101      	movs	r1, #1
 800200e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002012:	f7ff fea3 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8002016:	2100      	movs	r1, #0
 8002018:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800201c:	e760      	b.n	8001ee0 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <TIM_DeInit+0x1c0>)
 8002020:	4298      	cmp	r0, r3
 8002022:	d108      	bne.n	8002036 <TIM_DeInit+0x16e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002024:	2101      	movs	r1, #1
 8002026:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800202a:	f7ff fe97 	bl	8001d5c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 800202e:	2100      	movs	r1, #0
 8002030:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002034:	e754      	b.n	8001ee0 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <TIM_DeInit+0x1c4>)
 8002038:	4298      	cmp	r0, r3
 800203a:	d108      	bne.n	800204e <TIM_DeInit+0x186>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800203c:	2101      	movs	r1, #1
 800203e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002042:	f7ff fe8b 	bl	8001d5c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002046:	2100      	movs	r1, #0
 8002048:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800204c:	e748      	b.n	8001ee0 <TIM_DeInit+0x18>
}
 800204e:	bd08      	pop	{r3, pc}
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40001000 	.word	0x40001000
 8002064:	40001400 	.word	0x40001400
 8002068:	40013400 	.word	0x40013400
 800206c:	40014c00 	.word	0x40014c00
 8002070:	40015000 	.word	0x40015000
 8002074:	40015400 	.word	0x40015400
 8002078:	40001800 	.word	0x40001800
 800207c:	40001c00 	.word	0x40001c00
 8002080:	40002000 	.word	0x40002000
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800

08002090 <TIM_TimeBaseInit>:
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <TIM_TimeBaseInit+0x8c>)
  tmpcr1 = TIMx->CR1;  
 8002092:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002094:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 8002096:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002098:	d012      	beq.n	80020c0 <TIM_TimeBaseInit+0x30>
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	4290      	cmp	r0, r2
 80020a0:	d00e      	beq.n	80020c0 <TIM_TimeBaseInit+0x30>
 80020a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020a6:	d00b      	beq.n	80020c0 <TIM_TimeBaseInit+0x30>
 80020a8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020ac:	4290      	cmp	r0, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_TimeBaseInit+0x30>
 80020b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b4:	4290      	cmp	r0, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80020b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020bc:	4290      	cmp	r0, r2
 80020be:	d103      	bne.n	80020c8 <TIM_TimeBaseInit+0x38>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80020c0:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80020c6:	4313      	orrs	r3, r2
  if((TIMx != TIM6) && (TIMx != TIM7))
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <TIM_TimeBaseInit+0x90>)
 80020ca:	4290      	cmp	r0, r2
 80020cc:	d008      	beq.n	80020e0 <TIM_TimeBaseInit+0x50>
 80020ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d2:	4290      	cmp	r0, r2
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80020d4:	bf1f      	itttt	ne
 80020d6:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80020da:	88ca      	ldrhne	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80020dc:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80020de:	4313      	orrne	r3, r2
  TIMx->CR1 = tmpcr1;
 80020e0:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80020e2:	888b      	ldrh	r3, [r1, #4]
 80020e4:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80020e6:	880b      	ldrh	r3, [r1, #0]
 80020e8:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <TIM_TimeBaseInit+0x8c>)
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d00f      	beq.n	8002110 <TIM_TimeBaseInit+0x80>
 80020f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d00b      	beq.n	8002110 <TIM_TimeBaseInit+0x80>
 80020f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80020fc:	4298      	cmp	r0, r3
 80020fe:	d007      	beq.n	8002110 <TIM_TimeBaseInit+0x80>
 8002100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002104:	4298      	cmp	r0, r3
 8002106:	d003      	beq.n	8002110 <TIM_TimeBaseInit+0x80>
 8002108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800210c:	4298      	cmp	r0, r3
 800210e:	d101      	bne.n	8002114 <TIM_TimeBaseInit+0x84>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002110:	7a0b      	ldrb	r3, [r1, #8]
 8002112:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002114:	2301      	movs	r3, #1
 8002116:	8283      	strh	r3, [r0, #20]
}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40001000 	.word	0x40001000

08002124 <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002124:	8c03      	ldrh	r3, [r0, #32]
{
 8002126:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002132:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002134:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002136:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002138:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800213a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800213e:	0412      	lsls	r2, r2, #16
 8002140:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002142:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002144:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002146:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800214a:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800214c:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800214e:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002150:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002152:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002154:	4d14      	ldr	r5, [pc, #80]	; (80021a8 <TIM_OC1Init+0x84>)
  tmpcr2 =  TIMx->CR2;
 8002156:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002158:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800215a:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800215c:	d00f      	beq.n	800217e <TIM_OC1Init+0x5a>
 800215e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002162:	42a8      	cmp	r0, r5
 8002164:	d00b      	beq.n	800217e <TIM_OC1Init+0x5a>
 8002166:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800216a:	42a8      	cmp	r0, r5
 800216c:	d007      	beq.n	800217e <TIM_OC1Init+0x5a>
 800216e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002172:	42a8      	cmp	r0, r5
 8002174:	d003      	beq.n	800217e <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8002176:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800217a:	42a8      	cmp	r0, r5
 800217c:	d10e      	bne.n	800219c <TIM_OC1Init+0x78>
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800217e:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002180:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002184:	432b      	orrs	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002186:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002188:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800218c:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800218e:	432b      	orrs	r3, r5
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002190:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8002192:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002196:	4335      	orrs	r5, r6
 8002198:	432c      	orrs	r4, r5
 800219a:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 800219c:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800219e:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80021a0:	88ca      	ldrh	r2, [r1, #6]
 80021a2:	8682      	strh	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80021a4:	8403      	strh	r3, [r0, #32]
}
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	40012c00 	.word	0x40012c00

080021ac <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80021ac:	8c03      	ldrh	r3, [r0, #32]
{
 80021ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80021b0:	f023 0310 	bic.w	r3, r3, #16
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80021ba:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80021bc:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80021be:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021c0:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80021c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80021c6:	0412      	lsls	r2, r2, #16
 80021c8:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80021ce:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80021d0:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80021d2:	f023 0320 	bic.w	r3, r3, #32
 80021d6:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80021d8:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80021da:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80021dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if((TIMx == TIM1) || (TIMx == TIM8))
 80021e0:	4d11      	ldr	r5, [pc, #68]	; (8002228 <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 80021e2:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 80021e4:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021e6:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80021e8:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 80021ea:	d003      	beq.n	80021f4 <TIM_OC2Init+0x48>
 80021ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80021f0:	42a8      	cmp	r0, r5
 80021f2:	d113      	bne.n	800221c <TIM_OC2Init+0x70>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80021f4:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80021f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80021fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 80021fe:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8002202:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002204:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002206:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002208:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800220c:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800220e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002212:	4335      	orrs	r5, r6
 8002214:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002218:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800221a:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 800221c:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800221e:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002220:	88ca      	ldrh	r2, [r1, #6]
 8002222:	8702      	strh	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002224:	8403      	strh	r3, [r0, #32]
}
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	40012c00 	.word	0x40012c00

0800222c <TIM_OC3Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800222c:	8c03      	ldrh	r3, [r0, #32]
{
 800222e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800223a:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800223c:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800223e:	8b84      	ldrh	r4, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002240:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002242:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002246:	0424      	lsls	r4, r4, #16
 8002248:	0c24      	lsrs	r4, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800224a:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800224c:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800224e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002252:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002254:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002256:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002258:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800225a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 800225e:	4d11      	ldr	r5, [pc, #68]	; (80022a4 <TIM_OC3Init+0x78>)
  tmpcr2 =  TIMx->CR2;
 8002260:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002262:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002264:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002266:	d003      	beq.n	8002270 <TIM_OC3Init+0x44>
 8002268:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800226c:	42a8      	cmp	r0, r5
 800226e:	d113      	bne.n	8002298 <TIM_OC3Init+0x6c>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002270:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002276:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800227a:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800227e:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002280:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002282:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002284:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002288:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800228a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800228e:	4335      	orrs	r5, r6
 8002290:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002294:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002296:	b292      	uxth	r2, r2
  TIMx->CR2 = tmpcr2;
 8002298:	8082      	strh	r2, [r0, #4]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800229a:	88ca      	ldrh	r2, [r1, #6]
  TIMx->CCMR2 = tmpccmrx;
 800229c:	8384      	strh	r4, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800229e:	8782      	strh	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80022a0:	8403      	strh	r3, [r0, #32]
}
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80022a8:	8c03      	ldrh	r3, [r0, #32]
{
 80022aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80022ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022b6:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80022b8:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80022ba:	8b82      	ldrh	r2, [r0, #28]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80022bc:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80022be:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80022c2:	0412      	lsls	r2, r2, #16
 80022c4:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80022c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80022ca:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80022cc:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80022ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d2:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80022d4:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80022d6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80022d8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022dc:	4d0b      	ldr	r5, [pc, #44]	; (800230c <TIM_OC4Init+0x64>)
  tmpcr2 =  TIMx->CR2;
 80022de:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022e0:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80022e2:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80022e4:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022e6:	d003      	beq.n	80022f0 <TIM_OC4Init+0x48>
 80022e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80022ec:	42a8      	cmp	r0, r5
 80022ee:	d105      	bne.n	80022fc <TIM_OC4Init+0x54>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80022f0:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80022f2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80022f6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80022fa:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 80022fc:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022fe:	8382      	strh	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002300:	88ca      	ldrh	r2, [r1, #6]
 8002302:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002306:	8403      	strh	r3, [r0, #32]
}
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00

08002310 <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002310:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002312:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002314:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002316:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002318:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800231a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800231c:	8103      	strh	r3, [r0, #8]
}
 800231e:	4770      	bx	lr

08002320 <TIM_Cmd>:
    TIMx->CR1 |= TIM_CR1_CEN;
 8002320:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8002322:	b121      	cbz	r1, 800232e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8002324:	b29b      	uxth	r3, r3
 8002326:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800232a:	8003      	strh	r3, [r0, #0]
}
 800232c:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	e7f8      	b.n	800232a <TIM_Cmd+0xa>

08002338 <TIM_ITConfig>:
    TIMx->DIER |= TIM_IT;
 8002338:	8983      	ldrh	r3, [r0, #12]
 800233a:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 800233c:	b112      	cbz	r2, 8002344 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 800233e:	4319      	orrs	r1, r3
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002340:	8181      	strh	r1, [r0, #12]
}
 8002342:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002344:	ea23 0101 	bic.w	r1, r3, r1
 8002348:	e7fa      	b.n	8002340 <TIM_ITConfig+0x8>

0800234a <TIM_EncoderInterfaceConfig>:
{
 800234a:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = TIMx->SMCR;
 800234c:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 800234e:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002350:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002352:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002356:	f024 0403 	bic.w	r4, r4, #3
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 800235a:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800235e:	f026 0607 	bic.w	r6, r6, #7
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002362:	0424      	lsls	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002364:	042d      	lsls	r5, r5, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002366:	0436      	lsls	r6, r6, #16
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002368:	0c24      	lsrs	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 800236a:	0c2d      	lsrs	r5, r5, #16
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800236c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002370:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002372:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002376:	4315      	orrs	r5, r2
  tmpsmcr |= TIM_EncoderMode;
 8002378:	430e      	orrs	r6, r1
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800237a:	f044 0401 	orr.w	r4, r4, #1
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800237e:	b2ad      	uxth	r5, r5
  TIMx->SMCR = tmpsmcr;
 8002380:	8106      	strh	r6, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8002382:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002384:	8405      	strh	r5, [r0, #32]
}
 8002386:	bd70      	pop	{r4, r5, r6, pc}

08002388 <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8002388:	8481      	strh	r1, [r0, #36]	; 0x24
}
 800238a:	4770      	bx	lr

0800238c <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 800238c:	8681      	strh	r1, [r0, #52]	; 0x34
}
 800238e:	4770      	bx	lr

08002390 <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 8002390:	8701      	strh	r1, [r0, #56]	; 0x38
}
 8002392:	4770      	bx	lr

08002394 <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002394:	8b03      	ldrh	r3, [r0, #24]
 8002396:	f023 030c 	bic.w	r3, r3, #12
 800239a:	041b      	lsls	r3, r3, #16
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 80023a0:	8b03      	ldrh	r3, [r0, #24]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	430b      	orrs	r3, r1
 80023a6:	8303      	strh	r3, [r0, #24]
}
 80023a8:	4770      	bx	lr

080023aa <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80023aa:	8b02      	ldrh	r2, [r0, #24]
 80023ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023b0:	0412      	lsls	r2, r2, #16
 80023b2:	0c12      	lsrs	r2, r2, #16
 80023b4:	8302      	strh	r2, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80023b6:	8b03      	ldrh	r3, [r0, #24]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8303      	strh	r3, [r0, #24]
}
 80023c2:	4770      	bx	lr

080023c4 <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80023c4:	8b83      	ldrh	r3, [r0, #28]
 80023c6:	f023 030c 	bic.w	r3, r3, #12
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 80023d0:	8b83      	ldrh	r3, [r0, #28]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	430b      	orrs	r3, r1
 80023d6:	8383      	strh	r3, [r0, #28]
}
 80023d8:	4770      	bx	lr

080023da <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80023da:	8b82      	ldrh	r2, [r0, #28]
 80023dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023e0:	0412      	lsls	r2, r2, #16
 80023e2:	0c12      	lsrs	r2, r2, #16
 80023e4:	8382      	strh	r2, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80023e6:	8b83      	ldrh	r3, [r0, #28]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8383      	strh	r3, [r0, #28]
}
 80023f2:	4770      	bx	lr

080023f4 <TIM_ICInit>:
{
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	460f      	mov	r7, r1
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80023f8:	8809      	ldrh	r1, [r1, #0]
{
 80023fa:	4604      	mov	r4, r0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80023fc:	887d      	ldrh	r5, [r7, #2]
 80023fe:	88ba      	ldrh	r2, [r7, #4]
 8002400:	893b      	ldrh	r3, [r7, #8]
 8002402:	b939      	cbnz	r1, 8002414 <TIM_ICInit+0x20>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002404:	4629      	mov	r1, r5
 8002406:	f7ff fced 	bl	8001de4 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800240a:	88f9      	ldrh	r1, [r7, #6]
}
 800240c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002410:	f7ff bfc0 	b.w	8002394 <TIM_SetIC1Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002414:	2904      	cmp	r1, #4
 8002416:	d107      	bne.n	8002428 <TIM_ICInit+0x34>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002418:	4629      	mov	r1, r5
 800241a:	f7ff fd1b 	bl	8001e54 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800241e:	88f9      	ldrh	r1, [r7, #6]
}
 8002420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002424:	f7ff bfc1 	b.w	80023aa <TIM_SetIC2Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002428:	2908      	cmp	r1, #8
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800242a:	8c00      	ldrh	r0, [r0, #32]
 800242c:	88f9      	ldrh	r1, [r7, #6]
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800242e:	d136      	bne.n	800249e <TIM_ICInit+0xaa>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002430:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002434:	0400      	lsls	r0, r0, #16
 8002436:	0c00      	lsrs	r0, r0, #16
 8002438:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 800243a:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 800243c:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 800243e:	b2b6      	uxth	r6, r6
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002440:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8002444:	4316      	orrs	r6, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002446:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <TIM_ICInit+0x124>)
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800244c:	022f      	lsls	r7, r5, #8
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800244e:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002450:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002452:	b2bf      	uxth	r7, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002454:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002456:	d012      	beq.n	800247e <TIM_ICInit+0x8a>
 8002458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245c:	429c      	cmp	r4, r3
 800245e:	d00e      	beq.n	800247e <TIM_ICInit+0x8a>
 8002460:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002464:	d00b      	beq.n	800247e <TIM_ICInit+0x8a>
 8002466:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800246a:	429c      	cmp	r4, r3
 800246c:	d007      	beq.n	800247e <TIM_ICInit+0x8a>
 800246e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002472:	429c      	cmp	r4, r3
 8002474:	d003      	beq.n	800247e <TIM_ICInit+0x8a>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247a:	429c      	cmp	r4, r3
 800247c:	d10b      	bne.n	8002496 <TIM_ICInit+0xa2>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 800247e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002482:	4338      	orrs	r0, r7
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002484:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002488:	83a6      	strh	r6, [r4, #28]
  TIMx->CCER = tmpccer;
 800248a:	8420      	strh	r0, [r4, #32]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800248c:	4620      	mov	r0, r4
}
 800248e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002492:	f7ff bf97 	b.w	80023c4 <TIM_SetIC3Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002496:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 800249a:	4328      	orrs	r0, r5
 800249c:	e7f2      	b.n	8002484 <TIM_ICInit+0x90>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 800249e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80024a2:	0400      	lsls	r0, r0, #16
 80024a4:	0c00      	lsrs	r0, r0, #16
 80024a6:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024a8:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80024aa:	031e      	lsls	r6, r3, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80024ac:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <TIM_ICInit+0x124>)
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80024b2:	053f      	lsls	r7, r7, #20
  tmpccer = TIMx->CCER;
 80024b4:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80024b6:	0d3f      	lsrs	r7, r7, #20
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80024b8:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80024bc:	ea4f 3c05 	mov.w	ip, r5, lsl #12
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80024c0:	433e      	orrs	r6, r7
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80024c2:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 80024c4:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80024c6:	fa1f fc8c 	uxth.w	ip, ip
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80024ca:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80024cc:	d012      	beq.n	80024f4 <TIM_ICInit+0x100>
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d00e      	beq.n	80024f4 <TIM_ICInit+0x100>
 80024d6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80024da:	d00b      	beq.n	80024f4 <TIM_ICInit+0x100>
 80024dc:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80024e0:	429c      	cmp	r4, r3
 80024e2:	d007      	beq.n	80024f4 <TIM_ICInit+0x100>
 80024e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e8:	429c      	cmp	r4, r3
 80024ea:	d003      	beq.n	80024f4 <TIM_ICInit+0x100>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80024ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f0:	429c      	cmp	r4, r3
 80024f2:	d10c      	bne.n	800250e <TIM_ICInit+0x11a>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 80024f4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80024f8:	ea4c 0300 	orr.w	r3, ip, r0
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 80024fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002500:	83a6      	strh	r6, [r4, #28]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002502:	4620      	mov	r0, r4
  TIMx->CCER = tmpccer;
 8002504:	8423      	strh	r3, [r4, #32]
}
 8002506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800250a:	f7ff bf66 	b.w	80023da <TIM_SetIC4Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 800250e:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8002512:	4003      	ands	r3, r0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002514:	432b      	orrs	r3, r5
 8002516:	e7f1      	b.n	80024fc <TIM_ICInit+0x108>
 8002518:	40012c00 	.word	0x40012c00

0800251c <TIM_ClearFlag>:
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800251c:	43c9      	mvns	r1, r1
 800251e:	b289      	uxth	r1, r1
 8002520:	8201      	strh	r1, [r0, #16]
}
 8002522:	4770      	bx	lr

08002524 <TIM_ClearITPendingBit>:
 8002524:	43c9      	mvns	r1, r1
 8002526:	b289      	uxth	r1, r1
 8002528:	8201      	strh	r1, [r0, #16]
 800252a:	4770      	bx	lr

0800252c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800252c:	b530      	push	{r4, r5, lr}
 800252e:	460d      	mov	r5, r1
 8002530:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002532:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8002534:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 8002536:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002538:	88c9      	ldrh	r1, [r1, #6]
 800253a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800253e:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002540:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002542:	8983      	ldrh	r3, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002544:	88a9      	ldrh	r1, [r5, #4]
 8002546:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800254a:	f023 030c 	bic.w	r3, r3, #12
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	430b      	orrs	r3, r1
 8002554:	8929      	ldrh	r1, [r5, #8]
{
 8002556:	b087      	sub	sp, #28
 8002558:	430b      	orrs	r3, r1
 800255a:	8969      	ldrh	r1, [r5, #10]
 800255c:	430b      	orrs	r3, r1
 800255e:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002560:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002562:	8a83      	ldrh	r3, [r0, #20]
 8002564:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256a:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800256c:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800256e:	a801      	add	r0, sp, #4
 8002570:	f7ff fb94 	bl	8001c9c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002574:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002578:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <USART_Init+0xa4>)
 800257a:	4294      	cmp	r4, r2
 800257c:	bf08      	it	eq
 800257e:	4619      	moveq	r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002580:	2319      	movs	r3, #25
 8002582:	89a2      	ldrh	r2, [r4, #12]
 8002584:	434b      	muls	r3, r1
 8002586:	6829      	ldr	r1, [r5, #0]
 8002588:	0410      	lsls	r0, r2, #16
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800258a:	bf4c      	ite	mi
 800258c:	0049      	lslmi	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800258e:	0089      	lslpl	r1, r1, #2
 8002590:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8002594:	2564      	movs	r5, #100	; 0x64
 8002596:	fbb1 f3f5 	udiv	r3, r1, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800259a:	89a2      	ldrh	r2, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 800259c:	0118      	lsls	r0, r3, #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800259e:	0412      	lsls	r2, r2, #16
 80025a0:	fb05 1313 	mls	r3, r5, r3, r1
 80025a4:	d50b      	bpl.n	80025be <USART_Init+0x92>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80025a6:	00da      	lsls	r2, r3, #3
 80025a8:	3232      	adds	r2, #50	; 0x32
 80025aa:	fbb2 f2f5 	udiv	r2, r2, r5
 80025ae:	f002 0207 	and.w	r2, r2, #7
 80025b2:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	8123      	strh	r3, [r4, #8]
}
 80025ba:	b007      	add	sp, #28
 80025bc:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	fbb3 f3f5 	udiv	r3, r3, r5
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4303      	orrs	r3, r0
 80025cc:	e7f3      	b.n	80025b6 <USART_Init+0x8a>
 80025ce:	bf00      	nop
 80025d0:	40013800 	.word	0x40013800

080025d4 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80025d4:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 80025d6:	b121      	cbz	r1, 80025e2 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80025de:	8183      	strh	r3, [r0, #12]
  }
}
 80025e0:	4770      	bx	lr
    USARTx->CR1 &= CR1_UE_Reset;
 80025e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	e7f8      	b.n	80025de <USART_Cmd+0xa>

080025ec <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 80025ec:	2301      	movs	r3, #1
{
 80025ee:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80025f0:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80025f4:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_Mask;
 80025f6:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 80025fa:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80025fe:	d105      	bne.n	800260c <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 8002600:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002602:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8002604:	b13a      	cbz	r2, 8002616 <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002606:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002608:	6001      	str	r1, [r0, #0]
  }
}
 800260a:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800260c:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 800260e:	bf0c      	ite	eq
 8002610:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 8002612:	3014      	addne	r0, #20
 8002614:	e7f5      	b.n	8002602 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002616:	ea23 0101 	bic.w	r1, r3, r1
 800261a:	e7f5      	b.n	8002608 <USART_ITConfig+0x1c>

0800261c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800261c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002620:	8081      	strh	r1, [r0, #4]
}
 8002622:	4770      	bx	lr

08002624 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002624:	8880      	ldrh	r0, [r0, #4]
}
 8002626:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800262a:	4770      	bx	lr

0800262c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800262c:	8803      	ldrh	r3, [r0, #0]
 800262e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002630:	bf14      	ite	ne
 8002632:	2001      	movne	r0, #1
 8002634:	2000      	moveq	r0, #0
 8002636:	4770      	bx	lr

08002638 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002638:	2301      	movs	r3, #1
 800263a:	0a09      	lsrs	r1, r1, #8
 800263c:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 800263e:	43db      	mvns	r3, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	8003      	strh	r3, [r0, #0]
}
 8002644:	4770      	bx	lr
	...

08002648 <prvSendMessageUSART2>:
#include <string.h>
#include "stm32f10x_it.h"


 void prvSendMessageUSART2(char *message)
{
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	4604      	mov	r4, r0
uint16_t cont_aux=0;

    while(cont_aux != strlen(message))
 800264c:	2500      	movs	r5, #0
    {
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 800264e:	4f0a      	ldr	r7, [pc, #40]	; (8002678 <prvSendMessageUSART2+0x30>)
    while(cont_aux != strlen(message))
 8002650:	4620      	mov	r0, r4
 8002652:	f7fd fd7d 	bl	8000150 <strlen>
 8002656:	b2ae      	uxth	r6, r5
 8002658:	42b0      	cmp	r0, r6
 800265a:	d100      	bne.n	800265e <prvSendMessageUSART2+0x16>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
        {
        }
        cont_aux++;
    }
}
 800265c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 800265e:	4638      	mov	r0, r7
 8002660:	5da1      	ldrb	r1, [r4, r6]
 8002662:	f7ff ffdb 	bl	800261c <USART_SendData>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	4638      	mov	r0, r7
 800266a:	f7ff ffdf 	bl	800262c <USART_GetFlagStatus>
 800266e:	2800      	cmp	r0, #0
 8002670:	d0f9      	beq.n	8002666 <prvSendMessageUSART2+0x1e>
        cont_aux++;
 8002672:	3501      	adds	r5, #1
 8002674:	e7ec      	b.n	8002650 <prvSendMessageUSART2+0x8>
 8002676:	bf00      	nop
 8002678:	40004400 	.word	0x40004400

0800267c <prvSendMessage>:
			if(rx ==42322){	command=200; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
		}
	}
}

static void prvSendMessage(void *pvParameters){
 800267c:	b500      	push	{lr}
	char mes[msg_length];

	for(;;){
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 800267e:	4c06      	ldr	r4, [pc, #24]	; (8002698 <prvSendMessage+0x1c>)
static void prvSendMessage(void *pvParameters){
 8002680:	b089      	sub	sp, #36	; 0x24
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 8002682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002686:	4669      	mov	r1, sp
 8002688:	6820      	ldr	r0, [r4, #0]
 800268a:	f7fe fdc9 	bl	8001220 <xQueueReceive>
		prvSendMessageUSART2(mes);
 800268e:	4668      	mov	r0, sp
 8002690:	f7ff ffda 	bl	8002648 <prvSendMessageUSART2>
	for(;;){
 8002694:	e7f5      	b.n	8002682 <prvSendMessage+0x6>
 8002696:	bf00      	nop
 8002698:	20003454 	.word	0x20003454

0800269c <prvReadUsart>:
	uint8_t command=0;
 800269c:	2300      	movs	r3, #0
{
 800269e:	b507      	push	{r0, r1, r2, lr}
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 80026a0:	4d39      	ldr	r5, [pc, #228]	; (8002788 <prvReadUsart+0xec>)
				xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80026a2:	4c3a      	ldr	r4, [pc, #232]	; (800278c <prvReadUsart+0xf0>)
	uint8_t command=0;
 80026a4:	f88d 3005 	strb.w	r3, [sp, #5]
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ac:	6828      	ldr	r0, [r5, #0]
 80026ae:	f10d 0106 	add.w	r1, sp, #6
 80026b2:	f7fe fdb5 	bl	8001220 <xQueueReceive>
 80026b6:	2801      	cmp	r0, #1
 80026b8:	d1f6      	bne.n	80026a8 <prvReadUsart+0xc>
			if(rx ==42317){	command=255;
 80026ba:	f24a 534d 	movw	r3, #42317	; 0xa54d
 80026be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d10a      	bne.n	80026dc <prvReadUsart+0x40>
 80026c6:	23ff      	movs	r3, #255	; 0xff
				xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			if(rx ==42317){	command=255;
 80026cc:	f88d 3005 	strb.w	r3, [sp, #5]
				xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80026d0:	6820      	ldr	r0, [r4, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	f10d 0105 	add.w	r1, sp, #5
 80026d8:	f7fe fcea 	bl	80010b0 <xQueueGenericSend>
			if(rx ==42323){	command=0; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80026dc:	f24a 5353 	movw	r3, #42323	; 0xa553
 80026e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d109      	bne.n	80026fc <prvReadUsart+0x60>
 80026e8:	2300      	movs	r3, #0
 80026ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f10d 0105 	add.w	r1, sp, #5
 80026f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80026f8:	f7fe fcda 	bl	80010b0 <xQueueGenericSend>
			if(rx ==42321){	command=50; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80026fc:	f24a 5351 	movw	r3, #42321	; 0xa551
 8002700:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002704:	429a      	cmp	r2, r3
 8002706:	d10a      	bne.n	800271e <prvReadUsart+0x82>
 8002708:	2332      	movs	r3, #50	; 0x32
 800270a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270e:	f88d 3005 	strb.w	r3, [sp, #5]
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	2300      	movs	r3, #0
 8002716:	f10d 0105 	add.w	r1, sp, #5
 800271a:	f7fe fcc9 	bl	80010b0 <xQueueGenericSend>
			if(rx ==42327){	command=100; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 800271e:	f24a 5357 	movw	r3, #42327	; 0xa557
 8002722:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002726:	429a      	cmp	r2, r3
 8002728:	d10a      	bne.n	8002740 <prvReadUsart+0xa4>
 800272a:	2364      	movs	r3, #100	; 0x64
 800272c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002730:	f88d 3005 	strb.w	r3, [sp, #5]
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	f10d 0105 	add.w	r1, sp, #5
 800273c:	f7fe fcb8 	bl	80010b0 <xQueueGenericSend>
			if(rx ==42309){	command=150; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8002740:	f24a 5345 	movw	r3, #42309	; 0xa545
 8002744:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002748:	429a      	cmp	r2, r3
 800274a:	d10a      	bne.n	8002762 <prvReadUsart+0xc6>
 800274c:	2396      	movs	r3, #150	; 0x96
 800274e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002752:	f88d 3005 	strb.w	r3, [sp, #5]
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	2300      	movs	r3, #0
 800275a:	f10d 0105 	add.w	r1, sp, #5
 800275e:	f7fe fca7 	bl	80010b0 <xQueueGenericSend>
			if(rx ==42322){	command=200; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8002762:	f24a 5352 	movw	r3, #42322	; 0xa552
 8002766:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800276a:	429a      	cmp	r2, r3
 800276c:	d19c      	bne.n	80026a8 <prvReadUsart+0xc>
 800276e:	23c8      	movs	r3, #200	; 0xc8
 8002770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002774:	f88d 3005 	strb.w	r3, [sp, #5]
 8002778:	6820      	ldr	r0, [r4, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	f10d 0105 	add.w	r1, sp, #5
 8002780:	f7fe fc96 	bl	80010b0 <xQueueGenericSend>
 8002784:	e790      	b.n	80026a8 <prvReadUsart+0xc>
 8002786:	bf00      	nop
 8002788:	20003440 	.word	0x20003440
 800278c:	20003438 	.word	0x20003438

08002790 <prvControlador>:
	Num_ticks ticks_old, ticks_new; ticks_new.esq=0; ticks_new.dir=0;
 8002790:	2300      	movs	r3, #0
{
 8002792:	b580      	push	{r7, lr}
		sprintf(buf,"%d\n",delta_ticks.esq);
 8002794:	4d12      	ldr	r5, [pc, #72]	; (80027e0 <prvControlador+0x50>)
{
 8002796:	b08a      	sub	sp, #40	; 0x28
		xQueueReceive(xQueueTicks,(void*)&ticks_new,(TickType_t)portMAX_DELAY); /*Receive ticks from encoders*/
 8002798:	4f12      	ldr	r7, [pc, #72]	; (80027e4 <prvControlador+0x54>)
		xQueueSendToBack(xQueueMessageOut,&buf,(TickType_t)2);
 800279a:	4c13      	ldr	r4, [pc, #76]	; (80027e8 <prvControlador+0x58>)
	Num_ticks ticks_old, ticks_new; ticks_new.esq=0; ticks_new.dir=0;
 800279c:	9301      	str	r3, [sp, #4]
	uint8_t command=0;
 800279e:	f88d 3003 	strb.w	r3, [sp, #3]
		xQueueReceive(xQueueTicks,(void*)&ticks_new,(TickType_t)portMAX_DELAY); /*Receive ticks from encoders*/
 80027a2:	a901      	add	r1, sp, #4
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a8:	6838      	ldr	r0, [r7, #0]
		ticks_old = ticks_new; /* safe previous ticks*/
 80027aa:	f8bd 6004 	ldrh.w	r6, [sp, #4]
		xQueueReceive(xQueueTicks,(void*)&ticks_new,(TickType_t)portMAX_DELAY); /*Receive ticks from encoders*/
 80027ae:	f7fe fd37 	bl	8001220 <xQueueReceive>
		delta_ticks.esq = ticks_new.esq - ticks_old.esq;
 80027b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
		sprintf(buf,"%d\n",delta_ticks.esq);
 80027b6:	4629      	mov	r1, r5
		delta_ticks.esq = ticks_new.esq - ticks_old.esq;
 80027b8:	1b92      	subs	r2, r2, r6
		sprintf(buf,"%d\n",delta_ticks.esq);
 80027ba:	b212      	sxth	r2, r2
 80027bc:	a802      	add	r0, sp, #8
 80027be:	f001 f9e3 	bl	8003b88 <siprintf>
		xQueueSendToBack(xQueueMessageOut,&buf,(TickType_t)2);
 80027c2:	a902      	add	r1, sp, #8
 80027c4:	2300      	movs	r3, #0
 80027c6:	2202      	movs	r2, #2
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	f7fe fc71 	bl	80010b0 <xQueueGenericSend>
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)2)== pdPASS ){
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <prvControlador+0x5c>)
 80027d0:	2202      	movs	r2, #2
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	f10d 0103 	add.w	r1, sp, #3
 80027d8:	f7fe fd22 	bl	8001220 <xQueueReceive>
 80027dc:	e7e1      	b.n	80027a2 <prvControlador+0x12>
 80027de:	bf00      	nop
 80027e0:	080076c7 	.word	0x080076c7
 80027e4:	20003414 	.word	0x20003414
 80027e8:	20003454 	.word	0x20003454
 80027ec:	20003438 	.word	0x20003438

080027f0 <prvMotorDrive>:
static void prvMotorDrive(void *pvParameters){
 80027f0:	b530      	push	{r4, r5, lr}
		sprintf(buf,"ESQ:%d Dir:%d\n", teste,teste);//pwm.esq,pwm.dir);
 80027f2:	4d0e      	ldr	r5, [pc, #56]	; (800282c <prvMotorDrive+0x3c>)
		TIM_SetCompare2(TIM3,teste);//pwm.dir);
 80027f4:	4c0e      	ldr	r4, [pc, #56]	; (8002830 <prvMotorDrive+0x40>)
static void prvMotorDrive(void *pvParameters){
 80027f6:	b089      	sub	sp, #36	; 0x24
		sprintf(buf,"ESQ:%d Dir:%d\n", teste,teste);//pwm.esq,pwm.dir);
 80027f8:	2364      	movs	r3, #100	; 0x64
 80027fa:	4629      	mov	r1, r5
 80027fc:	461a      	mov	r2, r3
 80027fe:	4668      	mov	r0, sp
 8002800:	f001 f9c2 	bl	8003b88 <siprintf>
		xQueueSendToBack(xQueueMessageOut,&buf,(TickType_t)2);
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <prvMotorDrive+0x44>)
 8002806:	2300      	movs	r3, #0
 8002808:	2202      	movs	r2, #2
 800280a:	4669      	mov	r1, sp
 800280c:	6800      	ldr	r0, [r0, #0]
 800280e:	f7fe fc4f 	bl	80010b0 <xQueueGenericSend>
		TIM_SetCompare2(TIM3,teste);//pwm.dir);
 8002812:	4620      	mov	r0, r4
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	f7ff fdbb 	bl	8002390 <TIM_SetCompare2>
		TIM_SetCompare1(TIM3,teste);//pwm.esq);
 800281a:	4620      	mov	r0, r4
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	f7ff fdb5 	bl	800238c <TIM_SetCompare1>
		vTaskDelay( ( TickType_t ) 100 / portTICK_PERIOD_MS  );
 8002822:	2064      	movs	r0, #100	; 0x64
 8002824:	f7ff f804 	bl	8001830 <vTaskDelay>
	for(;;){
 8002828:	e7e6      	b.n	80027f8 <prvMotorDrive+0x8>
 800282a:	bf00      	nop
 800282c:	080076bc 	.word	0x080076bc
 8002830:	40000400 	.word	0x40000400
 8002834:	20003454 	.word	0x20003454

08002838 <prvReadEncoders>:
		ticks.esq =TIM2->CNT;
 8002838:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
 800283c:	b507      	push	{r0, r1, r2, lr}
		ticks.esq =TIM4->CNT;
 800283e:	4e08      	ldr	r6, [pc, #32]	; (8002860 <prvReadEncoders+0x28>)
		xQueueSendToBack(xQueueTicks,(void*)&ticks,(TickType_t)portMAX_DELAY);
 8002840:	4c08      	ldr	r4, [pc, #32]	; (8002864 <prvReadEncoders+0x2c>)
		ticks.esq =TIM4->CNT;
 8002842:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
		ticks.esq =TIM2->CNT;
 8002844:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		xQueueSendToBack(xQueueTicks,(void*)&ticks,(TickType_t)portMAX_DELAY);
 8002846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		ticks.esq =TIM2->CNT;
 800284a:	f8ad 3004 	strh.w	r3, [sp, #4]
		xQueueSendToBack(xQueueTicks,(void*)&ticks,(TickType_t)portMAX_DELAY);
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	2300      	movs	r3, #0
 8002852:	a901      	add	r1, sp, #4
 8002854:	f7fe fc2c 	bl	80010b0 <xQueueGenericSend>
		vTaskDelay( ( TickType_t ) 50 / portTICK_PERIOD_MS  );
 8002858:	2032      	movs	r0, #50	; 0x32
 800285a:	f7fe ffe9 	bl	8001830 <vTaskDelay>
	for(;;)
 800285e:	e7f0      	b.n	8002842 <prvReadEncoders+0xa>
 8002860:	40000800 	.word	0x40000800
 8002864:	20003414 	.word	0x20003414

08002868 <main>:
{
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	b08d      	sub	sp, #52	; 0x34
static void prvSetupRCC( void )
{
    /* RCC configuration - 72 MHz */
    ErrorStatus HSEStartUpStatus;

   RCC_DeInit();
 800286c:	f7ff f99a 	bl	8001ba4 <RCC_DeInit>
    /*Enable the HSE*/
    RCC_HSEConfig(RCC_HSE_ON);
 8002870:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002874:	f7ff f9b6 	bl	8001be4 <RCC_HSEConfig>
    /* Wait untill HSE is ready or time out */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002878:	f7ff fa9c 	bl	8001db4 <RCC_WaitForHSEStartUp>
    if(HSEStartUpStatus == SUCCESS)
 800287c:	2801      	cmp	r0, #1
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800287e:	4604      	mov	r4, r0
    if(HSEStartUpStatus == SUCCESS)
 8002880:	f040 81aa 	bne.w	8002bd8 <main+0x370>
    {
        /* Enable The Prefetch Buffer */
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8002884:	2010      	movs	r0, #16
 8002886:	f7ff f931 	bl	8001aec <FLASH_PrefetchBufferCmd>
        /* 72 MHZ - 2 wait states */
        FLASH_SetLatency(FLASH_Latency_2);
 800288a:	2002      	movs	r0, #2
 800288c:	f7ff f924 	bl	8001ad8 <FLASH_SetLatency>

        /* No division HCLK = SYSCLK */
        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002890:	2000      	movs	r0, #0
 8002892:	f7ff f9e5 	bl	8001c60 <RCC_HCLKConfig>
        /* PCLK1 = HCLK/2 (36MHz) */
        RCC_PCLK1Config(RCC_HCLK_Div2);
 8002896:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800289a:	f7ff f9eb 	bl	8001c74 <RCC_PCLK1Config>
        /* PCLK2 = HCLK (72MHz)*/
        RCC_PCLK2Config(RCC_HCLK_Div1);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7ff f9f2 	bl	8001c88 <RCC_PCLK2Config>

        /* Use PLL with HSE=12MHz */
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
 80028a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80028a8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80028ac:	f7ff f9b6 	bl	8001c1c <RCC_PLLConfig>
        /* Enable the PLL */
        RCC_PLLCmd(ENABLE);
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff f9bd 	bl	8001c30 <RCC_PLLCmd>
        /* Wait for PLL ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET );
 80028b6:	2039      	movs	r0, #57	; 0x39
 80028b8:	f7ff fa68 	bl	8001d8c <RCC_GetFlagStatus>
 80028bc:	2800      	cmp	r0, #0
 80028be:	d0fa      	beq.n	80028b6 <main+0x4e>

        /* Select the PLL as system clock source */
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7ff f9bb 	bl	8001c3c <RCC_SYSCLKConfig>
        /* Wait until PLL is used as system clock */
        while( RCC_GetSYSCLKSource() != 0x08 );
 80028c6:	f7ff f9c3 	bl	8001c50 <RCC_GetSYSCLKSource>
 80028ca:	2808      	cmp	r0, #8
 80028cc:	4604      	mov	r4, r0
 80028ce:	d1fa      	bne.n	80028c6 <main+0x5e>
{

    GPIO_InitTypeDef GPIO_InitStructure;

    // GPIO Encoder (B)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );
 80028d0:	2101      	movs	r1, #1
 80028d2:	2004      	movs	r0, #4
 80028d4:	f7ff fa2a 	bl	8001d2c <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 80028d8:	4bc0      	ldr	r3, [pc, #768]	; (8002bdc <main+0x374>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028da:	48c1      	ldr	r0, [pc, #772]	; (8002be0 <main+0x378>)
 80028dc:	a908      	add	r1, sp, #32
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 80028de:	9308      	str	r3, [sp, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028e0:	f7ff f910 	bl	8001b04 <GPIO_Init>

	// Pinos Motor (A) IN1A | IN2A
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 80028e4:	4bbf      	ldr	r3, [pc, #764]	; (8002be4 <main+0x37c>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028e6:	48be      	ldr	r0, [pc, #760]	; (8002be0 <main+0x378>)
 80028e8:	a908      	add	r1, sp, #32

	// Configuração TIM4 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_DeInit(TIM4);

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 80028ea:	f44f 4575 	mov.w	r5, #62720	; 0xf500
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 80028ee:	9308      	str	r3, [sp, #32]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028f0:	f7ff f908 	bl	8001b04 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
 80028f4:	4620      	mov	r0, r4
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 80028f6:	2400      	movs	r4, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
 80028f8:	2101      	movs	r1, #1
 80028fa:	f7ff fa17 	bl	8001d2c <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80028fe:	4bba      	ldr	r3, [pc, #744]	; (8002be8 <main+0x380>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002900:	48ba      	ldr	r0, [pc, #744]	; (8002bec <main+0x384>)
 8002902:	a908      	add	r1, sp, #32
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8002904:	9308      	str	r3, [sp, #32]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002906:	f7ff f8fd 	bl	8001b04 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 800290a:	4bb9      	ldr	r3, [pc, #740]	; (8002bf0 <main+0x388>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800290c:	48b7      	ldr	r0, [pc, #732]	; (8002bec <main+0x384>)
 800290e:	a908      	add	r1, sp, #32
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 8002910:	9308      	str	r3, [sp, #32]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002912:	f7ff f8f7 	bl	8001b04 <GPIO_Init>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002916:	2101      	movs	r1, #1
 8002918:	2004      	movs	r0, #4
 800291a:	f7ff fa13 	bl	8001d44 <RCC_APB1PeriphClockCmd>
    TIM_DeInit(TIM4);
 800291e:	48b5      	ldr	r0, [pc, #724]	; (8002bf4 <main+0x38c>)
 8002920:	f7ff fad2 	bl	8001ec8 <TIM_DeInit>
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8002924:	48b3      	ldr	r0, [pc, #716]	; (8002bf4 <main+0x38c>)
 8002926:	a902      	add	r1, sp, #8
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8002928:	e9cd 4502 	strd	r4, r5, [sp, #8]
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800292c:	f7ff fbb0 	bl	8002090 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8002930:	4623      	mov	r3, r4
 8002932:	4622      	mov	r2, r4
 8002934:	2103      	movs	r1, #3
 8002936:	48af      	ldr	r0, [pc, #700]	; (8002bf4 <main+0x38c>)
 8002938:	f7ff fd07 	bl	800234a <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 800293c:	a805      	add	r0, sp, #20
 800293e:	f7ff fce7 	bl	8002310 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 8002942:	48ac      	ldr	r0, [pc, #688]	; (8002bf4 <main+0x38c>)
 8002944:	a905      	add	r1, sp, #20
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 8002946:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 800294a:	f7ff fd53 	bl	80023f4 <TIM_ICInit>
	TIM_SetCounter(TIM4, CNT1_INIT);      /*CNT Set initial value */
 800294e:	4621      	mov	r1, r4
 8002950:	48a8      	ldr	r0, [pc, #672]	; (8002bf4 <main+0x38c>)
 8002952:	f7ff fd19 	bl	8002388 <TIM_SetCounter>
	TIM_ClearFlag(TIM4,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 8002956:	2101      	movs	r1, #1
 8002958:	48a6      	ldr	r0, [pc, #664]	; (8002bf4 <main+0x38c>)
 800295a:	f7ff fddf 	bl	800251c <TIM_ClearFlag>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE); /* Interrupt enable */
 800295e:	2201      	movs	r2, #1
 8002960:	48a4      	ldr	r0, [pc, #656]	; (8002bf4 <main+0x38c>)
 8002962:	4611      	mov	r1, r2
 8002964:	f7ff fce8 	bl	8002338 <TIM_ITConfig>
	TIM_Cmd(TIM4,ENABLE);                /* Can make CR register */
 8002968:	2101      	movs	r1, #1
 800296a:	48a2      	ldr	r0, [pc, #648]	; (8002bf4 <main+0x38c>)
 800296c:	f7ff fcd8 	bl	8002320 <TIM_Cmd>

	// Configuração TIM2 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002970:	2101      	movs	r1, #1
 8002972:	4608      	mov	r0, r1
 8002974:	f7ff f9e6 	bl	8001d44 <RCC_APB1PeriphClockCmd>
	TIM_DeInit(TIM2);
 8002978:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800297c:	f7ff faa4 	bl	8001ec8 <TIM_DeInit>

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002980:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002984:	a902      	add	r1, sp, #8
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8002986:	e9cd 4502 	strd	r4, r5, [sp, #8]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800298a:	f7ff fb81 	bl	8002090 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 800298e:	4623      	mov	r3, r4
 8002990:	4622      	mov	r2, r4
 8002992:	2103      	movs	r1, #3
 8002994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002998:	f7ff fcd7 	bl	800234a <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 800299c:	a805      	add	r0, sp, #20
 800299e:	f7ff fcb7 	bl	8002310 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 80029a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029a6:	a905      	add	r1, sp, #20
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 80029a8:	f8ad 401c 	strh.w	r4, [sp, #28]
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 80029ac:	f7ff fd22 	bl	80023f4 <TIM_ICInit>
	TIM_SetCounter(TIM2, CNT2_INIT);      /*CNT Set initial value */
 80029b0:	4621      	mov	r1, r4
 80029b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029b6:	f7ff fce7 	bl	8002388 <TIM_SetCounter>
	TIM_ClearFlag(TIM2,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 80029ba:	2101      	movs	r1, #1
 80029bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029c0:	f7ff fdac 	bl	800251c <TIM_ClearFlag>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); /* Interrupt enable */
 80029c4:	2201      	movs	r2, #1
 80029c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029ca:	4611      	mov	r1, r2
 80029cc:	f7ff fcb4 	bl	8002338 <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);                /* Can make CR register */
 80029d0:	2101      	movs	r1, #1
 80029d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029d6:	f7ff fca3 	bl	8002320 <TIM_Cmd>

	// Configuração TIM3 PWM Motores
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80029da:	2101      	movs	r1, #1
 80029dc:	2002      	movs	r0, #2
 80029de:	f7ff f9b1 	bl	8001d44 <RCC_APB1PeriphClockCmd>
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_DeInit(TIM3);
 80029e2:	4885      	ldr	r0, [pc, #532]	; (8002bf8 <main+0x390>)
 80029e4:	f7ff fa70 	bl	8001ec8 <TIM_DeInit>

	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80029e8:	2364      	movs	r3, #100	; 0x64

	// IN1B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80029ea:	2702      	movs	r7, #2
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80029ec:	4a83      	ldr	r2, [pc, #524]	; (8002bfc <main+0x394>)
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 80029ee:	4d84      	ldr	r5, [pc, #528]	; (8002c00 <main+0x398>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80029f0:	4881      	ldr	r0, [pc, #516]	; (8002bf8 <main+0x390>)
 80029f2:	a902      	add	r1, sp, #8
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80029f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80029f8:	4e82      	ldr	r6, [pc, #520]	; (8002c04 <main+0x39c>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80029fa:	f7ff fb49 	bl	8002090 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 80029fe:	882b      	ldrh	r3, [r5, #0]
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002a00:	487d      	ldr	r0, [pc, #500]	; (8002bf8 <main+0x390>)
 8002a02:	a908      	add	r1, sp, #32
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 8002a04:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002a08:	9608      	str	r6, [sp, #32]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002a0a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a0e:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002a12:	f7ff fb87 	bl	8002124 <TIM_OC1Init>
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 8002a16:	886b      	ldrh	r3, [r5, #2]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 8002a18:	4877      	ldr	r0, [pc, #476]	; (8002bf8 <main+0x390>)
 8002a1a:	a908      	add	r1, sp, #32
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 8002a1c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002a20:	9608      	str	r6, [sp, #32]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002a22:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a26:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 8002a2a:	f7ff fbbf 	bl	80021ac <TIM_OC2Init>
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 8002a2e:	88ab      	ldrh	r3, [r5, #4]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8002a30:	4871      	ldr	r0, [pc, #452]	; (8002bf8 <main+0x390>)
 8002a32:	a908      	add	r1, sp, #32
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 8002a34:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002a38:	9608      	str	r6, [sp, #32]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002a3a:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a3e:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8002a42:	f7ff fbf3 	bl	800222c <TIM_OC3Init>

	// IN2B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 8002a46:	88eb      	ldrh	r3, [r5, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8002a48:	486b      	ldr	r0, [pc, #428]	; (8002bf8 <main+0x390>)
 8002a4a:	a908      	add	r1, sp, #32
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 8002a4c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002a50:	9608      	str	r6, [sp, #32]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002a52:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002a56:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8002a5a:	f7ff fc25 	bl	80022a8 <TIM_OC4Init>
	TIM_Cmd(TIM3, ENABLE);
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4865      	ldr	r0, [pc, #404]	; (8002bf8 <main+0x390>)
 8002a62:	f7ff fc5d 	bl	8002320 <TIM_Cmd>
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled */

    /* Enable GPIOA clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 8002a66:	2101      	movs	r1, #1
 8002a68:	2004      	movs	r0, #4
 8002a6a:	f7ff f95f 	bl	8001d2c <RCC_APB2PeriphClockCmd>

    /* USART Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002a6e:	2101      	movs	r1, #1
 8002a70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a74:	f7ff f966 	bl	8001d44 <RCC_APB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 8002a78:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <main+0x3a0>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a7a:	4859      	ldr	r0, [pc, #356]	; (8002be0 <main+0x378>)
 8002a7c:	a905      	add	r1, sp, #20
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 8002a7e:	9305      	str	r3, [sp, #20]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a80:	f7ff f840 	bl	8001b04 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <main+0x3a4>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a86:	4856      	ldr	r0, [pc, #344]	; (8002be0 <main+0x378>)
 8002a88:	a905      	add	r1, sp, #20
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8002a8a:	9305      	str	r3, [sp, #20]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a8c:	f7ff f83a 	bl	8001b04 <GPIO_Init>

    USART_InitStructure.USART_BaudRate = 115200;
 8002a90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002a94:	e9cd 3408 	strd	r3, r4, [sp, #32]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8002a98:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;

    /* Configure the USART2 */
    USART_Init(USART2, &USART_InitStructure);
 8002a9c:	485c      	ldr	r0, [pc, #368]	; (8002c10 <main+0x3a8>)
 8002a9e:	a908      	add	r1, sp, #32
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8002aa0:	930a      	str	r3, [sp, #40]	; 0x28
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002aa2:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
    USART_Init(USART2, &USART_InitStructure);
 8002aa6:	f7ff fd41 	bl	800252c <USART_Init>
    /* Enable the USART2 */
    USART_Cmd(USART2, ENABLE);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4858      	ldr	r0, [pc, #352]	; (8002c10 <main+0x3a8>)
 8002aae:	f7ff fd91 	bl	80025d4 <USART_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8002ab2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002ab6:	f7fe ffd9 	bl	8001a6c <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002aba:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <main+0x3ac>)
	NVIC_Init(&NVIC_InitStructure);
 8002abc:	a808      	add	r0, sp, #32
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002abe:	9308      	str	r3, [sp, #32]
	NVIC_Init(&NVIC_InitStructure);
 8002ac0:	f7fe ffde 	bl	8001a80 <NVIC_Init>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002aca:	4611      	mov	r1, r2
 8002acc:	f7ff fc34 	bl	8002338 <TIM_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8002ad0:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <main+0x3b0>)
	NVIC_Init(&NVIC_InitStructure);
 8002ad2:	a808      	add	r0, sp, #32
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8002ad4:	9308      	str	r3, [sp, #32]
	NVIC_Init(&NVIC_InitStructure);
 8002ad6:	f7fe ffd3 	bl	8001a80 <NVIC_Init>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8002ada:	2201      	movs	r2, #1
 8002adc:	4845      	ldr	r0, [pc, #276]	; (8002bf4 <main+0x38c>)
 8002ade:	4611      	mov	r1, r2
 8002ae0:	f7ff fc2a 	bl	8002338 <TIM_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8002ae4:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <main+0x3b4>)
	NVIC_Init(&NVIC_InitStructure);
 8002ae6:	a808      	add	r0, sp, #32
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8002ae8:	9308      	str	r3, [sp, #32]
	NVIC_Init(&NVIC_InitStructure);
 8002aea:	f7fe ffc9 	bl	8001a80 <NVIC_Init>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8002aee:	2201      	movs	r2, #1
 8002af0:	4841      	ldr	r0, [pc, #260]	; (8002bf8 <main+0x390>)
 8002af2:	4611      	mov	r1, r2
 8002af4:	f7ff fc20 	bl	8002338 <TIM_ITConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002af8:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <main+0x3b8>)
	NVIC_Init(&NVIC_InitStructure);
 8002afa:	a808      	add	r0, sp, #32
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002afc:	9308      	str	r3, [sp, #32]
	NVIC_Init(&NVIC_InitStructure);
 8002afe:	f7fe ffbf 	bl	8001a80 <NVIC_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002b02:	2201      	movs	r2, #1
 8002b04:	f240 5125 	movw	r1, #1317	; 0x525
 8002b08:	4841      	ldr	r0, [pc, #260]	; (8002c10 <main+0x3a8>)
 8002b0a:	f7ff fd6f 	bl	80025ec <USART_ITConfig>
	xQueueTicks = xQueueCreate( 5, sizeof( Num_ticks ) ); /* Queue to send Encoder's ticks */
 8002b0e:	4622      	mov	r2, r4
 8002b10:	2104      	movs	r1, #4
 8002b12:	2005      	movs	r0, #5
 8002b14:	f7fe faa6 	bl	8001064 <xQueueGenericCreate>
 8002b18:	4d42      	ldr	r5, [pc, #264]	; (8002c24 <main+0x3bc>)
 8002b1a:	6028      	str	r0, [r5, #0]
	if( xQueueTicks == NULL )
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d058      	beq.n	8002bd2 <main+0x36a>
	xQueueUsart = xQueueCreate( msg_length, sizeof( char ) ); /* Queue to send received character from ISR */
 8002b20:	4622      	mov	r2, r4
 8002b22:	2101      	movs	r1, #1
 8002b24:	201e      	movs	r0, #30
 8002b26:	f7fe fa9d 	bl	8001064 <xQueueGenericCreate>
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <main+0x3c0>)
 8002b2c:	6018      	str	r0, [r3, #0]
	if( xQueueTicks == NULL )
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d04e      	beq.n	8002bd2 <main+0x36a>
	xQueuePWM = xQueueCreate( 2, sizeof( My_PWM ) ); /* Queue to send PWM*/
 8002b34:	4622      	mov	r2, r4
 8002b36:	2103      	movs	r1, #3
 8002b38:	4638      	mov	r0, r7
 8002b3a:	f7fe fa93 	bl	8001064 <xQueueGenericCreate>
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <main+0x3c4>)
 8002b40:	6018      	str	r0, [r3, #0]
	if( xQueueTicks == NULL )
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d044      	beq.n	8002bd2 <main+0x36a>
	xQueueMessageOut = xQueueCreate( 10, msg_length * sizeof( char ) ); /* Queue to send PWM*/
 8002b48:	4622      	mov	r2, r4
 8002b4a:	211e      	movs	r1, #30
 8002b4c:	200a      	movs	r0, #10
 8002b4e:	f7fe fa89 	bl	8001064 <xQueueGenericCreate>
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <main+0x3c8>)
 8002b54:	6018      	str	r0, [r3, #0]
	if( xQueueTicks == NULL )
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03a      	beq.n	8002bd2 <main+0x36a>
	xQueueVelCommand = xQueueCreate( 5, sizeof( uint8_t ) ); /* Queue to send velocity command to controller*/
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2005      	movs	r0, #5
 8002b62:	f7fe fa7f 	bl	8001064 <xQueueGenericCreate>
 8002b66:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <main+0x3cc>)
 8002b68:	6018      	str	r0, [r3, #0]
	if( xQueueTicks == NULL )
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d030      	beq.n	8002bd2 <main+0x36a>
    xTaskCreate(prvReadEncoders, "EncoderReads", configMINIMAL_STACK_SIZE, NULL, mainEncoder_TASK_PRIORITY, &HandleTask1);
 8002b70:	2501      	movs	r5, #1
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <main+0x3d0>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	4931      	ldr	r1, [pc, #196]	; (8002c3c <main+0x3d4>)
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	4831      	ldr	r0, [pc, #196]	; (8002c40 <main+0x3d8>)
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	9500      	str	r5, [sp, #0]
 8002b80:	f7fe fc40 	bl	8001404 <xTaskCreate>
    xTaskCreate(prvControlador, "Controlador", configMINIMAL_STACK_SIZE, NULL, mainEncoder_TASK_PRIORITY,&HandleTask2);
 8002b84:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <main+0x3dc>)
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	e9cd 5300 	strd	r5, r3, [sp]
 8002b8c:	492e      	ldr	r1, [pc, #184]	; (8002c48 <main+0x3e0>)
 8002b8e:	4623      	mov	r3, r4
 8002b90:	482e      	ldr	r0, [pc, #184]	; (8002c4c <main+0x3e4>)
 8002b92:	f7fe fc37 	bl	8001404 <xTaskCreate>
    xTaskCreate(prvReadUsart, "ReadUsart", configMINIMAL_STACK_SIZE+200, NULL, mainDistance_TASK_PRIORITY, &HandleTask3);
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <main+0x3e8>)
 8002b98:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8002b9c:	e9cd 5300 	strd	r5, r3, [sp]
 8002ba0:	492c      	ldr	r1, [pc, #176]	; (8002c54 <main+0x3ec>)
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	482c      	ldr	r0, [pc, #176]	; (8002c58 <main+0x3f0>)
 8002ba6:	f7fe fc2d 	bl	8001404 <xTaskCreate>
	xTaskCreate(prvMotorDrive, "MotorDrive", configMINIMAL_STACK_SIZE, NULL, mainDistance_TASK_PRIORITY, &HandleTask4);
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <main+0x3f4>)
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	e9cd 5300 	strd	r5, r3, [sp]
 8002bb2:	492b      	ldr	r1, [pc, #172]	; (8002c60 <main+0x3f8>)
 8002bb4:	4623      	mov	r3, r4
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <main+0x3fc>)
 8002bb8:	f7fe fc24 	bl	8001404 <xTaskCreate>
	xTaskCreate(prvSendMessage, "SendUsart", configMINIMAL_STACK_SIZE, NULL, mainDistance_TASK_PRIORITY, &HandleTask5);
 8002bbc:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <main+0x400>)
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	e9cd 5300 	strd	r5, r3, [sp]
 8002bc4:	4929      	ldr	r1, [pc, #164]	; (8002c6c <main+0x404>)
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	4829      	ldr	r0, [pc, #164]	; (8002c70 <main+0x408>)
 8002bca:	f7fe fc1b 	bl	8001404 <xTaskCreate>
	vTaskStartScheduler();
 8002bce:	f7fe fce3 	bl	8001598 <vTaskStartScheduler>
}
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	b00d      	add	sp, #52	; 0x34
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(1);
 8002bd8:	e7fe      	b.n	8002bd8 <main+0x370>
 8002bda:	bf00      	nop
 8002bdc:	04030003 	.word	0x04030003
 8002be0:	40010800 	.word	0x40010800
 8002be4:	180300c0 	.word	0x180300c0
 8002be8:	040300c0 	.word	0x040300c0
 8002bec:	40010c00 	.word	0x40010c00
 8002bf0:	18030003 	.word	0x18030003
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	001002c7 	.word	0x001002c7
 8002c00:	200033f4 	.word	0x200033f4
 8002c04:	00010060 	.word	0x00010060
 8002c08:	18030004 	.word	0x18030004
 8002c0c:	04030008 	.word	0x04030008
 8002c10:	40004400 	.word	0x40004400
 8002c14:	0100001c 	.word	0x0100001c
 8002c18:	0100001e 	.word	0x0100001e
 8002c1c:	0100001d 	.word	0x0100001d
 8002c20:	01000026 	.word	0x01000026
 8002c24:	20003414 	.word	0x20003414
 8002c28:	20003440 	.word	0x20003440
 8002c2c:	20003434 	.word	0x20003434
 8002c30:	20003454 	.word	0x20003454
 8002c34:	20003438 	.word	0x20003438
 8002c38:	2000344c 	.word	0x2000344c
 8002c3c:	080076cb 	.word	0x080076cb
 8002c40:	08002839 	.word	0x08002839
 8002c44:	20003410 	.word	0x20003410
 8002c48:	080076d8 	.word	0x080076d8
 8002c4c:	08002791 	.word	0x08002791
 8002c50:	20003418 	.word	0x20003418
 8002c54:	080076e4 	.word	0x080076e4
 8002c58:	0800269d 	.word	0x0800269d
 8002c5c:	20003450 	.word	0x20003450
 8002c60:	080076ee 	.word	0x080076ee
 8002c64:	080027f1 	.word	0x080027f1
 8002c68:	20003448 	.word	0x20003448
 8002c6c:	080076f9 	.word	0x080076f9
 8002c70:	0800267d 	.word	0x0800267d

08002c74 <WWDG_IRQHandler>:
 8002c74:	4770      	bx	lr

08002c76 <PVD_IRQHandler>:
 8002c76:	4770      	bx	lr

08002c78 <TAMPER_IRQHandler>:
 8002c78:	4770      	bx	lr

08002c7a <RTC_IRQHandler>:
 8002c7a:	4770      	bx	lr

08002c7c <FLASH_IRQHandler>:
 8002c7c:	4770      	bx	lr

08002c7e <RCC_IRQHandler>:
 8002c7e:	4770      	bx	lr

08002c80 <EXTI0_IRQHandler>:
 8002c80:	4770      	bx	lr

08002c82 <EXTI1_IRQHandler>:
 8002c82:	4770      	bx	lr

08002c84 <EXTI2_IRQHandler>:
 8002c84:	4770      	bx	lr

08002c86 <EXTI3_IRQHandler>:
 8002c86:	4770      	bx	lr

08002c88 <EXTI4_IRQHandler>:
 8002c88:	4770      	bx	lr

08002c8a <DMA1_Channel1_IRQHandler>:
 8002c8a:	4770      	bx	lr

08002c8c <DMA1_Channel2_IRQHandler>:
 8002c8c:	4770      	bx	lr

08002c8e <DMA1_Channel3_IRQHandler>:
 8002c8e:	4770      	bx	lr

08002c90 <DMA1_Channel4_IRQHandler>:
 8002c90:	4770      	bx	lr

08002c92 <DMA1_Channel5_IRQHandler>:
 8002c92:	4770      	bx	lr

08002c94 <DMA1_Channel6_IRQHandler>:
 8002c94:	4770      	bx	lr

08002c96 <DMA1_Channel7_IRQHandler>:
 8002c96:	4770      	bx	lr

08002c98 <ADC1_2_IRQHandler>:
 8002c98:	4770      	bx	lr

08002c9a <EXTI9_5_IRQHandler>:
 8002c9a:	4770      	bx	lr

08002c9c <TIM1_BRK_IRQHandler>:
 8002c9c:	4770      	bx	lr

08002c9e <TIM1_UP_IRQHandler>:
 8002c9e:	4770      	bx	lr

08002ca0 <TIM1_TRG_COM_IRQHandler>:
 8002ca0:	4770      	bx	lr

08002ca2 <TIM1_CC_IRQHandler>:
 8002ca2:	4770      	bx	lr

08002ca4 <TIM2_IRQHandler>:
*******************************************************************************/

extern int overflowB;
void TIM2_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002caa:	f7ff bc3b 	b.w	8002524 <TIM_ClearITPendingBit>
	...

08002cb0 <TIM3_IRQHandler>:
* Return         : None
*******************************************************************************/
extern long int contRPM;
void TIM3_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <TIM3_IRQHandler+0x8>)
 8002cb4:	f7ff bc36 	b.w	8002524 <TIM_ClearITPendingBit>
 8002cb8:	40000400 	.word	0x40000400

08002cbc <TIM4_IRQHandler>:
* Return         : None
*******************************************************************************/
extern int overflowA;
void TIM4_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <TIM4_IRQHandler+0x8>)
 8002cc0:	f7ff bc30 	b.w	8002524 <TIM_ClearITPendingBit>
 8002cc4:	40000800 	.word	0x40000800

08002cc8 <I2C1_EV_IRQHandler>:
 8002cc8:	4770      	bx	lr

08002cca <I2C1_ER_IRQHandler>:
 8002cca:	4770      	bx	lr

08002ccc <I2C2_EV_IRQHandler>:
 8002ccc:	4770      	bx	lr

08002cce <I2C2_ER_IRQHandler>:
 8002cce:	4770      	bx	lr

08002cd0 <SPI1_IRQHandler>:
 8002cd0:	4770      	bx	lr

08002cd2 <SPI2_IRQHandler>:
 8002cd2:	4770      	bx	lr

08002cd4 <USART1_IRQHandler>:
 8002cd4:	4770      	bx	lr
	...

08002cd8 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void USART2_IRQHandler(void)
{
 8002cd8:	b513      	push	{r0, r1, r4, lr}
	static BaseType_t pxHigherPriorityTaskWoken;
	char ulVar;

	ulVar = USART_ReceiveData(USART2);
 8002cda:	4810      	ldr	r0, [pc, #64]	; (8002d1c <USART2_IRQHandler+0x44>)
 8002cdc:	f7ff fca2 	bl	8002624 <USART_ReceiveData>
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 8002ce0:	4c0f      	ldr	r4, [pc, #60]	; (8002d20 <USART2_IRQHandler+0x48>)
	ulVar = USART_ReceiveData(USART2);
 8002ce2:	f88d 0007 	strb.w	r0, [sp, #7]
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 8002ce6:	480f      	ldr	r0, [pc, #60]	; (8002d24 <USART2_IRQHandler+0x4c>)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4622      	mov	r2, r4
 8002cec:	6800      	ldr	r0, [r0, #0]
 8002cee:	f10d 0107 	add.w	r1, sp, #7
 8002cf2:	f7fe fa5f 	bl	80011b4 <xQueueGenericSendFromISR>


	if( pxHigherPriorityTaskWoken == pdTRUE )
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <USART2_IRQHandler+0x34>
	{
		taskYIELD();
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <USART2_IRQHandler+0x50>)
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	f3bf 8f6f 	isb	sy
	}

	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002d0c:	f240 5125 	movw	r1, #1317	; 0x525
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <USART2_IRQHandler+0x44>)
 8002d12:	f7ff fc91 	bl	8002638 <USART_ClearITPendingBit>
}
 8002d16:	b002      	add	sp, #8
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	200033fc 	.word	0x200033fc
 8002d24:	20003440 	.word	0x20003440
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <USART3_IRQHandler>:
 8002d2c:	4770      	bx	lr

08002d2e <EXTI15_10_IRQHandler>:
 8002d2e:	4770      	bx	lr

08002d30 <RTCAlarm_IRQHandler>:
 8002d30:	4770      	bx	lr

08002d32 <USBWakeUp_IRQHandler>:
 8002d32:	4770      	bx	lr

08002d34 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002d34:	2001      	movs	r0, #1
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002d3a:	f000 f86f 	bl	8002e1c <__errno>
 8002d3e:	2316      	movs	r3, #22
 8002d40:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d46:	bd08      	pop	{r3, pc}

08002d48 <_exit>:

void _exit (int status)
{
 8002d48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002d4a:	f000 f867 	bl	8002e1c <__errno>
 8002d4e:	2316      	movs	r3, #22
 8002d50:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002d52:	e7fe      	b.n	8002d52 <_exit+0xa>

08002d54 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	460e      	mov	r6, r1
 8002d58:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	2500      	movs	r5, #0
 8002d5c:	42a5      	cmp	r5, r4
 8002d5e:	db01      	blt.n	8002d64 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002d60:	4620      	mov	r0, r4
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002d64:	f3af 8000 	nop.w
 8002d68:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	e7f6      	b.n	8002d5c <_read+0x8>

08002d6e <_write>:

int _write(int file, char *ptr, int len)
{
 8002d6e:	b570      	push	{r4, r5, r6, lr}
 8002d70:	460e      	mov	r6, r1
 8002d72:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2500      	movs	r5, #0
 8002d76:	42a5      	cmp	r5, r4
 8002d78:	db01      	blt.n	8002d7e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002d7e:	5d70      	ldrb	r0, [r6, r5]
 8002d80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d84:	3501      	adds	r5, #1
 8002d86:	e7f6      	b.n	8002d76 <_write+0x8>

08002d88 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002d88:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <_sbrk+0x2c>)
{
 8002d8c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	b909      	cbnz	r1, 8002d96 <_sbrk+0xe>
		heap_end = &end;
 8002d92:	4909      	ldr	r1, [pc, #36]	; (8002db8 <_sbrk+0x30>)
 8002d94:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002d96:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002d98:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002d9a:	4402      	add	r2, r0
 8002d9c:	428a      	cmp	r2, r1
 8002d9e:	d906      	bls.n	8002dae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002da0:	f000 f83c 	bl	8002e1c <__errno>
 8002da4:	230c      	movs	r3, #12
 8002da6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002dac:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002dae:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002db0:	e7fc      	b.n	8002dac <_sbrk+0x24>
 8002db2:	bf00      	nop
 8002db4:	20003400 	.word	0x20003400
 8002db8:	20003468 	.word	0x20003468

08002dbc <_close>:

int _close(int file)
{
	return -1;
}
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc0:	4770      	bx	lr

08002dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002dc6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002dc8:	604b      	str	r3, [r1, #4]
}
 8002dca:	4770      	bx	lr

08002dcc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4770      	bx	lr

08002dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	4770      	bx	lr

08002dd4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002dd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dd6:	e003      	b.n	8002de0 <LoopCopyDataInit>

08002dd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8002dda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ddc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dde:	3104      	adds	r1, #4

08002de0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002de0:	4809      	ldr	r0, [pc, #36]	; (8002e08 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8002de4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002de6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002de8:	d3f6      	bcc.n	8002dd8 <CopyDataInit>
	ldr	r2, =_sbss
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8002dec:	e002      	b.n	8002df4 <LoopFillZerobss>

08002dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002df0:	f842 3b04 	str.w	r3, [r2], #4

08002df4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8002df6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002df8:	d3f9      	bcc.n	8002dee <FillZerobss>

/* Call the clock system intitialization function.*/
/* 	bl  SystemInit */
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f000 f815 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dfe:	f7ff fd33 	bl	8002868 <main>
	bx	lr
 8002e02:	4770      	bx	lr
	ldr	r3, =_sidata
 8002e04:	08007bc4 	.word	0x08007bc4
	ldr	r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e0c:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8002e10:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002e14:	20003468 	.word	0x20003468

08002e18 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <BusFault_Handler>
	...

08002e1c <__errno>:
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <__errno+0x8>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000020 	.word	0x20000020

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	2600      	movs	r6, #0
 8002e2c:	4d0c      	ldr	r5, [pc, #48]	; (8002e60 <__libc_init_array+0x38>)
 8002e2e:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e30:	1b64      	subs	r4, r4, r5
 8002e32:	10a4      	asrs	r4, r4, #2
 8002e34:	42a6      	cmp	r6, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	f004 fc2a 	bl	8007690 <_init>
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	4d0a      	ldr	r5, [pc, #40]	; (8002e68 <__libc_init_array+0x40>)
 8002e40:	4c0a      	ldr	r4, [pc, #40]	; (8002e6c <__libc_init_array+0x44>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	42a6      	cmp	r6, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e50:	4798      	blx	r3
 8002e52:	3601      	adds	r6, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5a:	4798      	blx	r3
 8002e5c:	3601      	adds	r6, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	08007bbc 	.word	0x08007bbc
 8002e64:	08007bbc 	.word	0x08007bbc
 8002e68:	08007bbc 	.word	0x08007bbc
 8002e6c:	08007bc0 	.word	0x08007bc0

08002e70 <memcpy>:
 8002e70:	440a      	add	r2, r1
 8002e72:	4291      	cmp	r1, r2
 8002e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e78:	d100      	bne.n	8002e7c <memcpy+0xc>
 8002e7a:	4770      	bx	lr
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e82:	4291      	cmp	r1, r2
 8002e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e88:	d1f9      	bne.n	8002e7e <memcpy+0xe>
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <memset>:
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4402      	add	r2, r0
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d100      	bne.n	8002e96 <memset+0xa>
 8002e94:	4770      	bx	lr
 8002e96:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9a:	e7f9      	b.n	8002e90 <memset+0x4>

08002e9c <__cvt>:
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	bfbb      	ittet	lt
 8002ea6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	461f      	movlt	r7, r3
 8002eac:	2300      	movge	r3, #0
 8002eae:	232d      	movlt	r3, #45	; 0x2d
 8002eb0:	b088      	sub	sp, #32
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002eb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002eb8:	7013      	strb	r3, [r2, #0]
 8002eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ebc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002ec0:	f023 0820 	bic.w	r8, r3, #32
 8002ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ec8:	d005      	beq.n	8002ed6 <__cvt+0x3a>
 8002eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ece:	d100      	bne.n	8002ed2 <__cvt+0x36>
 8002ed0:	3501      	adds	r5, #1
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e000      	b.n	8002ed8 <__cvt+0x3c>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	aa07      	add	r2, sp, #28
 8002eda:	9204      	str	r2, [sp, #16]
 8002edc:	aa06      	add	r2, sp, #24
 8002ede:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ee2:	e9cd 3500 	strd	r3, r5, [sp]
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	463b      	mov	r3, r7
 8002eea:	f001 fda1 	bl	8004a30 <_dtoa_r>
 8002eee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	d102      	bne.n	8002efc <__cvt+0x60>
 8002ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ef8:	07db      	lsls	r3, r3, #31
 8002efa:	d522      	bpl.n	8002f42 <__cvt+0xa6>
 8002efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f00:	eb06 0905 	add.w	r9, r6, r5
 8002f04:	d110      	bne.n	8002f28 <__cvt+0x8c>
 8002f06:	7833      	ldrb	r3, [r6, #0]
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d10a      	bne.n	8002f22 <__cvt+0x86>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4620      	mov	r0, r4
 8002f12:	4639      	mov	r1, r7
 8002f14:	f7fd fd48 	bl	80009a8 <__aeabi_dcmpeq>
 8002f18:	b918      	cbnz	r0, 8002f22 <__cvt+0x86>
 8002f1a:	f1c5 0501 	rsb	r5, r5, #1
 8002f1e:	f8ca 5000 	str.w	r5, [sl]
 8002f22:	f8da 3000 	ldr.w	r3, [sl]
 8002f26:	4499      	add	r9, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4639      	mov	r1, r7
 8002f30:	f7fd fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8002f34:	b108      	cbz	r0, 8002f3a <__cvt+0x9e>
 8002f36:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f3a:	2230      	movs	r2, #48	; 0x30
 8002f3c:	9b07      	ldr	r3, [sp, #28]
 8002f3e:	454b      	cmp	r3, r9
 8002f40:	d307      	bcc.n	8002f52 <__cvt+0xb6>
 8002f42:	4630      	mov	r0, r6
 8002f44:	9b07      	ldr	r3, [sp, #28]
 8002f46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f48:	1b9b      	subs	r3, r3, r6
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	b008      	add	sp, #32
 8002f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	9107      	str	r1, [sp, #28]
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e7f0      	b.n	8002f3c <__cvt+0xa0>

08002f5a <__exponent>:
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	f803 2b02 	strb.w	r2, [r3], #2
 8002f64:	bfb6      	itet	lt
 8002f66:	222d      	movlt	r2, #45	; 0x2d
 8002f68:	222b      	movge	r2, #43	; 0x2b
 8002f6a:	4249      	neglt	r1, r1
 8002f6c:	2909      	cmp	r1, #9
 8002f6e:	7042      	strb	r2, [r0, #1]
 8002f70:	dd2b      	ble.n	8002fca <__exponent+0x70>
 8002f72:	f10d 0407 	add.w	r4, sp, #7
 8002f76:	46a4      	mov	ip, r4
 8002f78:	270a      	movs	r7, #10
 8002f7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8002f7e:	460a      	mov	r2, r1
 8002f80:	46a6      	mov	lr, r4
 8002f82:	fb07 1516 	mls	r5, r7, r6, r1
 8002f86:	2a63      	cmp	r2, #99	; 0x63
 8002f88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002f92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002f96:	dcf0      	bgt.n	8002f7a <__exponent+0x20>
 8002f98:	3130      	adds	r1, #48	; 0x30
 8002f9a:	f1ae 0502 	sub.w	r5, lr, #2
 8002f9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	1c44      	adds	r4, r0, #1
 8002fa6:	4561      	cmp	r1, ip
 8002fa8:	d30a      	bcc.n	8002fc0 <__exponent+0x66>
 8002faa:	f10d 0209 	add.w	r2, sp, #9
 8002fae:	eba2 020e 	sub.w	r2, r2, lr
 8002fb2:	4565      	cmp	r5, ip
 8002fb4:	bf88      	it	hi
 8002fb6:	2200      	movhi	r2, #0
 8002fb8:	4413      	add	r3, r2
 8002fba:	1a18      	subs	r0, r3, r0
 8002fbc:	b003      	add	sp, #12
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fc4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002fc8:	e7ed      	b.n	8002fa6 <__exponent+0x4c>
 8002fca:	2330      	movs	r3, #48	; 0x30
 8002fcc:	3130      	adds	r1, #48	; 0x30
 8002fce:	7083      	strb	r3, [r0, #2]
 8002fd0:	70c1      	strb	r1, [r0, #3]
 8002fd2:	1d03      	adds	r3, r0, #4
 8002fd4:	e7f1      	b.n	8002fba <__exponent+0x60>
	...

08002fd8 <_printf_float>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	b091      	sub	sp, #68	; 0x44
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002fe4:	4616      	mov	r6, r2
 8002fe6:	461f      	mov	r7, r3
 8002fe8:	4605      	mov	r5, r0
 8002fea:	f002 fe75 	bl	8005cd8 <_localeconv_r>
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff4:	f7fd f8ac 	bl	8000150 <strlen>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8002ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8003000:	900a      	str	r0, [sp, #40]	; 0x28
 8003002:	3307      	adds	r3, #7
 8003004:	f023 0307 	bic.w	r3, r3, #7
 8003008:	f103 0208 	add.w	r2, r3, #8
 800300c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003010:	f8d4 b000 	ldr.w	fp, [r4]
 8003014:	f8c8 2000 	str.w	r2, [r8]
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003020:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003024:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003028:	930b      	str	r3, [sp, #44]	; 0x2c
 800302a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800302e:	4640      	mov	r0, r8
 8003030:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <_printf_float+0x2cc>)
 8003032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003034:	f7fd fcea 	bl	8000a0c <__aeabi_dcmpun>
 8003038:	bb70      	cbnz	r0, 8003098 <_printf_float+0xc0>
 800303a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800303e:	4640      	mov	r0, r8
 8003040:	4b98      	ldr	r3, [pc, #608]	; (80032a4 <_printf_float+0x2cc>)
 8003042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003044:	f7fd fcc4 	bl	80009d0 <__aeabi_dcmple>
 8003048:	bb30      	cbnz	r0, 8003098 <_printf_float+0xc0>
 800304a:	2200      	movs	r2, #0
 800304c:	2300      	movs	r3, #0
 800304e:	4640      	mov	r0, r8
 8003050:	4651      	mov	r1, sl
 8003052:	f7fd fcb3 	bl	80009bc <__aeabi_dcmplt>
 8003056:	b110      	cbz	r0, 800305e <_printf_float+0x86>
 8003058:	232d      	movs	r3, #45	; 0x2d
 800305a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800305e:	4b92      	ldr	r3, [pc, #584]	; (80032a8 <_printf_float+0x2d0>)
 8003060:	4892      	ldr	r0, [pc, #584]	; (80032ac <_printf_float+0x2d4>)
 8003062:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003066:	bf94      	ite	ls
 8003068:	4698      	movls	r8, r3
 800306a:	4680      	movhi	r8, r0
 800306c:	2303      	movs	r3, #3
 800306e:	f04f 0a00 	mov.w	sl, #0
 8003072:	6123      	str	r3, [r4, #16]
 8003074:	f02b 0304 	bic.w	r3, fp, #4
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	4633      	mov	r3, r6
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	9700      	str	r7, [sp, #0]
 8003082:	aa0f      	add	r2, sp, #60	; 0x3c
 8003084:	f000 f9d4 	bl	8003430 <_printf_common>
 8003088:	3001      	adds	r0, #1
 800308a:	f040 8090 	bne.w	80031ae <_printf_float+0x1d6>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003092:	b011      	add	sp, #68	; 0x44
 8003094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003098:	4642      	mov	r2, r8
 800309a:	4653      	mov	r3, sl
 800309c:	4640      	mov	r0, r8
 800309e:	4651      	mov	r1, sl
 80030a0:	f7fd fcb4 	bl	8000a0c <__aeabi_dcmpun>
 80030a4:	b148      	cbz	r0, 80030ba <_printf_float+0xe2>
 80030a6:	f1ba 0f00 	cmp.w	sl, #0
 80030aa:	bfb8      	it	lt
 80030ac:	232d      	movlt	r3, #45	; 0x2d
 80030ae:	4880      	ldr	r0, [pc, #512]	; (80032b0 <_printf_float+0x2d8>)
 80030b0:	bfb8      	it	lt
 80030b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <_printf_float+0x2dc>)
 80030b8:	e7d3      	b.n	8003062 <_printf_float+0x8a>
 80030ba:	6863      	ldr	r3, [r4, #4]
 80030bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	d142      	bne.n	800314a <_printf_float+0x172>
 80030c4:	2306      	movs	r3, #6
 80030c6:	6063      	str	r3, [r4, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	9206      	str	r2, [sp, #24]
 80030cc:	aa0e      	add	r2, sp, #56	; 0x38
 80030ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80030d2:	aa0d      	add	r2, sp, #52	; 0x34
 80030d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80030d8:	9203      	str	r2, [sp, #12]
 80030da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80030de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	6863      	ldr	r3, [r4, #4]
 80030e6:	4642      	mov	r2, r8
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4628      	mov	r0, r5
 80030ec:	4653      	mov	r3, sl
 80030ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80030f0:	f7ff fed4 	bl	8002e9c <__cvt>
 80030f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030f6:	4680      	mov	r8, r0
 80030f8:	2947      	cmp	r1, #71	; 0x47
 80030fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030fc:	d108      	bne.n	8003110 <_printf_float+0x138>
 80030fe:	1cc8      	adds	r0, r1, #3
 8003100:	db02      	blt.n	8003108 <_printf_float+0x130>
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	4299      	cmp	r1, r3
 8003106:	dd40      	ble.n	800318a <_printf_float+0x1b2>
 8003108:	f1a9 0902 	sub.w	r9, r9, #2
 800310c:	fa5f f989 	uxtb.w	r9, r9
 8003110:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003114:	d81f      	bhi.n	8003156 <_printf_float+0x17e>
 8003116:	464a      	mov	r2, r9
 8003118:	3901      	subs	r1, #1
 800311a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800311e:	910d      	str	r1, [sp, #52]	; 0x34
 8003120:	f7ff ff1b 	bl	8002f5a <__exponent>
 8003124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003126:	4682      	mov	sl, r0
 8003128:	1813      	adds	r3, r2, r0
 800312a:	2a01      	cmp	r2, #1
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	dc02      	bgt.n	8003136 <_printf_float+0x15e>
 8003130:	6822      	ldr	r2, [r4, #0]
 8003132:	07d2      	lsls	r2, r2, #31
 8003134:	d501      	bpl.n	800313a <_printf_float+0x162>
 8003136:	3301      	adds	r3, #1
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800313e:	2b00      	cmp	r3, #0
 8003140:	d09b      	beq.n	800307a <_printf_float+0xa2>
 8003142:	232d      	movs	r3, #45	; 0x2d
 8003144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003148:	e797      	b.n	800307a <_printf_float+0xa2>
 800314a:	2947      	cmp	r1, #71	; 0x47
 800314c:	d1bc      	bne.n	80030c8 <_printf_float+0xf0>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ba      	bne.n	80030c8 <_printf_float+0xf0>
 8003152:	2301      	movs	r3, #1
 8003154:	e7b7      	b.n	80030c6 <_printf_float+0xee>
 8003156:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800315a:	d118      	bne.n	800318e <_printf_float+0x1b6>
 800315c:	2900      	cmp	r1, #0
 800315e:	6863      	ldr	r3, [r4, #4]
 8003160:	dd0b      	ble.n	800317a <_printf_float+0x1a2>
 8003162:	6121      	str	r1, [r4, #16]
 8003164:	b913      	cbnz	r3, 800316c <_printf_float+0x194>
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	07d0      	lsls	r0, r2, #31
 800316a:	d502      	bpl.n	8003172 <_printf_float+0x19a>
 800316c:	3301      	adds	r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	6123      	str	r3, [r4, #16]
 8003172:	f04f 0a00 	mov.w	sl, #0
 8003176:	65a1      	str	r1, [r4, #88]	; 0x58
 8003178:	e7df      	b.n	800313a <_printf_float+0x162>
 800317a:	b913      	cbnz	r3, 8003182 <_printf_float+0x1aa>
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	07d2      	lsls	r2, r2, #31
 8003180:	d501      	bpl.n	8003186 <_printf_float+0x1ae>
 8003182:	3302      	adds	r3, #2
 8003184:	e7f4      	b.n	8003170 <_printf_float+0x198>
 8003186:	2301      	movs	r3, #1
 8003188:	e7f2      	b.n	8003170 <_printf_float+0x198>
 800318a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003190:	4299      	cmp	r1, r3
 8003192:	db05      	blt.n	80031a0 <_printf_float+0x1c8>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	6121      	str	r1, [r4, #16]
 8003198:	07d8      	lsls	r0, r3, #31
 800319a:	d5ea      	bpl.n	8003172 <_printf_float+0x19a>
 800319c:	1c4b      	adds	r3, r1, #1
 800319e:	e7e7      	b.n	8003170 <_printf_float+0x198>
 80031a0:	2900      	cmp	r1, #0
 80031a2:	bfcc      	ite	gt
 80031a4:	2201      	movgt	r2, #1
 80031a6:	f1c1 0202 	rsble	r2, r1, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	e7e0      	b.n	8003170 <_printf_float+0x198>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	055a      	lsls	r2, r3, #21
 80031b2:	d407      	bmi.n	80031c4 <_printf_float+0x1ec>
 80031b4:	6923      	ldr	r3, [r4, #16]
 80031b6:	4642      	mov	r2, r8
 80031b8:	4631      	mov	r1, r6
 80031ba:	4628      	mov	r0, r5
 80031bc:	47b8      	blx	r7
 80031be:	3001      	adds	r0, #1
 80031c0:	d12b      	bne.n	800321a <_printf_float+0x242>
 80031c2:	e764      	b.n	800308e <_printf_float+0xb6>
 80031c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80031c8:	f240 80dd 	bls.w	8003386 <_printf_float+0x3ae>
 80031cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031d0:	2200      	movs	r2, #0
 80031d2:	2300      	movs	r3, #0
 80031d4:	f7fd fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d033      	beq.n	8003244 <_printf_float+0x26c>
 80031dc:	2301      	movs	r3, #1
 80031de:	4631      	mov	r1, r6
 80031e0:	4628      	mov	r0, r5
 80031e2:	4a35      	ldr	r2, [pc, #212]	; (80032b8 <_printf_float+0x2e0>)
 80031e4:	47b8      	blx	r7
 80031e6:	3001      	adds	r0, #1
 80031e8:	f43f af51 	beq.w	800308e <_printf_float+0xb6>
 80031ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031f0:	429a      	cmp	r2, r3
 80031f2:	db02      	blt.n	80031fa <_printf_float+0x222>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	07d8      	lsls	r0, r3, #31
 80031f8:	d50f      	bpl.n	800321a <_printf_float+0x242>
 80031fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f af42 	beq.w	800308e <_printf_float+0xb6>
 800320a:	f04f 0800 	mov.w	r8, #0
 800320e:	f104 091a 	add.w	r9, r4, #26
 8003212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003214:	3b01      	subs	r3, #1
 8003216:	4543      	cmp	r3, r8
 8003218:	dc09      	bgt.n	800322e <_printf_float+0x256>
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	079b      	lsls	r3, r3, #30
 800321e:	f100 8102 	bmi.w	8003426 <_printf_float+0x44e>
 8003222:	68e0      	ldr	r0, [r4, #12]
 8003224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003226:	4298      	cmp	r0, r3
 8003228:	bfb8      	it	lt
 800322a:	4618      	movlt	r0, r3
 800322c:	e731      	b.n	8003092 <_printf_float+0xba>
 800322e:	2301      	movs	r3, #1
 8003230:	464a      	mov	r2, r9
 8003232:	4631      	mov	r1, r6
 8003234:	4628      	mov	r0, r5
 8003236:	47b8      	blx	r7
 8003238:	3001      	adds	r0, #1
 800323a:	f43f af28 	beq.w	800308e <_printf_float+0xb6>
 800323e:	f108 0801 	add.w	r8, r8, #1
 8003242:	e7e6      	b.n	8003212 <_printf_float+0x23a>
 8003244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	dc38      	bgt.n	80032bc <_printf_float+0x2e4>
 800324a:	2301      	movs	r3, #1
 800324c:	4631      	mov	r1, r6
 800324e:	4628      	mov	r0, r5
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <_printf_float+0x2e0>)
 8003252:	47b8      	blx	r7
 8003254:	3001      	adds	r0, #1
 8003256:	f43f af1a 	beq.w	800308e <_printf_float+0xb6>
 800325a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800325e:	4313      	orrs	r3, r2
 8003260:	d102      	bne.n	8003268 <_printf_float+0x290>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	07d9      	lsls	r1, r3, #31
 8003266:	d5d8      	bpl.n	800321a <_printf_float+0x242>
 8003268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800326c:	4631      	mov	r1, r6
 800326e:	4628      	mov	r0, r5
 8003270:	47b8      	blx	r7
 8003272:	3001      	adds	r0, #1
 8003274:	f43f af0b 	beq.w	800308e <_printf_float+0xb6>
 8003278:	f04f 0900 	mov.w	r9, #0
 800327c:	f104 0a1a 	add.w	sl, r4, #26
 8003280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003282:	425b      	negs	r3, r3
 8003284:	454b      	cmp	r3, r9
 8003286:	dc01      	bgt.n	800328c <_printf_float+0x2b4>
 8003288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800328a:	e794      	b.n	80031b6 <_printf_float+0x1de>
 800328c:	2301      	movs	r3, #1
 800328e:	4652      	mov	r2, sl
 8003290:	4631      	mov	r1, r6
 8003292:	4628      	mov	r0, r5
 8003294:	47b8      	blx	r7
 8003296:	3001      	adds	r0, #1
 8003298:	f43f aef9 	beq.w	800308e <_printf_float+0xb6>
 800329c:	f109 0901 	add.w	r9, r9, #1
 80032a0:	e7ee      	b.n	8003280 <_printf_float+0x2a8>
 80032a2:	bf00      	nop
 80032a4:	7fefffff 	.word	0x7fefffff
 80032a8:	08007708 	.word	0x08007708
 80032ac:	0800770c 	.word	0x0800770c
 80032b0:	08007714 	.word	0x08007714
 80032b4:	08007710 	.word	0x08007710
 80032b8:	08007718 	.word	0x08007718
 80032bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032c0:	429a      	cmp	r2, r3
 80032c2:	bfa8      	it	ge
 80032c4:	461a      	movge	r2, r3
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	4691      	mov	r9, r2
 80032ca:	dc37      	bgt.n	800333c <_printf_float+0x364>
 80032cc:	f04f 0b00 	mov.w	fp, #0
 80032d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032d4:	f104 021a 	add.w	r2, r4, #26
 80032d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80032dc:	ebaa 0309 	sub.w	r3, sl, r9
 80032e0:	455b      	cmp	r3, fp
 80032e2:	dc33      	bgt.n	800334c <_printf_float+0x374>
 80032e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032e8:	429a      	cmp	r2, r3
 80032ea:	db3b      	blt.n	8003364 <_printf_float+0x38c>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	07da      	lsls	r2, r3, #31
 80032f0:	d438      	bmi.n	8003364 <_printf_float+0x38c>
 80032f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032f6:	eba2 030a 	sub.w	r3, r2, sl
 80032fa:	eba2 0901 	sub.w	r9, r2, r1
 80032fe:	4599      	cmp	r9, r3
 8003300:	bfa8      	it	ge
 8003302:	4699      	movge	r9, r3
 8003304:	f1b9 0f00 	cmp.w	r9, #0
 8003308:	dc34      	bgt.n	8003374 <_printf_float+0x39c>
 800330a:	f04f 0800 	mov.w	r8, #0
 800330e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003312:	f104 0a1a 	add.w	sl, r4, #26
 8003316:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	eba3 0309 	sub.w	r3, r3, r9
 8003320:	4543      	cmp	r3, r8
 8003322:	f77f af7a 	ble.w	800321a <_printf_float+0x242>
 8003326:	2301      	movs	r3, #1
 8003328:	4652      	mov	r2, sl
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	f43f aeac 	beq.w	800308e <_printf_float+0xb6>
 8003336:	f108 0801 	add.w	r8, r8, #1
 800333a:	e7ec      	b.n	8003316 <_printf_float+0x33e>
 800333c:	4613      	mov	r3, r2
 800333e:	4631      	mov	r1, r6
 8003340:	4642      	mov	r2, r8
 8003342:	4628      	mov	r0, r5
 8003344:	47b8      	blx	r7
 8003346:	3001      	adds	r0, #1
 8003348:	d1c0      	bne.n	80032cc <_printf_float+0x2f4>
 800334a:	e6a0      	b.n	800308e <_printf_float+0xb6>
 800334c:	2301      	movs	r3, #1
 800334e:	4631      	mov	r1, r6
 8003350:	4628      	mov	r0, r5
 8003352:	920b      	str	r2, [sp, #44]	; 0x2c
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	f43f ae99 	beq.w	800308e <_printf_float+0xb6>
 800335c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800335e:	f10b 0b01 	add.w	fp, fp, #1
 8003362:	e7b9      	b.n	80032d8 <_printf_float+0x300>
 8003364:	4631      	mov	r1, r6
 8003366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800336a:	4628      	mov	r0, r5
 800336c:	47b8      	blx	r7
 800336e:	3001      	adds	r0, #1
 8003370:	d1bf      	bne.n	80032f2 <_printf_float+0x31a>
 8003372:	e68c      	b.n	800308e <_printf_float+0xb6>
 8003374:	464b      	mov	r3, r9
 8003376:	4631      	mov	r1, r6
 8003378:	4628      	mov	r0, r5
 800337a:	eb08 020a 	add.w	r2, r8, sl
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	d1c2      	bne.n	800330a <_printf_float+0x332>
 8003384:	e683      	b.n	800308e <_printf_float+0xb6>
 8003386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003388:	2a01      	cmp	r2, #1
 800338a:	dc01      	bgt.n	8003390 <_printf_float+0x3b8>
 800338c:	07db      	lsls	r3, r3, #31
 800338e:	d537      	bpl.n	8003400 <_printf_float+0x428>
 8003390:	2301      	movs	r3, #1
 8003392:	4642      	mov	r2, r8
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	47b8      	blx	r7
 800339a:	3001      	adds	r0, #1
 800339c:	f43f ae77 	beq.w	800308e <_printf_float+0xb6>
 80033a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033a4:	4631      	mov	r1, r6
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	f43f ae6f 	beq.w	800308e <_printf_float+0xb6>
 80033b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033b4:	2200      	movs	r2, #0
 80033b6:	2300      	movs	r3, #0
 80033b8:	f7fd faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80033bc:	b9d8      	cbnz	r0, 80033f6 <_printf_float+0x41e>
 80033be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033c0:	f108 0201 	add.w	r2, r8, #1
 80033c4:	3b01      	subs	r3, #1
 80033c6:	4631      	mov	r1, r6
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	d10e      	bne.n	80033ee <_printf_float+0x416>
 80033d0:	e65d      	b.n	800308e <_printf_float+0xb6>
 80033d2:	2301      	movs	r3, #1
 80033d4:	464a      	mov	r2, r9
 80033d6:	4631      	mov	r1, r6
 80033d8:	4628      	mov	r0, r5
 80033da:	47b8      	blx	r7
 80033dc:	3001      	adds	r0, #1
 80033de:	f43f ae56 	beq.w	800308e <_printf_float+0xb6>
 80033e2:	f108 0801 	add.w	r8, r8, #1
 80033e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e8:	3b01      	subs	r3, #1
 80033ea:	4543      	cmp	r3, r8
 80033ec:	dcf1      	bgt.n	80033d2 <_printf_float+0x3fa>
 80033ee:	4653      	mov	r3, sl
 80033f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80033f4:	e6e0      	b.n	80031b8 <_printf_float+0x1e0>
 80033f6:	f04f 0800 	mov.w	r8, #0
 80033fa:	f104 091a 	add.w	r9, r4, #26
 80033fe:	e7f2      	b.n	80033e6 <_printf_float+0x40e>
 8003400:	2301      	movs	r3, #1
 8003402:	4642      	mov	r2, r8
 8003404:	e7df      	b.n	80033c6 <_printf_float+0x3ee>
 8003406:	2301      	movs	r3, #1
 8003408:	464a      	mov	r2, r9
 800340a:	4631      	mov	r1, r6
 800340c:	4628      	mov	r0, r5
 800340e:	47b8      	blx	r7
 8003410:	3001      	adds	r0, #1
 8003412:	f43f ae3c 	beq.w	800308e <_printf_float+0xb6>
 8003416:	f108 0801 	add.w	r8, r8, #1
 800341a:	68e3      	ldr	r3, [r4, #12]
 800341c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800341e:	1a5b      	subs	r3, r3, r1
 8003420:	4543      	cmp	r3, r8
 8003422:	dcf0      	bgt.n	8003406 <_printf_float+0x42e>
 8003424:	e6fd      	b.n	8003222 <_printf_float+0x24a>
 8003426:	f04f 0800 	mov.w	r8, #0
 800342a:	f104 0919 	add.w	r9, r4, #25
 800342e:	e7f4      	b.n	800341a <_printf_float+0x442>

08003430 <_printf_common>:
 8003430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003434:	4616      	mov	r6, r2
 8003436:	4699      	mov	r9, r3
 8003438:	688a      	ldr	r2, [r1, #8]
 800343a:	690b      	ldr	r3, [r1, #16]
 800343c:	4607      	mov	r7, r0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfb8      	it	lt
 8003442:	4613      	movlt	r3, r2
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344a:	460c      	mov	r4, r1
 800344c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003450:	b10a      	cbz	r2, 8003456 <_printf_common+0x26>
 8003452:	3301      	adds	r3, #1
 8003454:	6033      	str	r3, [r6, #0]
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	0699      	lsls	r1, r3, #26
 800345a:	bf42      	ittt	mi
 800345c:	6833      	ldrmi	r3, [r6, #0]
 800345e:	3302      	addmi	r3, #2
 8003460:	6033      	strmi	r3, [r6, #0]
 8003462:	6825      	ldr	r5, [r4, #0]
 8003464:	f015 0506 	ands.w	r5, r5, #6
 8003468:	d106      	bne.n	8003478 <_printf_common+0x48>
 800346a:	f104 0a19 	add.w	sl, r4, #25
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	6832      	ldr	r2, [r6, #0]
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	42ab      	cmp	r3, r5
 8003476:	dc28      	bgt.n	80034ca <_printf_common+0x9a>
 8003478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800347c:	1e13      	subs	r3, r2, #0
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	bf18      	it	ne
 8003482:	2301      	movne	r3, #1
 8003484:	0692      	lsls	r2, r2, #26
 8003486:	d42d      	bmi.n	80034e4 <_printf_common+0xb4>
 8003488:	4649      	mov	r1, r9
 800348a:	4638      	mov	r0, r7
 800348c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003490:	47c0      	blx	r8
 8003492:	3001      	adds	r0, #1
 8003494:	d020      	beq.n	80034d8 <_printf_common+0xa8>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	68e5      	ldr	r5, [r4, #12]
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf18      	it	ne
 80034a2:	2500      	movne	r5, #0
 80034a4:	6832      	ldr	r2, [r6, #0]
 80034a6:	f04f 0600 	mov.w	r6, #0
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	bf08      	it	eq
 80034ae:	1aad      	subeq	r5, r5, r2
 80034b0:	6922      	ldr	r2, [r4, #16]
 80034b2:	bf08      	it	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bfc4      	itt	gt
 80034bc:	1a9b      	subgt	r3, r3, r2
 80034be:	18ed      	addgt	r5, r5, r3
 80034c0:	341a      	adds	r4, #26
 80034c2:	42b5      	cmp	r5, r6
 80034c4:	d11a      	bne.n	80034fc <_printf_common+0xcc>
 80034c6:	2000      	movs	r0, #0
 80034c8:	e008      	b.n	80034dc <_printf_common+0xac>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4652      	mov	r2, sl
 80034ce:	4649      	mov	r1, r9
 80034d0:	4638      	mov	r0, r7
 80034d2:	47c0      	blx	r8
 80034d4:	3001      	adds	r0, #1
 80034d6:	d103      	bne.n	80034e0 <_printf_common+0xb0>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e0:	3501      	adds	r5, #1
 80034e2:	e7c4      	b.n	800346e <_printf_common+0x3e>
 80034e4:	2030      	movs	r0, #48	; 0x30
 80034e6:	18e1      	adds	r1, r4, r3
 80034e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f2:	4422      	add	r2, r4
 80034f4:	3302      	adds	r3, #2
 80034f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fa:	e7c5      	b.n	8003488 <_printf_common+0x58>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4622      	mov	r2, r4
 8003500:	4649      	mov	r1, r9
 8003502:	4638      	mov	r0, r7
 8003504:	47c0      	blx	r8
 8003506:	3001      	adds	r0, #1
 8003508:	d0e6      	beq.n	80034d8 <_printf_common+0xa8>
 800350a:	3601      	adds	r6, #1
 800350c:	e7d9      	b.n	80034c2 <_printf_common+0x92>
	...

08003510 <_printf_i>:
 8003510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	460c      	mov	r4, r1
 8003516:	7e27      	ldrb	r7, [r4, #24]
 8003518:	4691      	mov	r9, r2
 800351a:	2f78      	cmp	r7, #120	; 0x78
 800351c:	4680      	mov	r8, r0
 800351e:	469a      	mov	sl, r3
 8003520:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003526:	d807      	bhi.n	8003538 <_printf_i+0x28>
 8003528:	2f62      	cmp	r7, #98	; 0x62
 800352a:	d80a      	bhi.n	8003542 <_printf_i+0x32>
 800352c:	2f00      	cmp	r7, #0
 800352e:	f000 80d9 	beq.w	80036e4 <_printf_i+0x1d4>
 8003532:	2f58      	cmp	r7, #88	; 0x58
 8003534:	f000 80a4 	beq.w	8003680 <_printf_i+0x170>
 8003538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800353c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003540:	e03a      	b.n	80035b8 <_printf_i+0xa8>
 8003542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003546:	2b15      	cmp	r3, #21
 8003548:	d8f6      	bhi.n	8003538 <_printf_i+0x28>
 800354a:	a001      	add	r0, pc, #4	; (adr r0, 8003550 <_printf_i+0x40>)
 800354c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035bd 	.word	0x080035bd
 8003558:	08003539 	.word	0x08003539
 800355c:	08003539 	.word	0x08003539
 8003560:	08003539 	.word	0x08003539
 8003564:	08003539 	.word	0x08003539
 8003568:	080035bd 	.word	0x080035bd
 800356c:	08003539 	.word	0x08003539
 8003570:	08003539 	.word	0x08003539
 8003574:	08003539 	.word	0x08003539
 8003578:	08003539 	.word	0x08003539
 800357c:	080036cb 	.word	0x080036cb
 8003580:	080035ed 	.word	0x080035ed
 8003584:	080036ad 	.word	0x080036ad
 8003588:	08003539 	.word	0x08003539
 800358c:	08003539 	.word	0x08003539
 8003590:	080036ed 	.word	0x080036ed
 8003594:	08003539 	.word	0x08003539
 8003598:	080035ed 	.word	0x080035ed
 800359c:	08003539 	.word	0x08003539
 80035a0:	08003539 	.word	0x08003539
 80035a4:	080036b5 	.word	0x080036b5
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	600a      	str	r2, [r1, #0]
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0a4      	b.n	8003706 <_printf_i+0x1f6>
 80035bc:	6825      	ldr	r5, [r4, #0]
 80035be:	6808      	ldr	r0, [r1, #0]
 80035c0:	062e      	lsls	r6, r5, #24
 80035c2:	f100 0304 	add.w	r3, r0, #4
 80035c6:	d50a      	bpl.n	80035de <_printf_i+0xce>
 80035c8:	6805      	ldr	r5, [r0, #0]
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	2d00      	cmp	r5, #0
 80035ce:	da03      	bge.n	80035d8 <_printf_i+0xc8>
 80035d0:	232d      	movs	r3, #45	; 0x2d
 80035d2:	426d      	negs	r5, r5
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d8:	230a      	movs	r3, #10
 80035da:	485e      	ldr	r0, [pc, #376]	; (8003754 <_printf_i+0x244>)
 80035dc:	e019      	b.n	8003612 <_printf_i+0x102>
 80035de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035e2:	6805      	ldr	r5, [r0, #0]
 80035e4:	600b      	str	r3, [r1, #0]
 80035e6:	bf18      	it	ne
 80035e8:	b22d      	sxthne	r5, r5
 80035ea:	e7ef      	b.n	80035cc <_printf_i+0xbc>
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	6825      	ldr	r5, [r4, #0]
 80035f0:	1d18      	adds	r0, r3, #4
 80035f2:	6008      	str	r0, [r1, #0]
 80035f4:	0628      	lsls	r0, r5, #24
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0xec>
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0xf2>
 80035fc:	0669      	lsls	r1, r5, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0xe8>
 8003600:	881d      	ldrh	r5, [r3, #0]
 8003602:	2f6f      	cmp	r7, #111	; 0x6f
 8003604:	bf0c      	ite	eq
 8003606:	2308      	moveq	r3, #8
 8003608:	230a      	movne	r3, #10
 800360a:	4852      	ldr	r0, [pc, #328]	; (8003754 <_printf_i+0x244>)
 800360c:	2100      	movs	r1, #0
 800360e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003612:	6866      	ldr	r6, [r4, #4]
 8003614:	2e00      	cmp	r6, #0
 8003616:	bfa8      	it	ge
 8003618:	6821      	ldrge	r1, [r4, #0]
 800361a:	60a6      	str	r6, [r4, #8]
 800361c:	bfa4      	itt	ge
 800361e:	f021 0104 	bicge.w	r1, r1, #4
 8003622:	6021      	strge	r1, [r4, #0]
 8003624:	b90d      	cbnz	r5, 800362a <_printf_i+0x11a>
 8003626:	2e00      	cmp	r6, #0
 8003628:	d04d      	beq.n	80036c6 <_printf_i+0x1b6>
 800362a:	4616      	mov	r6, r2
 800362c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003630:	fb03 5711 	mls	r7, r3, r1, r5
 8003634:	5dc7      	ldrb	r7, [r0, r7]
 8003636:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800363a:	462f      	mov	r7, r5
 800363c:	42bb      	cmp	r3, r7
 800363e:	460d      	mov	r5, r1
 8003640:	d9f4      	bls.n	800362c <_printf_i+0x11c>
 8003642:	2b08      	cmp	r3, #8
 8003644:	d10b      	bne.n	800365e <_printf_i+0x14e>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	07df      	lsls	r7, r3, #31
 800364a:	d508      	bpl.n	800365e <_printf_i+0x14e>
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	6861      	ldr	r1, [r4, #4]
 8003650:	4299      	cmp	r1, r3
 8003652:	bfde      	ittt	le
 8003654:	2330      	movle	r3, #48	; 0x30
 8003656:	f806 3c01 	strble.w	r3, [r6, #-1]
 800365a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800365e:	1b92      	subs	r2, r2, r6
 8003660:	6122      	str	r2, [r4, #16]
 8003662:	464b      	mov	r3, r9
 8003664:	4621      	mov	r1, r4
 8003666:	4640      	mov	r0, r8
 8003668:	f8cd a000 	str.w	sl, [sp]
 800366c:	aa03      	add	r2, sp, #12
 800366e:	f7ff fedf 	bl	8003430 <_printf_common>
 8003672:	3001      	adds	r0, #1
 8003674:	d14c      	bne.n	8003710 <_printf_i+0x200>
 8003676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367a:	b004      	add	sp, #16
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	4834      	ldr	r0, [pc, #208]	; (8003754 <_printf_i+0x244>)
 8003682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003686:	680e      	ldr	r6, [r1, #0]
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	f856 5b04 	ldr.w	r5, [r6], #4
 800368e:	061f      	lsls	r7, r3, #24
 8003690:	600e      	str	r6, [r1, #0]
 8003692:	d514      	bpl.n	80036be <_printf_i+0x1ae>
 8003694:	07d9      	lsls	r1, r3, #31
 8003696:	bf44      	itt	mi
 8003698:	f043 0320 	orrmi.w	r3, r3, #32
 800369c:	6023      	strmi	r3, [r4, #0]
 800369e:	b91d      	cbnz	r5, 80036a8 <_printf_i+0x198>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2310      	movs	r3, #16
 80036aa:	e7af      	b.n	800360c <_printf_i+0xfc>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	2378      	movs	r3, #120	; 0x78
 80036b6:	4828      	ldr	r0, [pc, #160]	; (8003758 <_printf_i+0x248>)
 80036b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036bc:	e7e3      	b.n	8003686 <_printf_i+0x176>
 80036be:	065e      	lsls	r6, r3, #25
 80036c0:	bf48      	it	mi
 80036c2:	b2ad      	uxthmi	r5, r5
 80036c4:	e7e6      	b.n	8003694 <_printf_i+0x184>
 80036c6:	4616      	mov	r6, r2
 80036c8:	e7bb      	b.n	8003642 <_printf_i+0x132>
 80036ca:	680b      	ldr	r3, [r1, #0]
 80036cc:	6826      	ldr	r6, [r4, #0]
 80036ce:	1d1d      	adds	r5, r3, #4
 80036d0:	6960      	ldr	r0, [r4, #20]
 80036d2:	600d      	str	r5, [r1, #0]
 80036d4:	0635      	lsls	r5, r6, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d501      	bpl.n	80036de <_printf_i+0x1ce>
 80036da:	6018      	str	r0, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <_printf_i+0x1d4>
 80036de:	0671      	lsls	r1, r6, #25
 80036e0:	d5fb      	bpl.n	80036da <_printf_i+0x1ca>
 80036e2:	8018      	strh	r0, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	4616      	mov	r6, r2
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	e7ba      	b.n	8003662 <_printf_i+0x152>
 80036ec:	680b      	ldr	r3, [r1, #0]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	600a      	str	r2, [r1, #0]
 80036f2:	681e      	ldr	r6, [r3, #0]
 80036f4:	2100      	movs	r1, #0
 80036f6:	4630      	mov	r0, r6
 80036f8:	6862      	ldr	r2, [r4, #4]
 80036fa:	f002 fb0b 	bl	8005d14 <memchr>
 80036fe:	b108      	cbz	r0, 8003704 <_printf_i+0x1f4>
 8003700:	1b80      	subs	r0, r0, r6
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370e:	e7a8      	b.n	8003662 <_printf_i+0x152>
 8003710:	4632      	mov	r2, r6
 8003712:	4649      	mov	r1, r9
 8003714:	4640      	mov	r0, r8
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d0ab      	beq.n	8003676 <_printf_i+0x166>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d413      	bmi.n	800374c <_printf_i+0x23c>
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	4298      	cmp	r0, r3
 800372a:	bfb8      	it	lt
 800372c:	4618      	movlt	r0, r3
 800372e:	e7a4      	b.n	800367a <_printf_i+0x16a>
 8003730:	2301      	movs	r3, #1
 8003732:	4632      	mov	r2, r6
 8003734:	4649      	mov	r1, r9
 8003736:	4640      	mov	r0, r8
 8003738:	47d0      	blx	sl
 800373a:	3001      	adds	r0, #1
 800373c:	d09b      	beq.n	8003676 <_printf_i+0x166>
 800373e:	3501      	adds	r5, #1
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9903      	ldr	r1, [sp, #12]
 8003744:	1a5b      	subs	r3, r3, r1
 8003746:	42ab      	cmp	r3, r5
 8003748:	dcf2      	bgt.n	8003730 <_printf_i+0x220>
 800374a:	e7eb      	b.n	8003724 <_printf_i+0x214>
 800374c:	2500      	movs	r5, #0
 800374e:	f104 0619 	add.w	r6, r4, #25
 8003752:	e7f5      	b.n	8003740 <_printf_i+0x230>
 8003754:	0800771a 	.word	0x0800771a
 8003758:	0800772b 	.word	0x0800772b

0800375c <_scanf_float>:
 800375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003760:	b087      	sub	sp, #28
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	688b      	ldr	r3, [r1, #8]
 8003766:	4617      	mov	r7, r2
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800376e:	bf85      	ittet	hi
 8003770:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003774:	195b      	addhi	r3, r3, r5
 8003776:	2300      	movls	r3, #0
 8003778:	9302      	strhi	r3, [sp, #8]
 800377a:	bf88      	it	hi
 800377c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003780:	468b      	mov	fp, r1
 8003782:	f04f 0500 	mov.w	r5, #0
 8003786:	bf8c      	ite	hi
 8003788:	608b      	strhi	r3, [r1, #8]
 800378a:	9302      	strls	r3, [sp, #8]
 800378c:	680b      	ldr	r3, [r1, #0]
 800378e:	4680      	mov	r8, r0
 8003790:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003794:	f84b 3b1c 	str.w	r3, [fp], #28
 8003798:	460c      	mov	r4, r1
 800379a:	465e      	mov	r6, fp
 800379c:	46aa      	mov	sl, r5
 800379e:	46a9      	mov	r9, r5
 80037a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80037a4:	9501      	str	r5, [sp, #4]
 80037a6:	68a2      	ldr	r2, [r4, #8]
 80037a8:	b152      	cbz	r2, 80037c0 <_scanf_float+0x64>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b4e      	cmp	r3, #78	; 0x4e
 80037b0:	d864      	bhi.n	800387c <_scanf_float+0x120>
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d83c      	bhi.n	8003830 <_scanf_float+0xd4>
 80037b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80037ba:	b2c8      	uxtb	r0, r1
 80037bc:	280e      	cmp	r0, #14
 80037be:	d93a      	bls.n	8003836 <_scanf_float+0xda>
 80037c0:	f1b9 0f00 	cmp.w	r9, #0
 80037c4:	d003      	beq.n	80037ce <_scanf_float+0x72>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80037d2:	f1ba 0f01 	cmp.w	sl, #1
 80037d6:	f200 8113 	bhi.w	8003a00 <_scanf_float+0x2a4>
 80037da:	455e      	cmp	r6, fp
 80037dc:	f200 8105 	bhi.w	80039ea <_scanf_float+0x28e>
 80037e0:	2501      	movs	r5, #1
 80037e2:	4628      	mov	r0, r5
 80037e4:	b007      	add	sp, #28
 80037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80037ee:	2a0d      	cmp	r2, #13
 80037f0:	d8e6      	bhi.n	80037c0 <_scanf_float+0x64>
 80037f2:	a101      	add	r1, pc, #4	; (adr r1, 80037f8 <_scanf_float+0x9c>)
 80037f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80037f8:	08003937 	.word	0x08003937
 80037fc:	080037c1 	.word	0x080037c1
 8003800:	080037c1 	.word	0x080037c1
 8003804:	080037c1 	.word	0x080037c1
 8003808:	08003997 	.word	0x08003997
 800380c:	0800396f 	.word	0x0800396f
 8003810:	080037c1 	.word	0x080037c1
 8003814:	080037c1 	.word	0x080037c1
 8003818:	08003945 	.word	0x08003945
 800381c:	080037c1 	.word	0x080037c1
 8003820:	080037c1 	.word	0x080037c1
 8003824:	080037c1 	.word	0x080037c1
 8003828:	080037c1 	.word	0x080037c1
 800382c:	080038fd 	.word	0x080038fd
 8003830:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003834:	e7db      	b.n	80037ee <_scanf_float+0x92>
 8003836:	290e      	cmp	r1, #14
 8003838:	d8c2      	bhi.n	80037c0 <_scanf_float+0x64>
 800383a:	a001      	add	r0, pc, #4	; (adr r0, 8003840 <_scanf_float+0xe4>)
 800383c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003840:	080038ef 	.word	0x080038ef
 8003844:	080037c1 	.word	0x080037c1
 8003848:	080038ef 	.word	0x080038ef
 800384c:	08003983 	.word	0x08003983
 8003850:	080037c1 	.word	0x080037c1
 8003854:	0800389d 	.word	0x0800389d
 8003858:	080038d9 	.word	0x080038d9
 800385c:	080038d9 	.word	0x080038d9
 8003860:	080038d9 	.word	0x080038d9
 8003864:	080038d9 	.word	0x080038d9
 8003868:	080038d9 	.word	0x080038d9
 800386c:	080038d9 	.word	0x080038d9
 8003870:	080038d9 	.word	0x080038d9
 8003874:	080038d9 	.word	0x080038d9
 8003878:	080038d9 	.word	0x080038d9
 800387c:	2b6e      	cmp	r3, #110	; 0x6e
 800387e:	d809      	bhi.n	8003894 <_scanf_float+0x138>
 8003880:	2b60      	cmp	r3, #96	; 0x60
 8003882:	d8b2      	bhi.n	80037ea <_scanf_float+0x8e>
 8003884:	2b54      	cmp	r3, #84	; 0x54
 8003886:	d077      	beq.n	8003978 <_scanf_float+0x21c>
 8003888:	2b59      	cmp	r3, #89	; 0x59
 800388a:	d199      	bne.n	80037c0 <_scanf_float+0x64>
 800388c:	2d07      	cmp	r5, #7
 800388e:	d197      	bne.n	80037c0 <_scanf_float+0x64>
 8003890:	2508      	movs	r5, #8
 8003892:	e029      	b.n	80038e8 <_scanf_float+0x18c>
 8003894:	2b74      	cmp	r3, #116	; 0x74
 8003896:	d06f      	beq.n	8003978 <_scanf_float+0x21c>
 8003898:	2b79      	cmp	r3, #121	; 0x79
 800389a:	e7f6      	b.n	800388a <_scanf_float+0x12e>
 800389c:	6821      	ldr	r1, [r4, #0]
 800389e:	05c8      	lsls	r0, r1, #23
 80038a0:	d51a      	bpl.n	80038d8 <_scanf_float+0x17c>
 80038a2:	9b02      	ldr	r3, [sp, #8]
 80038a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80038a8:	6021      	str	r1, [r4, #0]
 80038aa:	f109 0901 	add.w	r9, r9, #1
 80038ae:	b11b      	cbz	r3, 80038b8 <_scanf_float+0x15c>
 80038b0:	3b01      	subs	r3, #1
 80038b2:	3201      	adds	r2, #1
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	60a2      	str	r2, [r4, #8]
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60a3      	str	r3, [r4, #8]
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	3301      	adds	r3, #1
 80038c2:	6123      	str	r3, [r4, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	f340 8084 	ble.w	80039d8 <_scanf_float+0x27c>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	e766      	b.n	80037a6 <_scanf_float+0x4a>
 80038d8:	eb1a 0f05 	cmn.w	sl, r5
 80038dc:	f47f af70 	bne.w	80037c0 <_scanf_float+0x64>
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80038e6:	6022      	str	r2, [r4, #0]
 80038e8:	f806 3b01 	strb.w	r3, [r6], #1
 80038ec:	e7e4      	b.n	80038b8 <_scanf_float+0x15c>
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	0610      	lsls	r0, r2, #24
 80038f2:	f57f af65 	bpl.w	80037c0 <_scanf_float+0x64>
 80038f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fa:	e7f4      	b.n	80038e6 <_scanf_float+0x18a>
 80038fc:	f1ba 0f00 	cmp.w	sl, #0
 8003900:	d10e      	bne.n	8003920 <_scanf_float+0x1c4>
 8003902:	f1b9 0f00 	cmp.w	r9, #0
 8003906:	d10e      	bne.n	8003926 <_scanf_float+0x1ca>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800390e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003912:	d108      	bne.n	8003926 <_scanf_float+0x1ca>
 8003914:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003918:	f04f 0a01 	mov.w	sl, #1
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	e7e3      	b.n	80038e8 <_scanf_float+0x18c>
 8003920:	f1ba 0f02 	cmp.w	sl, #2
 8003924:	d055      	beq.n	80039d2 <_scanf_float+0x276>
 8003926:	2d01      	cmp	r5, #1
 8003928:	d002      	beq.n	8003930 <_scanf_float+0x1d4>
 800392a:	2d04      	cmp	r5, #4
 800392c:	f47f af48 	bne.w	80037c0 <_scanf_float+0x64>
 8003930:	3501      	adds	r5, #1
 8003932:	b2ed      	uxtb	r5, r5
 8003934:	e7d8      	b.n	80038e8 <_scanf_float+0x18c>
 8003936:	f1ba 0f01 	cmp.w	sl, #1
 800393a:	f47f af41 	bne.w	80037c0 <_scanf_float+0x64>
 800393e:	f04f 0a02 	mov.w	sl, #2
 8003942:	e7d1      	b.n	80038e8 <_scanf_float+0x18c>
 8003944:	b97d      	cbnz	r5, 8003966 <_scanf_float+0x20a>
 8003946:	f1b9 0f00 	cmp.w	r9, #0
 800394a:	f47f af3c 	bne.w	80037c6 <_scanf_float+0x6a>
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003954:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003958:	f47f af39 	bne.w	80037ce <_scanf_float+0x72>
 800395c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003960:	2501      	movs	r5, #1
 8003962:	6022      	str	r2, [r4, #0]
 8003964:	e7c0      	b.n	80038e8 <_scanf_float+0x18c>
 8003966:	2d03      	cmp	r5, #3
 8003968:	d0e2      	beq.n	8003930 <_scanf_float+0x1d4>
 800396a:	2d05      	cmp	r5, #5
 800396c:	e7de      	b.n	800392c <_scanf_float+0x1d0>
 800396e:	2d02      	cmp	r5, #2
 8003970:	f47f af26 	bne.w	80037c0 <_scanf_float+0x64>
 8003974:	2503      	movs	r5, #3
 8003976:	e7b7      	b.n	80038e8 <_scanf_float+0x18c>
 8003978:	2d06      	cmp	r5, #6
 800397a:	f47f af21 	bne.w	80037c0 <_scanf_float+0x64>
 800397e:	2507      	movs	r5, #7
 8003980:	e7b2      	b.n	80038e8 <_scanf_float+0x18c>
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	0591      	lsls	r1, r2, #22
 8003986:	f57f af1b 	bpl.w	80037c0 <_scanf_float+0x64>
 800398a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800398e:	6022      	str	r2, [r4, #0]
 8003990:	f8cd 9004 	str.w	r9, [sp, #4]
 8003994:	e7a8      	b.n	80038e8 <_scanf_float+0x18c>
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800399c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80039a0:	d006      	beq.n	80039b0 <_scanf_float+0x254>
 80039a2:	0550      	lsls	r0, r2, #21
 80039a4:	f57f af0c 	bpl.w	80037c0 <_scanf_float+0x64>
 80039a8:	f1b9 0f00 	cmp.w	r9, #0
 80039ac:	f43f af0f 	beq.w	80037ce <_scanf_float+0x72>
 80039b0:	0591      	lsls	r1, r2, #22
 80039b2:	bf58      	it	pl
 80039b4:	9901      	ldrpl	r1, [sp, #4]
 80039b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80039ba:	bf58      	it	pl
 80039bc:	eba9 0101 	subpl.w	r1, r9, r1
 80039c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80039c4:	f04f 0900 	mov.w	r9, #0
 80039c8:	bf58      	it	pl
 80039ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80039ce:	6022      	str	r2, [r4, #0]
 80039d0:	e78a      	b.n	80038e8 <_scanf_float+0x18c>
 80039d2:	f04f 0a03 	mov.w	sl, #3
 80039d6:	e787      	b.n	80038e8 <_scanf_float+0x18c>
 80039d8:	4639      	mov	r1, r7
 80039da:	4640      	mov	r0, r8
 80039dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80039e0:	4798      	blx	r3
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f43f aedf 	beq.w	80037a6 <_scanf_float+0x4a>
 80039e8:	e6ea      	b.n	80037c0 <_scanf_float+0x64>
 80039ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039ee:	463a      	mov	r2, r7
 80039f0:	4640      	mov	r0, r8
 80039f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039f6:	4798      	blx	r3
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	e6ec      	b.n	80037da <_scanf_float+0x7e>
 8003a00:	1e6b      	subs	r3, r5, #1
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d825      	bhi.n	8003a52 <_scanf_float+0x2f6>
 8003a06:	2d02      	cmp	r5, #2
 8003a08:	d836      	bhi.n	8003a78 <_scanf_float+0x31c>
 8003a0a:	455e      	cmp	r6, fp
 8003a0c:	f67f aee8 	bls.w	80037e0 <_scanf_float+0x84>
 8003a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a14:	463a      	mov	r2, r7
 8003a16:	4640      	mov	r0, r8
 8003a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a1c:	4798      	blx	r3
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	e7f1      	b.n	8003a0a <_scanf_float+0x2ae>
 8003a26:	9802      	ldr	r0, [sp, #8]
 8003a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003a30:	463a      	mov	r2, r7
 8003a32:	9002      	str	r0, [sp, #8]
 8003a34:	4640      	mov	r0, r8
 8003a36:	4798      	blx	r3
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003a42:	fa5f fa8a 	uxtb.w	sl, sl
 8003a46:	f1ba 0f02 	cmp.w	sl, #2
 8003a4a:	d1ec      	bne.n	8003a26 <_scanf_float+0x2ca>
 8003a4c:	3d03      	subs	r5, #3
 8003a4e:	b2ed      	uxtb	r5, r5
 8003a50:	1b76      	subs	r6, r6, r5
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	05da      	lsls	r2, r3, #23
 8003a56:	d52f      	bpl.n	8003ab8 <_scanf_float+0x35c>
 8003a58:	055b      	lsls	r3, r3, #21
 8003a5a:	d510      	bpl.n	8003a7e <_scanf_float+0x322>
 8003a5c:	455e      	cmp	r6, fp
 8003a5e:	f67f aebf 	bls.w	80037e0 <_scanf_float+0x84>
 8003a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a66:	463a      	mov	r2, r7
 8003a68:	4640      	mov	r0, r8
 8003a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a6e:	4798      	blx	r3
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6123      	str	r3, [r4, #16]
 8003a76:	e7f1      	b.n	8003a5c <_scanf_float+0x300>
 8003a78:	46aa      	mov	sl, r5
 8003a7a:	9602      	str	r6, [sp, #8]
 8003a7c:	e7df      	b.n	8003a3e <_scanf_float+0x2e2>
 8003a7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	2965      	cmp	r1, #101	; 0x65
 8003a86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003a8a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	d00c      	beq.n	8003aac <_scanf_float+0x350>
 8003a92:	2945      	cmp	r1, #69	; 0x45
 8003a94:	d00a      	beq.n	8003aac <_scanf_float+0x350>
 8003a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4798      	blx	r3
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	1eb5      	subs	r5, r6, #2
 8003aaa:	6123      	str	r3, [r4, #16]
 8003aac:	463a      	mov	r2, r7
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ab4:	4798      	blx	r3
 8003ab6:	462e      	mov	r6, r5
 8003ab8:	6825      	ldr	r5, [r4, #0]
 8003aba:	f015 0510 	ands.w	r5, r5, #16
 8003abe:	d159      	bne.n	8003b74 <_scanf_float+0x418>
 8003ac0:	7035      	strb	r5, [r6, #0]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003acc:	d11c      	bne.n	8003b08 <_scanf_float+0x3ac>
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	454b      	cmp	r3, r9
 8003ad2:	eba3 0209 	sub.w	r2, r3, r9
 8003ad6:	d124      	bne.n	8003b22 <_scanf_float+0x3c6>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4659      	mov	r1, fp
 8003adc:	4640      	mov	r0, r8
 8003ade:	f000 fe8b 	bl	80047f8 <_strtod_r>
 8003ae2:	f8d4 c000 	ldr.w	ip, [r4]
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	f01c 0f02 	tst.w	ip, #2
 8003aec:	4606      	mov	r6, r0
 8003aee:	460f      	mov	r7, r1
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	d021      	beq.n	8003b38 <_scanf_float+0x3dc>
 8003af4:	9903      	ldr	r1, [sp, #12]
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	600a      	str	r2, [r1, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	e9c3 6700 	strd	r6, r7, [r3]
 8003b00:	68e3      	ldr	r3, [r4, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60e3      	str	r3, [r4, #12]
 8003b06:	e66c      	b.n	80037e2 <_scanf_float+0x86>
 8003b08:	9b04      	ldr	r3, [sp, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0e4      	beq.n	8003ad8 <_scanf_float+0x37c>
 8003b0e:	9905      	ldr	r1, [sp, #20]
 8003b10:	230a      	movs	r3, #10
 8003b12:	462a      	mov	r2, r5
 8003b14:	4640      	mov	r0, r8
 8003b16:	3101      	adds	r1, #1
 8003b18:	f000 fefa 	bl	8004910 <_strtol_r>
 8003b1c:	9b04      	ldr	r3, [sp, #16]
 8003b1e:	9e05      	ldr	r6, [sp, #20]
 8003b20:	1ac2      	subs	r2, r0, r3
 8003b22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003b26:	429e      	cmp	r6, r3
 8003b28:	bf28      	it	cs
 8003b2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003b2e:	4630      	mov	r0, r6
 8003b30:	4911      	ldr	r1, [pc, #68]	; (8003b78 <_scanf_float+0x41c>)
 8003b32:	f000 f829 	bl	8003b88 <siprintf>
 8003b36:	e7cf      	b.n	8003ad8 <_scanf_float+0x37c>
 8003b38:	f01c 0f04 	tst.w	ip, #4
 8003b3c:	f103 0e04 	add.w	lr, r3, #4
 8003b40:	d003      	beq.n	8003b4a <_scanf_float+0x3ee>
 8003b42:	9903      	ldr	r1, [sp, #12]
 8003b44:	f8c1 e000 	str.w	lr, [r1]
 8003b48:	e7d7      	b.n	8003afa <_scanf_float+0x39e>
 8003b4a:	9a03      	ldr	r2, [sp, #12]
 8003b4c:	f8c2 e000 	str.w	lr, [r2]
 8003b50:	f8d3 8000 	ldr.w	r8, [r3]
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	f7fc ff58 	bl	8000a0c <__aeabi_dcmpun>
 8003b5c:	b128      	cbz	r0, 8003b6a <_scanf_float+0x40e>
 8003b5e:	4807      	ldr	r0, [pc, #28]	; (8003b7c <_scanf_float+0x420>)
 8003b60:	f000 f80e 	bl	8003b80 <nanf>
 8003b64:	f8c8 0000 	str.w	r0, [r8]
 8003b68:	e7ca      	b.n	8003b00 <_scanf_float+0x3a4>
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc ffab 	bl	8000ac8 <__aeabi_d2f>
 8003b72:	e7f7      	b.n	8003b64 <_scanf_float+0x408>
 8003b74:	2500      	movs	r5, #0
 8003b76:	e634      	b.n	80037e2 <_scanf_float+0x86>
 8003b78:	0800773c 	.word	0x0800773c
 8003b7c:	080076bb 	.word	0x080076bb

08003b80 <nanf>:
 8003b80:	4800      	ldr	r0, [pc, #0]	; (8003b84 <nanf+0x4>)
 8003b82:	4770      	bx	lr
 8003b84:	7fc00000 	.word	0x7fc00000

08003b88 <siprintf>:
 8003b88:	b40e      	push	{r1, r2, r3}
 8003b8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b8e:	b500      	push	{lr}
 8003b90:	b09c      	sub	sp, #112	; 0x70
 8003b92:	ab1d      	add	r3, sp, #116	; 0x74
 8003b94:	9002      	str	r0, [sp, #8]
 8003b96:	9006      	str	r0, [sp, #24]
 8003b98:	9107      	str	r1, [sp, #28]
 8003b9a:	9104      	str	r1, [sp, #16]
 8003b9c:	4808      	ldr	r0, [pc, #32]	; (8003bc0 <siprintf+0x38>)
 8003b9e:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <siprintf+0x3c>)
 8003ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ba4:	9105      	str	r1, [sp, #20]
 8003ba6:	6800      	ldr	r0, [r0, #0]
 8003ba8:	a902      	add	r1, sp, #8
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	f002 fe88 	bl	80068c0 <_svfiprintf_r>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	9b02      	ldr	r3, [sp, #8]
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	b01c      	add	sp, #112	; 0x70
 8003bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bbc:	b003      	add	sp, #12
 8003bbe:	4770      	bx	lr
 8003bc0:	20000020 	.word	0x20000020
 8003bc4:	ffff0208 	.word	0xffff0208

08003bc8 <sulp>:
 8003bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bcc:	460f      	mov	r7, r1
 8003bce:	4690      	mov	r8, r2
 8003bd0:	f002 fc1e 	bl	8006410 <__ulp>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	460d      	mov	r5, r1
 8003bd8:	f1b8 0f00 	cmp.w	r8, #0
 8003bdc:	d011      	beq.n	8003c02 <sulp+0x3a>
 8003bde:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003be2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dd0b      	ble.n	8003c02 <sulp+0x3a>
 8003bea:	2400      	movs	r4, #0
 8003bec:	051b      	lsls	r3, r3, #20
 8003bee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003bf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	f7fc fc6d 	bl	80004d8 <__aeabi_dmul>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	4620      	mov	r0, r4
 8003c04:	4629      	mov	r1, r5
 8003c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c0a:	0000      	movs	r0, r0
 8003c0c:	0000      	movs	r0, r0
	...

08003c10 <_strtod_l>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	469b      	mov	fp, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	b0a1      	sub	sp, #132	; 0x84
 8003c1a:	931c      	str	r3, [sp, #112]	; 0x70
 8003c1c:	4ba1      	ldr	r3, [pc, #644]	; (8003ea4 <_strtod_l+0x294>)
 8003c1e:	4682      	mov	sl, r0
 8003c20:	681f      	ldr	r7, [r3, #0]
 8003c22:	460e      	mov	r6, r1
 8003c24:	4638      	mov	r0, r7
 8003c26:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c28:	f7fc fa92 	bl	8000150 <strlen>
 8003c2c:	f04f 0800 	mov.w	r8, #0
 8003c30:	4604      	mov	r4, r0
 8003c32:	f04f 0900 	mov.w	r9, #0
 8003c36:	961b      	str	r6, [sp, #108]	; 0x6c
 8003c38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	2a2b      	cmp	r2, #43	; 0x2b
 8003c3e:	d04c      	beq.n	8003cda <_strtod_l+0xca>
 8003c40:	d83a      	bhi.n	8003cb8 <_strtod_l+0xa8>
 8003c42:	2a0d      	cmp	r2, #13
 8003c44:	d833      	bhi.n	8003cae <_strtod_l+0x9e>
 8003c46:	2a08      	cmp	r2, #8
 8003c48:	d833      	bhi.n	8003cb2 <_strtod_l+0xa2>
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	d03d      	beq.n	8003cca <_strtod_l+0xba>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	930c      	str	r3, [sp, #48]	; 0x30
 8003c52:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003c54:	782b      	ldrb	r3, [r5, #0]
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	f040 80af 	bne.w	8003dba <_strtod_l+0x1aa>
 8003c5c:	786b      	ldrb	r3, [r5, #1]
 8003c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c62:	2b58      	cmp	r3, #88	; 0x58
 8003c64:	d16c      	bne.n	8003d40 <_strtod_l+0x130>
 8003c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c68:	4650      	mov	r0, sl
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	ab1c      	add	r3, sp, #112	; 0x70
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4a8d      	ldr	r2, [pc, #564]	; (8003ea8 <_strtod_l+0x298>)
 8003c72:	f8cd b008 	str.w	fp, [sp, #8]
 8003c76:	ab1d      	add	r3, sp, #116	; 0x74
 8003c78:	a91b      	add	r1, sp, #108	; 0x6c
 8003c7a:	f001 fd2f 	bl	80056dc <__gethex>
 8003c7e:	f010 0607 	ands.w	r6, r0, #7
 8003c82:	4604      	mov	r4, r0
 8003c84:	d005      	beq.n	8003c92 <_strtod_l+0x82>
 8003c86:	2e06      	cmp	r6, #6
 8003c88:	d129      	bne.n	8003cde <_strtod_l+0xce>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	3501      	adds	r5, #1
 8003c8e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003c90:	930c      	str	r3, [sp, #48]	; 0x30
 8003c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 8596 	bne.w	80047c6 <_strtod_l+0xbb6>
 8003c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c9c:	b1d3      	cbz	r3, 8003cd4 <_strtod_l+0xc4>
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	b021      	add	sp, #132	; 0x84
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	2a20      	cmp	r2, #32
 8003cb0:	d1cd      	bne.n	8003c4e <_strtod_l+0x3e>
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cb6:	e7bf      	b.n	8003c38 <_strtod_l+0x28>
 8003cb8:	2a2d      	cmp	r2, #45	; 0x2d
 8003cba:	d1c8      	bne.n	8003c4e <_strtod_l+0x3e>
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	920c      	str	r2, [sp, #48]	; 0x30
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1c3      	bne.n	8003c52 <_strtod_l+0x42>
 8003cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ccc:	961b      	str	r6, [sp, #108]	; 0x6c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8577 	bne.w	80047c2 <_strtod_l+0xbb2>
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	e7e4      	b.n	8003ca4 <_strtod_l+0x94>
 8003cda:	2200      	movs	r2, #0
 8003cdc:	e7ef      	b.n	8003cbe <_strtod_l+0xae>
 8003cde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003ce0:	b13a      	cbz	r2, 8003cf2 <_strtod_l+0xe2>
 8003ce2:	2135      	movs	r1, #53	; 0x35
 8003ce4:	a81e      	add	r0, sp, #120	; 0x78
 8003ce6:	f002 fc97 	bl	8006618 <__copybits>
 8003cea:	4650      	mov	r0, sl
 8003cec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003cee:	f002 f85f 	bl	8005db0 <_Bfree>
 8003cf2:	3e01      	subs	r6, #1
 8003cf4:	2e05      	cmp	r6, #5
 8003cf6:	d807      	bhi.n	8003d08 <_strtod_l+0xf8>
 8003cf8:	e8df f006 	tbb	[pc, r6]
 8003cfc:	1d180b0e 	.word	0x1d180b0e
 8003d00:	030e      	.short	0x030e
 8003d02:	f04f 0900 	mov.w	r9, #0
 8003d06:	46c8      	mov	r8, r9
 8003d08:	0721      	lsls	r1, r4, #28
 8003d0a:	d5c2      	bpl.n	8003c92 <_strtod_l+0x82>
 8003d0c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003d10:	e7bf      	b.n	8003c92 <_strtod_l+0x82>
 8003d12:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003d16:	e7f7      	b.n	8003d08 <_strtod_l+0xf8>
 8003d18:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003d1a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003d22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003d2a:	e7ed      	b.n	8003d08 <_strtod_l+0xf8>
 8003d2c:	f04f 0800 	mov.w	r8, #0
 8003d30:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003eac <_strtod_l+0x29c>
 8003d34:	e7e8      	b.n	8003d08 <_strtod_l+0xf8>
 8003d36:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003d3a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003d3e:	e7e3      	b.n	8003d08 <_strtod_l+0xf8>
 8003d40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	921b      	str	r2, [sp, #108]	; 0x6c
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b30      	cmp	r3, #48	; 0x30
 8003d4a:	d0f9      	beq.n	8003d40 <_strtod_l+0x130>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0a0      	beq.n	8003c92 <_strtod_l+0x82>
 8003d50:	2301      	movs	r3, #1
 8003d52:	9307      	str	r3, [sp, #28]
 8003d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d56:	220a      	movs	r2, #10
 8003d58:	9308      	str	r3, [sp, #32]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	469b      	mov	fp, r3
 8003d5e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003d62:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003d64:	7805      	ldrb	r5, [r0, #0]
 8003d66:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003d6a:	b2d9      	uxtb	r1, r3
 8003d6c:	2909      	cmp	r1, #9
 8003d6e:	d926      	bls.n	8003dbe <_strtod_l+0x1ae>
 8003d70:	4622      	mov	r2, r4
 8003d72:	4639      	mov	r1, r7
 8003d74:	f002 feba 	bl	8006aec <strncmp>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d032      	beq.n	8003de2 <_strtod_l+0x1d2>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	462b      	mov	r3, r5
 8003d80:	465c      	mov	r4, fp
 8003d82:	4602      	mov	r2, r0
 8003d84:	9004      	str	r0, [sp, #16]
 8003d86:	2b65      	cmp	r3, #101	; 0x65
 8003d88:	d001      	beq.n	8003d8e <_strtod_l+0x17e>
 8003d8a:	2b45      	cmp	r3, #69	; 0x45
 8003d8c:	d113      	bne.n	8003db6 <_strtod_l+0x1a6>
 8003d8e:	b91c      	cbnz	r4, 8003d98 <_strtod_l+0x188>
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	4303      	orrs	r3, r0
 8003d94:	d099      	beq.n	8003cca <_strtod_l+0xba>
 8003d96:	2400      	movs	r4, #0
 8003d98:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003d9a:	1c73      	adds	r3, r6, #1
 8003d9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d9e:	7873      	ldrb	r3, [r6, #1]
 8003da0:	2b2b      	cmp	r3, #43	; 0x2b
 8003da2:	d078      	beq.n	8003e96 <_strtod_l+0x286>
 8003da4:	2b2d      	cmp	r3, #45	; 0x2d
 8003da6:	d07b      	beq.n	8003ea0 <_strtod_l+0x290>
 8003da8:	2700      	movs	r7, #0
 8003daa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003dae:	2909      	cmp	r1, #9
 8003db0:	f240 8082 	bls.w	8003eb8 <_strtod_l+0x2a8>
 8003db4:	961b      	str	r6, [sp, #108]	; 0x6c
 8003db6:	2500      	movs	r5, #0
 8003db8:	e09e      	b.n	8003ef8 <_strtod_l+0x2e8>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e7c9      	b.n	8003d52 <_strtod_l+0x142>
 8003dbe:	f1bb 0f08 	cmp.w	fp, #8
 8003dc2:	bfd5      	itete	le
 8003dc4:	9906      	ldrle	r1, [sp, #24]
 8003dc6:	9905      	ldrgt	r1, [sp, #20]
 8003dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8003dcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003dd0:	f100 0001 	add.w	r0, r0, #1
 8003dd4:	bfd4      	ite	le
 8003dd6:	9306      	strle	r3, [sp, #24]
 8003dd8:	9305      	strgt	r3, [sp, #20]
 8003dda:	f10b 0b01 	add.w	fp, fp, #1
 8003dde:	901b      	str	r0, [sp, #108]	; 0x6c
 8003de0:	e7bf      	b.n	8003d62 <_strtod_l+0x152>
 8003de2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003de4:	191a      	adds	r2, r3, r4
 8003de6:	921b      	str	r2, [sp, #108]	; 0x6c
 8003de8:	5d1b      	ldrb	r3, [r3, r4]
 8003dea:	f1bb 0f00 	cmp.w	fp, #0
 8003dee:	d036      	beq.n	8003e5e <_strtod_l+0x24e>
 8003df0:	465c      	mov	r4, fp
 8003df2:	9004      	str	r0, [sp, #16]
 8003df4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003df8:	2a09      	cmp	r2, #9
 8003dfa:	d912      	bls.n	8003e22 <_strtod_l+0x212>
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	e7c2      	b.n	8003d86 <_strtod_l+0x176>
 8003e00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e02:	3001      	adds	r0, #1
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	921b      	str	r2, [sp, #108]	; 0x6c
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b30      	cmp	r3, #48	; 0x30
 8003e0c:	d0f8      	beq.n	8003e00 <_strtod_l+0x1f0>
 8003e0e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003e12:	2a08      	cmp	r2, #8
 8003e14:	f200 84dc 	bhi.w	80047d0 <_strtod_l+0xbc0>
 8003e18:	9004      	str	r0, [sp, #16]
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003e20:	9208      	str	r2, [sp, #32]
 8003e22:	3b30      	subs	r3, #48	; 0x30
 8003e24:	f100 0201 	add.w	r2, r0, #1
 8003e28:	d013      	beq.n	8003e52 <_strtod_l+0x242>
 8003e2a:	9904      	ldr	r1, [sp, #16]
 8003e2c:	1905      	adds	r5, r0, r4
 8003e2e:	4411      	add	r1, r2
 8003e30:	9104      	str	r1, [sp, #16]
 8003e32:	4622      	mov	r2, r4
 8003e34:	210a      	movs	r1, #10
 8003e36:	42aa      	cmp	r2, r5
 8003e38:	d113      	bne.n	8003e62 <_strtod_l+0x252>
 8003e3a:	1822      	adds	r2, r4, r0
 8003e3c:	2a08      	cmp	r2, #8
 8003e3e:	f104 0401 	add.w	r4, r4, #1
 8003e42:	4404      	add	r4, r0
 8003e44:	dc1b      	bgt.n	8003e7e <_strtod_l+0x26e>
 8003e46:	220a      	movs	r2, #10
 8003e48:	9906      	ldr	r1, [sp, #24]
 8003e4a:	fb02 3301 	mla	r3, r2, r1, r3
 8003e4e:	9306      	str	r3, [sp, #24]
 8003e50:	2200      	movs	r2, #0
 8003e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e54:	4610      	mov	r0, r2
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	911b      	str	r1, [sp, #108]	; 0x6c
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	e7ca      	b.n	8003df4 <_strtod_l+0x1e4>
 8003e5e:	4658      	mov	r0, fp
 8003e60:	e7d3      	b.n	8003e0a <_strtod_l+0x1fa>
 8003e62:	2a08      	cmp	r2, #8
 8003e64:	dc04      	bgt.n	8003e70 <_strtod_l+0x260>
 8003e66:	9f06      	ldr	r7, [sp, #24]
 8003e68:	434f      	muls	r7, r1
 8003e6a:	9706      	str	r7, [sp, #24]
 8003e6c:	3201      	adds	r2, #1
 8003e6e:	e7e2      	b.n	8003e36 <_strtod_l+0x226>
 8003e70:	1c57      	adds	r7, r2, #1
 8003e72:	2f10      	cmp	r7, #16
 8003e74:	bfde      	ittt	le
 8003e76:	9f05      	ldrle	r7, [sp, #20]
 8003e78:	434f      	mulle	r7, r1
 8003e7a:	9705      	strle	r7, [sp, #20]
 8003e7c:	e7f6      	b.n	8003e6c <_strtod_l+0x25c>
 8003e7e:	2c10      	cmp	r4, #16
 8003e80:	bfdf      	itttt	le
 8003e82:	220a      	movle	r2, #10
 8003e84:	9905      	ldrle	r1, [sp, #20]
 8003e86:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e8a:	9305      	strle	r3, [sp, #20]
 8003e8c:	e7e0      	b.n	8003e50 <_strtod_l+0x240>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2201      	movs	r2, #1
 8003e92:	9304      	str	r3, [sp, #16]
 8003e94:	e77c      	b.n	8003d90 <_strtod_l+0x180>
 8003e96:	2700      	movs	r7, #0
 8003e98:	1cb3      	adds	r3, r6, #2
 8003e9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e9c:	78b3      	ldrb	r3, [r6, #2]
 8003e9e:	e784      	b.n	8003daa <_strtod_l+0x19a>
 8003ea0:	2701      	movs	r7, #1
 8003ea2:	e7f9      	b.n	8003e98 <_strtod_l+0x288>
 8003ea4:	08007998 	.word	0x08007998
 8003ea8:	08007744 	.word	0x08007744
 8003eac:	7ff00000 	.word	0x7ff00000
 8003eb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	911b      	str	r1, [sp, #108]	; 0x6c
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b30      	cmp	r3, #48	; 0x30
 8003eba:	d0f9      	beq.n	8003eb0 <_strtod_l+0x2a0>
 8003ebc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003ec0:	2908      	cmp	r1, #8
 8003ec2:	f63f af78 	bhi.w	8003db6 <_strtod_l+0x1a6>
 8003ec6:	f04f 0e0a 	mov.w	lr, #10
 8003eca:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ed4:	1c59      	adds	r1, r3, #1
 8003ed6:	911b      	str	r1, [sp, #108]	; 0x6c
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003ede:	2d09      	cmp	r5, #9
 8003ee0:	d935      	bls.n	8003f4e <_strtod_l+0x33e>
 8003ee2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003ee4:	1b49      	subs	r1, r1, r5
 8003ee6:	2908      	cmp	r1, #8
 8003ee8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003eec:	dc02      	bgt.n	8003ef4 <_strtod_l+0x2e4>
 8003eee:	4565      	cmp	r5, ip
 8003ef0:	bfa8      	it	ge
 8003ef2:	4665      	movge	r5, ip
 8003ef4:	b107      	cbz	r7, 8003ef8 <_strtod_l+0x2e8>
 8003ef6:	426d      	negs	r5, r5
 8003ef8:	2c00      	cmp	r4, #0
 8003efa:	d14c      	bne.n	8003f96 <_strtod_l+0x386>
 8003efc:	9907      	ldr	r1, [sp, #28]
 8003efe:	4301      	orrs	r1, r0
 8003f00:	f47f aec7 	bne.w	8003c92 <_strtod_l+0x82>
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	f47f aee0 	bne.w	8003cca <_strtod_l+0xba>
 8003f0a:	2b69      	cmp	r3, #105	; 0x69
 8003f0c:	d026      	beq.n	8003f5c <_strtod_l+0x34c>
 8003f0e:	dc23      	bgt.n	8003f58 <_strtod_l+0x348>
 8003f10:	2b49      	cmp	r3, #73	; 0x49
 8003f12:	d023      	beq.n	8003f5c <_strtod_l+0x34c>
 8003f14:	2b4e      	cmp	r3, #78	; 0x4e
 8003f16:	f47f aed8 	bne.w	8003cca <_strtod_l+0xba>
 8003f1a:	499c      	ldr	r1, [pc, #624]	; (800418c <_strtod_l+0x57c>)
 8003f1c:	a81b      	add	r0, sp, #108	; 0x6c
 8003f1e:	f001 fe2b 	bl	8005b78 <__match>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f43f aed1 	beq.w	8003cca <_strtod_l+0xba>
 8003f28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b28      	cmp	r3, #40	; 0x28
 8003f2e:	d12c      	bne.n	8003f8a <_strtod_l+0x37a>
 8003f30:	4997      	ldr	r1, [pc, #604]	; (8004190 <_strtod_l+0x580>)
 8003f32:	aa1e      	add	r2, sp, #120	; 0x78
 8003f34:	a81b      	add	r0, sp, #108	; 0x6c
 8003f36:	f001 fe33 	bl	8005ba0 <__hexnan>
 8003f3a:	2805      	cmp	r0, #5
 8003f3c:	d125      	bne.n	8003f8a <_strtod_l+0x37a>
 8003f3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f40:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003f44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003f48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003f4c:	e6a1      	b.n	8003c92 <_strtod_l+0x82>
 8003f4e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003f52:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003f56:	e7bc      	b.n	8003ed2 <_strtod_l+0x2c2>
 8003f58:	2b6e      	cmp	r3, #110	; 0x6e
 8003f5a:	e7dc      	b.n	8003f16 <_strtod_l+0x306>
 8003f5c:	498d      	ldr	r1, [pc, #564]	; (8004194 <_strtod_l+0x584>)
 8003f5e:	a81b      	add	r0, sp, #108	; 0x6c
 8003f60:	f001 fe0a 	bl	8005b78 <__match>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	f43f aeb0 	beq.w	8003cca <_strtod_l+0xba>
 8003f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f6c:	498a      	ldr	r1, [pc, #552]	; (8004198 <_strtod_l+0x588>)
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	a81b      	add	r0, sp, #108	; 0x6c
 8003f72:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f74:	f001 fe00 	bl	8005b78 <__match>
 8003f78:	b910      	cbnz	r0, 8003f80 <_strtod_l+0x370>
 8003f7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f80:	f04f 0800 	mov.w	r8, #0
 8003f84:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80041a8 <_strtod_l+0x598>
 8003f88:	e683      	b.n	8003c92 <_strtod_l+0x82>
 8003f8a:	4884      	ldr	r0, [pc, #528]	; (800419c <_strtod_l+0x58c>)
 8003f8c:	f002 fd98 	bl	8006ac0 <nan>
 8003f90:	4680      	mov	r8, r0
 8003f92:	4689      	mov	r9, r1
 8003f94:	e67d      	b.n	8003c92 <_strtod_l+0x82>
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	f1bb 0f00 	cmp.w	fp, #0
 8003f9c:	bf08      	it	eq
 8003f9e:	46a3      	moveq	fp, r4
 8003fa0:	1aeb      	subs	r3, r5, r3
 8003fa2:	2c10      	cmp	r4, #16
 8003fa4:	9806      	ldr	r0, [sp, #24]
 8003fa6:	4626      	mov	r6, r4
 8003fa8:	9307      	str	r3, [sp, #28]
 8003faa:	bfa8      	it	ge
 8003fac:	2610      	movge	r6, #16
 8003fae:	f7fc fa19 	bl	80003e4 <__aeabi_ui2d>
 8003fb2:	2c09      	cmp	r4, #9
 8003fb4:	4680      	mov	r8, r0
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	dd13      	ble.n	8003fe2 <_strtod_l+0x3d2>
 8003fba:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <_strtod_l+0x590>)
 8003fbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003fc0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003fc4:	f7fc fa88 	bl	80004d8 <__aeabi_dmul>
 8003fc8:	4680      	mov	r8, r0
 8003fca:	9805      	ldr	r0, [sp, #20]
 8003fcc:	4689      	mov	r9, r1
 8003fce:	f7fc fa09 	bl	80003e4 <__aeabi_ui2d>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	4649      	mov	r1, r9
 8003fda:	f7fc f8c7 	bl	800016c <__adddf3>
 8003fde:	4680      	mov	r8, r0
 8003fe0:	4689      	mov	r9, r1
 8003fe2:	2c0f      	cmp	r4, #15
 8003fe4:	dc36      	bgt.n	8004054 <_strtod_l+0x444>
 8003fe6:	9b07      	ldr	r3, [sp, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f ae52 	beq.w	8003c92 <_strtod_l+0x82>
 8003fee:	dd22      	ble.n	8004036 <_strtod_l+0x426>
 8003ff0:	2b16      	cmp	r3, #22
 8003ff2:	dc09      	bgt.n	8004008 <_strtod_l+0x3f8>
 8003ff4:	4c6a      	ldr	r4, [pc, #424]	; (80041a0 <_strtod_l+0x590>)
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004002:	f7fc fa69 	bl	80004d8 <__aeabi_dmul>
 8004006:	e7c3      	b.n	8003f90 <_strtod_l+0x380>
 8004008:	9a07      	ldr	r2, [sp, #28]
 800400a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800400e:	4293      	cmp	r3, r2
 8004010:	db20      	blt.n	8004054 <_strtod_l+0x444>
 8004012:	4d63      	ldr	r5, [pc, #396]	; (80041a0 <_strtod_l+0x590>)
 8004014:	f1c4 040f 	rsb	r4, r4, #15
 8004018:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800401c:	4642      	mov	r2, r8
 800401e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004022:	464b      	mov	r3, r9
 8004024:	f7fc fa58 	bl	80004d8 <__aeabi_dmul>
 8004028:	9b07      	ldr	r3, [sp, #28]
 800402a:	1b1c      	subs	r4, r3, r4
 800402c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004034:	e7e5      	b.n	8004002 <_strtod_l+0x3f2>
 8004036:	9b07      	ldr	r3, [sp, #28]
 8004038:	3316      	adds	r3, #22
 800403a:	db0b      	blt.n	8004054 <_strtod_l+0x444>
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <_strtod_l+0x590>)
 8004040:	1b5d      	subs	r5, r3, r5
 8004042:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004046:	4640      	mov	r0, r8
 8004048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc fb6d 	bl	800072c <__aeabi_ddiv>
 8004052:	e79d      	b.n	8003f90 <_strtod_l+0x380>
 8004054:	9b07      	ldr	r3, [sp, #28]
 8004056:	1ba6      	subs	r6, r4, r6
 8004058:	441e      	add	r6, r3
 800405a:	2e00      	cmp	r6, #0
 800405c:	dd71      	ble.n	8004142 <_strtod_l+0x532>
 800405e:	f016 030f 	ands.w	r3, r6, #15
 8004062:	d00a      	beq.n	800407a <_strtod_l+0x46a>
 8004064:	494e      	ldr	r1, [pc, #312]	; (80041a0 <_strtod_l+0x590>)
 8004066:	4642      	mov	r2, r8
 8004068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800406c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004070:	464b      	mov	r3, r9
 8004072:	f7fc fa31 	bl	80004d8 <__aeabi_dmul>
 8004076:	4680      	mov	r8, r0
 8004078:	4689      	mov	r9, r1
 800407a:	f036 060f 	bics.w	r6, r6, #15
 800407e:	d050      	beq.n	8004122 <_strtod_l+0x512>
 8004080:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004084:	dd27      	ble.n	80040d6 <_strtod_l+0x4c6>
 8004086:	f04f 0b00 	mov.w	fp, #0
 800408a:	f8cd b010 	str.w	fp, [sp, #16]
 800408e:	f8cd b020 	str.w	fp, [sp, #32]
 8004092:	f8cd b018 	str.w	fp, [sp, #24]
 8004096:	2322      	movs	r3, #34	; 0x22
 8004098:	f04f 0800 	mov.w	r8, #0
 800409c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80041a8 <_strtod_l+0x598>
 80040a0:	f8ca 3000 	str.w	r3, [sl]
 80040a4:	9b08      	ldr	r3, [sp, #32]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f43f adf3 	beq.w	8003c92 <_strtod_l+0x82>
 80040ac:	4650      	mov	r0, sl
 80040ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040b0:	f001 fe7e 	bl	8005db0 <_Bfree>
 80040b4:	4650      	mov	r0, sl
 80040b6:	9906      	ldr	r1, [sp, #24]
 80040b8:	f001 fe7a 	bl	8005db0 <_Bfree>
 80040bc:	4650      	mov	r0, sl
 80040be:	9904      	ldr	r1, [sp, #16]
 80040c0:	f001 fe76 	bl	8005db0 <_Bfree>
 80040c4:	4650      	mov	r0, sl
 80040c6:	9908      	ldr	r1, [sp, #32]
 80040c8:	f001 fe72 	bl	8005db0 <_Bfree>
 80040cc:	4659      	mov	r1, fp
 80040ce:	4650      	mov	r0, sl
 80040d0:	f001 fe6e 	bl	8005db0 <_Bfree>
 80040d4:	e5dd      	b.n	8003c92 <_strtod_l+0x82>
 80040d6:	2300      	movs	r3, #0
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	461f      	mov	r7, r3
 80040de:	1136      	asrs	r6, r6, #4
 80040e0:	2e01      	cmp	r6, #1
 80040e2:	dc21      	bgt.n	8004128 <_strtod_l+0x518>
 80040e4:	b10b      	cbz	r3, 80040ea <_strtod_l+0x4da>
 80040e6:	4680      	mov	r8, r0
 80040e8:	4689      	mov	r9, r1
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <_strtod_l+0x594>)
 80040ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80040f0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80040f4:	4642      	mov	r2, r8
 80040f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040fa:	464b      	mov	r3, r9
 80040fc:	f7fc f9ec 	bl	80004d8 <__aeabi_dmul>
 8004100:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <_strtod_l+0x598>)
 8004102:	460a      	mov	r2, r1
 8004104:	400b      	ands	r3, r1
 8004106:	4929      	ldr	r1, [pc, #164]	; (80041ac <_strtod_l+0x59c>)
 8004108:	4680      	mov	r8, r0
 800410a:	428b      	cmp	r3, r1
 800410c:	d8bb      	bhi.n	8004086 <_strtod_l+0x476>
 800410e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004112:	428b      	cmp	r3, r1
 8004114:	bf86      	itte	hi
 8004116:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800411a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80041b0 <_strtod_l+0x5a0>
 800411e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004122:	2300      	movs	r3, #0
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	e07e      	b.n	8004226 <_strtod_l+0x616>
 8004128:	07f2      	lsls	r2, r6, #31
 800412a:	d507      	bpl.n	800413c <_strtod_l+0x52c>
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <_strtod_l+0x594>)
 800412e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc f9cf 	bl	80004d8 <__aeabi_dmul>
 800413a:	2301      	movs	r3, #1
 800413c:	3701      	adds	r7, #1
 800413e:	1076      	asrs	r6, r6, #1
 8004140:	e7ce      	b.n	80040e0 <_strtod_l+0x4d0>
 8004142:	d0ee      	beq.n	8004122 <_strtod_l+0x512>
 8004144:	4276      	negs	r6, r6
 8004146:	f016 020f 	ands.w	r2, r6, #15
 800414a:	d00a      	beq.n	8004162 <_strtod_l+0x552>
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <_strtod_l+0x590>)
 800414e:	4640      	mov	r0, r8
 8004150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004154:	4649      	mov	r1, r9
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc fae7 	bl	800072c <__aeabi_ddiv>
 800415e:	4680      	mov	r8, r0
 8004160:	4689      	mov	r9, r1
 8004162:	1136      	asrs	r6, r6, #4
 8004164:	d0dd      	beq.n	8004122 <_strtod_l+0x512>
 8004166:	2e1f      	cmp	r6, #31
 8004168:	dd24      	ble.n	80041b4 <_strtod_l+0x5a4>
 800416a:	f04f 0b00 	mov.w	fp, #0
 800416e:	f8cd b010 	str.w	fp, [sp, #16]
 8004172:	f8cd b020 	str.w	fp, [sp, #32]
 8004176:	f8cd b018 	str.w	fp, [sp, #24]
 800417a:	2322      	movs	r3, #34	; 0x22
 800417c:	f04f 0800 	mov.w	r8, #0
 8004180:	f04f 0900 	mov.w	r9, #0
 8004184:	f8ca 3000 	str.w	r3, [sl]
 8004188:	e78c      	b.n	80040a4 <_strtod_l+0x494>
 800418a:	bf00      	nop
 800418c:	08007715 	.word	0x08007715
 8004190:	08007758 	.word	0x08007758
 8004194:	0800770d 	.word	0x0800770d
 8004198:	0800789c 	.word	0x0800789c
 800419c:	080076bb 	.word	0x080076bb
 80041a0:	08007a38 	.word	0x08007a38
 80041a4:	08007a10 	.word	0x08007a10
 80041a8:	7ff00000 	.word	0x7ff00000
 80041ac:	7ca00000 	.word	0x7ca00000
 80041b0:	7fefffff 	.word	0x7fefffff
 80041b4:	f016 0310 	ands.w	r3, r6, #16
 80041b8:	bf18      	it	ne
 80041ba:	236a      	movne	r3, #106	; 0x6a
 80041bc:	4640      	mov	r0, r8
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	4649      	mov	r1, r9
 80041c2:	2300      	movs	r3, #0
 80041c4:	4fb2      	ldr	r7, [pc, #712]	; (8004490 <_strtod_l+0x880>)
 80041c6:	07f2      	lsls	r2, r6, #31
 80041c8:	d504      	bpl.n	80041d4 <_strtod_l+0x5c4>
 80041ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ce:	f7fc f983 	bl	80004d8 <__aeabi_dmul>
 80041d2:	2301      	movs	r3, #1
 80041d4:	1076      	asrs	r6, r6, #1
 80041d6:	f107 0708 	add.w	r7, r7, #8
 80041da:	d1f4      	bne.n	80041c6 <_strtod_l+0x5b6>
 80041dc:	b10b      	cbz	r3, 80041e2 <_strtod_l+0x5d2>
 80041de:	4680      	mov	r8, r0
 80041e0:	4689      	mov	r9, r1
 80041e2:	9b05      	ldr	r3, [sp, #20]
 80041e4:	b1bb      	cbz	r3, 8004216 <_strtod_l+0x606>
 80041e6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80041ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	4649      	mov	r1, r9
 80041f2:	dd10      	ble.n	8004216 <_strtod_l+0x606>
 80041f4:	2b1f      	cmp	r3, #31
 80041f6:	f340 812b 	ble.w	8004450 <_strtod_l+0x840>
 80041fa:	2b34      	cmp	r3, #52	; 0x34
 80041fc:	bfd8      	it	le
 80041fe:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	bfcf      	iteee	gt
 8004208:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800420c:	3b20      	suble	r3, #32
 800420e:	fa02 f303 	lslle.w	r3, r2, r3
 8004212:	ea03 0901 	andle.w	r9, r3, r1
 8004216:	2200      	movs	r2, #0
 8004218:	2300      	movs	r3, #0
 800421a:	4640      	mov	r0, r8
 800421c:	4649      	mov	r1, r9
 800421e:	f7fc fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8004222:	2800      	cmp	r0, #0
 8004224:	d1a1      	bne.n	800416a <_strtod_l+0x55a>
 8004226:	9b06      	ldr	r3, [sp, #24]
 8004228:	465a      	mov	r2, fp
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4650      	mov	r0, sl
 800422e:	4623      	mov	r3, r4
 8004230:	9908      	ldr	r1, [sp, #32]
 8004232:	f001 fe29 	bl	8005e88 <__s2b>
 8004236:	9008      	str	r0, [sp, #32]
 8004238:	2800      	cmp	r0, #0
 800423a:	f43f af24 	beq.w	8004086 <_strtod_l+0x476>
 800423e:	9b04      	ldr	r3, [sp, #16]
 8004240:	f04f 0b00 	mov.w	fp, #0
 8004244:	1b5d      	subs	r5, r3, r5
 8004246:	9b07      	ldr	r3, [sp, #28]
 8004248:	f8cd b010 	str.w	fp, [sp, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	bfb4      	ite	lt
 8004250:	462b      	movlt	r3, r5
 8004252:	2300      	movge	r3, #0
 8004254:	930e      	str	r3, [sp, #56]	; 0x38
 8004256:	9b07      	ldr	r3, [sp, #28]
 8004258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800425c:	9316      	str	r3, [sp, #88]	; 0x58
 800425e:	9b08      	ldr	r3, [sp, #32]
 8004260:	4650      	mov	r0, sl
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	f001 fd64 	bl	8005d30 <_Balloc>
 8004268:	9006      	str	r0, [sp, #24]
 800426a:	2800      	cmp	r0, #0
 800426c:	f43f af13 	beq.w	8004096 <_strtod_l+0x486>
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	300c      	adds	r0, #12
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	f103 010c 	add.w	r1, r3, #12
 800427a:	3202      	adds	r2, #2
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	f7fe fdf7 	bl	8002e70 <memcpy>
 8004282:	ab1e      	add	r3, sp, #120	; 0x78
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	ab1d      	add	r3, sp, #116	; 0x74
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4642      	mov	r2, r8
 800428c:	464b      	mov	r3, r9
 800428e:	4650      	mov	r0, sl
 8004290:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004294:	f002 f936 	bl	8006504 <__d2b>
 8004298:	901c      	str	r0, [sp, #112]	; 0x70
 800429a:	2800      	cmp	r0, #0
 800429c:	f43f aefb 	beq.w	8004096 <_strtod_l+0x486>
 80042a0:	2101      	movs	r1, #1
 80042a2:	4650      	mov	r0, sl
 80042a4:	f001 fe88 	bl	8005fb8 <__i2b>
 80042a8:	4603      	mov	r3, r0
 80042aa:	9004      	str	r0, [sp, #16]
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f43f aef2 	beq.w	8004096 <_strtod_l+0x486>
 80042b2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80042b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	bfab      	itete	ge
 80042ba:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80042bc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80042be:	18ee      	addge	r6, r5, r3
 80042c0:	1b5c      	sublt	r4, r3, r5
 80042c2:	9b05      	ldr	r3, [sp, #20]
 80042c4:	bfa8      	it	ge
 80042c6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80042c8:	eba5 0503 	sub.w	r5, r5, r3
 80042cc:	4415      	add	r5, r2
 80042ce:	4b71      	ldr	r3, [pc, #452]	; (8004494 <_strtod_l+0x884>)
 80042d0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80042d4:	bfb8      	it	lt
 80042d6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80042d8:	429d      	cmp	r5, r3
 80042da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80042de:	f280 80c9 	bge.w	8004474 <_strtod_l+0x864>
 80042e2:	1b5b      	subs	r3, r3, r5
 80042e4:	2b1f      	cmp	r3, #31
 80042e6:	f04f 0701 	mov.w	r7, #1
 80042ea:	eba2 0203 	sub.w	r2, r2, r3
 80042ee:	f300 80b6 	bgt.w	800445e <_strtod_l+0x84e>
 80042f2:	2500      	movs	r5, #0
 80042f4:	fa07 f303 	lsl.w	r3, r7, r3
 80042f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80042fa:	18b7      	adds	r7, r6, r2
 80042fc:	9b05      	ldr	r3, [sp, #20]
 80042fe:	42be      	cmp	r6, r7
 8004300:	4414      	add	r4, r2
 8004302:	441c      	add	r4, r3
 8004304:	4633      	mov	r3, r6
 8004306:	bfa8      	it	ge
 8004308:	463b      	movge	r3, r7
 800430a:	42a3      	cmp	r3, r4
 800430c:	bfa8      	it	ge
 800430e:	4623      	movge	r3, r4
 8004310:	2b00      	cmp	r3, #0
 8004312:	bfc2      	ittt	gt
 8004314:	1aff      	subgt	r7, r7, r3
 8004316:	1ae4      	subgt	r4, r4, r3
 8004318:	1af6      	subgt	r6, r6, r3
 800431a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	dd17      	ble.n	8004350 <_strtod_l+0x740>
 8004320:	461a      	mov	r2, r3
 8004322:	4650      	mov	r0, sl
 8004324:	9904      	ldr	r1, [sp, #16]
 8004326:	f001 ff01 	bl	800612c <__pow5mult>
 800432a:	9004      	str	r0, [sp, #16]
 800432c:	2800      	cmp	r0, #0
 800432e:	f43f aeb2 	beq.w	8004096 <_strtod_l+0x486>
 8004332:	4601      	mov	r1, r0
 8004334:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004336:	4650      	mov	r0, sl
 8004338:	f001 fe54 	bl	8005fe4 <__multiply>
 800433c:	9009      	str	r0, [sp, #36]	; 0x24
 800433e:	2800      	cmp	r0, #0
 8004340:	f43f aea9 	beq.w	8004096 <_strtod_l+0x486>
 8004344:	4650      	mov	r0, sl
 8004346:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004348:	f001 fd32 	bl	8005db0 <_Bfree>
 800434c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434e:	931c      	str	r3, [sp, #112]	; 0x70
 8004350:	2f00      	cmp	r7, #0
 8004352:	f300 8093 	bgt.w	800447c <_strtod_l+0x86c>
 8004356:	9b07      	ldr	r3, [sp, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	dd08      	ble.n	800436e <_strtod_l+0x75e>
 800435c:	4650      	mov	r0, sl
 800435e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004360:	9906      	ldr	r1, [sp, #24]
 8004362:	f001 fee3 	bl	800612c <__pow5mult>
 8004366:	9006      	str	r0, [sp, #24]
 8004368:	2800      	cmp	r0, #0
 800436a:	f43f ae94 	beq.w	8004096 <_strtod_l+0x486>
 800436e:	2c00      	cmp	r4, #0
 8004370:	dd08      	ble.n	8004384 <_strtod_l+0x774>
 8004372:	4622      	mov	r2, r4
 8004374:	4650      	mov	r0, sl
 8004376:	9906      	ldr	r1, [sp, #24]
 8004378:	f001 ff32 	bl	80061e0 <__lshift>
 800437c:	9006      	str	r0, [sp, #24]
 800437e:	2800      	cmp	r0, #0
 8004380:	f43f ae89 	beq.w	8004096 <_strtod_l+0x486>
 8004384:	2e00      	cmp	r6, #0
 8004386:	dd08      	ble.n	800439a <_strtod_l+0x78a>
 8004388:	4632      	mov	r2, r6
 800438a:	4650      	mov	r0, sl
 800438c:	9904      	ldr	r1, [sp, #16]
 800438e:	f001 ff27 	bl	80061e0 <__lshift>
 8004392:	9004      	str	r0, [sp, #16]
 8004394:	2800      	cmp	r0, #0
 8004396:	f43f ae7e 	beq.w	8004096 <_strtod_l+0x486>
 800439a:	4650      	mov	r0, sl
 800439c:	9a06      	ldr	r2, [sp, #24]
 800439e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043a0:	f001 ffa6 	bl	80062f0 <__mdiff>
 80043a4:	4683      	mov	fp, r0
 80043a6:	2800      	cmp	r0, #0
 80043a8:	f43f ae75 	beq.w	8004096 <_strtod_l+0x486>
 80043ac:	2400      	movs	r4, #0
 80043ae:	68c3      	ldr	r3, [r0, #12]
 80043b0:	9904      	ldr	r1, [sp, #16]
 80043b2:	60c4      	str	r4, [r0, #12]
 80043b4:	930d      	str	r3, [sp, #52]	; 0x34
 80043b6:	f001 ff7f 	bl	80062b8 <__mcmp>
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	da70      	bge.n	80044a0 <_strtod_l+0x890>
 80043be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043c0:	ea53 0308 	orrs.w	r3, r3, r8
 80043c4:	f040 8096 	bne.w	80044f4 <_strtod_l+0x8e4>
 80043c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 8091 	bne.w	80044f4 <_strtod_l+0x8e4>
 80043d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043d6:	0d1b      	lsrs	r3, r3, #20
 80043d8:	051b      	lsls	r3, r3, #20
 80043da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80043de:	f240 8089 	bls.w	80044f4 <_strtod_l+0x8e4>
 80043e2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80043e6:	b923      	cbnz	r3, 80043f2 <_strtod_l+0x7e2>
 80043e8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	f340 8081 	ble.w	80044f4 <_strtod_l+0x8e4>
 80043f2:	4659      	mov	r1, fp
 80043f4:	2201      	movs	r2, #1
 80043f6:	4650      	mov	r0, sl
 80043f8:	f001 fef2 	bl	80061e0 <__lshift>
 80043fc:	9904      	ldr	r1, [sp, #16]
 80043fe:	4683      	mov	fp, r0
 8004400:	f001 ff5a 	bl	80062b8 <__mcmp>
 8004404:	2800      	cmp	r0, #0
 8004406:	dd75      	ble.n	80044f4 <_strtod_l+0x8e4>
 8004408:	9905      	ldr	r1, [sp, #20]
 800440a:	464b      	mov	r3, r9
 800440c:	4a22      	ldr	r2, [pc, #136]	; (8004498 <_strtod_l+0x888>)
 800440e:	2900      	cmp	r1, #0
 8004410:	f000 8091 	beq.w	8004536 <_strtod_l+0x926>
 8004414:	ea02 0109 	and.w	r1, r2, r9
 8004418:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800441c:	f300 808b 	bgt.w	8004536 <_strtod_l+0x926>
 8004420:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004424:	f77f aea9 	ble.w	800417a <_strtod_l+0x56a>
 8004428:	2300      	movs	r3, #0
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <_strtod_l+0x88c>)
 800442c:	4640      	mov	r0, r8
 800442e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004432:	4649      	mov	r1, r9
 8004434:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004438:	f7fc f84e 	bl	80004d8 <__aeabi_dmul>
 800443c:	460b      	mov	r3, r1
 800443e:	4303      	orrs	r3, r0
 8004440:	bf08      	it	eq
 8004442:	2322      	moveq	r3, #34	; 0x22
 8004444:	4680      	mov	r8, r0
 8004446:	4689      	mov	r9, r1
 8004448:	bf08      	it	eq
 800444a:	f8ca 3000 	streq.w	r3, [sl]
 800444e:	e62d      	b.n	80040ac <_strtod_l+0x49c>
 8004450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	ea03 0808 	and.w	r8, r3, r8
 800445c:	e6db      	b.n	8004216 <_strtod_l+0x606>
 800445e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004462:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004466:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800446a:	35e2      	adds	r5, #226	; 0xe2
 800446c:	fa07 f505 	lsl.w	r5, r7, r5
 8004470:	970f      	str	r7, [sp, #60]	; 0x3c
 8004472:	e742      	b.n	80042fa <_strtod_l+0x6ea>
 8004474:	2301      	movs	r3, #1
 8004476:	2500      	movs	r5, #0
 8004478:	930f      	str	r3, [sp, #60]	; 0x3c
 800447a:	e73e      	b.n	80042fa <_strtod_l+0x6ea>
 800447c:	463a      	mov	r2, r7
 800447e:	4650      	mov	r0, sl
 8004480:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004482:	f001 fead 	bl	80061e0 <__lshift>
 8004486:	901c      	str	r0, [sp, #112]	; 0x70
 8004488:	2800      	cmp	r0, #0
 800448a:	f47f af64 	bne.w	8004356 <_strtod_l+0x746>
 800448e:	e602      	b.n	8004096 <_strtod_l+0x486>
 8004490:	08007770 	.word	0x08007770
 8004494:	fffffc02 	.word	0xfffffc02
 8004498:	7ff00000 	.word	0x7ff00000
 800449c:	39500000 	.word	0x39500000
 80044a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80044a4:	d166      	bne.n	8004574 <_strtod_l+0x964>
 80044a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044ac:	b35a      	cbz	r2, 8004506 <_strtod_l+0x8f6>
 80044ae:	4a9c      	ldr	r2, [pc, #624]	; (8004720 <_strtod_l+0xb10>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d12c      	bne.n	800450e <_strtod_l+0x8fe>
 80044b4:	9b05      	ldr	r3, [sp, #20]
 80044b6:	4640      	mov	r0, r8
 80044b8:	b303      	cbz	r3, 80044fc <_strtod_l+0x8ec>
 80044ba:	464b      	mov	r3, r9
 80044bc:	4a99      	ldr	r2, [pc, #612]	; (8004724 <_strtod_l+0xb14>)
 80044be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044c2:	401a      	ands	r2, r3
 80044c4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80044c8:	d81b      	bhi.n	8004502 <_strtod_l+0x8f2>
 80044ca:	0d12      	lsrs	r2, r2, #20
 80044cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	4298      	cmp	r0, r3
 80044d6:	d11a      	bne.n	800450e <_strtod_l+0x8fe>
 80044d8:	4b93      	ldr	r3, [pc, #588]	; (8004728 <_strtod_l+0xb18>)
 80044da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044dc:	429a      	cmp	r2, r3
 80044de:	d102      	bne.n	80044e6 <_strtod_l+0x8d6>
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f add8 	beq.w	8004096 <_strtod_l+0x486>
 80044e6:	f04f 0800 	mov.w	r8, #0
 80044ea:	4b8e      	ldr	r3, [pc, #568]	; (8004724 <_strtod_l+0xb14>)
 80044ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ee:	401a      	ands	r2, r3
 80044f0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80044f4:	9b05      	ldr	r3, [sp, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d196      	bne.n	8004428 <_strtod_l+0x818>
 80044fa:	e5d7      	b.n	80040ac <_strtod_l+0x49c>
 80044fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004500:	e7e8      	b.n	80044d4 <_strtod_l+0x8c4>
 8004502:	460b      	mov	r3, r1
 8004504:	e7e6      	b.n	80044d4 <_strtod_l+0x8c4>
 8004506:	ea53 0308 	orrs.w	r3, r3, r8
 800450a:	f43f af7d 	beq.w	8004408 <_strtod_l+0x7f8>
 800450e:	b1e5      	cbz	r5, 800454a <_strtod_l+0x93a>
 8004510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004512:	421d      	tst	r5, r3
 8004514:	d0ee      	beq.n	80044f4 <_strtod_l+0x8e4>
 8004516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	9a05      	ldr	r2, [sp, #20]
 800451e:	b1c3      	cbz	r3, 8004552 <_strtod_l+0x942>
 8004520:	f7ff fb52 	bl	8003bc8 <sulp>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800452c:	f7fb fe1e 	bl	800016c <__adddf3>
 8004530:	4680      	mov	r8, r0
 8004532:	4689      	mov	r9, r1
 8004534:	e7de      	b.n	80044f4 <_strtod_l+0x8e4>
 8004536:	4013      	ands	r3, r2
 8004538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800453c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004540:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004544:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004548:	e7d4      	b.n	80044f4 <_strtod_l+0x8e4>
 800454a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800454c:	ea13 0f08 	tst.w	r3, r8
 8004550:	e7e0      	b.n	8004514 <_strtod_l+0x904>
 8004552:	f7ff fb39 	bl	8003bc8 <sulp>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800455e:	f7fb fe03 	bl	8000168 <__aeabi_dsub>
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	4680      	mov	r8, r0
 8004568:	4689      	mov	r9, r1
 800456a:	f7fc fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800456e:	2800      	cmp	r0, #0
 8004570:	d0c0      	beq.n	80044f4 <_strtod_l+0x8e4>
 8004572:	e602      	b.n	800417a <_strtod_l+0x56a>
 8004574:	4658      	mov	r0, fp
 8004576:	9904      	ldr	r1, [sp, #16]
 8004578:	f002 f820 	bl	80065bc <__ratio>
 800457c:	2200      	movs	r2, #0
 800457e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004582:	4606      	mov	r6, r0
 8004584:	460f      	mov	r7, r1
 8004586:	f7fc fa23 	bl	80009d0 <__aeabi_dcmple>
 800458a:	2800      	cmp	r0, #0
 800458c:	d075      	beq.n	800467a <_strtod_l+0xa6a>
 800458e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004590:	2b00      	cmp	r3, #0
 8004592:	d047      	beq.n	8004624 <_strtod_l+0xa14>
 8004594:	2600      	movs	r6, #0
 8004596:	4f65      	ldr	r7, [pc, #404]	; (800472c <_strtod_l+0xb1c>)
 8004598:	4d64      	ldr	r5, [pc, #400]	; (800472c <_strtod_l+0xb1c>)
 800459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a0:	0d1b      	lsrs	r3, r3, #20
 80045a2:	051b      	lsls	r3, r3, #20
 80045a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80045a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <_strtod_l+0xb20>)
 80045aa:	429a      	cmp	r2, r3
 80045ac:	f040 80c8 	bne.w	8004740 <_strtod_l+0xb30>
 80045b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80045b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ba:	4640      	mov	r0, r8
 80045bc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80045c0:	4649      	mov	r1, r9
 80045c2:	f001 ff25 	bl	8006410 <__ulp>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4630      	mov	r0, r6
 80045cc:	4639      	mov	r1, r7
 80045ce:	f7fb ff83 	bl	80004d8 <__aeabi_dmul>
 80045d2:	4642      	mov	r2, r8
 80045d4:	464b      	mov	r3, r9
 80045d6:	f7fb fdc9 	bl	800016c <__adddf3>
 80045da:	460b      	mov	r3, r1
 80045dc:	4951      	ldr	r1, [pc, #324]	; (8004724 <_strtod_l+0xb14>)
 80045de:	4a55      	ldr	r2, [pc, #340]	; (8004734 <_strtod_l+0xb24>)
 80045e0:	4019      	ands	r1, r3
 80045e2:	4291      	cmp	r1, r2
 80045e4:	4680      	mov	r8, r0
 80045e6:	d95e      	bls.n	80046a6 <_strtod_l+0xa96>
 80045e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d103      	bne.n	80045fa <_strtod_l+0x9ea>
 80045f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f4:	3301      	adds	r3, #1
 80045f6:	f43f ad4e 	beq.w	8004096 <_strtod_l+0x486>
 80045fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80045fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004728 <_strtod_l+0xb18>
 8004602:	4650      	mov	r0, sl
 8004604:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004606:	f001 fbd3 	bl	8005db0 <_Bfree>
 800460a:	4650      	mov	r0, sl
 800460c:	9906      	ldr	r1, [sp, #24]
 800460e:	f001 fbcf 	bl	8005db0 <_Bfree>
 8004612:	4650      	mov	r0, sl
 8004614:	9904      	ldr	r1, [sp, #16]
 8004616:	f001 fbcb 	bl	8005db0 <_Bfree>
 800461a:	4659      	mov	r1, fp
 800461c:	4650      	mov	r0, sl
 800461e:	f001 fbc7 	bl	8005db0 <_Bfree>
 8004622:	e61c      	b.n	800425e <_strtod_l+0x64e>
 8004624:	f1b8 0f00 	cmp.w	r8, #0
 8004628:	d119      	bne.n	800465e <_strtod_l+0xa4e>
 800462a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004630:	b9e3      	cbnz	r3, 800466c <_strtod_l+0xa5c>
 8004632:	2200      	movs	r2, #0
 8004634:	4630      	mov	r0, r6
 8004636:	4639      	mov	r1, r7
 8004638:	4b3c      	ldr	r3, [pc, #240]	; (800472c <_strtod_l+0xb1c>)
 800463a:	f7fc f9bf 	bl	80009bc <__aeabi_dcmplt>
 800463e:	b9c8      	cbnz	r0, 8004674 <_strtod_l+0xa64>
 8004640:	2200      	movs	r2, #0
 8004642:	4630      	mov	r0, r6
 8004644:	4639      	mov	r1, r7
 8004646:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <_strtod_l+0xb28>)
 8004648:	f7fb ff46 	bl	80004d8 <__aeabi_dmul>
 800464c:	4604      	mov	r4, r0
 800464e:	460d      	mov	r5, r1
 8004650:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004654:	9418      	str	r4, [sp, #96]	; 0x60
 8004656:	9319      	str	r3, [sp, #100]	; 0x64
 8004658:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800465c:	e79d      	b.n	800459a <_strtod_l+0x98a>
 800465e:	f1b8 0f01 	cmp.w	r8, #1
 8004662:	d103      	bne.n	800466c <_strtod_l+0xa5c>
 8004664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	f43f ad87 	beq.w	800417a <_strtod_l+0x56a>
 800466c:	2600      	movs	r6, #0
 800466e:	2400      	movs	r4, #0
 8004670:	4f32      	ldr	r7, [pc, #200]	; (800473c <_strtod_l+0xb2c>)
 8004672:	e791      	b.n	8004598 <_strtod_l+0x988>
 8004674:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004676:	4d30      	ldr	r5, [pc, #192]	; (8004738 <_strtod_l+0xb28>)
 8004678:	e7ea      	b.n	8004650 <_strtod_l+0xa40>
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <_strtod_l+0xb28>)
 800467c:	2200      	movs	r2, #0
 800467e:	4630      	mov	r0, r6
 8004680:	4639      	mov	r1, r7
 8004682:	f7fb ff29 	bl	80004d8 <__aeabi_dmul>
 8004686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004688:	4604      	mov	r4, r0
 800468a:	460d      	mov	r5, r1
 800468c:	b933      	cbnz	r3, 800469c <_strtod_l+0xa8c>
 800468e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004692:	9010      	str	r0, [sp, #64]	; 0x40
 8004694:	9311      	str	r3, [sp, #68]	; 0x44
 8004696:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800469a:	e77e      	b.n	800459a <_strtod_l+0x98a>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80046a4:	e7f7      	b.n	8004696 <_strtod_l+0xa86>
 80046a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80046aa:	9b05      	ldr	r3, [sp, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1a8      	bne.n	8004602 <_strtod_l+0x9f2>
 80046b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046b6:	0d1b      	lsrs	r3, r3, #20
 80046b8:	051b      	lsls	r3, r3, #20
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d1a1      	bne.n	8004602 <_strtod_l+0x9f2>
 80046be:	4620      	mov	r0, r4
 80046c0:	4629      	mov	r1, r5
 80046c2:	f7fc fa51 	bl	8000b68 <__aeabi_d2lz>
 80046c6:	f7fb fed9 	bl	800047c <__aeabi_l2d>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4620      	mov	r0, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	f7fb fd49 	bl	8000168 <__aeabi_dsub>
 80046d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046dc:	ea43 0308 	orr.w	r3, r3, r8
 80046e0:	4313      	orrs	r3, r2
 80046e2:	4604      	mov	r4, r0
 80046e4:	460d      	mov	r5, r1
 80046e6:	d066      	beq.n	80047b6 <_strtod_l+0xba6>
 80046e8:	a309      	add	r3, pc, #36	; (adr r3, 8004710 <_strtod_l+0xb00>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f7fc f965 	bl	80009bc <__aeabi_dcmplt>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f47f acda 	bne.w	80040ac <_strtod_l+0x49c>
 80046f8:	a307      	add	r3, pc, #28	; (adr r3, 8004718 <_strtod_l+0xb08>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc f979 	bl	80009f8 <__aeabi_dcmpgt>
 8004706:	2800      	cmp	r0, #0
 8004708:	f43f af7b 	beq.w	8004602 <_strtod_l+0x9f2>
 800470c:	e4ce      	b.n	80040ac <_strtod_l+0x49c>
 800470e:	bf00      	nop
 8004710:	94a03595 	.word	0x94a03595
 8004714:	3fdfffff 	.word	0x3fdfffff
 8004718:	35afe535 	.word	0x35afe535
 800471c:	3fe00000 	.word	0x3fe00000
 8004720:	000fffff 	.word	0x000fffff
 8004724:	7ff00000 	.word	0x7ff00000
 8004728:	7fefffff 	.word	0x7fefffff
 800472c:	3ff00000 	.word	0x3ff00000
 8004730:	7fe00000 	.word	0x7fe00000
 8004734:	7c9fffff 	.word	0x7c9fffff
 8004738:	3fe00000 	.word	0x3fe00000
 800473c:	bff00000 	.word	0xbff00000
 8004740:	9b05      	ldr	r3, [sp, #20]
 8004742:	b313      	cbz	r3, 800478a <_strtod_l+0xb7a>
 8004744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004746:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800474a:	d81e      	bhi.n	800478a <_strtod_l+0xb7a>
 800474c:	a326      	add	r3, pc, #152	; (adr r3, 80047e8 <_strtod_l+0xbd8>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	f7fc f93b 	bl	80009d0 <__aeabi_dcmple>
 800475a:	b190      	cbz	r0, 8004782 <_strtod_l+0xb72>
 800475c:	4629      	mov	r1, r5
 800475e:	4620      	mov	r0, r4
 8004760:	f7fc f992 	bl	8000a88 <__aeabi_d2uiz>
 8004764:	2801      	cmp	r0, #1
 8004766:	bf38      	it	cc
 8004768:	2001      	movcc	r0, #1
 800476a:	f7fb fe3b 	bl	80003e4 <__aeabi_ui2d>
 800476e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004770:	4604      	mov	r4, r0
 8004772:	460d      	mov	r5, r1
 8004774:	b9d3      	cbnz	r3, 80047ac <_strtod_l+0xb9c>
 8004776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800477a:	9012      	str	r0, [sp, #72]	; 0x48
 800477c:	9313      	str	r3, [sp, #76]	; 0x4c
 800477e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004782:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004784:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004788:	1a9f      	subs	r7, r3, r2
 800478a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800478e:	f001 fe3f 	bl	8006410 <__ulp>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4630      	mov	r0, r6
 8004798:	4639      	mov	r1, r7
 800479a:	f7fb fe9d 	bl	80004d8 <__aeabi_dmul>
 800479e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047a2:	f7fb fce3 	bl	800016c <__adddf3>
 80047a6:	4680      	mov	r8, r0
 80047a8:	4689      	mov	r9, r1
 80047aa:	e77e      	b.n	80046aa <_strtod_l+0xa9a>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80047b4:	e7e3      	b.n	800477e <_strtod_l+0xb6e>
 80047b6:	a30e      	add	r3, pc, #56	; (adr r3, 80047f0 <_strtod_l+0xbe0>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fc f8fe 	bl	80009bc <__aeabi_dcmplt>
 80047c0:	e7a1      	b.n	8004706 <_strtod_l+0xaf6>
 80047c2:	2300      	movs	r3, #0
 80047c4:	930c      	str	r3, [sp, #48]	; 0x30
 80047c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	f7ff ba65 	b.w	8003c9a <_strtod_l+0x8a>
 80047d0:	2b65      	cmp	r3, #101	; 0x65
 80047d2:	f43f ab5c 	beq.w	8003e8e <_strtod_l+0x27e>
 80047d6:	2b45      	cmp	r3, #69	; 0x45
 80047d8:	f43f ab59 	beq.w	8003e8e <_strtod_l+0x27e>
 80047dc:	2201      	movs	r2, #1
 80047de:	f7ff bb8d 	b.w	8003efc <_strtod_l+0x2ec>
 80047e2:	bf00      	nop
 80047e4:	f3af 8000 	nop.w
 80047e8:	ffc00000 	.word	0xffc00000
 80047ec:	41dfffff 	.word	0x41dfffff
 80047f0:	94a03595 	.word	0x94a03595
 80047f4:	3fcfffff 	.word	0x3fcfffff

080047f8 <_strtod_r>:
 80047f8:	4b01      	ldr	r3, [pc, #4]	; (8004800 <_strtod_r+0x8>)
 80047fa:	f7ff ba09 	b.w	8003c10 <_strtod_l>
 80047fe:	bf00      	nop
 8004800:	20000088 	.word	0x20000088

08004804 <_strtol_l.isra.0>:
 8004804:	2b01      	cmp	r3, #1
 8004806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480a:	4686      	mov	lr, r0
 800480c:	d001      	beq.n	8004812 <_strtol_l.isra.0+0xe>
 800480e:	2b24      	cmp	r3, #36	; 0x24
 8004810:	d906      	bls.n	8004820 <_strtol_l.isra.0+0x1c>
 8004812:	f7fe fb03 	bl	8002e1c <__errno>
 8004816:	2316      	movs	r3, #22
 8004818:	6003      	str	r3, [r0, #0]
 800481a:	2000      	movs	r0, #0
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	468c      	mov	ip, r1
 8004822:	4e3a      	ldr	r6, [pc, #232]	; (800490c <_strtol_l.isra.0+0x108>)
 8004824:	4660      	mov	r0, ip
 8004826:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800482a:	5da5      	ldrb	r5, [r4, r6]
 800482c:	f015 0508 	ands.w	r5, r5, #8
 8004830:	d1f8      	bne.n	8004824 <_strtol_l.isra.0+0x20>
 8004832:	2c2d      	cmp	r4, #45	; 0x2d
 8004834:	d133      	bne.n	800489e <_strtol_l.isra.0+0x9a>
 8004836:	f04f 0801 	mov.w	r8, #1
 800483a:	f89c 4000 	ldrb.w	r4, [ip]
 800483e:	f100 0c02 	add.w	ip, r0, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d05d      	beq.n	8004902 <_strtol_l.isra.0+0xfe>
 8004846:	2b10      	cmp	r3, #16
 8004848:	d10c      	bne.n	8004864 <_strtol_l.isra.0+0x60>
 800484a:	2c30      	cmp	r4, #48	; 0x30
 800484c:	d10a      	bne.n	8004864 <_strtol_l.isra.0+0x60>
 800484e:	f89c 0000 	ldrb.w	r0, [ip]
 8004852:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004856:	2858      	cmp	r0, #88	; 0x58
 8004858:	d14e      	bne.n	80048f8 <_strtol_l.isra.0+0xf4>
 800485a:	2310      	movs	r3, #16
 800485c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004860:	f10c 0c02 	add.w	ip, ip, #2
 8004864:	2500      	movs	r5, #0
 8004866:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800486a:	3f01      	subs	r7, #1
 800486c:	fbb7 f9f3 	udiv	r9, r7, r3
 8004870:	4628      	mov	r0, r5
 8004872:	fb03 7a19 	mls	sl, r3, r9, r7
 8004876:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800487a:	2e09      	cmp	r6, #9
 800487c:	d818      	bhi.n	80048b0 <_strtol_l.isra.0+0xac>
 800487e:	4634      	mov	r4, r6
 8004880:	42a3      	cmp	r3, r4
 8004882:	dd24      	ble.n	80048ce <_strtol_l.isra.0+0xca>
 8004884:	2d00      	cmp	r5, #0
 8004886:	db1f      	blt.n	80048c8 <_strtol_l.isra.0+0xc4>
 8004888:	4581      	cmp	r9, r0
 800488a:	d31d      	bcc.n	80048c8 <_strtol_l.isra.0+0xc4>
 800488c:	d101      	bne.n	8004892 <_strtol_l.isra.0+0x8e>
 800488e:	45a2      	cmp	sl, r4
 8004890:	db1a      	blt.n	80048c8 <_strtol_l.isra.0+0xc4>
 8004892:	2501      	movs	r5, #1
 8004894:	fb00 4003 	mla	r0, r0, r3, r4
 8004898:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800489c:	e7eb      	b.n	8004876 <_strtol_l.isra.0+0x72>
 800489e:	2c2b      	cmp	r4, #43	; 0x2b
 80048a0:	bf08      	it	eq
 80048a2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80048a6:	46a8      	mov	r8, r5
 80048a8:	bf08      	it	eq
 80048aa:	f100 0c02 	addeq.w	ip, r0, #2
 80048ae:	e7c8      	b.n	8004842 <_strtol_l.isra.0+0x3e>
 80048b0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80048b4:	2e19      	cmp	r6, #25
 80048b6:	d801      	bhi.n	80048bc <_strtol_l.isra.0+0xb8>
 80048b8:	3c37      	subs	r4, #55	; 0x37
 80048ba:	e7e1      	b.n	8004880 <_strtol_l.isra.0+0x7c>
 80048bc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80048c0:	2e19      	cmp	r6, #25
 80048c2:	d804      	bhi.n	80048ce <_strtol_l.isra.0+0xca>
 80048c4:	3c57      	subs	r4, #87	; 0x57
 80048c6:	e7db      	b.n	8004880 <_strtol_l.isra.0+0x7c>
 80048c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80048cc:	e7e4      	b.n	8004898 <_strtol_l.isra.0+0x94>
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	da08      	bge.n	80048e4 <_strtol_l.isra.0+0xe0>
 80048d2:	2322      	movs	r3, #34	; 0x22
 80048d4:	4638      	mov	r0, r7
 80048d6:	f8ce 3000 	str.w	r3, [lr]
 80048da:	2a00      	cmp	r2, #0
 80048dc:	d09e      	beq.n	800481c <_strtol_l.isra.0+0x18>
 80048de:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80048e2:	e007      	b.n	80048f4 <_strtol_l.isra.0+0xf0>
 80048e4:	f1b8 0f00 	cmp.w	r8, #0
 80048e8:	d000      	beq.n	80048ec <_strtol_l.isra.0+0xe8>
 80048ea:	4240      	negs	r0, r0
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d095      	beq.n	800481c <_strtol_l.isra.0+0x18>
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	d1f4      	bne.n	80048de <_strtol_l.isra.0+0xda>
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	e791      	b.n	800481c <_strtol_l.isra.0+0x18>
 80048f8:	2430      	movs	r4, #48	; 0x30
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1b2      	bne.n	8004864 <_strtol_l.isra.0+0x60>
 80048fe:	2308      	movs	r3, #8
 8004900:	e7b0      	b.n	8004864 <_strtol_l.isra.0+0x60>
 8004902:	2c30      	cmp	r4, #48	; 0x30
 8004904:	d0a3      	beq.n	800484e <_strtol_l.isra.0+0x4a>
 8004906:	230a      	movs	r3, #10
 8004908:	e7ac      	b.n	8004864 <_strtol_l.isra.0+0x60>
 800490a:	bf00      	nop
 800490c:	08007799 	.word	0x08007799

08004910 <_strtol_r>:
 8004910:	f7ff bf78 	b.w	8004804 <_strtol_l.isra.0>

08004914 <quorem>:
 8004914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	6903      	ldr	r3, [r0, #16]
 800491a:	690c      	ldr	r4, [r1, #16]
 800491c:	4607      	mov	r7, r0
 800491e:	42a3      	cmp	r3, r4
 8004920:	f2c0 8083 	blt.w	8004a2a <quorem+0x116>
 8004924:	3c01      	subs	r4, #1
 8004926:	f100 0514 	add.w	r5, r0, #20
 800492a:	f101 0814 	add.w	r8, r1, #20
 800492e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800493c:	3301      	adds	r3, #1
 800493e:	429a      	cmp	r2, r3
 8004940:	fbb2 f6f3 	udiv	r6, r2, r3
 8004944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800494c:	d332      	bcc.n	80049b4 <quorem+0xa0>
 800494e:	f04f 0e00 	mov.w	lr, #0
 8004952:	4640      	mov	r0, r8
 8004954:	46ac      	mov	ip, r5
 8004956:	46f2      	mov	sl, lr
 8004958:	f850 2b04 	ldr.w	r2, [r0], #4
 800495c:	b293      	uxth	r3, r2
 800495e:	fb06 e303 	mla	r3, r6, r3, lr
 8004962:	0c12      	lsrs	r2, r2, #16
 8004964:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004968:	fb06 e202 	mla	r2, r6, r2, lr
 800496c:	b29b      	uxth	r3, r3
 800496e:	ebaa 0303 	sub.w	r3, sl, r3
 8004972:	f8dc a000 	ldr.w	sl, [ip]
 8004976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800497a:	fa1f fa8a 	uxth.w	sl, sl
 800497e:	4453      	add	r3, sl
 8004980:	fa1f fa82 	uxth.w	sl, r2
 8004984:	f8dc 2000 	ldr.w	r2, [ip]
 8004988:	4581      	cmp	r9, r0
 800498a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800498e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004998:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800499c:	f84c 3b04 	str.w	r3, [ip], #4
 80049a0:	d2da      	bcs.n	8004958 <quorem+0x44>
 80049a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80049a6:	b92b      	cbnz	r3, 80049b4 <quorem+0xa0>
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	3b04      	subs	r3, #4
 80049ac:	429d      	cmp	r5, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	d32f      	bcc.n	8004a12 <quorem+0xfe>
 80049b2:	613c      	str	r4, [r7, #16]
 80049b4:	4638      	mov	r0, r7
 80049b6:	f001 fc7f 	bl	80062b8 <__mcmp>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	db25      	blt.n	8004a0a <quorem+0xf6>
 80049be:	4628      	mov	r0, r5
 80049c0:	f04f 0c00 	mov.w	ip, #0
 80049c4:	3601      	adds	r6, #1
 80049c6:	f858 1b04 	ldr.w	r1, [r8], #4
 80049ca:	f8d0 e000 	ldr.w	lr, [r0]
 80049ce:	b28b      	uxth	r3, r1
 80049d0:	ebac 0303 	sub.w	r3, ip, r3
 80049d4:	fa1f f28e 	uxth.w	r2, lr
 80049d8:	4413      	add	r3, r2
 80049da:	0c0a      	lsrs	r2, r1, #16
 80049dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ea:	45c1      	cmp	r9, r8
 80049ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049f0:	f840 3b04 	str.w	r3, [r0], #4
 80049f4:	d2e7      	bcs.n	80049c6 <quorem+0xb2>
 80049f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049fe:	b922      	cbnz	r2, 8004a0a <quorem+0xf6>
 8004a00:	3b04      	subs	r3, #4
 8004a02:	429d      	cmp	r5, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	d30a      	bcc.n	8004a1e <quorem+0x10a>
 8004a08:	613c      	str	r4, [r7, #16]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	b003      	add	sp, #12
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d1cb      	bne.n	80049b2 <quorem+0x9e>
 8004a1a:	3c01      	subs	r4, #1
 8004a1c:	e7c6      	b.n	80049ac <quorem+0x98>
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	d1f0      	bne.n	8004a08 <quorem+0xf4>
 8004a26:	3c01      	subs	r4, #1
 8004a28:	e7eb      	b.n	8004a02 <quorem+0xee>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e7ee      	b.n	8004a0c <quorem+0xf8>
	...

08004a30 <_dtoa_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a3a:	b099      	sub	sp, #100	; 0x64
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a46:	b974      	cbnz	r4, 8004a66 <_dtoa_r+0x36>
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f001 f949 	bl	8005ce0 <malloc>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6268      	str	r0, [r5, #36]	; 0x24
 8004a52:	b920      	cbnz	r0, 8004a5e <_dtoa_r+0x2e>
 8004a54:	21ea      	movs	r1, #234	; 0xea
 8004a56:	4bae      	ldr	r3, [pc, #696]	; (8004d10 <_dtoa_r+0x2e0>)
 8004a58:	48ae      	ldr	r0, [pc, #696]	; (8004d14 <_dtoa_r+0x2e4>)
 8004a5a:	f002 f867 	bl	8006b2c <__assert_func>
 8004a5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a62:	6004      	str	r4, [r0, #0]
 8004a64:	60c4      	str	r4, [r0, #12]
 8004a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	b151      	cbz	r1, 8004a82 <_dtoa_r+0x52>
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4093      	lsls	r3, r2
 8004a72:	604a      	str	r2, [r1, #4]
 8004a74:	608b      	str	r3, [r1, #8]
 8004a76:	4628      	mov	r0, r5
 8004a78:	f001 f99a 	bl	8005db0 <_Bfree>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	1e3b      	subs	r3, r7, #0
 8004a84:	bfaf      	iteee	ge
 8004a86:	2300      	movge	r3, #0
 8004a88:	2201      	movlt	r2, #1
 8004a8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	9305      	strlt	r3, [sp, #20]
 8004a90:	bfa8      	it	ge
 8004a92:	f8c8 3000 	strge.w	r3, [r8]
 8004a96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a9a:	4b9f      	ldr	r3, [pc, #636]	; (8004d18 <_dtoa_r+0x2e8>)
 8004a9c:	bfb8      	it	lt
 8004a9e:	f8c8 2000 	strlt.w	r2, [r8]
 8004aa2:	ea33 0309 	bics.w	r3, r3, r9
 8004aa6:	d119      	bne.n	8004adc <_dtoa_r+0xac>
 8004aa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004aac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ab4:	4333      	orrs	r3, r6
 8004ab6:	f000 8580 	beq.w	80055ba <_dtoa_r+0xb8a>
 8004aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004abc:	b953      	cbnz	r3, 8004ad4 <_dtoa_r+0xa4>
 8004abe:	4b97      	ldr	r3, [pc, #604]	; (8004d1c <_dtoa_r+0x2ec>)
 8004ac0:	e022      	b.n	8004b08 <_dtoa_r+0xd8>
 8004ac2:	4b97      	ldr	r3, [pc, #604]	; (8004d20 <_dtoa_r+0x2f0>)
 8004ac4:	9308      	str	r3, [sp, #32]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	9808      	ldr	r0, [sp, #32]
 8004ace:	b019      	add	sp, #100	; 0x64
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <_dtoa_r+0x2ec>)
 8004ad6:	9308      	str	r3, [sp, #32]
 8004ad8:	3303      	adds	r3, #3
 8004ada:	e7f5      	b.n	8004ac8 <_dtoa_r+0x98>
 8004adc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ae0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2300      	movs	r3, #0
 8004aec:	f7fb ff5c 	bl	80009a8 <__aeabi_dcmpeq>
 8004af0:	4680      	mov	r8, r0
 8004af2:	b158      	cbz	r0, 8004b0c <_dtoa_r+0xdc>
 8004af4:	2301      	movs	r3, #1
 8004af6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8559 	beq.w	80055b4 <_dtoa_r+0xb84>
 8004b02:	4888      	ldr	r0, [pc, #544]	; (8004d24 <_dtoa_r+0x2f4>)
 8004b04:	6018      	str	r0, [r3, #0]
 8004b06:	1e43      	subs	r3, r0, #1
 8004b08:	9308      	str	r3, [sp, #32]
 8004b0a:	e7df      	b.n	8004acc <_dtoa_r+0x9c>
 8004b0c:	ab16      	add	r3, sp, #88	; 0x58
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	ab17      	add	r3, sp, #92	; 0x5c
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4628      	mov	r0, r5
 8004b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b1a:	f001 fcf3 	bl	8006504 <__d2b>
 8004b1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b22:	4682      	mov	sl, r0
 8004b24:	2c00      	cmp	r4, #0
 8004b26:	d07e      	beq.n	8004c26 <_dtoa_r+0x1f6>
 8004b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b42:	2200      	movs	r2, #0
 8004b44:	4b78      	ldr	r3, [pc, #480]	; (8004d28 <_dtoa_r+0x2f8>)
 8004b46:	f7fb fb0f 	bl	8000168 <__aeabi_dsub>
 8004b4a:	a36b      	add	r3, pc, #428	; (adr r3, 8004cf8 <_dtoa_r+0x2c8>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fcc2 	bl	80004d8 <__aeabi_dmul>
 8004b54:	a36a      	add	r3, pc, #424	; (adr r3, 8004d00 <_dtoa_r+0x2d0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fb07 	bl	800016c <__adddf3>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4620      	mov	r0, r4
 8004b62:	460f      	mov	r7, r1
 8004b64:	f7fb fc4e 	bl	8000404 <__aeabi_i2d>
 8004b68:	a367      	add	r3, pc, #412	; (adr r3, 8004d08 <_dtoa_r+0x2d8>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fcb3 	bl	80004d8 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb faf7 	bl	800016c <__adddf3>
 8004b7e:	4606      	mov	r6, r0
 8004b80:	460f      	mov	r7, r1
 8004b82:	f7fb ff59 	bl	8000a38 <__aeabi_d2iz>
 8004b86:	2200      	movs	r2, #0
 8004b88:	4681      	mov	r9, r0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	4639      	mov	r1, r7
 8004b90:	f7fb ff14 	bl	80009bc <__aeabi_dcmplt>
 8004b94:	b148      	cbz	r0, 8004baa <_dtoa_r+0x17a>
 8004b96:	4648      	mov	r0, r9
 8004b98:	f7fb fc34 	bl	8000404 <__aeabi_i2d>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	f7fb ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba4:	b908      	cbnz	r0, 8004baa <_dtoa_r+0x17a>
 8004ba6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004baa:	f1b9 0f16 	cmp.w	r9, #22
 8004bae:	d857      	bhi.n	8004c60 <_dtoa_r+0x230>
 8004bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bb4:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <_dtoa_r+0x2fc>)
 8004bb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fefd 	bl	80009bc <__aeabi_dcmplt>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d04e      	beq.n	8004c64 <_dtoa_r+0x234>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bd0:	1b1c      	subs	r4, r3, r4
 8004bd2:	1e63      	subs	r3, r4, #1
 8004bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd6:	bf49      	itett	mi
 8004bd8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004bdc:	2300      	movpl	r3, #0
 8004bde:	9306      	strmi	r3, [sp, #24]
 8004be0:	2300      	movmi	r3, #0
 8004be2:	bf54      	ite	pl
 8004be4:	9306      	strpl	r3, [sp, #24]
 8004be6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004be8:	f1b9 0f00 	cmp.w	r9, #0
 8004bec:	db3c      	blt.n	8004c68 <_dtoa_r+0x238>
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bf4:	444b      	add	r3, r9
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8004bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d86c      	bhi.n	8004cdc <_dtoa_r+0x2ac>
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	bfc4      	itt	gt
 8004c06:	3b04      	subgt	r3, #4
 8004c08:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c0c:	bfc8      	it	gt
 8004c0e:	2400      	movgt	r4, #0
 8004c10:	f1a3 0302 	sub.w	r3, r3, #2
 8004c14:	bfd8      	it	le
 8004c16:	2401      	movle	r4, #1
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	f200 808b 	bhi.w	8004d34 <_dtoa_r+0x304>
 8004c1e:	e8df f003 	tbb	[pc, r3]
 8004c22:	4f2d      	.short	0x4f2d
 8004c24:	5b4d      	.short	0x5b4d
 8004c26:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c2a:	441c      	add	r4, r3
 8004c2c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	bfc3      	ittte	gt
 8004c34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c38:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004c3c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c40:	f1c3 0320 	rsble	r3, r3, #32
 8004c44:	bfc6      	itte	gt
 8004c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c4a:	4318      	orrgt	r0, r3
 8004c4c:	fa06 f003 	lslle.w	r0, r6, r3
 8004c50:	f7fb fbc8 	bl	80003e4 <__aeabi_ui2d>
 8004c54:	2301      	movs	r3, #1
 8004c56:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c5e:	e770      	b.n	8004b42 <_dtoa_r+0x112>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e7b3      	b.n	8004bcc <_dtoa_r+0x19c>
 8004c64:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c66:	e7b2      	b.n	8004bce <_dtoa_r+0x19e>
 8004c68:	9b06      	ldr	r3, [sp, #24]
 8004c6a:	eba3 0309 	sub.w	r3, r3, r9
 8004c6e:	9306      	str	r3, [sp, #24]
 8004c70:	f1c9 0300 	rsb	r3, r9, #0
 8004c74:	930a      	str	r3, [sp, #40]	; 0x28
 8004c76:	2300      	movs	r3, #0
 8004c78:	930e      	str	r3, [sp, #56]	; 0x38
 8004c7a:	e7bf      	b.n	8004bfc <_dtoa_r+0x1cc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc59      	bgt.n	8004d3a <_dtoa_r+0x30a>
 8004c86:	f04f 0b01 	mov.w	fp, #1
 8004c8a:	465b      	mov	r3, fp
 8004c8c:	f8cd b008 	str.w	fp, [sp, #8]
 8004c90:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c94:	2200      	movs	r2, #0
 8004c96:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c98:	6042      	str	r2, [r0, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	f102 0614 	add.w	r6, r2, #20
 8004ca0:	429e      	cmp	r6, r3
 8004ca2:	6841      	ldr	r1, [r0, #4]
 8004ca4:	d94f      	bls.n	8004d46 <_dtoa_r+0x316>
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f001 f842 	bl	8005d30 <_Balloc>
 8004cac:	9008      	str	r0, [sp, #32]
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d14d      	bne.n	8004d4e <_dtoa_r+0x31e>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <_dtoa_r+0x300>)
 8004cba:	e6cd      	b.n	8004a58 <_dtoa_r+0x28>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e7de      	b.n	8004c7e <_dtoa_r+0x24e>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cc6:	eb09 0b03 	add.w	fp, r9, r3
 8004cca:	f10b 0301 	add.w	r3, fp, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	bfb8      	it	lt
 8004cd4:	2301      	movlt	r3, #1
 8004cd6:	e7dd      	b.n	8004c94 <_dtoa_r+0x264>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e7f2      	b.n	8004cc2 <_dtoa_r+0x292>
 8004cdc:	2401      	movs	r4, #1
 8004cde:	2300      	movs	r3, #0
 8004ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ce2:	9322      	str	r3, [sp, #136]	; 0x88
 8004ce4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2312      	movs	r3, #18
 8004cec:	f8cd b008 	str.w	fp, [sp, #8]
 8004cf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004cf2:	e7cf      	b.n	8004c94 <_dtoa_r+0x264>
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	636f4361 	.word	0x636f4361
 8004cfc:	3fd287a7 	.word	0x3fd287a7
 8004d00:	8b60c8b3 	.word	0x8b60c8b3
 8004d04:	3fc68a28 	.word	0x3fc68a28
 8004d08:	509f79fb 	.word	0x509f79fb
 8004d0c:	3fd34413 	.word	0x3fd34413
 8004d10:	080078a6 	.word	0x080078a6
 8004d14:	080078bd 	.word	0x080078bd
 8004d18:	7ff00000 	.word	0x7ff00000
 8004d1c:	080078a2 	.word	0x080078a2
 8004d20:	08007899 	.word	0x08007899
 8004d24:	08007719 	.word	0x08007719
 8004d28:	3ff80000 	.word	0x3ff80000
 8004d2c:	08007a38 	.word	0x08007a38
 8004d30:	0800791c 	.word	0x0800791c
 8004d34:	2301      	movs	r3, #1
 8004d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d38:	e7d4      	b.n	8004ce4 <_dtoa_r+0x2b4>
 8004d3a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d3e:	465b      	mov	r3, fp
 8004d40:	f8cd b008 	str.w	fp, [sp, #8]
 8004d44:	e7a6      	b.n	8004c94 <_dtoa_r+0x264>
 8004d46:	3101      	adds	r1, #1
 8004d48:	6041      	str	r1, [r0, #4]
 8004d4a:	0052      	lsls	r2, r2, #1
 8004d4c:	e7a6      	b.n	8004c9c <_dtoa_r+0x26c>
 8004d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d50:	9a08      	ldr	r2, [sp, #32]
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	2b0e      	cmp	r3, #14
 8004d58:	f200 80a8 	bhi.w	8004eac <_dtoa_r+0x47c>
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	f000 80a5 	beq.w	8004eac <_dtoa_r+0x47c>
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	dd34      	ble.n	8004dd2 <_dtoa_r+0x3a2>
 8004d68:	4a9a      	ldr	r2, [pc, #616]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004d6a:	f009 030f 	and.w	r3, r9, #15
 8004d6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d72:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d7e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004d82:	d016      	beq.n	8004db2 <_dtoa_r+0x382>
 8004d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d88:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004d8a:	2703      	movs	r7, #3
 8004d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d90:	f7fb fccc 	bl	800072c <__aeabi_ddiv>
 8004d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d98:	f004 040f 	and.w	r4, r4, #15
 8004d9c:	4e8e      	ldr	r6, [pc, #568]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004d9e:	b954      	cbnz	r4, 8004db6 <_dtoa_r+0x386>
 8004da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da8:	f7fb fcc0 	bl	800072c <__aeabi_ddiv>
 8004dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db0:	e029      	b.n	8004e06 <_dtoa_r+0x3d6>
 8004db2:	2702      	movs	r7, #2
 8004db4:	e7f2      	b.n	8004d9c <_dtoa_r+0x36c>
 8004db6:	07e1      	lsls	r1, r4, #31
 8004db8:	d508      	bpl.n	8004dcc <_dtoa_r+0x39c>
 8004dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004dc2:	f7fb fb89 	bl	80004d8 <__aeabi_dmul>
 8004dc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dca:	3701      	adds	r7, #1
 8004dcc:	1064      	asrs	r4, r4, #1
 8004dce:	3608      	adds	r6, #8
 8004dd0:	e7e5      	b.n	8004d9e <_dtoa_r+0x36e>
 8004dd2:	f000 80a5 	beq.w	8004f20 <_dtoa_r+0x4f0>
 8004dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dda:	f1c9 0400 	rsb	r4, r9, #0
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004de0:	f004 020f 	and.w	r2, r4, #15
 8004de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fb74 	bl	80004d8 <__aeabi_dmul>
 8004df0:	2702      	movs	r7, #2
 8004df2:	2300      	movs	r3, #0
 8004df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004df8:	4e77      	ldr	r6, [pc, #476]	; (8004fd8 <_dtoa_r+0x5a8>)
 8004dfa:	1124      	asrs	r4, r4, #4
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	f040 8084 	bne.w	8004f0a <_dtoa_r+0x4da>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1d2      	bne.n	8004dac <_dtoa_r+0x37c>
 8004e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 808b 	beq.w	8004f24 <_dtoa_r+0x4f4>
 8004e0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	; (8004fdc <_dtoa_r+0x5ac>)
 8004e1e:	f7fb fdcd 	bl	80009bc <__aeabi_dcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d07e      	beq.n	8004f24 <_dtoa_r+0x4f4>
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d07b      	beq.n	8004f24 <_dtoa_r+0x4f4>
 8004e2c:	f1bb 0f00 	cmp.w	fp, #0
 8004e30:	dd38      	ble.n	8004ea4 <_dtoa_r+0x474>
 8004e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e36:	2200      	movs	r2, #0
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004e3a:	f7fb fb4d 	bl	80004d8 <__aeabi_dmul>
 8004e3e:	465c      	mov	r4, fp
 8004e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e44:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004e48:	3701      	adds	r7, #1
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7fb fada 	bl	8000404 <__aeabi_i2d>
 8004e50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e54:	f7fb fb40 	bl	80004d8 <__aeabi_dmul>
 8004e58:	2200      	movs	r2, #0
 8004e5a:	4b62      	ldr	r3, [pc, #392]	; (8004fe4 <_dtoa_r+0x5b4>)
 8004e5c:	f7fb f986 	bl	800016c <__adddf3>
 8004e60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e68:	9611      	str	r6, [sp, #68]	; 0x44
 8004e6a:	2c00      	cmp	r4, #0
 8004e6c:	d15d      	bne.n	8004f2a <_dtoa_r+0x4fa>
 8004e6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e72:	2200      	movs	r2, #0
 8004e74:	4b5c      	ldr	r3, [pc, #368]	; (8004fe8 <_dtoa_r+0x5b8>)
 8004e76:	f7fb f977 	bl	8000168 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e82:	4633      	mov	r3, r6
 8004e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e86:	f7fb fdb7 	bl	80009f8 <__aeabi_dcmpgt>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f040 829e 	bne.w	80053cc <_dtoa_r+0x99c>
 8004e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e9a:	f7fb fd8f 	bl	80009bc <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f040 8292 	bne.w	80053c8 <_dtoa_r+0x998>
 8004ea4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ea8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f2c0 8153 	blt.w	800515a <_dtoa_r+0x72a>
 8004eb4:	f1b9 0f0e 	cmp.w	r9, #14
 8004eb8:	f300 814f 	bgt.w	800515a <_dtoa_r+0x72a>
 8004ebc:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004ebe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ec6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f280 80db 	bge.w	8005088 <_dtoa_r+0x658>
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f300 80d7 	bgt.w	8005088 <_dtoa_r+0x658>
 8004eda:	f040 8274 	bne.w	80053c6 <_dtoa_r+0x996>
 8004ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <_dtoa_r+0x5b8>)
 8004ee6:	f7fb faf7 	bl	80004d8 <__aeabi_dmul>
 8004eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eee:	f7fb fd79 	bl	80009e4 <__aeabi_dcmpge>
 8004ef2:	9c02      	ldr	r4, [sp, #8]
 8004ef4:	4626      	mov	r6, r4
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 824a 	bne.w	8005390 <_dtoa_r+0x960>
 8004efc:	2331      	movs	r3, #49	; 0x31
 8004efe:	9f08      	ldr	r7, [sp, #32]
 8004f00:	f109 0901 	add.w	r9, r9, #1
 8004f04:	f807 3b01 	strb.w	r3, [r7], #1
 8004f08:	e246      	b.n	8005398 <_dtoa_r+0x968>
 8004f0a:	07e2      	lsls	r2, r4, #31
 8004f0c:	d505      	bpl.n	8004f1a <_dtoa_r+0x4ea>
 8004f0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	2301      	movs	r3, #1
 8004f18:	3701      	adds	r7, #1
 8004f1a:	1064      	asrs	r4, r4, #1
 8004f1c:	3608      	adds	r6, #8
 8004f1e:	e76d      	b.n	8004dfc <_dtoa_r+0x3cc>
 8004f20:	2702      	movs	r7, #2
 8004f22:	e770      	b.n	8004e06 <_dtoa_r+0x3d6>
 8004f24:	46c8      	mov	r8, r9
 8004f26:	9c02      	ldr	r4, [sp, #8]
 8004f28:	e78f      	b.n	8004e4a <_dtoa_r+0x41a>
 8004f2a:	9908      	ldr	r1, [sp, #32]
 8004f2c:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <_dtoa_r+0x5a4>)
 8004f2e:	4421      	add	r1, r4
 8004f30:	9112      	str	r1, [sp, #72]	; 0x48
 8004f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d055      	beq.n	8004ff0 <_dtoa_r+0x5c0>
 8004f44:	2000      	movs	r0, #0
 8004f46:	4929      	ldr	r1, [pc, #164]	; (8004fec <_dtoa_r+0x5bc>)
 8004f48:	f7fb fbf0 	bl	800072c <__aeabi_ddiv>
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4632      	mov	r2, r6
 8004f50:	f7fb f90a 	bl	8000168 <__aeabi_dsub>
 8004f54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f58:	9f08      	ldr	r7, [sp, #32]
 8004f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f5e:	f7fb fd6b 	bl	8000a38 <__aeabi_d2iz>
 8004f62:	4604      	mov	r4, r0
 8004f64:	f7fb fa4e 	bl	8000404 <__aeabi_i2d>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f70:	f7fb f8fa 	bl	8000168 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	3430      	adds	r4, #48	; 0x30
 8004f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f82:	f807 4b01 	strb.w	r4, [r7], #1
 8004f86:	f7fb fd19 	bl	80009bc <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d174      	bne.n	8005078 <_dtoa_r+0x648>
 8004f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f92:	2000      	movs	r0, #0
 8004f94:	4911      	ldr	r1, [pc, #68]	; (8004fdc <_dtoa_r+0x5ac>)
 8004f96:	f7fb f8e7 	bl	8000168 <__aeabi_dsub>
 8004f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f9e:	f7fb fd0d 	bl	80009bc <__aeabi_dcmplt>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 80b6 	bne.w	8005114 <_dtoa_r+0x6e4>
 8004fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004faa:	429f      	cmp	r7, r3
 8004fac:	f43f af7a 	beq.w	8004ea4 <_dtoa_r+0x474>
 8004fb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004fb8:	f7fb fa8e 	bl	80004d8 <__aeabi_dmul>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <_dtoa_r+0x5b0>)
 8004fc8:	f7fb fa86 	bl	80004d8 <__aeabi_dmul>
 8004fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd0:	e7c3      	b.n	8004f5a <_dtoa_r+0x52a>
 8004fd2:	bf00      	nop
 8004fd4:	08007a38 	.word	0x08007a38
 8004fd8:	08007a10 	.word	0x08007a10
 8004fdc:	3ff00000 	.word	0x3ff00000
 8004fe0:	40240000 	.word	0x40240000
 8004fe4:	401c0000 	.word	0x401c0000
 8004fe8:	40140000 	.word	0x40140000
 8004fec:	3fe00000 	.word	0x3fe00000
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	f7fb fa70 	bl	80004d8 <__aeabi_dmul>
 8004ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ffa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ffe:	9c08      	ldr	r4, [sp, #32]
 8005000:	9314      	str	r3, [sp, #80]	; 0x50
 8005002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005006:	f7fb fd17 	bl	8000a38 <__aeabi_d2iz>
 800500a:	9015      	str	r0, [sp, #84]	; 0x54
 800500c:	f7fb f9fa 	bl	8000404 <__aeabi_i2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005018:	f7fb f8a6 	bl	8000168 <__aeabi_dsub>
 800501c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800501e:	4606      	mov	r6, r0
 8005020:	3330      	adds	r3, #48	; 0x30
 8005022:	f804 3b01 	strb.w	r3, [r4], #1
 8005026:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005028:	460f      	mov	r7, r1
 800502a:	429c      	cmp	r4, r3
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	d124      	bne.n	800507c <_dtoa_r+0x64c>
 8005032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005036:	4bb3      	ldr	r3, [pc, #716]	; (8005304 <_dtoa_r+0x8d4>)
 8005038:	f7fb f898 	bl	800016c <__adddf3>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	f7fb fcd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005048:	2800      	cmp	r0, #0
 800504a:	d162      	bne.n	8005112 <_dtoa_r+0x6e2>
 800504c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005050:	2000      	movs	r0, #0
 8005052:	49ac      	ldr	r1, [pc, #688]	; (8005304 <_dtoa_r+0x8d4>)
 8005054:	f7fb f888 	bl	8000168 <__aeabi_dsub>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fcac 	bl	80009bc <__aeabi_dcmplt>
 8005064:	2800      	cmp	r0, #0
 8005066:	f43f af1d 	beq.w	8004ea4 <_dtoa_r+0x474>
 800506a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800506c:	1e7b      	subs	r3, r7, #1
 800506e:	9314      	str	r3, [sp, #80]	; 0x50
 8005070:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d0f8      	beq.n	800506a <_dtoa_r+0x63a>
 8005078:	46c1      	mov	r9, r8
 800507a:	e03a      	b.n	80050f2 <_dtoa_r+0x6c2>
 800507c:	4ba2      	ldr	r3, [pc, #648]	; (8005308 <_dtoa_r+0x8d8>)
 800507e:	f7fb fa2b 	bl	80004d8 <__aeabi_dmul>
 8005082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005086:	e7bc      	b.n	8005002 <_dtoa_r+0x5d2>
 8005088:	9f08      	ldr	r7, [sp, #32]
 800508a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800508e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005092:	f7fb fb4b 	bl	800072c <__aeabi_ddiv>
 8005096:	f7fb fccf 	bl	8000a38 <__aeabi_d2iz>
 800509a:	4604      	mov	r4, r0
 800509c:	f7fb f9b2 	bl	8000404 <__aeabi_i2d>
 80050a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050a4:	f7fb fa18 	bl	80004d8 <__aeabi_dmul>
 80050a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80050ac:	460b      	mov	r3, r1
 80050ae:	4602      	mov	r2, r0
 80050b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050b4:	f7fb f858 	bl	8000168 <__aeabi_dsub>
 80050b8:	f807 6b01 	strb.w	r6, [r7], #1
 80050bc:	9e08      	ldr	r6, [sp, #32]
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	1bbe      	subs	r6, r7, r6
 80050c2:	42b3      	cmp	r3, r6
 80050c4:	d13a      	bne.n	800513c <_dtoa_r+0x70c>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	f7fb f84f 	bl	800016c <__adddf3>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050da:	f7fb fc8d 	bl	80009f8 <__aeabi_dcmpgt>
 80050de:	bb58      	cbnz	r0, 8005138 <_dtoa_r+0x708>
 80050e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e8:	f7fb fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80050ec:	b108      	cbz	r0, 80050f2 <_dtoa_r+0x6c2>
 80050ee:	07e1      	lsls	r1, r4, #31
 80050f0:	d422      	bmi.n	8005138 <_dtoa_r+0x708>
 80050f2:	4628      	mov	r0, r5
 80050f4:	4651      	mov	r1, sl
 80050f6:	f000 fe5b 	bl	8005db0 <_Bfree>
 80050fa:	2300      	movs	r3, #0
 80050fc:	703b      	strb	r3, [r7, #0]
 80050fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005100:	f109 0001 	add.w	r0, r9, #1
 8005104:	6018      	str	r0, [r3, #0]
 8005106:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005108:	2b00      	cmp	r3, #0
 800510a:	f43f acdf 	beq.w	8004acc <_dtoa_r+0x9c>
 800510e:	601f      	str	r7, [r3, #0]
 8005110:	e4dc      	b.n	8004acc <_dtoa_r+0x9c>
 8005112:	4627      	mov	r7, r4
 8005114:	463b      	mov	r3, r7
 8005116:	461f      	mov	r7, r3
 8005118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800511c:	2a39      	cmp	r2, #57	; 0x39
 800511e:	d107      	bne.n	8005130 <_dtoa_r+0x700>
 8005120:	9a08      	ldr	r2, [sp, #32]
 8005122:	429a      	cmp	r2, r3
 8005124:	d1f7      	bne.n	8005116 <_dtoa_r+0x6e6>
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	9908      	ldr	r1, [sp, #32]
 800512a:	f108 0801 	add.w	r8, r8, #1
 800512e:	700a      	strb	r2, [r1, #0]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	3201      	adds	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e79f      	b.n	8005078 <_dtoa_r+0x648>
 8005138:	46c8      	mov	r8, r9
 800513a:	e7eb      	b.n	8005114 <_dtoa_r+0x6e4>
 800513c:	2200      	movs	r2, #0
 800513e:	4b72      	ldr	r3, [pc, #456]	; (8005308 <_dtoa_r+0x8d8>)
 8005140:	f7fb f9ca 	bl	80004d8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fc2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d098      	beq.n	800508a <_dtoa_r+0x65a>
 8005158:	e7cb      	b.n	80050f2 <_dtoa_r+0x6c2>
 800515a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 80cd 	beq.w	80052fc <_dtoa_r+0x8cc>
 8005162:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005164:	2a01      	cmp	r2, #1
 8005166:	f300 80af 	bgt.w	80052c8 <_dtoa_r+0x898>
 800516a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 80a7 	beq.w	80052c0 <_dtoa_r+0x890>
 8005172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005176:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005178:	9f06      	ldr	r7, [sp, #24]
 800517a:	9a06      	ldr	r2, [sp, #24]
 800517c:	2101      	movs	r1, #1
 800517e:	441a      	add	r2, r3
 8005180:	9206      	str	r2, [sp, #24]
 8005182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005184:	4628      	mov	r0, r5
 8005186:	441a      	add	r2, r3
 8005188:	9209      	str	r2, [sp, #36]	; 0x24
 800518a:	f000 ff15 	bl	8005fb8 <__i2b>
 800518e:	4606      	mov	r6, r0
 8005190:	2f00      	cmp	r7, #0
 8005192:	dd0c      	ble.n	80051ae <_dtoa_r+0x77e>
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	dd09      	ble.n	80051ae <_dtoa_r+0x77e>
 800519a:	42bb      	cmp	r3, r7
 800519c:	bfa8      	it	ge
 800519e:	463b      	movge	r3, r7
 80051a0:	9a06      	ldr	r2, [sp, #24]
 80051a2:	1aff      	subs	r7, r7, r3
 80051a4:	1ad2      	subs	r2, r2, r3
 80051a6:	9206      	str	r2, [sp, #24]
 80051a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	b1f3      	cbz	r3, 80051f0 <_dtoa_r+0x7c0>
 80051b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80a9 	beq.w	800530c <_dtoa_r+0x8dc>
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	dd10      	ble.n	80051e0 <_dtoa_r+0x7b0>
 80051be:	4631      	mov	r1, r6
 80051c0:	4622      	mov	r2, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 ffb2 	bl	800612c <__pow5mult>
 80051c8:	4652      	mov	r2, sl
 80051ca:	4601      	mov	r1, r0
 80051cc:	4606      	mov	r6, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 ff08 	bl	8005fe4 <__multiply>
 80051d4:	4680      	mov	r8, r0
 80051d6:	4651      	mov	r1, sl
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 fde9 	bl	8005db0 <_Bfree>
 80051de:	46c2      	mov	sl, r8
 80051e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e2:	1b1a      	subs	r2, r3, r4
 80051e4:	d004      	beq.n	80051f0 <_dtoa_r+0x7c0>
 80051e6:	4651      	mov	r1, sl
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 ff9f 	bl	800612c <__pow5mult>
 80051ee:	4682      	mov	sl, r0
 80051f0:	2101      	movs	r1, #1
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 fee0 	bl	8005fb8 <__i2b>
 80051f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051fa:	4604      	mov	r4, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f340 8087 	ble.w	8005310 <_dtoa_r+0x8e0>
 8005202:	461a      	mov	r2, r3
 8005204:	4601      	mov	r1, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 ff90 	bl	800612c <__pow5mult>
 800520c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800520e:	4604      	mov	r4, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	f340 8080 	ble.w	8005316 <_dtoa_r+0x8e6>
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005220:	6918      	ldr	r0, [r3, #16]
 8005222:	f000 fe7b 	bl	8005f1c <__hi0bits>
 8005226:	f1c0 0020 	rsb	r0, r0, #32
 800522a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522c:	4418      	add	r0, r3
 800522e:	f010 001f 	ands.w	r0, r0, #31
 8005232:	f000 8092 	beq.w	800535a <_dtoa_r+0x92a>
 8005236:	f1c0 0320 	rsb	r3, r0, #32
 800523a:	2b04      	cmp	r3, #4
 800523c:	f340 808a 	ble.w	8005354 <_dtoa_r+0x924>
 8005240:	f1c0 001c 	rsb	r0, r0, #28
 8005244:	9b06      	ldr	r3, [sp, #24]
 8005246:	4407      	add	r7, r0
 8005248:	4403      	add	r3, r0
 800524a:	9306      	str	r3, [sp, #24]
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	4403      	add	r3, r0
 8005250:	9309      	str	r3, [sp, #36]	; 0x24
 8005252:	9b06      	ldr	r3, [sp, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dd05      	ble.n	8005264 <_dtoa_r+0x834>
 8005258:	4651      	mov	r1, sl
 800525a:	461a      	mov	r2, r3
 800525c:	4628      	mov	r0, r5
 800525e:	f000 ffbf 	bl	80061e0 <__lshift>
 8005262:	4682      	mov	sl, r0
 8005264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd05      	ble.n	8005276 <_dtoa_r+0x846>
 800526a:	4621      	mov	r1, r4
 800526c:	461a      	mov	r2, r3
 800526e:	4628      	mov	r0, r5
 8005270:	f000 ffb6 	bl	80061e0 <__lshift>
 8005274:	4604      	mov	r4, r0
 8005276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d070      	beq.n	800535e <_dtoa_r+0x92e>
 800527c:	4621      	mov	r1, r4
 800527e:	4650      	mov	r0, sl
 8005280:	f001 f81a 	bl	80062b8 <__mcmp>
 8005284:	2800      	cmp	r0, #0
 8005286:	da6a      	bge.n	800535e <_dtoa_r+0x92e>
 8005288:	2300      	movs	r3, #0
 800528a:	4651      	mov	r1, sl
 800528c:	220a      	movs	r2, #10
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fdb0 	bl	8005df4 <__multadd>
 8005294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005296:	4682      	mov	sl, r0
 8005298:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8193 	beq.w	80055c8 <_dtoa_r+0xb98>
 80052a2:	4631      	mov	r1, r6
 80052a4:	2300      	movs	r3, #0
 80052a6:	220a      	movs	r2, #10
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 fda3 	bl	8005df4 <__multadd>
 80052ae:	f1bb 0f00 	cmp.w	fp, #0
 80052b2:	4606      	mov	r6, r0
 80052b4:	f300 8093 	bgt.w	80053de <_dtoa_r+0x9ae>
 80052b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	dc57      	bgt.n	800536e <_dtoa_r+0x93e>
 80052be:	e08e      	b.n	80053de <_dtoa_r+0x9ae>
 80052c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052c6:	e756      	b.n	8005176 <_dtoa_r+0x746>
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	1e5c      	subs	r4, r3, #1
 80052cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	bfb7      	itett	lt
 80052d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052d4:	1b1c      	subge	r4, r3, r4
 80052d6:	1ae2      	sublt	r2, r4, r3
 80052d8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80052da:	bfbe      	ittt	lt
 80052dc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80052de:	189b      	addlt	r3, r3, r2
 80052e0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	bfb8      	it	lt
 80052e6:	2400      	movlt	r4, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbb      	ittet	lt
 80052ec:	9b06      	ldrlt	r3, [sp, #24]
 80052ee:	9a02      	ldrlt	r2, [sp, #8]
 80052f0:	9f06      	ldrge	r7, [sp, #24]
 80052f2:	1a9f      	sublt	r7, r3, r2
 80052f4:	bfac      	ite	ge
 80052f6:	9b02      	ldrge	r3, [sp, #8]
 80052f8:	2300      	movlt	r3, #0
 80052fa:	e73e      	b.n	800517a <_dtoa_r+0x74a>
 80052fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052fe:	9f06      	ldr	r7, [sp, #24]
 8005300:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005302:	e745      	b.n	8005190 <_dtoa_r+0x760>
 8005304:	3fe00000 	.word	0x3fe00000
 8005308:	40240000 	.word	0x40240000
 800530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530e:	e76a      	b.n	80051e6 <_dtoa_r+0x7b6>
 8005310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005312:	2b01      	cmp	r3, #1
 8005314:	dc19      	bgt.n	800534a <_dtoa_r+0x91a>
 8005316:	9b04      	ldr	r3, [sp, #16]
 8005318:	b9bb      	cbnz	r3, 800534a <_dtoa_r+0x91a>
 800531a:	9b05      	ldr	r3, [sp, #20]
 800531c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005320:	b99b      	cbnz	r3, 800534a <_dtoa_r+0x91a>
 8005322:	9b05      	ldr	r3, [sp, #20]
 8005324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	051b      	lsls	r3, r3, #20
 800532c:	b183      	cbz	r3, 8005350 <_dtoa_r+0x920>
 800532e:	f04f 0801 	mov.w	r8, #1
 8005332:	9b06      	ldr	r3, [sp, #24]
 8005334:	3301      	adds	r3, #1
 8005336:	9306      	str	r3, [sp, #24]
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	3301      	adds	r3, #1
 800533c:	9309      	str	r3, [sp, #36]	; 0x24
 800533e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af6a 	bne.w	800521a <_dtoa_r+0x7ea>
 8005346:	2001      	movs	r0, #1
 8005348:	e76f      	b.n	800522a <_dtoa_r+0x7fa>
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	e7f6      	b.n	800533e <_dtoa_r+0x90e>
 8005350:	4698      	mov	r8, r3
 8005352:	e7f4      	b.n	800533e <_dtoa_r+0x90e>
 8005354:	f43f af7d 	beq.w	8005252 <_dtoa_r+0x822>
 8005358:	4618      	mov	r0, r3
 800535a:	301c      	adds	r0, #28
 800535c:	e772      	b.n	8005244 <_dtoa_r+0x814>
 800535e:	9b02      	ldr	r3, [sp, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc36      	bgt.n	80053d2 <_dtoa_r+0x9a2>
 8005364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005366:	2b02      	cmp	r3, #2
 8005368:	dd33      	ble.n	80053d2 <_dtoa_r+0x9a2>
 800536a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800536e:	f1bb 0f00 	cmp.w	fp, #0
 8005372:	d10d      	bne.n	8005390 <_dtoa_r+0x960>
 8005374:	4621      	mov	r1, r4
 8005376:	465b      	mov	r3, fp
 8005378:	2205      	movs	r2, #5
 800537a:	4628      	mov	r0, r5
 800537c:	f000 fd3a 	bl	8005df4 <__multadd>
 8005380:	4601      	mov	r1, r0
 8005382:	4604      	mov	r4, r0
 8005384:	4650      	mov	r0, sl
 8005386:	f000 ff97 	bl	80062b8 <__mcmp>
 800538a:	2800      	cmp	r0, #0
 800538c:	f73f adb6 	bgt.w	8004efc <_dtoa_r+0x4cc>
 8005390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005392:	9f08      	ldr	r7, [sp, #32]
 8005394:	ea6f 0903 	mvn.w	r9, r3
 8005398:	f04f 0800 	mov.w	r8, #0
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 fd06 	bl	8005db0 <_Bfree>
 80053a4:	2e00      	cmp	r6, #0
 80053a6:	f43f aea4 	beq.w	80050f2 <_dtoa_r+0x6c2>
 80053aa:	f1b8 0f00 	cmp.w	r8, #0
 80053ae:	d005      	beq.n	80053bc <_dtoa_r+0x98c>
 80053b0:	45b0      	cmp	r8, r6
 80053b2:	d003      	beq.n	80053bc <_dtoa_r+0x98c>
 80053b4:	4641      	mov	r1, r8
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fcfa 	bl	8005db0 <_Bfree>
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 fcf6 	bl	8005db0 <_Bfree>
 80053c4:	e695      	b.n	80050f2 <_dtoa_r+0x6c2>
 80053c6:	2400      	movs	r4, #0
 80053c8:	4626      	mov	r6, r4
 80053ca:	e7e1      	b.n	8005390 <_dtoa_r+0x960>
 80053cc:	46c1      	mov	r9, r8
 80053ce:	4626      	mov	r6, r4
 80053d0:	e594      	b.n	8004efc <_dtoa_r+0x4cc>
 80053d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80fc 	beq.w	80055d6 <_dtoa_r+0xba6>
 80053de:	2f00      	cmp	r7, #0
 80053e0:	dd05      	ble.n	80053ee <_dtoa_r+0x9be>
 80053e2:	4631      	mov	r1, r6
 80053e4:	463a      	mov	r2, r7
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fefa 	bl	80061e0 <__lshift>
 80053ec:	4606      	mov	r6, r0
 80053ee:	f1b8 0f00 	cmp.w	r8, #0
 80053f2:	d05c      	beq.n	80054ae <_dtoa_r+0xa7e>
 80053f4:	4628      	mov	r0, r5
 80053f6:	6871      	ldr	r1, [r6, #4]
 80053f8:	f000 fc9a 	bl	8005d30 <_Balloc>
 80053fc:	4607      	mov	r7, r0
 80053fe:	b928      	cbnz	r0, 800540c <_dtoa_r+0x9dc>
 8005400:	4602      	mov	r2, r0
 8005402:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005406:	4b7e      	ldr	r3, [pc, #504]	; (8005600 <_dtoa_r+0xbd0>)
 8005408:	f7ff bb26 	b.w	8004a58 <_dtoa_r+0x28>
 800540c:	6932      	ldr	r2, [r6, #16]
 800540e:	f106 010c 	add.w	r1, r6, #12
 8005412:	3202      	adds	r2, #2
 8005414:	0092      	lsls	r2, r2, #2
 8005416:	300c      	adds	r0, #12
 8005418:	f7fd fd2a 	bl	8002e70 <memcpy>
 800541c:	2201      	movs	r2, #1
 800541e:	4639      	mov	r1, r7
 8005420:	4628      	mov	r0, r5
 8005422:	f000 fedd 	bl	80061e0 <__lshift>
 8005426:	46b0      	mov	r8, r6
 8005428:	4606      	mov	r6, r0
 800542a:	9b08      	ldr	r3, [sp, #32]
 800542c:	3301      	adds	r3, #1
 800542e:	9302      	str	r3, [sp, #8]
 8005430:	9b08      	ldr	r3, [sp, #32]
 8005432:	445b      	add	r3, fp
 8005434:	930a      	str	r3, [sp, #40]	; 0x28
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	9309      	str	r3, [sp, #36]	; 0x24
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	4621      	mov	r1, r4
 8005442:	4650      	mov	r0, sl
 8005444:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005448:	f7ff fa64 	bl	8004914 <quorem>
 800544c:	4603      	mov	r3, r0
 800544e:	4641      	mov	r1, r8
 8005450:	3330      	adds	r3, #48	; 0x30
 8005452:	9004      	str	r0, [sp, #16]
 8005454:	4650      	mov	r0, sl
 8005456:	930b      	str	r3, [sp, #44]	; 0x2c
 8005458:	f000 ff2e 	bl	80062b8 <__mcmp>
 800545c:	4632      	mov	r2, r6
 800545e:	9006      	str	r0, [sp, #24]
 8005460:	4621      	mov	r1, r4
 8005462:	4628      	mov	r0, r5
 8005464:	f000 ff44 	bl	80062f0 <__mdiff>
 8005468:	68c2      	ldr	r2, [r0, #12]
 800546a:	4607      	mov	r7, r0
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	bb02      	cbnz	r2, 80054b2 <_dtoa_r+0xa82>
 8005470:	4601      	mov	r1, r0
 8005472:	4650      	mov	r0, sl
 8005474:	f000 ff20 	bl	80062b8 <__mcmp>
 8005478:	4602      	mov	r2, r0
 800547a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800547c:	4639      	mov	r1, r7
 800547e:	4628      	mov	r0, r5
 8005480:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005484:	f000 fc94 	bl	8005db0 <_Bfree>
 8005488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800548a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800548c:	9f02      	ldr	r7, [sp, #8]
 800548e:	ea43 0102 	orr.w	r1, r3, r2
 8005492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005494:	430b      	orrs	r3, r1
 8005496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005498:	d10d      	bne.n	80054b6 <_dtoa_r+0xa86>
 800549a:	2b39      	cmp	r3, #57	; 0x39
 800549c:	d027      	beq.n	80054ee <_dtoa_r+0xabe>
 800549e:	9a06      	ldr	r2, [sp, #24]
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	dd01      	ble.n	80054a8 <_dtoa_r+0xa78>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	3331      	adds	r3, #49	; 0x31
 80054a8:	f88b 3000 	strb.w	r3, [fp]
 80054ac:	e776      	b.n	800539c <_dtoa_r+0x96c>
 80054ae:	4630      	mov	r0, r6
 80054b0:	e7b9      	b.n	8005426 <_dtoa_r+0x9f6>
 80054b2:	2201      	movs	r2, #1
 80054b4:	e7e2      	b.n	800547c <_dtoa_r+0xa4c>
 80054b6:	9906      	ldr	r1, [sp, #24]
 80054b8:	2900      	cmp	r1, #0
 80054ba:	db04      	blt.n	80054c6 <_dtoa_r+0xa96>
 80054bc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80054be:	4301      	orrs	r1, r0
 80054c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c2:	4301      	orrs	r1, r0
 80054c4:	d120      	bne.n	8005508 <_dtoa_r+0xad8>
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	ddee      	ble.n	80054a8 <_dtoa_r+0xa78>
 80054ca:	4651      	mov	r1, sl
 80054cc:	2201      	movs	r2, #1
 80054ce:	4628      	mov	r0, r5
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	f000 fe85 	bl	80061e0 <__lshift>
 80054d6:	4621      	mov	r1, r4
 80054d8:	4682      	mov	sl, r0
 80054da:	f000 feed 	bl	80062b8 <__mcmp>
 80054de:	2800      	cmp	r0, #0
 80054e0:	9b02      	ldr	r3, [sp, #8]
 80054e2:	dc02      	bgt.n	80054ea <_dtoa_r+0xaba>
 80054e4:	d1e0      	bne.n	80054a8 <_dtoa_r+0xa78>
 80054e6:	07da      	lsls	r2, r3, #31
 80054e8:	d5de      	bpl.n	80054a8 <_dtoa_r+0xa78>
 80054ea:	2b39      	cmp	r3, #57	; 0x39
 80054ec:	d1da      	bne.n	80054a4 <_dtoa_r+0xa74>
 80054ee:	2339      	movs	r3, #57	; 0x39
 80054f0:	f88b 3000 	strb.w	r3, [fp]
 80054f4:	463b      	mov	r3, r7
 80054f6:	461f      	mov	r7, r3
 80054f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	2a39      	cmp	r2, #57	; 0x39
 8005500:	d050      	beq.n	80055a4 <_dtoa_r+0xb74>
 8005502:	3201      	adds	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	e749      	b.n	800539c <_dtoa_r+0x96c>
 8005508:	2a00      	cmp	r2, #0
 800550a:	dd03      	ble.n	8005514 <_dtoa_r+0xae4>
 800550c:	2b39      	cmp	r3, #57	; 0x39
 800550e:	d0ee      	beq.n	80054ee <_dtoa_r+0xabe>
 8005510:	3301      	adds	r3, #1
 8005512:	e7c9      	b.n	80054a8 <_dtoa_r+0xa78>
 8005514:	9a02      	ldr	r2, [sp, #8]
 8005516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005518:	f802 3c01 	strb.w	r3, [r2, #-1]
 800551c:	428a      	cmp	r2, r1
 800551e:	d02a      	beq.n	8005576 <_dtoa_r+0xb46>
 8005520:	4651      	mov	r1, sl
 8005522:	2300      	movs	r3, #0
 8005524:	220a      	movs	r2, #10
 8005526:	4628      	mov	r0, r5
 8005528:	f000 fc64 	bl	8005df4 <__multadd>
 800552c:	45b0      	cmp	r8, r6
 800552e:	4682      	mov	sl, r0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f04f 020a 	mov.w	r2, #10
 8005538:	4641      	mov	r1, r8
 800553a:	4628      	mov	r0, r5
 800553c:	d107      	bne.n	800554e <_dtoa_r+0xb1e>
 800553e:	f000 fc59 	bl	8005df4 <__multadd>
 8005542:	4680      	mov	r8, r0
 8005544:	4606      	mov	r6, r0
 8005546:	9b02      	ldr	r3, [sp, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	e777      	b.n	800543e <_dtoa_r+0xa0e>
 800554e:	f000 fc51 	bl	8005df4 <__multadd>
 8005552:	4631      	mov	r1, r6
 8005554:	4680      	mov	r8, r0
 8005556:	2300      	movs	r3, #0
 8005558:	220a      	movs	r2, #10
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fc4a 	bl	8005df4 <__multadd>
 8005560:	4606      	mov	r6, r0
 8005562:	e7f0      	b.n	8005546 <_dtoa_r+0xb16>
 8005564:	f1bb 0f00 	cmp.w	fp, #0
 8005568:	bfcc      	ite	gt
 800556a:	465f      	movgt	r7, fp
 800556c:	2701      	movle	r7, #1
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	9a08      	ldr	r2, [sp, #32]
 8005574:	4417      	add	r7, r2
 8005576:	4651      	mov	r1, sl
 8005578:	2201      	movs	r2, #1
 800557a:	4628      	mov	r0, r5
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	f000 fe2f 	bl	80061e0 <__lshift>
 8005582:	4621      	mov	r1, r4
 8005584:	4682      	mov	sl, r0
 8005586:	f000 fe97 	bl	80062b8 <__mcmp>
 800558a:	2800      	cmp	r0, #0
 800558c:	dcb2      	bgt.n	80054f4 <_dtoa_r+0xac4>
 800558e:	d102      	bne.n	8005596 <_dtoa_r+0xb66>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	07db      	lsls	r3, r3, #31
 8005594:	d4ae      	bmi.n	80054f4 <_dtoa_r+0xac4>
 8005596:	463b      	mov	r3, r7
 8005598:	461f      	mov	r7, r3
 800559a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800559e:	2a30      	cmp	r2, #48	; 0x30
 80055a0:	d0fa      	beq.n	8005598 <_dtoa_r+0xb68>
 80055a2:	e6fb      	b.n	800539c <_dtoa_r+0x96c>
 80055a4:	9a08      	ldr	r2, [sp, #32]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d1a5      	bne.n	80054f6 <_dtoa_r+0xac6>
 80055aa:	2331      	movs	r3, #49	; 0x31
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	7013      	strb	r3, [r2, #0]
 80055b2:	e6f3      	b.n	800539c <_dtoa_r+0x96c>
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <_dtoa_r+0xbd4>)
 80055b6:	f7ff baa7 	b.w	8004b08 <_dtoa_r+0xd8>
 80055ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f aa80 	bne.w	8004ac2 <_dtoa_r+0x92>
 80055c2:	4b11      	ldr	r3, [pc, #68]	; (8005608 <_dtoa_r+0xbd8>)
 80055c4:	f7ff baa0 	b.w	8004b08 <_dtoa_r+0xd8>
 80055c8:	f1bb 0f00 	cmp.w	fp, #0
 80055cc:	dc03      	bgt.n	80055d6 <_dtoa_r+0xba6>
 80055ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	f73f aecc 	bgt.w	800536e <_dtoa_r+0x93e>
 80055d6:	9f08      	ldr	r7, [sp, #32]
 80055d8:	4621      	mov	r1, r4
 80055da:	4650      	mov	r0, sl
 80055dc:	f7ff f99a 	bl	8004914 <quorem>
 80055e0:	9a08      	ldr	r2, [sp, #32]
 80055e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055e6:	f807 3b01 	strb.w	r3, [r7], #1
 80055ea:	1aba      	subs	r2, r7, r2
 80055ec:	4593      	cmp	fp, r2
 80055ee:	ddb9      	ble.n	8005564 <_dtoa_r+0xb34>
 80055f0:	4651      	mov	r1, sl
 80055f2:	2300      	movs	r3, #0
 80055f4:	220a      	movs	r2, #10
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fbfc 	bl	8005df4 <__multadd>
 80055fc:	4682      	mov	sl, r0
 80055fe:	e7eb      	b.n	80055d8 <_dtoa_r+0xba8>
 8005600:	0800791c 	.word	0x0800791c
 8005604:	08007718 	.word	0x08007718
 8005608:	08007899 	.word	0x08007899

0800560c <rshift>:
 800560c:	6903      	ldr	r3, [r0, #16]
 800560e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005612:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005616:	f100 0414 	add.w	r4, r0, #20
 800561a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800561e:	dd46      	ble.n	80056ae <rshift+0xa2>
 8005620:	f011 011f 	ands.w	r1, r1, #31
 8005624:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005628:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800562c:	d10c      	bne.n	8005648 <rshift+0x3c>
 800562e:	4629      	mov	r1, r5
 8005630:	f100 0710 	add.w	r7, r0, #16
 8005634:	42b1      	cmp	r1, r6
 8005636:	d335      	bcc.n	80056a4 <rshift+0x98>
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	1eea      	subs	r2, r5, #3
 800563e:	4296      	cmp	r6, r2
 8005640:	bf38      	it	cc
 8005642:	2300      	movcc	r3, #0
 8005644:	4423      	add	r3, r4
 8005646:	e015      	b.n	8005674 <rshift+0x68>
 8005648:	46a1      	mov	r9, r4
 800564a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800564e:	f1c1 0820 	rsb	r8, r1, #32
 8005652:	40cf      	lsrs	r7, r1
 8005654:	f105 0e04 	add.w	lr, r5, #4
 8005658:	4576      	cmp	r6, lr
 800565a:	46f4      	mov	ip, lr
 800565c:	d816      	bhi.n	800568c <rshift+0x80>
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009a      	lsls	r2, r3, #2
 8005662:	3a04      	subs	r2, #4
 8005664:	3501      	adds	r5, #1
 8005666:	42ae      	cmp	r6, r5
 8005668:	bf38      	it	cc
 800566a:	2200      	movcc	r2, #0
 800566c:	18a3      	adds	r3, r4, r2
 800566e:	50a7      	str	r7, [r4, r2]
 8005670:	b107      	cbz	r7, 8005674 <rshift+0x68>
 8005672:	3304      	adds	r3, #4
 8005674:	42a3      	cmp	r3, r4
 8005676:	eba3 0204 	sub.w	r2, r3, r4
 800567a:	bf08      	it	eq
 800567c:	2300      	moveq	r3, #0
 800567e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005682:	6102      	str	r2, [r0, #16]
 8005684:	bf08      	it	eq
 8005686:	6143      	streq	r3, [r0, #20]
 8005688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800568c:	f8dc c000 	ldr.w	ip, [ip]
 8005690:	fa0c fc08 	lsl.w	ip, ip, r8
 8005694:	ea4c 0707 	orr.w	r7, ip, r7
 8005698:	f849 7b04 	str.w	r7, [r9], #4
 800569c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056a0:	40cf      	lsrs	r7, r1
 80056a2:	e7d9      	b.n	8005658 <rshift+0x4c>
 80056a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80056a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80056ac:	e7c2      	b.n	8005634 <rshift+0x28>
 80056ae:	4623      	mov	r3, r4
 80056b0:	e7e0      	b.n	8005674 <rshift+0x68>

080056b2 <__hexdig_fun>:
 80056b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d802      	bhi.n	80056c0 <__hexdig_fun+0xe>
 80056ba:	3820      	subs	r0, #32
 80056bc:	b2c0      	uxtb	r0, r0
 80056be:	4770      	bx	lr
 80056c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d801      	bhi.n	80056cc <__hexdig_fun+0x1a>
 80056c8:	3847      	subs	r0, #71	; 0x47
 80056ca:	e7f7      	b.n	80056bc <__hexdig_fun+0xa>
 80056cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d801      	bhi.n	80056d8 <__hexdig_fun+0x26>
 80056d4:	3827      	subs	r0, #39	; 0x27
 80056d6:	e7f1      	b.n	80056bc <__hexdig_fun+0xa>
 80056d8:	2000      	movs	r0, #0
 80056da:	4770      	bx	lr

080056dc <__gethex>:
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	b08b      	sub	sp, #44	; 0x2c
 80056e2:	9306      	str	r3, [sp, #24]
 80056e4:	4bb9      	ldr	r3, [pc, #740]	; (80059cc <__gethex+0x2f0>)
 80056e6:	9002      	str	r0, [sp, #8]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	468b      	mov	fp, r1
 80056ec:	4618      	mov	r0, r3
 80056ee:	4690      	mov	r8, r2
 80056f0:	9303      	str	r3, [sp, #12]
 80056f2:	f7fa fd2d 	bl	8000150 <strlen>
 80056f6:	4682      	mov	sl, r0
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	f8db 2000 	ldr.w	r2, [fp]
 80056fe:	4403      	add	r3, r0
 8005700:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005704:	9307      	str	r3, [sp, #28]
 8005706:	1c93      	adds	r3, r2, #2
 8005708:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800570c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005710:	32fe      	adds	r2, #254	; 0xfe
 8005712:	18d1      	adds	r1, r2, r3
 8005714:	461f      	mov	r7, r3
 8005716:	f813 0b01 	ldrb.w	r0, [r3], #1
 800571a:	9101      	str	r1, [sp, #4]
 800571c:	2830      	cmp	r0, #48	; 0x30
 800571e:	d0f8      	beq.n	8005712 <__gethex+0x36>
 8005720:	f7ff ffc7 	bl	80056b2 <__hexdig_fun>
 8005724:	4604      	mov	r4, r0
 8005726:	2800      	cmp	r0, #0
 8005728:	d13a      	bne.n	80057a0 <__gethex+0xc4>
 800572a:	4652      	mov	r2, sl
 800572c:	4638      	mov	r0, r7
 800572e:	9903      	ldr	r1, [sp, #12]
 8005730:	f001 f9dc 	bl	8006aec <strncmp>
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d166      	bne.n	8005808 <__gethex+0x12c>
 800573a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800573e:	eb07 060a 	add.w	r6, r7, sl
 8005742:	f7ff ffb6 	bl	80056b2 <__hexdig_fun>
 8005746:	2800      	cmp	r0, #0
 8005748:	d060      	beq.n	800580c <__gethex+0x130>
 800574a:	4633      	mov	r3, r6
 800574c:	7818      	ldrb	r0, [r3, #0]
 800574e:	461f      	mov	r7, r3
 8005750:	2830      	cmp	r0, #48	; 0x30
 8005752:	f103 0301 	add.w	r3, r3, #1
 8005756:	d0f9      	beq.n	800574c <__gethex+0x70>
 8005758:	f7ff ffab 	bl	80056b2 <__hexdig_fun>
 800575c:	2301      	movs	r3, #1
 800575e:	fab0 f480 	clz	r4, r0
 8005762:	4635      	mov	r5, r6
 8005764:	0964      	lsrs	r4, r4, #5
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	463a      	mov	r2, r7
 800576a:	4616      	mov	r6, r2
 800576c:	7830      	ldrb	r0, [r6, #0]
 800576e:	3201      	adds	r2, #1
 8005770:	f7ff ff9f 	bl	80056b2 <__hexdig_fun>
 8005774:	2800      	cmp	r0, #0
 8005776:	d1f8      	bne.n	800576a <__gethex+0x8e>
 8005778:	4652      	mov	r2, sl
 800577a:	4630      	mov	r0, r6
 800577c:	9903      	ldr	r1, [sp, #12]
 800577e:	f001 f9b5 	bl	8006aec <strncmp>
 8005782:	b980      	cbnz	r0, 80057a6 <__gethex+0xca>
 8005784:	b94d      	cbnz	r5, 800579a <__gethex+0xbe>
 8005786:	eb06 050a 	add.w	r5, r6, sl
 800578a:	462a      	mov	r2, r5
 800578c:	4616      	mov	r6, r2
 800578e:	7830      	ldrb	r0, [r6, #0]
 8005790:	3201      	adds	r2, #1
 8005792:	f7ff ff8e 	bl	80056b2 <__hexdig_fun>
 8005796:	2800      	cmp	r0, #0
 8005798:	d1f8      	bne.n	800578c <__gethex+0xb0>
 800579a:	1bad      	subs	r5, r5, r6
 800579c:	00ad      	lsls	r5, r5, #2
 800579e:	e004      	b.n	80057aa <__gethex+0xce>
 80057a0:	2400      	movs	r4, #0
 80057a2:	4625      	mov	r5, r4
 80057a4:	e7e0      	b.n	8005768 <__gethex+0x8c>
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	d1f7      	bne.n	800579a <__gethex+0xbe>
 80057aa:	7833      	ldrb	r3, [r6, #0]
 80057ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d139      	bne.n	8005828 <__gethex+0x14c>
 80057b4:	7873      	ldrb	r3, [r6, #1]
 80057b6:	2b2b      	cmp	r3, #43	; 0x2b
 80057b8:	d02a      	beq.n	8005810 <__gethex+0x134>
 80057ba:	2b2d      	cmp	r3, #45	; 0x2d
 80057bc:	d02c      	beq.n	8005818 <__gethex+0x13c>
 80057be:	f04f 0900 	mov.w	r9, #0
 80057c2:	1c71      	adds	r1, r6, #1
 80057c4:	7808      	ldrb	r0, [r1, #0]
 80057c6:	f7ff ff74 	bl	80056b2 <__hexdig_fun>
 80057ca:	1e43      	subs	r3, r0, #1
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b18      	cmp	r3, #24
 80057d0:	d82a      	bhi.n	8005828 <__gethex+0x14c>
 80057d2:	f1a0 0210 	sub.w	r2, r0, #16
 80057d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80057da:	f7ff ff6a 	bl	80056b2 <__hexdig_fun>
 80057de:	1e43      	subs	r3, r0, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b18      	cmp	r3, #24
 80057e4:	d91b      	bls.n	800581e <__gethex+0x142>
 80057e6:	f1b9 0f00 	cmp.w	r9, #0
 80057ea:	d000      	beq.n	80057ee <__gethex+0x112>
 80057ec:	4252      	negs	r2, r2
 80057ee:	4415      	add	r5, r2
 80057f0:	f8cb 1000 	str.w	r1, [fp]
 80057f4:	b1d4      	cbz	r4, 800582c <__gethex+0x150>
 80057f6:	9b01      	ldr	r3, [sp, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2700      	movne	r7, #0
 80057fe:	2706      	moveq	r7, #6
 8005800:	4638      	mov	r0, r7
 8005802:	b00b      	add	sp, #44	; 0x2c
 8005804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	463e      	mov	r6, r7
 800580a:	4625      	mov	r5, r4
 800580c:	2401      	movs	r4, #1
 800580e:	e7cc      	b.n	80057aa <__gethex+0xce>
 8005810:	f04f 0900 	mov.w	r9, #0
 8005814:	1cb1      	adds	r1, r6, #2
 8005816:	e7d5      	b.n	80057c4 <__gethex+0xe8>
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	e7fa      	b.n	8005814 <__gethex+0x138>
 800581e:	230a      	movs	r3, #10
 8005820:	fb03 0202 	mla	r2, r3, r2, r0
 8005824:	3a10      	subs	r2, #16
 8005826:	e7d6      	b.n	80057d6 <__gethex+0xfa>
 8005828:	4631      	mov	r1, r6
 800582a:	e7e1      	b.n	80057f0 <__gethex+0x114>
 800582c:	4621      	mov	r1, r4
 800582e:	1bf3      	subs	r3, r6, r7
 8005830:	3b01      	subs	r3, #1
 8005832:	2b07      	cmp	r3, #7
 8005834:	dc0a      	bgt.n	800584c <__gethex+0x170>
 8005836:	9802      	ldr	r0, [sp, #8]
 8005838:	f000 fa7a 	bl	8005d30 <_Balloc>
 800583c:	4604      	mov	r4, r0
 800583e:	b940      	cbnz	r0, 8005852 <__gethex+0x176>
 8005840:	4602      	mov	r2, r0
 8005842:	21de      	movs	r1, #222	; 0xde
 8005844:	4b62      	ldr	r3, [pc, #392]	; (80059d0 <__gethex+0x2f4>)
 8005846:	4863      	ldr	r0, [pc, #396]	; (80059d4 <__gethex+0x2f8>)
 8005848:	f001 f970 	bl	8006b2c <__assert_func>
 800584c:	3101      	adds	r1, #1
 800584e:	105b      	asrs	r3, r3, #1
 8005850:	e7ef      	b.n	8005832 <__gethex+0x156>
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	f100 0914 	add.w	r9, r0, #20
 800585a:	f1ca 0301 	rsb	r3, sl, #1
 800585e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005862:	f8cd b004 	str.w	fp, [sp, #4]
 8005866:	9308      	str	r3, [sp, #32]
 8005868:	42b7      	cmp	r7, r6
 800586a:	d33f      	bcc.n	80058ec <__gethex+0x210>
 800586c:	9f04      	ldr	r7, [sp, #16]
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	f847 3b04 	str.w	r3, [r7], #4
 8005874:	eba7 0709 	sub.w	r7, r7, r9
 8005878:	10bf      	asrs	r7, r7, #2
 800587a:	6127      	str	r7, [r4, #16]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fb4d 	bl	8005f1c <__hi0bits>
 8005882:	017f      	lsls	r7, r7, #5
 8005884:	f8d8 6000 	ldr.w	r6, [r8]
 8005888:	1a3f      	subs	r7, r7, r0
 800588a:	42b7      	cmp	r7, r6
 800588c:	dd62      	ble.n	8005954 <__gethex+0x278>
 800588e:	1bbf      	subs	r7, r7, r6
 8005890:	4639      	mov	r1, r7
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fee3 	bl	800665e <__any_on>
 8005898:	4682      	mov	sl, r0
 800589a:	b1a8      	cbz	r0, 80058c8 <__gethex+0x1ec>
 800589c:	f04f 0a01 	mov.w	sl, #1
 80058a0:	1e7b      	subs	r3, r7, #1
 80058a2:	1159      	asrs	r1, r3, #5
 80058a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	fa0a f202 	lsl.w	r2, sl, r2
 80058b0:	420a      	tst	r2, r1
 80058b2:	d009      	beq.n	80058c8 <__gethex+0x1ec>
 80058b4:	4553      	cmp	r3, sl
 80058b6:	dd05      	ble.n	80058c4 <__gethex+0x1e8>
 80058b8:	4620      	mov	r0, r4
 80058ba:	1eb9      	subs	r1, r7, #2
 80058bc:	f000 fecf 	bl	800665e <__any_on>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d144      	bne.n	800594e <__gethex+0x272>
 80058c4:	f04f 0a02 	mov.w	sl, #2
 80058c8:	4639      	mov	r1, r7
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff fe9e 	bl	800560c <rshift>
 80058d0:	443d      	add	r5, r7
 80058d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058d6:	42ab      	cmp	r3, r5
 80058d8:	da4a      	bge.n	8005970 <__gethex+0x294>
 80058da:	4621      	mov	r1, r4
 80058dc:	9802      	ldr	r0, [sp, #8]
 80058de:	f000 fa67 	bl	8005db0 <_Bfree>
 80058e2:	2300      	movs	r3, #0
 80058e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058e6:	27a3      	movs	r7, #163	; 0xa3
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e789      	b.n	8005800 <__gethex+0x124>
 80058ec:	1e73      	subs	r3, r6, #1
 80058ee:	9a07      	ldr	r2, [sp, #28]
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d019      	beq.n	800592e <__gethex+0x252>
 80058fa:	f1bb 0f20 	cmp.w	fp, #32
 80058fe:	d107      	bne.n	8005910 <__gethex+0x234>
 8005900:	9b04      	ldr	r3, [sp, #16]
 8005902:	9a01      	ldr	r2, [sp, #4]
 8005904:	f843 2b04 	str.w	r2, [r3], #4
 8005908:	9304      	str	r3, [sp, #16]
 800590a:	2300      	movs	r3, #0
 800590c:	469b      	mov	fp, r3
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005914:	f7ff fecd 	bl	80056b2 <__hexdig_fun>
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	f000 000f 	and.w	r0, r0, #15
 800591e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005922:	4303      	orrs	r3, r0
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	f10b 0b04 	add.w	fp, fp, #4
 800592a:	9b05      	ldr	r3, [sp, #20]
 800592c:	e00d      	b.n	800594a <__gethex+0x26e>
 800592e:	9b05      	ldr	r3, [sp, #20]
 8005930:	9a08      	ldr	r2, [sp, #32]
 8005932:	4413      	add	r3, r2
 8005934:	42bb      	cmp	r3, r7
 8005936:	d3e0      	bcc.n	80058fa <__gethex+0x21e>
 8005938:	4618      	mov	r0, r3
 800593a:	4652      	mov	r2, sl
 800593c:	9903      	ldr	r1, [sp, #12]
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	f001 f8d4 	bl	8006aec <strncmp>
 8005944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005946:	2800      	cmp	r0, #0
 8005948:	d1d7      	bne.n	80058fa <__gethex+0x21e>
 800594a:	461e      	mov	r6, r3
 800594c:	e78c      	b.n	8005868 <__gethex+0x18c>
 800594e:	f04f 0a03 	mov.w	sl, #3
 8005952:	e7b9      	b.n	80058c8 <__gethex+0x1ec>
 8005954:	da09      	bge.n	800596a <__gethex+0x28e>
 8005956:	1bf7      	subs	r7, r6, r7
 8005958:	4621      	mov	r1, r4
 800595a:	463a      	mov	r2, r7
 800595c:	9802      	ldr	r0, [sp, #8]
 800595e:	f000 fc3f 	bl	80061e0 <__lshift>
 8005962:	4604      	mov	r4, r0
 8005964:	1bed      	subs	r5, r5, r7
 8005966:	f100 0914 	add.w	r9, r0, #20
 800596a:	f04f 0a00 	mov.w	sl, #0
 800596e:	e7b0      	b.n	80058d2 <__gethex+0x1f6>
 8005970:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005974:	42a8      	cmp	r0, r5
 8005976:	dd71      	ble.n	8005a5c <__gethex+0x380>
 8005978:	1b45      	subs	r5, r0, r5
 800597a:	42ae      	cmp	r6, r5
 800597c:	dc34      	bgt.n	80059e8 <__gethex+0x30c>
 800597e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d028      	beq.n	80059d8 <__gethex+0x2fc>
 8005986:	2b03      	cmp	r3, #3
 8005988:	d02a      	beq.n	80059e0 <__gethex+0x304>
 800598a:	2b01      	cmp	r3, #1
 800598c:	d115      	bne.n	80059ba <__gethex+0x2de>
 800598e:	42ae      	cmp	r6, r5
 8005990:	d113      	bne.n	80059ba <__gethex+0x2de>
 8005992:	2e01      	cmp	r6, #1
 8005994:	d10b      	bne.n	80059ae <__gethex+0x2d2>
 8005996:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800599a:	9a06      	ldr	r2, [sp, #24]
 800599c:	2762      	movs	r7, #98	; 0x62
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	2301      	movs	r3, #1
 80059a2:	6123      	str	r3, [r4, #16]
 80059a4:	f8c9 3000 	str.w	r3, [r9]
 80059a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059aa:	601c      	str	r4, [r3, #0]
 80059ac:	e728      	b.n	8005800 <__gethex+0x124>
 80059ae:	4620      	mov	r0, r4
 80059b0:	1e71      	subs	r1, r6, #1
 80059b2:	f000 fe54 	bl	800665e <__any_on>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1ed      	bne.n	8005996 <__gethex+0x2ba>
 80059ba:	4621      	mov	r1, r4
 80059bc:	9802      	ldr	r0, [sp, #8]
 80059be:	f000 f9f7 	bl	8005db0 <_Bfree>
 80059c2:	2300      	movs	r3, #0
 80059c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80059c6:	2750      	movs	r7, #80	; 0x50
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e719      	b.n	8005800 <__gethex+0x124>
 80059cc:	08007998 	.word	0x08007998
 80059d0:	0800791c 	.word	0x0800791c
 80059d4:	0800792d 	.word	0x0800792d
 80059d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ed      	bne.n	80059ba <__gethex+0x2de>
 80059de:	e7da      	b.n	8005996 <__gethex+0x2ba>
 80059e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1d7      	bne.n	8005996 <__gethex+0x2ba>
 80059e6:	e7e8      	b.n	80059ba <__gethex+0x2de>
 80059e8:	1e6f      	subs	r7, r5, #1
 80059ea:	f1ba 0f00 	cmp.w	sl, #0
 80059ee:	d132      	bne.n	8005a56 <__gethex+0x37a>
 80059f0:	b127      	cbz	r7, 80059fc <__gethex+0x320>
 80059f2:	4639      	mov	r1, r7
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 fe32 	bl	800665e <__any_on>
 80059fa:	4682      	mov	sl, r0
 80059fc:	2101      	movs	r1, #1
 80059fe:	117b      	asrs	r3, r7, #5
 8005a00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005a04:	f007 071f 	and.w	r7, r7, #31
 8005a08:	fa01 f707 	lsl.w	r7, r1, r7
 8005a0c:	421f      	tst	r7, r3
 8005a0e:	f04f 0702 	mov.w	r7, #2
 8005a12:	4629      	mov	r1, r5
 8005a14:	4620      	mov	r0, r4
 8005a16:	bf18      	it	ne
 8005a18:	f04a 0a02 	orrne.w	sl, sl, #2
 8005a1c:	1b76      	subs	r6, r6, r5
 8005a1e:	f7ff fdf5 	bl	800560c <rshift>
 8005a22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005a26:	f1ba 0f00 	cmp.w	sl, #0
 8005a2a:	d048      	beq.n	8005abe <__gethex+0x3e2>
 8005a2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d015      	beq.n	8005a60 <__gethex+0x384>
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d017      	beq.n	8005a68 <__gethex+0x38c>
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d109      	bne.n	8005a50 <__gethex+0x374>
 8005a3c:	f01a 0f02 	tst.w	sl, #2
 8005a40:	d006      	beq.n	8005a50 <__gethex+0x374>
 8005a42:	f8d9 0000 	ldr.w	r0, [r9]
 8005a46:	ea4a 0a00 	orr.w	sl, sl, r0
 8005a4a:	f01a 0f01 	tst.w	sl, #1
 8005a4e:	d10e      	bne.n	8005a6e <__gethex+0x392>
 8005a50:	f047 0710 	orr.w	r7, r7, #16
 8005a54:	e033      	b.n	8005abe <__gethex+0x3e2>
 8005a56:	f04f 0a01 	mov.w	sl, #1
 8005a5a:	e7cf      	b.n	80059fc <__gethex+0x320>
 8005a5c:	2701      	movs	r7, #1
 8005a5e:	e7e2      	b.n	8005a26 <__gethex+0x34a>
 8005a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a62:	f1c3 0301 	rsb	r3, r3, #1
 8005a66:	9315      	str	r3, [sp, #84]	; 0x54
 8005a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <__gethex+0x374>
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005a76:	f104 0314 	add.w	r3, r4, #20
 8005a7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005a7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a88:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005a8c:	d01c      	beq.n	8005ac8 <__gethex+0x3ec>
 8005a8e:	3201      	adds	r2, #1
 8005a90:	6002      	str	r2, [r0, #0]
 8005a92:	2f02      	cmp	r7, #2
 8005a94:	f104 0314 	add.w	r3, r4, #20
 8005a98:	d13d      	bne.n	8005b16 <__gethex+0x43a>
 8005a9a:	f8d8 2000 	ldr.w	r2, [r8]
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	42b2      	cmp	r2, r6
 8005aa2:	d10a      	bne.n	8005aba <__gethex+0x3de>
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	1171      	asrs	r1, r6, #5
 8005aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005aac:	f006 061f 	and.w	r6, r6, #31
 8005ab0:	fa02 f606 	lsl.w	r6, r2, r6
 8005ab4:	421e      	tst	r6, r3
 8005ab6:	bf18      	it	ne
 8005ab8:	4617      	movne	r7, r2
 8005aba:	f047 0720 	orr.w	r7, r7, #32
 8005abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ac0:	601c      	str	r4, [r3, #0]
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	601d      	str	r5, [r3, #0]
 8005ac6:	e69b      	b.n	8005800 <__gethex+0x124>
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	f843 cc04 	str.w	ip, [r3, #-4]
 8005ace:	d8d8      	bhi.n	8005a82 <__gethex+0x3a6>
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	459b      	cmp	fp, r3
 8005ad4:	db17      	blt.n	8005b06 <__gethex+0x42a>
 8005ad6:	6861      	ldr	r1, [r4, #4]
 8005ad8:	9802      	ldr	r0, [sp, #8]
 8005ada:	3101      	adds	r1, #1
 8005adc:	f000 f928 	bl	8005d30 <_Balloc>
 8005ae0:	4681      	mov	r9, r0
 8005ae2:	b918      	cbnz	r0, 8005aec <__gethex+0x410>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	2184      	movs	r1, #132	; 0x84
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <__gethex+0x474>)
 8005aea:	e6ac      	b.n	8005846 <__gethex+0x16a>
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	f104 010c 	add.w	r1, r4, #12
 8005af2:	3202      	adds	r2, #2
 8005af4:	0092      	lsls	r2, r2, #2
 8005af6:	300c      	adds	r0, #12
 8005af8:	f7fd f9ba 	bl	8002e70 <memcpy>
 8005afc:	4621      	mov	r1, r4
 8005afe:	9802      	ldr	r0, [sp, #8]
 8005b00:	f000 f956 	bl	8005db0 <_Bfree>
 8005b04:	464c      	mov	r4, r9
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	6122      	str	r2, [r4, #16]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b12:	615a      	str	r2, [r3, #20]
 8005b14:	e7bd      	b.n	8005a92 <__gethex+0x3b6>
 8005b16:	6922      	ldr	r2, [r4, #16]
 8005b18:	455a      	cmp	r2, fp
 8005b1a:	dd0b      	ble.n	8005b34 <__gethex+0x458>
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff fd74 	bl	800560c <rshift>
 8005b24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b28:	3501      	adds	r5, #1
 8005b2a:	42ab      	cmp	r3, r5
 8005b2c:	f6ff aed5 	blt.w	80058da <__gethex+0x1fe>
 8005b30:	2701      	movs	r7, #1
 8005b32:	e7c2      	b.n	8005aba <__gethex+0x3de>
 8005b34:	f016 061f 	ands.w	r6, r6, #31
 8005b38:	d0fa      	beq.n	8005b30 <__gethex+0x454>
 8005b3a:	449a      	add	sl, r3
 8005b3c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005b40:	f000 f9ec 	bl	8005f1c <__hi0bits>
 8005b44:	f1c6 0620 	rsb	r6, r6, #32
 8005b48:	42b0      	cmp	r0, r6
 8005b4a:	dbe7      	blt.n	8005b1c <__gethex+0x440>
 8005b4c:	e7f0      	b.n	8005b30 <__gethex+0x454>
 8005b4e:	bf00      	nop
 8005b50:	0800791c 	.word	0x0800791c

08005b54 <L_shift>:
 8005b54:	f1c2 0208 	rsb	r2, r2, #8
 8005b58:	0092      	lsls	r2, r2, #2
 8005b5a:	b570      	push	{r4, r5, r6, lr}
 8005b5c:	f1c2 0620 	rsb	r6, r2, #32
 8005b60:	6843      	ldr	r3, [r0, #4]
 8005b62:	6804      	ldr	r4, [r0, #0]
 8005b64:	fa03 f506 	lsl.w	r5, r3, r6
 8005b68:	432c      	orrs	r4, r5
 8005b6a:	40d3      	lsrs	r3, r2
 8005b6c:	6004      	str	r4, [r0, #0]
 8005b6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005b72:	4288      	cmp	r0, r1
 8005b74:	d3f4      	bcc.n	8005b60 <L_shift+0xc>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}

08005b78 <__match>:
 8005b78:	b530      	push	{r4, r5, lr}
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	b914      	cbnz	r4, 8005b8a <__match+0x12>
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	2001      	movs	r0, #1
 8005b88:	bd30      	pop	{r4, r5, pc}
 8005b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005b92:	2d19      	cmp	r5, #25
 8005b94:	bf98      	it	ls
 8005b96:	3220      	addls	r2, #32
 8005b98:	42a2      	cmp	r2, r4
 8005b9a:	d0f0      	beq.n	8005b7e <__match+0x6>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e7f3      	b.n	8005b88 <__match+0x10>

08005ba0 <__hexnan>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	680b      	ldr	r3, [r1, #0]
 8005ba8:	4682      	mov	sl, r0
 8005baa:	115e      	asrs	r6, r3, #5
 8005bac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005bb0:	f013 031f 	ands.w	r3, r3, #31
 8005bb4:	bf18      	it	ne
 8005bb6:	3604      	addne	r6, #4
 8005bb8:	1f37      	subs	r7, r6, #4
 8005bba:	4690      	mov	r8, r2
 8005bbc:	46b9      	mov	r9, r7
 8005bbe:	463c      	mov	r4, r7
 8005bc0:	46ab      	mov	fp, r5
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	6801      	ldr	r1, [r0, #0]
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	f846 5c04 	str.w	r5, [r6, #-4]
 8005bcc:	9502      	str	r5, [sp, #8]
 8005bce:	784a      	ldrb	r2, [r1, #1]
 8005bd0:	1c4b      	adds	r3, r1, #1
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	b342      	cbz	r2, 8005c28 <__hexnan+0x88>
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	9105      	str	r1, [sp, #20]
 8005bda:	9204      	str	r2, [sp, #16]
 8005bdc:	f7ff fd69 	bl	80056b2 <__hexdig_fun>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d14f      	bne.n	8005c84 <__hexnan+0xe4>
 8005be4:	9a04      	ldr	r2, [sp, #16]
 8005be6:	9905      	ldr	r1, [sp, #20]
 8005be8:	2a20      	cmp	r2, #32
 8005bea:	d818      	bhi.n	8005c1e <__hexnan+0x7e>
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	459b      	cmp	fp, r3
 8005bf0:	dd13      	ble.n	8005c1a <__hexnan+0x7a>
 8005bf2:	454c      	cmp	r4, r9
 8005bf4:	d206      	bcs.n	8005c04 <__hexnan+0x64>
 8005bf6:	2d07      	cmp	r5, #7
 8005bf8:	dc04      	bgt.n	8005c04 <__hexnan+0x64>
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7ff ffa8 	bl	8005b54 <L_shift>
 8005c04:	4544      	cmp	r4, r8
 8005c06:	d950      	bls.n	8005caa <__hexnan+0x10a>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f1a4 0904 	sub.w	r9, r4, #4
 8005c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c12:	461d      	mov	r5, r3
 8005c14:	464c      	mov	r4, r9
 8005c16:	f8cd b008 	str.w	fp, [sp, #8]
 8005c1a:	9903      	ldr	r1, [sp, #12]
 8005c1c:	e7d7      	b.n	8005bce <__hexnan+0x2e>
 8005c1e:	2a29      	cmp	r2, #41	; 0x29
 8005c20:	d156      	bne.n	8005cd0 <__hexnan+0x130>
 8005c22:	3102      	adds	r1, #2
 8005c24:	f8ca 1000 	str.w	r1, [sl]
 8005c28:	f1bb 0f00 	cmp.w	fp, #0
 8005c2c:	d050      	beq.n	8005cd0 <__hexnan+0x130>
 8005c2e:	454c      	cmp	r4, r9
 8005c30:	d206      	bcs.n	8005c40 <__hexnan+0xa0>
 8005c32:	2d07      	cmp	r5, #7
 8005c34:	dc04      	bgt.n	8005c40 <__hexnan+0xa0>
 8005c36:	462a      	mov	r2, r5
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f7ff ff8a 	bl	8005b54 <L_shift>
 8005c40:	4544      	cmp	r4, r8
 8005c42:	d934      	bls.n	8005cae <__hexnan+0x10e>
 8005c44:	4623      	mov	r3, r4
 8005c46:	f1a8 0204 	sub.w	r2, r8, #4
 8005c4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8005c4e:	429f      	cmp	r7, r3
 8005c50:	f842 1f04 	str.w	r1, [r2, #4]!
 8005c54:	d2f9      	bcs.n	8005c4a <__hexnan+0xaa>
 8005c56:	1b3b      	subs	r3, r7, r4
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	3401      	adds	r4, #1
 8005c60:	3e03      	subs	r6, #3
 8005c62:	42b4      	cmp	r4, r6
 8005c64:	bf88      	it	hi
 8005c66:	2304      	movhi	r3, #4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4443      	add	r3, r8
 8005c6c:	f843 2b04 	str.w	r2, [r3], #4
 8005c70:	429f      	cmp	r7, r3
 8005c72:	d2fb      	bcs.n	8005c6c <__hexnan+0xcc>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	b91b      	cbnz	r3, 8005c80 <__hexnan+0xe0>
 8005c78:	4547      	cmp	r7, r8
 8005c7a:	d127      	bne.n	8005ccc <__hexnan+0x12c>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	2005      	movs	r0, #5
 8005c82:	e026      	b.n	8005cd2 <__hexnan+0x132>
 8005c84:	3501      	adds	r5, #1
 8005c86:	2d08      	cmp	r5, #8
 8005c88:	f10b 0b01 	add.w	fp, fp, #1
 8005c8c:	dd06      	ble.n	8005c9c <__hexnan+0xfc>
 8005c8e:	4544      	cmp	r4, r8
 8005c90:	d9c3      	bls.n	8005c1a <__hexnan+0x7a>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2501      	movs	r5, #1
 8005c96:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c9a:	3c04      	subs	r4, #4
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	f000 000f 	and.w	r0, r0, #15
 8005ca2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005ca6:	6022      	str	r2, [r4, #0]
 8005ca8:	e7b7      	b.n	8005c1a <__hexnan+0x7a>
 8005caa:	2508      	movs	r5, #8
 8005cac:	e7b5      	b.n	8005c1a <__hexnan+0x7a>
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0df      	beq.n	8005c74 <__hexnan+0xd4>
 8005cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb8:	f1c3 0320 	rsb	r3, r3, #32
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005cc4:	401a      	ands	r2, r3
 8005cc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8005cca:	e7d3      	b.n	8005c74 <__hexnan+0xd4>
 8005ccc:	3f04      	subs	r7, #4
 8005cce:	e7d1      	b.n	8005c74 <__hexnan+0xd4>
 8005cd0:	2004      	movs	r0, #4
 8005cd2:	b007      	add	sp, #28
 8005cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005cd8 <_localeconv_r>:
 8005cd8:	4800      	ldr	r0, [pc, #0]	; (8005cdc <_localeconv_r+0x4>)
 8005cda:	4770      	bx	lr
 8005cdc:	20000178 	.word	0x20000178

08005ce0 <malloc>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	; (8005cec <malloc+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f000 bd35 	b.w	8006754 <_malloc_r>
 8005cea:	bf00      	nop
 8005cec:	20000020 	.word	0x20000020

08005cf0 <__ascii_mbtowc>:
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	b901      	cbnz	r1, 8005cf6 <__ascii_mbtowc+0x6>
 8005cf4:	a901      	add	r1, sp, #4
 8005cf6:	b142      	cbz	r2, 8005d0a <__ascii_mbtowc+0x1a>
 8005cf8:	b14b      	cbz	r3, 8005d0e <__ascii_mbtowc+0x1e>
 8005cfa:	7813      	ldrb	r3, [r2, #0]
 8005cfc:	600b      	str	r3, [r1, #0]
 8005cfe:	7812      	ldrb	r2, [r2, #0]
 8005d00:	1e10      	subs	r0, r2, #0
 8005d02:	bf18      	it	ne
 8005d04:	2001      	movne	r0, #1
 8005d06:	b002      	add	sp, #8
 8005d08:	4770      	bx	lr
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	e7fb      	b.n	8005d06 <__ascii_mbtowc+0x16>
 8005d0e:	f06f 0001 	mvn.w	r0, #1
 8005d12:	e7f8      	b.n	8005d06 <__ascii_mbtowc+0x16>

08005d14 <memchr>:
 8005d14:	4603      	mov	r3, r0
 8005d16:	b510      	push	{r4, lr}
 8005d18:	b2c9      	uxtb	r1, r1
 8005d1a:	4402      	add	r2, r0
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	d101      	bne.n	8005d26 <memchr+0x12>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e003      	b.n	8005d2e <memchr+0x1a>
 8005d26:	7804      	ldrb	r4, [r0, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	428c      	cmp	r4, r1
 8005d2c:	d1f6      	bne.n	8005d1c <memchr+0x8>
 8005d2e:	bd10      	pop	{r4, pc}

08005d30 <_Balloc>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d34:	4604      	mov	r4, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	b976      	cbnz	r6, 8005d58 <_Balloc+0x28>
 8005d3a:	2010      	movs	r0, #16
 8005d3c:	f7ff ffd0 	bl	8005ce0 <malloc>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6260      	str	r0, [r4, #36]	; 0x24
 8005d44:	b920      	cbnz	r0, 8005d50 <_Balloc+0x20>
 8005d46:	2166      	movs	r1, #102	; 0x66
 8005d48:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <_Balloc+0x78>)
 8005d4a:	4818      	ldr	r0, [pc, #96]	; (8005dac <_Balloc+0x7c>)
 8005d4c:	f000 feee 	bl	8006b2c <__assert_func>
 8005d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d54:	6006      	str	r6, [r0, #0]
 8005d56:	60c6      	str	r6, [r0, #12]
 8005d58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d5a:	68f3      	ldr	r3, [r6, #12]
 8005d5c:	b183      	cbz	r3, 8005d80 <_Balloc+0x50>
 8005d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d66:	b9b8      	cbnz	r0, 8005d98 <_Balloc+0x68>
 8005d68:	2101      	movs	r1, #1
 8005d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8005d6e:	1d72      	adds	r2, r6, #5
 8005d70:	4620      	mov	r0, r4
 8005d72:	0092      	lsls	r2, r2, #2
 8005d74:	f000 fc94 	bl	80066a0 <_calloc_r>
 8005d78:	b160      	cbz	r0, 8005d94 <_Balloc+0x64>
 8005d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d7e:	e00e      	b.n	8005d9e <_Balloc+0x6e>
 8005d80:	2221      	movs	r2, #33	; 0x21
 8005d82:	2104      	movs	r1, #4
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fc8b 	bl	80066a0 <_calloc_r>
 8005d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d8c:	60f0      	str	r0, [r6, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e4      	bne.n	8005d5e <_Balloc+0x2e>
 8005d94:	2000      	movs	r0, #0
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	6802      	ldr	r2, [r0, #0]
 8005d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005da4:	e7f7      	b.n	8005d96 <_Balloc+0x66>
 8005da6:	bf00      	nop
 8005da8:	080078a6 	.word	0x080078a6
 8005dac:	080079ac 	.word	0x080079ac

08005db0 <_Bfree>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005db4:	4605      	mov	r5, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	b976      	cbnz	r6, 8005dd8 <_Bfree+0x28>
 8005dba:	2010      	movs	r0, #16
 8005dbc:	f7ff ff90 	bl	8005ce0 <malloc>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6268      	str	r0, [r5, #36]	; 0x24
 8005dc4:	b920      	cbnz	r0, 8005dd0 <_Bfree+0x20>
 8005dc6:	218a      	movs	r1, #138	; 0x8a
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <_Bfree+0x3c>)
 8005dca:	4809      	ldr	r0, [pc, #36]	; (8005df0 <_Bfree+0x40>)
 8005dcc:	f000 feae 	bl	8006b2c <__assert_func>
 8005dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dd4:	6006      	str	r6, [r0, #0]
 8005dd6:	60c6      	str	r6, [r0, #12]
 8005dd8:	b13c      	cbz	r4, 8005dea <_Bfree+0x3a>
 8005dda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ddc:	6862      	ldr	r2, [r4, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de4:	6021      	str	r1, [r4, #0]
 8005de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	080078a6 	.word	0x080078a6
 8005df0:	080079ac 	.word	0x080079ac

08005df4 <__multadd>:
 8005df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df8:	4698      	mov	r8, r3
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	690e      	ldr	r6, [r1, #16]
 8005e00:	4607      	mov	r7, r0
 8005e02:	f101 0014 	add.w	r0, r1, #20
 8005e06:	6805      	ldr	r5, [r0, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	b2a9      	uxth	r1, r5
 8005e0c:	fb02 8101 	mla	r1, r2, r1, r8
 8005e10:	0c2d      	lsrs	r5, r5, #16
 8005e12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005e16:	fb02 c505 	mla	r5, r2, r5, ip
 8005e1a:	b289      	uxth	r1, r1
 8005e1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005e20:	429e      	cmp	r6, r3
 8005e22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005e26:	f840 1b04 	str.w	r1, [r0], #4
 8005e2a:	dcec      	bgt.n	8005e06 <__multadd+0x12>
 8005e2c:	f1b8 0f00 	cmp.w	r8, #0
 8005e30:	d022      	beq.n	8005e78 <__multadd+0x84>
 8005e32:	68a3      	ldr	r3, [r4, #8]
 8005e34:	42b3      	cmp	r3, r6
 8005e36:	dc19      	bgt.n	8005e6c <__multadd+0x78>
 8005e38:	6861      	ldr	r1, [r4, #4]
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	3101      	adds	r1, #1
 8005e3e:	f7ff ff77 	bl	8005d30 <_Balloc>
 8005e42:	4605      	mov	r5, r0
 8005e44:	b928      	cbnz	r0, 8005e52 <__multadd+0x5e>
 8005e46:	4602      	mov	r2, r0
 8005e48:	21b5      	movs	r1, #181	; 0xb5
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <__multadd+0x8c>)
 8005e4c:	480d      	ldr	r0, [pc, #52]	; (8005e84 <__multadd+0x90>)
 8005e4e:	f000 fe6d 	bl	8006b2c <__assert_func>
 8005e52:	6922      	ldr	r2, [r4, #16]
 8005e54:	f104 010c 	add.w	r1, r4, #12
 8005e58:	3202      	adds	r2, #2
 8005e5a:	0092      	lsls	r2, r2, #2
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	f7fd f807 	bl	8002e70 <memcpy>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4638      	mov	r0, r7
 8005e66:	f7ff ffa3 	bl	8005db0 <_Bfree>
 8005e6a:	462c      	mov	r4, r5
 8005e6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e70:	3601      	adds	r6, #1
 8005e72:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e76:	6126      	str	r6, [r4, #16]
 8005e78:	4620      	mov	r0, r4
 8005e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e7e:	bf00      	nop
 8005e80:	0800791c 	.word	0x0800791c
 8005e84:	080079ac 	.word	0x080079ac

08005e88 <__s2b>:
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	2209      	movs	r2, #9
 8005e90:	461f      	mov	r7, r3
 8005e92:	3308      	adds	r3, #8
 8005e94:	460c      	mov	r4, r1
 8005e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	db09      	blt.n	8005eb8 <__s2b+0x30>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff ff43 	bl	8005d30 <_Balloc>
 8005eaa:	b940      	cbnz	r0, 8005ebe <__s2b+0x36>
 8005eac:	4602      	mov	r2, r0
 8005eae:	21ce      	movs	r1, #206	; 0xce
 8005eb0:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <__s2b+0x8c>)
 8005eb2:	4819      	ldr	r0, [pc, #100]	; (8005f18 <__s2b+0x90>)
 8005eb4:	f000 fe3a 	bl	8006b2c <__assert_func>
 8005eb8:	0052      	lsls	r2, r2, #1
 8005eba:	3101      	adds	r1, #1
 8005ebc:	e7f0      	b.n	8005ea0 <__s2b+0x18>
 8005ebe:	9b08      	ldr	r3, [sp, #32]
 8005ec0:	2d09      	cmp	r5, #9
 8005ec2:	6143      	str	r3, [r0, #20]
 8005ec4:	f04f 0301 	mov.w	r3, #1
 8005ec8:	6103      	str	r3, [r0, #16]
 8005eca:	dd16      	ble.n	8005efa <__s2b+0x72>
 8005ecc:	f104 0909 	add.w	r9, r4, #9
 8005ed0:	46c8      	mov	r8, r9
 8005ed2:	442c      	add	r4, r5
 8005ed4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ed8:	4601      	mov	r1, r0
 8005eda:	220a      	movs	r2, #10
 8005edc:	4630      	mov	r0, r6
 8005ede:	3b30      	subs	r3, #48	; 0x30
 8005ee0:	f7ff ff88 	bl	8005df4 <__multadd>
 8005ee4:	45a0      	cmp	r8, r4
 8005ee6:	d1f5      	bne.n	8005ed4 <__s2b+0x4c>
 8005ee8:	f1a5 0408 	sub.w	r4, r5, #8
 8005eec:	444c      	add	r4, r9
 8005eee:	1b2d      	subs	r5, r5, r4
 8005ef0:	1963      	adds	r3, r4, r5
 8005ef2:	42bb      	cmp	r3, r7
 8005ef4:	db04      	blt.n	8005f00 <__s2b+0x78>
 8005ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005efa:	2509      	movs	r5, #9
 8005efc:	340a      	adds	r4, #10
 8005efe:	e7f6      	b.n	8005eee <__s2b+0x66>
 8005f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f04:	4601      	mov	r1, r0
 8005f06:	220a      	movs	r2, #10
 8005f08:	4630      	mov	r0, r6
 8005f0a:	3b30      	subs	r3, #48	; 0x30
 8005f0c:	f7ff ff72 	bl	8005df4 <__multadd>
 8005f10:	e7ee      	b.n	8005ef0 <__s2b+0x68>
 8005f12:	bf00      	nop
 8005f14:	0800791c 	.word	0x0800791c
 8005f18:	080079ac 	.word	0x080079ac

08005f1c <__hi0bits>:
 8005f1c:	0c02      	lsrs	r2, r0, #16
 8005f1e:	0412      	lsls	r2, r2, #16
 8005f20:	4603      	mov	r3, r0
 8005f22:	b9ca      	cbnz	r2, 8005f58 <__hi0bits+0x3c>
 8005f24:	0403      	lsls	r3, r0, #16
 8005f26:	2010      	movs	r0, #16
 8005f28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f2c:	bf04      	itt	eq
 8005f2e:	021b      	lsleq	r3, r3, #8
 8005f30:	3008      	addeq	r0, #8
 8005f32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f36:	bf04      	itt	eq
 8005f38:	011b      	lsleq	r3, r3, #4
 8005f3a:	3004      	addeq	r0, #4
 8005f3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f40:	bf04      	itt	eq
 8005f42:	009b      	lsleq	r3, r3, #2
 8005f44:	3002      	addeq	r0, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	db05      	blt.n	8005f56 <__hi0bits+0x3a>
 8005f4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f4e:	f100 0001 	add.w	r0, r0, #1
 8005f52:	bf08      	it	eq
 8005f54:	2020      	moveq	r0, #32
 8005f56:	4770      	bx	lr
 8005f58:	2000      	movs	r0, #0
 8005f5a:	e7e5      	b.n	8005f28 <__hi0bits+0xc>

08005f5c <__lo0bits>:
 8005f5c:	6803      	ldr	r3, [r0, #0]
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f013 0007 	ands.w	r0, r3, #7
 8005f64:	d00b      	beq.n	8005f7e <__lo0bits+0x22>
 8005f66:	07d9      	lsls	r1, r3, #31
 8005f68:	d422      	bmi.n	8005fb0 <__lo0bits+0x54>
 8005f6a:	0798      	lsls	r0, r3, #30
 8005f6c:	bf49      	itett	mi
 8005f6e:	085b      	lsrmi	r3, r3, #1
 8005f70:	089b      	lsrpl	r3, r3, #2
 8005f72:	2001      	movmi	r0, #1
 8005f74:	6013      	strmi	r3, [r2, #0]
 8005f76:	bf5c      	itt	pl
 8005f78:	2002      	movpl	r0, #2
 8005f7a:	6013      	strpl	r3, [r2, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	b299      	uxth	r1, r3
 8005f80:	b909      	cbnz	r1, 8005f86 <__lo0bits+0x2a>
 8005f82:	2010      	movs	r0, #16
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f8a:	bf04      	itt	eq
 8005f8c:	0a1b      	lsreq	r3, r3, #8
 8005f8e:	3008      	addeq	r0, #8
 8005f90:	0719      	lsls	r1, r3, #28
 8005f92:	bf04      	itt	eq
 8005f94:	091b      	lsreq	r3, r3, #4
 8005f96:	3004      	addeq	r0, #4
 8005f98:	0799      	lsls	r1, r3, #30
 8005f9a:	bf04      	itt	eq
 8005f9c:	089b      	lsreq	r3, r3, #2
 8005f9e:	3002      	addeq	r0, #2
 8005fa0:	07d9      	lsls	r1, r3, #31
 8005fa2:	d403      	bmi.n	8005fac <__lo0bits+0x50>
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	f100 0001 	add.w	r0, r0, #1
 8005faa:	d003      	beq.n	8005fb4 <__lo0bits+0x58>
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4770      	bx	lr
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4770      	bx	lr
 8005fb4:	2020      	movs	r0, #32
 8005fb6:	4770      	bx	lr

08005fb8 <__i2b>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	460c      	mov	r4, r1
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	f7ff feb7 	bl	8005d30 <_Balloc>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	b928      	cbnz	r0, 8005fd2 <__i2b+0x1a>
 8005fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005fca:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <__i2b+0x24>)
 8005fcc:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <__i2b+0x28>)
 8005fce:	f000 fdad 	bl	8006b2c <__assert_func>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	6144      	str	r4, [r0, #20]
 8005fd6:	6103      	str	r3, [r0, #16]
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	bf00      	nop
 8005fdc:	0800791c 	.word	0x0800791c
 8005fe0:	080079ac 	.word	0x080079ac

08005fe4 <__multiply>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	4614      	mov	r4, r2
 8005fea:	690a      	ldr	r2, [r1, #16]
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	460d      	mov	r5, r1
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfbe      	ittt	lt
 8005ff4:	460b      	movlt	r3, r1
 8005ff6:	4625      	movlt	r5, r4
 8005ff8:	461c      	movlt	r4, r3
 8005ffa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005ffe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006002:	68ab      	ldr	r3, [r5, #8]
 8006004:	6869      	ldr	r1, [r5, #4]
 8006006:	eb0a 0709 	add.w	r7, sl, r9
 800600a:	42bb      	cmp	r3, r7
 800600c:	b085      	sub	sp, #20
 800600e:	bfb8      	it	lt
 8006010:	3101      	addlt	r1, #1
 8006012:	f7ff fe8d 	bl	8005d30 <_Balloc>
 8006016:	b930      	cbnz	r0, 8006026 <__multiply+0x42>
 8006018:	4602      	mov	r2, r0
 800601a:	f240 115d 	movw	r1, #349	; 0x15d
 800601e:	4b41      	ldr	r3, [pc, #260]	; (8006124 <__multiply+0x140>)
 8006020:	4841      	ldr	r0, [pc, #260]	; (8006128 <__multiply+0x144>)
 8006022:	f000 fd83 	bl	8006b2c <__assert_func>
 8006026:	f100 0614 	add.w	r6, r0, #20
 800602a:	4633      	mov	r3, r6
 800602c:	2200      	movs	r2, #0
 800602e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006032:	4543      	cmp	r3, r8
 8006034:	d31e      	bcc.n	8006074 <__multiply+0x90>
 8006036:	f105 0c14 	add.w	ip, r5, #20
 800603a:	f104 0314 	add.w	r3, r4, #20
 800603e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006042:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006046:	9202      	str	r2, [sp, #8]
 8006048:	ebac 0205 	sub.w	r2, ip, r5
 800604c:	3a15      	subs	r2, #21
 800604e:	f022 0203 	bic.w	r2, r2, #3
 8006052:	3204      	adds	r2, #4
 8006054:	f105 0115 	add.w	r1, r5, #21
 8006058:	458c      	cmp	ip, r1
 800605a:	bf38      	it	cc
 800605c:	2204      	movcc	r2, #4
 800605e:	9201      	str	r2, [sp, #4]
 8006060:	9a02      	ldr	r2, [sp, #8]
 8006062:	9303      	str	r3, [sp, #12]
 8006064:	429a      	cmp	r2, r3
 8006066:	d808      	bhi.n	800607a <__multiply+0x96>
 8006068:	2f00      	cmp	r7, #0
 800606a:	dc55      	bgt.n	8006118 <__multiply+0x134>
 800606c:	6107      	str	r7, [r0, #16]
 800606e:	b005      	add	sp, #20
 8006070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	f843 2b04 	str.w	r2, [r3], #4
 8006078:	e7db      	b.n	8006032 <__multiply+0x4e>
 800607a:	f8b3 a000 	ldrh.w	sl, [r3]
 800607e:	f1ba 0f00 	cmp.w	sl, #0
 8006082:	d020      	beq.n	80060c6 <__multiply+0xe2>
 8006084:	46b1      	mov	r9, r6
 8006086:	2200      	movs	r2, #0
 8006088:	f105 0e14 	add.w	lr, r5, #20
 800608c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006090:	f8d9 b000 	ldr.w	fp, [r9]
 8006094:	b2a1      	uxth	r1, r4
 8006096:	fa1f fb8b 	uxth.w	fp, fp
 800609a:	fb0a b101 	mla	r1, sl, r1, fp
 800609e:	4411      	add	r1, r2
 80060a0:	f8d9 2000 	ldr.w	r2, [r9]
 80060a4:	0c24      	lsrs	r4, r4, #16
 80060a6:	0c12      	lsrs	r2, r2, #16
 80060a8:	fb0a 2404 	mla	r4, sl, r4, r2
 80060ac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80060b0:	b289      	uxth	r1, r1
 80060b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060b6:	45f4      	cmp	ip, lr
 80060b8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80060bc:	f849 1b04 	str.w	r1, [r9], #4
 80060c0:	d8e4      	bhi.n	800608c <__multiply+0xa8>
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	5072      	str	r2, [r6, r1]
 80060c6:	9a03      	ldr	r2, [sp, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	d01f      	beq.n	8006114 <__multiply+0x130>
 80060d4:	46b6      	mov	lr, r6
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	6834      	ldr	r4, [r6, #0]
 80060dc:	f105 0114 	add.w	r1, r5, #20
 80060e0:	880a      	ldrh	r2, [r1, #0]
 80060e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060e6:	b2a4      	uxth	r4, r4
 80060e8:	fb09 b202 	mla	r2, r9, r2, fp
 80060ec:	4492      	add	sl, r2
 80060ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80060f2:	f84e 4b04 	str.w	r4, [lr], #4
 80060f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80060fa:	f8be 2000 	ldrh.w	r2, [lr]
 80060fe:	0c24      	lsrs	r4, r4, #16
 8006100:	fb09 2404 	mla	r4, r9, r4, r2
 8006104:	458c      	cmp	ip, r1
 8006106:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800610a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800610e:	d8e7      	bhi.n	80060e0 <__multiply+0xfc>
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	50b4      	str	r4, [r6, r2]
 8006114:	3604      	adds	r6, #4
 8006116:	e7a3      	b.n	8006060 <__multiply+0x7c>
 8006118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1a5      	bne.n	800606c <__multiply+0x88>
 8006120:	3f01      	subs	r7, #1
 8006122:	e7a1      	b.n	8006068 <__multiply+0x84>
 8006124:	0800791c 	.word	0x0800791c
 8006128:	080079ac 	.word	0x080079ac

0800612c <__pow5mult>:
 800612c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006130:	4615      	mov	r5, r2
 8006132:	f012 0203 	ands.w	r2, r2, #3
 8006136:	4606      	mov	r6, r0
 8006138:	460f      	mov	r7, r1
 800613a:	d007      	beq.n	800614c <__pow5mult+0x20>
 800613c:	4c25      	ldr	r4, [pc, #148]	; (80061d4 <__pow5mult+0xa8>)
 800613e:	3a01      	subs	r2, #1
 8006140:	2300      	movs	r3, #0
 8006142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006146:	f7ff fe55 	bl	8005df4 <__multadd>
 800614a:	4607      	mov	r7, r0
 800614c:	10ad      	asrs	r5, r5, #2
 800614e:	d03d      	beq.n	80061cc <__pow5mult+0xa0>
 8006150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006152:	b97c      	cbnz	r4, 8006174 <__pow5mult+0x48>
 8006154:	2010      	movs	r0, #16
 8006156:	f7ff fdc3 	bl	8005ce0 <malloc>
 800615a:	4602      	mov	r2, r0
 800615c:	6270      	str	r0, [r6, #36]	; 0x24
 800615e:	b928      	cbnz	r0, 800616c <__pow5mult+0x40>
 8006160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006164:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <__pow5mult+0xac>)
 8006166:	481d      	ldr	r0, [pc, #116]	; (80061dc <__pow5mult+0xb0>)
 8006168:	f000 fce0 	bl	8006b2c <__assert_func>
 800616c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006170:	6004      	str	r4, [r0, #0]
 8006172:	60c4      	str	r4, [r0, #12]
 8006174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800617c:	b94c      	cbnz	r4, 8006192 <__pow5mult+0x66>
 800617e:	f240 2171 	movw	r1, #625	; 0x271
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff ff18 	bl	8005fb8 <__i2b>
 8006188:	2300      	movs	r3, #0
 800618a:	4604      	mov	r4, r0
 800618c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006190:	6003      	str	r3, [r0, #0]
 8006192:	f04f 0900 	mov.w	r9, #0
 8006196:	07eb      	lsls	r3, r5, #31
 8006198:	d50a      	bpl.n	80061b0 <__pow5mult+0x84>
 800619a:	4639      	mov	r1, r7
 800619c:	4622      	mov	r2, r4
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ff20 	bl	8005fe4 <__multiply>
 80061a4:	4680      	mov	r8, r0
 80061a6:	4639      	mov	r1, r7
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7ff fe01 	bl	8005db0 <_Bfree>
 80061ae:	4647      	mov	r7, r8
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	d00b      	beq.n	80061cc <__pow5mult+0xa0>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	b938      	cbnz	r0, 80061c8 <__pow5mult+0x9c>
 80061b8:	4622      	mov	r2, r4
 80061ba:	4621      	mov	r1, r4
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff ff11 	bl	8005fe4 <__multiply>
 80061c2:	6020      	str	r0, [r4, #0]
 80061c4:	f8c0 9000 	str.w	r9, [r0]
 80061c8:	4604      	mov	r4, r0
 80061ca:	e7e4      	b.n	8006196 <__pow5mult+0x6a>
 80061cc:	4638      	mov	r0, r7
 80061ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d2:	bf00      	nop
 80061d4:	08007b00 	.word	0x08007b00
 80061d8:	080078a6 	.word	0x080078a6
 80061dc:	080079ac 	.word	0x080079ac

080061e0 <__lshift>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	460c      	mov	r4, r1
 80061e6:	4607      	mov	r7, r0
 80061e8:	4691      	mov	r9, r2
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	6849      	ldr	r1, [r1, #4]
 80061ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061f8:	f108 0601 	add.w	r6, r8, #1
 80061fc:	42b3      	cmp	r3, r6
 80061fe:	db0b      	blt.n	8006218 <__lshift+0x38>
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff fd95 	bl	8005d30 <_Balloc>
 8006206:	4605      	mov	r5, r0
 8006208:	b948      	cbnz	r0, 800621e <__lshift+0x3e>
 800620a:	4602      	mov	r2, r0
 800620c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <__lshift+0xd0>)
 8006212:	4828      	ldr	r0, [pc, #160]	; (80062b4 <__lshift+0xd4>)
 8006214:	f000 fc8a 	bl	8006b2c <__assert_func>
 8006218:	3101      	adds	r1, #1
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	e7ee      	b.n	80061fc <__lshift+0x1c>
 800621e:	2300      	movs	r3, #0
 8006220:	f100 0114 	add.w	r1, r0, #20
 8006224:	f100 0210 	add.w	r2, r0, #16
 8006228:	4618      	mov	r0, r3
 800622a:	4553      	cmp	r3, sl
 800622c:	db33      	blt.n	8006296 <__lshift+0xb6>
 800622e:	6920      	ldr	r0, [r4, #16]
 8006230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006234:	f104 0314 	add.w	r3, r4, #20
 8006238:	f019 091f 	ands.w	r9, r9, #31
 800623c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006244:	d02b      	beq.n	800629e <__lshift+0xbe>
 8006246:	468a      	mov	sl, r1
 8006248:	2200      	movs	r2, #0
 800624a:	f1c9 0e20 	rsb	lr, r9, #32
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	fa00 f009 	lsl.w	r0, r0, r9
 8006254:	4302      	orrs	r2, r0
 8006256:	f84a 2b04 	str.w	r2, [sl], #4
 800625a:	f853 2b04 	ldr.w	r2, [r3], #4
 800625e:	459c      	cmp	ip, r3
 8006260:	fa22 f20e 	lsr.w	r2, r2, lr
 8006264:	d8f3      	bhi.n	800624e <__lshift+0x6e>
 8006266:	ebac 0304 	sub.w	r3, ip, r4
 800626a:	3b15      	subs	r3, #21
 800626c:	f023 0303 	bic.w	r3, r3, #3
 8006270:	3304      	adds	r3, #4
 8006272:	f104 0015 	add.w	r0, r4, #21
 8006276:	4584      	cmp	ip, r0
 8006278:	bf38      	it	cc
 800627a:	2304      	movcc	r3, #4
 800627c:	50ca      	str	r2, [r1, r3]
 800627e:	b10a      	cbz	r2, 8006284 <__lshift+0xa4>
 8006280:	f108 0602 	add.w	r6, r8, #2
 8006284:	3e01      	subs	r6, #1
 8006286:	4638      	mov	r0, r7
 8006288:	4621      	mov	r1, r4
 800628a:	612e      	str	r6, [r5, #16]
 800628c:	f7ff fd90 	bl	8005db0 <_Bfree>
 8006290:	4628      	mov	r0, r5
 8006292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006296:	f842 0f04 	str.w	r0, [r2, #4]!
 800629a:	3301      	adds	r3, #1
 800629c:	e7c5      	b.n	800622a <__lshift+0x4a>
 800629e:	3904      	subs	r1, #4
 80062a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a4:	459c      	cmp	ip, r3
 80062a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80062aa:	d8f9      	bhi.n	80062a0 <__lshift+0xc0>
 80062ac:	e7ea      	b.n	8006284 <__lshift+0xa4>
 80062ae:	bf00      	nop
 80062b0:	0800791c 	.word	0x0800791c
 80062b4:	080079ac 	.word	0x080079ac

080062b8 <__mcmp>:
 80062b8:	4603      	mov	r3, r0
 80062ba:	690a      	ldr	r2, [r1, #16]
 80062bc:	6900      	ldr	r0, [r0, #16]
 80062be:	b530      	push	{r4, r5, lr}
 80062c0:	1a80      	subs	r0, r0, r2
 80062c2:	d10d      	bne.n	80062e0 <__mcmp+0x28>
 80062c4:	3314      	adds	r3, #20
 80062c6:	3114      	adds	r1, #20
 80062c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062d8:	4295      	cmp	r5, r2
 80062da:	d002      	beq.n	80062e2 <__mcmp+0x2a>
 80062dc:	d304      	bcc.n	80062e8 <__mcmp+0x30>
 80062de:	2001      	movs	r0, #1
 80062e0:	bd30      	pop	{r4, r5, pc}
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	d3f4      	bcc.n	80062d0 <__mcmp+0x18>
 80062e6:	e7fb      	b.n	80062e0 <__mcmp+0x28>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ec:	e7f8      	b.n	80062e0 <__mcmp+0x28>
	...

080062f0 <__mdiff>:
 80062f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	4606      	mov	r6, r0
 80062f8:	4611      	mov	r1, r2
 80062fa:	4620      	mov	r0, r4
 80062fc:	4692      	mov	sl, r2
 80062fe:	f7ff ffdb 	bl	80062b8 <__mcmp>
 8006302:	1e05      	subs	r5, r0, #0
 8006304:	d111      	bne.n	800632a <__mdiff+0x3a>
 8006306:	4629      	mov	r1, r5
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff fd11 	bl	8005d30 <_Balloc>
 800630e:	4602      	mov	r2, r0
 8006310:	b928      	cbnz	r0, 800631e <__mdiff+0x2e>
 8006312:	f240 2132 	movw	r1, #562	; 0x232
 8006316:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <__mdiff+0x118>)
 8006318:	483c      	ldr	r0, [pc, #240]	; (800640c <__mdiff+0x11c>)
 800631a:	f000 fc07 	bl	8006b2c <__assert_func>
 800631e:	2301      	movs	r3, #1
 8006320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006324:	4610      	mov	r0, r2
 8006326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	bfa4      	itt	ge
 800632c:	4653      	movge	r3, sl
 800632e:	46a2      	movge	sl, r4
 8006330:	4630      	mov	r0, r6
 8006332:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006336:	bfa6      	itte	ge
 8006338:	461c      	movge	r4, r3
 800633a:	2500      	movge	r5, #0
 800633c:	2501      	movlt	r5, #1
 800633e:	f7ff fcf7 	bl	8005d30 <_Balloc>
 8006342:	4602      	mov	r2, r0
 8006344:	b918      	cbnz	r0, 800634e <__mdiff+0x5e>
 8006346:	f44f 7110 	mov.w	r1, #576	; 0x240
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <__mdiff+0x118>)
 800634c:	e7e4      	b.n	8006318 <__mdiff+0x28>
 800634e:	f100 0814 	add.w	r8, r0, #20
 8006352:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006356:	60c5      	str	r5, [r0, #12]
 8006358:	f04f 0c00 	mov.w	ip, #0
 800635c:	f10a 0514 	add.w	r5, sl, #20
 8006360:	f10a 0010 	add.w	r0, sl, #16
 8006364:	46c2      	mov	sl, r8
 8006366:	6926      	ldr	r6, [r4, #16]
 8006368:	f104 0914 	add.w	r9, r4, #20
 800636c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006370:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006374:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006378:	f859 3b04 	ldr.w	r3, [r9], #4
 800637c:	fa1f f18b 	uxth.w	r1, fp
 8006380:	4461      	add	r1, ip
 8006382:	fa1f fc83 	uxth.w	ip, r3
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	eba1 010c 	sub.w	r1, r1, ip
 800638c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006390:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006394:	b289      	uxth	r1, r1
 8006396:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800639a:	454e      	cmp	r6, r9
 800639c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063a0:	f84a 3b04 	str.w	r3, [sl], #4
 80063a4:	d8e6      	bhi.n	8006374 <__mdiff+0x84>
 80063a6:	1b33      	subs	r3, r6, r4
 80063a8:	3b15      	subs	r3, #21
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	3415      	adds	r4, #21
 80063b0:	3304      	adds	r3, #4
 80063b2:	42a6      	cmp	r6, r4
 80063b4:	bf38      	it	cc
 80063b6:	2304      	movcc	r3, #4
 80063b8:	441d      	add	r5, r3
 80063ba:	4443      	add	r3, r8
 80063bc:	461e      	mov	r6, r3
 80063be:	462c      	mov	r4, r5
 80063c0:	4574      	cmp	r4, lr
 80063c2:	d30e      	bcc.n	80063e2 <__mdiff+0xf2>
 80063c4:	f10e 0103 	add.w	r1, lr, #3
 80063c8:	1b49      	subs	r1, r1, r5
 80063ca:	f021 0103 	bic.w	r1, r1, #3
 80063ce:	3d03      	subs	r5, #3
 80063d0:	45ae      	cmp	lr, r5
 80063d2:	bf38      	it	cc
 80063d4:	2100      	movcc	r1, #0
 80063d6:	4419      	add	r1, r3
 80063d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80063dc:	b18b      	cbz	r3, 8006402 <__mdiff+0x112>
 80063de:	6117      	str	r7, [r2, #16]
 80063e0:	e7a0      	b.n	8006324 <__mdiff+0x34>
 80063e2:	f854 8b04 	ldr.w	r8, [r4], #4
 80063e6:	fa1f f188 	uxth.w	r1, r8
 80063ea:	4461      	add	r1, ip
 80063ec:	1408      	asrs	r0, r1, #16
 80063ee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80063f2:	b289      	uxth	r1, r1
 80063f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063fc:	f846 1b04 	str.w	r1, [r6], #4
 8006400:	e7de      	b.n	80063c0 <__mdiff+0xd0>
 8006402:	3f01      	subs	r7, #1
 8006404:	e7e8      	b.n	80063d8 <__mdiff+0xe8>
 8006406:	bf00      	nop
 8006408:	0800791c 	.word	0x0800791c
 800640c:	080079ac 	.word	0x080079ac

08006410 <__ulp>:
 8006410:	4b11      	ldr	r3, [pc, #68]	; (8006458 <__ulp+0x48>)
 8006412:	400b      	ands	r3, r1
 8006414:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006418:	2b00      	cmp	r3, #0
 800641a:	dd02      	ble.n	8006422 <__ulp+0x12>
 800641c:	2000      	movs	r0, #0
 800641e:	4619      	mov	r1, r3
 8006420:	4770      	bx	lr
 8006422:	425b      	negs	r3, r3
 8006424:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006428:	f04f 0000 	mov.w	r0, #0
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006434:	da04      	bge.n	8006440 <__ulp+0x30>
 8006436:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800643a:	fa43 f102 	asr.w	r1, r3, r2
 800643e:	4770      	bx	lr
 8006440:	f1a2 0314 	sub.w	r3, r2, #20
 8006444:	2b1e      	cmp	r3, #30
 8006446:	bfd6      	itet	le
 8006448:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800644c:	2301      	movgt	r3, #1
 800644e:	fa22 f303 	lsrle.w	r3, r2, r3
 8006452:	4618      	mov	r0, r3
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	7ff00000 	.word	0x7ff00000

0800645c <__b2d>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	6907      	ldr	r7, [r0, #16]
 8006462:	f100 0914 	add.w	r9, r0, #20
 8006466:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800646a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800646e:	f1a7 0804 	sub.w	r8, r7, #4
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff fd52 	bl	8005f1c <__hi0bits>
 8006478:	f1c0 0320 	rsb	r3, r0, #32
 800647c:	280a      	cmp	r0, #10
 800647e:	600b      	str	r3, [r1, #0]
 8006480:	491f      	ldr	r1, [pc, #124]	; (8006500 <__b2d+0xa4>)
 8006482:	dc17      	bgt.n	80064b4 <__b2d+0x58>
 8006484:	45c1      	cmp	r9, r8
 8006486:	bf28      	it	cs
 8006488:	2200      	movcs	r2, #0
 800648a:	f1c0 0c0b 	rsb	ip, r0, #11
 800648e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006492:	bf38      	it	cc
 8006494:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006498:	ea43 0501 	orr.w	r5, r3, r1
 800649c:	f100 0315 	add.w	r3, r0, #21
 80064a0:	fa06 f303 	lsl.w	r3, r6, r3
 80064a4:	fa22 f20c 	lsr.w	r2, r2, ip
 80064a8:	ea43 0402 	orr.w	r4, r3, r2
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b4:	45c1      	cmp	r9, r8
 80064b6:	bf2e      	itee	cs
 80064b8:	2200      	movcs	r2, #0
 80064ba:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80064be:	f1a7 0808 	subcc.w	r8, r7, #8
 80064c2:	f1b0 030b 	subs.w	r3, r0, #11
 80064c6:	d016      	beq.n	80064f6 <__b2d+0x9a>
 80064c8:	f1c3 0720 	rsb	r7, r3, #32
 80064cc:	fa22 f107 	lsr.w	r1, r2, r7
 80064d0:	45c8      	cmp	r8, r9
 80064d2:	fa06 f603 	lsl.w	r6, r6, r3
 80064d6:	ea46 0601 	orr.w	r6, r6, r1
 80064da:	bf94      	ite	ls
 80064dc:	2100      	movls	r1, #0
 80064de:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80064e2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80064e6:	fa02 f003 	lsl.w	r0, r2, r3
 80064ea:	40f9      	lsrs	r1, r7
 80064ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80064f0:	ea40 0401 	orr.w	r4, r0, r1
 80064f4:	e7da      	b.n	80064ac <__b2d+0x50>
 80064f6:	4614      	mov	r4, r2
 80064f8:	ea46 0501 	orr.w	r5, r6, r1
 80064fc:	e7d6      	b.n	80064ac <__b2d+0x50>
 80064fe:	bf00      	nop
 8006500:	3ff00000 	.word	0x3ff00000

08006504 <__d2b>:
 8006504:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006508:	2101      	movs	r1, #1
 800650a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800650e:	4690      	mov	r8, r2
 8006510:	461d      	mov	r5, r3
 8006512:	f7ff fc0d 	bl	8005d30 <_Balloc>
 8006516:	4604      	mov	r4, r0
 8006518:	b930      	cbnz	r0, 8006528 <__d2b+0x24>
 800651a:	4602      	mov	r2, r0
 800651c:	f240 310a 	movw	r1, #778	; 0x30a
 8006520:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <__d2b+0xb0>)
 8006522:	4825      	ldr	r0, [pc, #148]	; (80065b8 <__d2b+0xb4>)
 8006524:	f000 fb02 	bl	8006b2c <__assert_func>
 8006528:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800652c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006530:	bb2d      	cbnz	r5, 800657e <__d2b+0x7a>
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	f1b8 0300 	subs.w	r3, r8, #0
 8006538:	d026      	beq.n	8006588 <__d2b+0x84>
 800653a:	4668      	mov	r0, sp
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	f7ff fd0d 	bl	8005f5c <__lo0bits>
 8006542:	9900      	ldr	r1, [sp, #0]
 8006544:	b1f0      	cbz	r0, 8006584 <__d2b+0x80>
 8006546:	9a01      	ldr	r2, [sp, #4]
 8006548:	f1c0 0320 	rsb	r3, r0, #32
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	430b      	orrs	r3, r1
 8006552:	40c2      	lsrs	r2, r0
 8006554:	6163      	str	r3, [r4, #20]
 8006556:	9201      	str	r2, [sp, #4]
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2102      	movne	r1, #2
 8006560:	2101      	moveq	r1, #1
 8006562:	61a3      	str	r3, [r4, #24]
 8006564:	6121      	str	r1, [r4, #16]
 8006566:	b1c5      	cbz	r5, 800659a <__d2b+0x96>
 8006568:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800656c:	4405      	add	r5, r0
 800656e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006572:	603d      	str	r5, [r7, #0]
 8006574:	6030      	str	r0, [r6, #0]
 8006576:	4620      	mov	r0, r4
 8006578:	b002      	add	sp, #8
 800657a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006582:	e7d6      	b.n	8006532 <__d2b+0x2e>
 8006584:	6161      	str	r1, [r4, #20]
 8006586:	e7e7      	b.n	8006558 <__d2b+0x54>
 8006588:	a801      	add	r0, sp, #4
 800658a:	f7ff fce7 	bl	8005f5c <__lo0bits>
 800658e:	2101      	movs	r1, #1
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	6121      	str	r1, [r4, #16]
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	3020      	adds	r0, #32
 8006598:	e7e5      	b.n	8006566 <__d2b+0x62>
 800659a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800659e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065a2:	6038      	str	r0, [r7, #0]
 80065a4:	6918      	ldr	r0, [r3, #16]
 80065a6:	f7ff fcb9 	bl	8005f1c <__hi0bits>
 80065aa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80065ae:	6031      	str	r1, [r6, #0]
 80065b0:	e7e1      	b.n	8006576 <__d2b+0x72>
 80065b2:	bf00      	nop
 80065b4:	0800791c 	.word	0x0800791c
 80065b8:	080079ac 	.word	0x080079ac

080065bc <__ratio>:
 80065bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4688      	mov	r8, r1
 80065c2:	4669      	mov	r1, sp
 80065c4:	4681      	mov	r9, r0
 80065c6:	f7ff ff49 	bl	800645c <__b2d>
 80065ca:	460f      	mov	r7, r1
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	4640      	mov	r0, r8
 80065d2:	a901      	add	r1, sp, #4
 80065d4:	f7ff ff42 	bl	800645c <__b2d>
 80065d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80065e0:	468b      	mov	fp, r1
 80065e2:	eba3 0c02 	sub.w	ip, r3, r2
 80065e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfd5      	itete	le
 80065f4:	460a      	movle	r2, r1
 80065f6:	462a      	movgt	r2, r5
 80065f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065fc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006600:	bfd8      	it	le
 8006602:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006606:	465b      	mov	r3, fp
 8006608:	4602      	mov	r2, r0
 800660a:	4639      	mov	r1, r7
 800660c:	4620      	mov	r0, r4
 800660e:	f7fa f88d 	bl	800072c <__aeabi_ddiv>
 8006612:	b003      	add	sp, #12
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006618 <__copybits>:
 8006618:	3901      	subs	r1, #1
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	1149      	asrs	r1, r1, #5
 800661e:	6914      	ldr	r4, [r2, #16]
 8006620:	3101      	adds	r1, #1
 8006622:	f102 0314 	add.w	r3, r2, #20
 8006626:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800662a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800662e:	1f05      	subs	r5, r0, #4
 8006630:	42a3      	cmp	r3, r4
 8006632:	d30c      	bcc.n	800664e <__copybits+0x36>
 8006634:	1aa3      	subs	r3, r4, r2
 8006636:	3b11      	subs	r3, #17
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3211      	adds	r2, #17
 800663e:	42a2      	cmp	r2, r4
 8006640:	bf88      	it	hi
 8006642:	2300      	movhi	r3, #0
 8006644:	4418      	add	r0, r3
 8006646:	2300      	movs	r3, #0
 8006648:	4288      	cmp	r0, r1
 800664a:	d305      	bcc.n	8006658 <__copybits+0x40>
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006652:	f845 6f04 	str.w	r6, [r5, #4]!
 8006656:	e7eb      	b.n	8006630 <__copybits+0x18>
 8006658:	f840 3b04 	str.w	r3, [r0], #4
 800665c:	e7f4      	b.n	8006648 <__copybits+0x30>

0800665e <__any_on>:
 800665e:	f100 0214 	add.w	r2, r0, #20
 8006662:	6900      	ldr	r0, [r0, #16]
 8006664:	114b      	asrs	r3, r1, #5
 8006666:	4298      	cmp	r0, r3
 8006668:	b510      	push	{r4, lr}
 800666a:	db11      	blt.n	8006690 <__any_on+0x32>
 800666c:	dd0a      	ble.n	8006684 <__any_on+0x26>
 800666e:	f011 011f 	ands.w	r1, r1, #31
 8006672:	d007      	beq.n	8006684 <__any_on+0x26>
 8006674:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006678:	fa24 f001 	lsr.w	r0, r4, r1
 800667c:	fa00 f101 	lsl.w	r1, r0, r1
 8006680:	428c      	cmp	r4, r1
 8006682:	d10b      	bne.n	800669c <__any_on+0x3e>
 8006684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006688:	4293      	cmp	r3, r2
 800668a:	d803      	bhi.n	8006694 <__any_on+0x36>
 800668c:	2000      	movs	r0, #0
 800668e:	bd10      	pop	{r4, pc}
 8006690:	4603      	mov	r3, r0
 8006692:	e7f7      	b.n	8006684 <__any_on+0x26>
 8006694:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006698:	2900      	cmp	r1, #0
 800669a:	d0f5      	beq.n	8006688 <__any_on+0x2a>
 800669c:	2001      	movs	r0, #1
 800669e:	e7f6      	b.n	800668e <__any_on+0x30>

080066a0 <_calloc_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	fb02 f501 	mul.w	r5, r2, r1
 80066a6:	4629      	mov	r1, r5
 80066a8:	f000 f854 	bl	8006754 <_malloc_r>
 80066ac:	4604      	mov	r4, r0
 80066ae:	b118      	cbz	r0, 80066b8 <_calloc_r+0x18>
 80066b0:	462a      	mov	r2, r5
 80066b2:	2100      	movs	r1, #0
 80066b4:	f7fc fbea 	bl	8002e8c <memset>
 80066b8:	4620      	mov	r0, r4
 80066ba:	bd38      	pop	{r3, r4, r5, pc}

080066bc <_free_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d043      	beq.n	800674c <_free_r+0x90>
 80066c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c8:	1f0c      	subs	r4, r1, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	18e4      	addlt	r4, r4, r3
 80066d0:	f000 fa76 	bl	8006bc0 <__malloc_lock>
 80066d4:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <_free_r+0x94>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	4610      	mov	r0, r2
 80066da:	b933      	cbnz	r3, 80066ea <_free_r+0x2e>
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6014      	str	r4, [r2, #0]
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e6:	f000 ba71 	b.w	8006bcc <__malloc_unlock>
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	d90a      	bls.n	8006704 <_free_r+0x48>
 80066ee:	6821      	ldr	r1, [r4, #0]
 80066f0:	1862      	adds	r2, r4, r1
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bf01      	itttt	eq
 80066f6:	681a      	ldreq	r2, [r3, #0]
 80066f8:	685b      	ldreq	r3, [r3, #4]
 80066fa:	1852      	addeq	r2, r2, r1
 80066fc:	6022      	streq	r2, [r4, #0]
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	6004      	str	r4, [r0, #0]
 8006702:	e7ed      	b.n	80066e0 <_free_r+0x24>
 8006704:	461a      	mov	r2, r3
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	b10b      	cbz	r3, 800670e <_free_r+0x52>
 800670a:	42a3      	cmp	r3, r4
 800670c:	d9fa      	bls.n	8006704 <_free_r+0x48>
 800670e:	6811      	ldr	r1, [r2, #0]
 8006710:	1850      	adds	r0, r2, r1
 8006712:	42a0      	cmp	r0, r4
 8006714:	d10b      	bne.n	800672e <_free_r+0x72>
 8006716:	6820      	ldr	r0, [r4, #0]
 8006718:	4401      	add	r1, r0
 800671a:	1850      	adds	r0, r2, r1
 800671c:	4283      	cmp	r3, r0
 800671e:	6011      	str	r1, [r2, #0]
 8006720:	d1de      	bne.n	80066e0 <_free_r+0x24>
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4401      	add	r1, r0
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	6053      	str	r3, [r2, #4]
 800672c:	e7d8      	b.n	80066e0 <_free_r+0x24>
 800672e:	d902      	bls.n	8006736 <_free_r+0x7a>
 8006730:	230c      	movs	r3, #12
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	e7d4      	b.n	80066e0 <_free_r+0x24>
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	1821      	adds	r1, r4, r0
 800673a:	428b      	cmp	r3, r1
 800673c:	bf01      	itttt	eq
 800673e:	6819      	ldreq	r1, [r3, #0]
 8006740:	685b      	ldreq	r3, [r3, #4]
 8006742:	1809      	addeq	r1, r1, r0
 8006744:	6021      	streq	r1, [r4, #0]
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	6054      	str	r4, [r2, #4]
 800674a:	e7c9      	b.n	80066e0 <_free_r+0x24>
 800674c:	bd38      	pop	{r3, r4, r5, pc}
 800674e:	bf00      	nop
 8006750:	20003408 	.word	0x20003408

08006754 <_malloc_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	1ccd      	adds	r5, r1, #3
 8006758:	f025 0503 	bic.w	r5, r5, #3
 800675c:	3508      	adds	r5, #8
 800675e:	2d0c      	cmp	r5, #12
 8006760:	bf38      	it	cc
 8006762:	250c      	movcc	r5, #12
 8006764:	2d00      	cmp	r5, #0
 8006766:	4606      	mov	r6, r0
 8006768:	db01      	blt.n	800676e <_malloc_r+0x1a>
 800676a:	42a9      	cmp	r1, r5
 800676c:	d903      	bls.n	8006776 <_malloc_r+0x22>
 800676e:	230c      	movs	r3, #12
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	2000      	movs	r0, #0
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006776:	f000 fa23 	bl	8006bc0 <__malloc_lock>
 800677a:	4921      	ldr	r1, [pc, #132]	; (8006800 <_malloc_r+0xac>)
 800677c:	680a      	ldr	r2, [r1, #0]
 800677e:	4614      	mov	r4, r2
 8006780:	b99c      	cbnz	r4, 80067aa <_malloc_r+0x56>
 8006782:	4f20      	ldr	r7, [pc, #128]	; (8006804 <_malloc_r+0xb0>)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	b923      	cbnz	r3, 8006792 <_malloc_r+0x3e>
 8006788:	4621      	mov	r1, r4
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f99e 	bl	8006acc <_sbrk_r>
 8006790:	6038      	str	r0, [r7, #0]
 8006792:	4629      	mov	r1, r5
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f999 	bl	8006acc <_sbrk_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d123      	bne.n	80067e6 <_malloc_r+0x92>
 800679e:	230c      	movs	r3, #12
 80067a0:	4630      	mov	r0, r6
 80067a2:	6033      	str	r3, [r6, #0]
 80067a4:	f000 fa12 	bl	8006bcc <__malloc_unlock>
 80067a8:	e7e3      	b.n	8006772 <_malloc_r+0x1e>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	1b5b      	subs	r3, r3, r5
 80067ae:	d417      	bmi.n	80067e0 <_malloc_r+0x8c>
 80067b0:	2b0b      	cmp	r3, #11
 80067b2:	d903      	bls.n	80067bc <_malloc_r+0x68>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	441c      	add	r4, r3
 80067b8:	6025      	str	r5, [r4, #0]
 80067ba:	e004      	b.n	80067c6 <_malloc_r+0x72>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	42a2      	cmp	r2, r4
 80067c0:	bf0c      	ite	eq
 80067c2:	600b      	streq	r3, [r1, #0]
 80067c4:	6053      	strne	r3, [r2, #4]
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 fa00 	bl	8006bcc <__malloc_unlock>
 80067cc:	f104 000b 	add.w	r0, r4, #11
 80067d0:	1d23      	adds	r3, r4, #4
 80067d2:	f020 0007 	bic.w	r0, r0, #7
 80067d6:	1ac2      	subs	r2, r0, r3
 80067d8:	d0cc      	beq.n	8006774 <_malloc_r+0x20>
 80067da:	1a1b      	subs	r3, r3, r0
 80067dc:	50a3      	str	r3, [r4, r2]
 80067de:	e7c9      	b.n	8006774 <_malloc_r+0x20>
 80067e0:	4622      	mov	r2, r4
 80067e2:	6864      	ldr	r4, [r4, #4]
 80067e4:	e7cc      	b.n	8006780 <_malloc_r+0x2c>
 80067e6:	1cc4      	adds	r4, r0, #3
 80067e8:	f024 0403 	bic.w	r4, r4, #3
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d0e3      	beq.n	80067b8 <_malloc_r+0x64>
 80067f0:	1a21      	subs	r1, r4, r0
 80067f2:	4630      	mov	r0, r6
 80067f4:	f000 f96a 	bl	8006acc <_sbrk_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1dd      	bne.n	80067b8 <_malloc_r+0x64>
 80067fc:	e7cf      	b.n	800679e <_malloc_r+0x4a>
 80067fe:	bf00      	nop
 8006800:	20003408 	.word	0x20003408
 8006804:	2000340c 	.word	0x2000340c

08006808 <__ssputs_r>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	688e      	ldr	r6, [r1, #8]
 800680e:	4682      	mov	sl, r0
 8006810:	429e      	cmp	r6, r3
 8006812:	460c      	mov	r4, r1
 8006814:	4690      	mov	r8, r2
 8006816:	461f      	mov	r7, r3
 8006818:	d838      	bhi.n	800688c <__ssputs_r+0x84>
 800681a:	898a      	ldrh	r2, [r1, #12]
 800681c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006820:	d032      	beq.n	8006888 <__ssputs_r+0x80>
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	6909      	ldr	r1, [r1, #16]
 8006826:	3301      	adds	r3, #1
 8006828:	eba5 0901 	sub.w	r9, r5, r1
 800682c:	6965      	ldr	r5, [r4, #20]
 800682e:	444b      	add	r3, r9
 8006830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006838:	106d      	asrs	r5, r5, #1
 800683a:	429d      	cmp	r5, r3
 800683c:	bf38      	it	cc
 800683e:	461d      	movcc	r5, r3
 8006840:	0553      	lsls	r3, r2, #21
 8006842:	d531      	bpl.n	80068a8 <__ssputs_r+0xa0>
 8006844:	4629      	mov	r1, r5
 8006846:	f7ff ff85 	bl	8006754 <_malloc_r>
 800684a:	4606      	mov	r6, r0
 800684c:	b950      	cbnz	r0, 8006864 <__ssputs_r+0x5c>
 800684e:	230c      	movs	r3, #12
 8006850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006854:	f8ca 3000 	str.w	r3, [sl]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006864:	464a      	mov	r2, r9
 8006866:	6921      	ldr	r1, [r4, #16]
 8006868:	f7fc fb02 	bl	8002e70 <memcpy>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	6126      	str	r6, [r4, #16]
 800687a:	444e      	add	r6, r9
 800687c:	6026      	str	r6, [r4, #0]
 800687e:	463e      	mov	r6, r7
 8006880:	6165      	str	r5, [r4, #20]
 8006882:	eba5 0509 	sub.w	r5, r5, r9
 8006886:	60a5      	str	r5, [r4, #8]
 8006888:	42be      	cmp	r6, r7
 800688a:	d900      	bls.n	800688e <__ssputs_r+0x86>
 800688c:	463e      	mov	r6, r7
 800688e:	4632      	mov	r2, r6
 8006890:	4641      	mov	r1, r8
 8006892:	6820      	ldr	r0, [r4, #0]
 8006894:	f000 f97a 	bl	8006b8c <memmove>
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	4432      	add	r2, r6
 80068a0:	2000      	movs	r0, #0
 80068a2:	60a3      	str	r3, [r4, #8]
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	e7db      	b.n	8006860 <__ssputs_r+0x58>
 80068a8:	462a      	mov	r2, r5
 80068aa:	f000 f995 	bl	8006bd8 <_realloc_r>
 80068ae:	4606      	mov	r6, r0
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d1e1      	bne.n	8006878 <__ssputs_r+0x70>
 80068b4:	4650      	mov	r0, sl
 80068b6:	6921      	ldr	r1, [r4, #16]
 80068b8:	f7ff ff00 	bl	80066bc <_free_r>
 80068bc:	e7c7      	b.n	800684e <__ssputs_r+0x46>
	...

080068c0 <_svfiprintf_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	4698      	mov	r8, r3
 80068c6:	898b      	ldrh	r3, [r1, #12]
 80068c8:	4607      	mov	r7, r0
 80068ca:	061b      	lsls	r3, r3, #24
 80068cc:	460d      	mov	r5, r1
 80068ce:	4614      	mov	r4, r2
 80068d0:	b09d      	sub	sp, #116	; 0x74
 80068d2:	d50e      	bpl.n	80068f2 <_svfiprintf_r+0x32>
 80068d4:	690b      	ldr	r3, [r1, #16]
 80068d6:	b963      	cbnz	r3, 80068f2 <_svfiprintf_r+0x32>
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	f7ff ff3b 	bl	8006754 <_malloc_r>
 80068de:	6028      	str	r0, [r5, #0]
 80068e0:	6128      	str	r0, [r5, #16]
 80068e2:	b920      	cbnz	r0, 80068ee <_svfiprintf_r+0x2e>
 80068e4:	230c      	movs	r3, #12
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ec:	e0d1      	b.n	8006a92 <_svfiprintf_r+0x1d2>
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	616b      	str	r3, [r5, #20]
 80068f2:	2300      	movs	r3, #0
 80068f4:	9309      	str	r3, [sp, #36]	; 0x24
 80068f6:	2320      	movs	r3, #32
 80068f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068fc:	2330      	movs	r3, #48	; 0x30
 80068fe:	f04f 0901 	mov.w	r9, #1
 8006902:	f8cd 800c 	str.w	r8, [sp, #12]
 8006906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006aac <_svfiprintf_r+0x1ec>
 800690a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800690e:	4623      	mov	r3, r4
 8006910:	469a      	mov	sl, r3
 8006912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006916:	b10a      	cbz	r2, 800691c <_svfiprintf_r+0x5c>
 8006918:	2a25      	cmp	r2, #37	; 0x25
 800691a:	d1f9      	bne.n	8006910 <_svfiprintf_r+0x50>
 800691c:	ebba 0b04 	subs.w	fp, sl, r4
 8006920:	d00b      	beq.n	800693a <_svfiprintf_r+0x7a>
 8006922:	465b      	mov	r3, fp
 8006924:	4622      	mov	r2, r4
 8006926:	4629      	mov	r1, r5
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ff6d 	bl	8006808 <__ssputs_r>
 800692e:	3001      	adds	r0, #1
 8006930:	f000 80aa 	beq.w	8006a88 <_svfiprintf_r+0x1c8>
 8006934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006936:	445a      	add	r2, fp
 8006938:	9209      	str	r2, [sp, #36]	; 0x24
 800693a:	f89a 3000 	ldrb.w	r3, [sl]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80a2 	beq.w	8006a88 <_svfiprintf_r+0x1c8>
 8006944:	2300      	movs	r3, #0
 8006946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694e:	f10a 0a01 	add.w	sl, sl, #1
 8006952:	9304      	str	r3, [sp, #16]
 8006954:	9307      	str	r3, [sp, #28]
 8006956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800695a:	931a      	str	r3, [sp, #104]	; 0x68
 800695c:	4654      	mov	r4, sl
 800695e:	2205      	movs	r2, #5
 8006960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006964:	4851      	ldr	r0, [pc, #324]	; (8006aac <_svfiprintf_r+0x1ec>)
 8006966:	f7ff f9d5 	bl	8005d14 <memchr>
 800696a:	9a04      	ldr	r2, [sp, #16]
 800696c:	b9d8      	cbnz	r0, 80069a6 <_svfiprintf_r+0xe6>
 800696e:	06d0      	lsls	r0, r2, #27
 8006970:	bf44      	itt	mi
 8006972:	2320      	movmi	r3, #32
 8006974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006978:	0711      	lsls	r1, r2, #28
 800697a:	bf44      	itt	mi
 800697c:	232b      	movmi	r3, #43	; 0x2b
 800697e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006982:	f89a 3000 	ldrb.w	r3, [sl]
 8006986:	2b2a      	cmp	r3, #42	; 0x2a
 8006988:	d015      	beq.n	80069b6 <_svfiprintf_r+0xf6>
 800698a:	4654      	mov	r4, sl
 800698c:	2000      	movs	r0, #0
 800698e:	f04f 0c0a 	mov.w	ip, #10
 8006992:	9a07      	ldr	r2, [sp, #28]
 8006994:	4621      	mov	r1, r4
 8006996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800699a:	3b30      	subs	r3, #48	; 0x30
 800699c:	2b09      	cmp	r3, #9
 800699e:	d94e      	bls.n	8006a3e <_svfiprintf_r+0x17e>
 80069a0:	b1b0      	cbz	r0, 80069d0 <_svfiprintf_r+0x110>
 80069a2:	9207      	str	r2, [sp, #28]
 80069a4:	e014      	b.n	80069d0 <_svfiprintf_r+0x110>
 80069a6:	eba0 0308 	sub.w	r3, r0, r8
 80069aa:	fa09 f303 	lsl.w	r3, r9, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	46a2      	mov	sl, r4
 80069b2:	9304      	str	r3, [sp, #16]
 80069b4:	e7d2      	b.n	800695c <_svfiprintf_r+0x9c>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	9103      	str	r1, [sp, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbb      	ittet	lt
 80069c2:	425b      	neglt	r3, r3
 80069c4:	f042 0202 	orrlt.w	r2, r2, #2
 80069c8:	9307      	strge	r3, [sp, #28]
 80069ca:	9307      	strlt	r3, [sp, #28]
 80069cc:	bfb8      	it	lt
 80069ce:	9204      	strlt	r2, [sp, #16]
 80069d0:	7823      	ldrb	r3, [r4, #0]
 80069d2:	2b2e      	cmp	r3, #46	; 0x2e
 80069d4:	d10c      	bne.n	80069f0 <_svfiprintf_r+0x130>
 80069d6:	7863      	ldrb	r3, [r4, #1]
 80069d8:	2b2a      	cmp	r3, #42	; 0x2a
 80069da:	d135      	bne.n	8006a48 <_svfiprintf_r+0x188>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	3402      	adds	r4, #2
 80069e0:	1d1a      	adds	r2, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9203      	str	r2, [sp, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb8      	it	lt
 80069ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069ee:	9305      	str	r3, [sp, #20]
 80069f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006abc <_svfiprintf_r+0x1fc>
 80069f4:	2203      	movs	r2, #3
 80069f6:	4650      	mov	r0, sl
 80069f8:	7821      	ldrb	r1, [r4, #0]
 80069fa:	f7ff f98b 	bl	8005d14 <memchr>
 80069fe:	b140      	cbz	r0, 8006a12 <_svfiprintf_r+0x152>
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	eba0 000a 	sub.w	r0, r0, sl
 8006a06:	fa03 f000 	lsl.w	r0, r3, r0
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	3401      	adds	r4, #1
 8006a0e:	4303      	orrs	r3, r0
 8006a10:	9304      	str	r3, [sp, #16]
 8006a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a16:	2206      	movs	r2, #6
 8006a18:	4825      	ldr	r0, [pc, #148]	; (8006ab0 <_svfiprintf_r+0x1f0>)
 8006a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a1e:	f7ff f979 	bl	8005d14 <memchr>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d038      	beq.n	8006a98 <_svfiprintf_r+0x1d8>
 8006a26:	4b23      	ldr	r3, [pc, #140]	; (8006ab4 <_svfiprintf_r+0x1f4>)
 8006a28:	bb1b      	cbnz	r3, 8006a72 <_svfiprintf_r+0x1b2>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	3307      	adds	r3, #7
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	3308      	adds	r3, #8
 8006a34:	9303      	str	r3, [sp, #12]
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	4433      	add	r3, r6
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	e767      	b.n	800690e <_svfiprintf_r+0x4e>
 8006a3e:	460c      	mov	r4, r1
 8006a40:	2001      	movs	r0, #1
 8006a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a46:	e7a5      	b.n	8006994 <_svfiprintf_r+0xd4>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4619      	mov	r1, r3
 8006a50:	3401      	adds	r4, #1
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	4620      	mov	r0, r4
 8006a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a5a:	3a30      	subs	r2, #48	; 0x30
 8006a5c:	2a09      	cmp	r2, #9
 8006a5e:	d903      	bls.n	8006a68 <_svfiprintf_r+0x1a8>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0c5      	beq.n	80069f0 <_svfiprintf_r+0x130>
 8006a64:	9105      	str	r1, [sp, #20]
 8006a66:	e7c3      	b.n	80069f0 <_svfiprintf_r+0x130>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a70:	e7f0      	b.n	8006a54 <_svfiprintf_r+0x194>
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4638      	mov	r0, r7
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <_svfiprintf_r+0x1f8>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	f7fc faab 	bl	8002fd8 <_printf_float>
 8006a82:	1c42      	adds	r2, r0, #1
 8006a84:	4606      	mov	r6, r0
 8006a86:	d1d6      	bne.n	8006a36 <_svfiprintf_r+0x176>
 8006a88:	89ab      	ldrh	r3, [r5, #12]
 8006a8a:	065b      	lsls	r3, r3, #25
 8006a8c:	f53f af2c 	bmi.w	80068e8 <_svfiprintf_r+0x28>
 8006a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a92:	b01d      	add	sp, #116	; 0x74
 8006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a98:	ab03      	add	r3, sp, #12
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <_svfiprintf_r+0x1f8>)
 8006aa2:	a904      	add	r1, sp, #16
 8006aa4:	f7fc fd34 	bl	8003510 <_printf_i>
 8006aa8:	e7eb      	b.n	8006a82 <_svfiprintf_r+0x1c2>
 8006aaa:	bf00      	nop
 8006aac:	08007b0c 	.word	0x08007b0c
 8006ab0:	08007b16 	.word	0x08007b16
 8006ab4:	08002fd9 	.word	0x08002fd9
 8006ab8:	08006809 	.word	0x08006809
 8006abc:	08007b12 	.word	0x08007b12

08006ac0 <nan>:
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4901      	ldr	r1, [pc, #4]	; (8006ac8 <nan+0x8>)
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	7ff80000 	.word	0x7ff80000

08006acc <_sbrk_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4d05      	ldr	r5, [pc, #20]	; (8006ae8 <_sbrk_r+0x1c>)
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fc f956 	bl	8002d88 <_sbrk>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_sbrk_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_sbrk_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20003458 	.word	0x20003458

08006aec <strncmp>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	b16a      	cbz	r2, 8006b0c <strncmp+0x20>
 8006af0:	3901      	subs	r1, #1
 8006af2:	1884      	adds	r4, r0, r2
 8006af4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006af8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d103      	bne.n	8006b08 <strncmp+0x1c>
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d001      	beq.n	8006b08 <strncmp+0x1c>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f5      	bne.n	8006af4 <strncmp+0x8>
 8006b08:	1a98      	subs	r0, r3, r2
 8006b0a:	bd10      	pop	{r4, pc}
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	e7fc      	b.n	8006b0a <strncmp+0x1e>

08006b10 <__ascii_wctomb>:
 8006b10:	4603      	mov	r3, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	b141      	cbz	r1, 8006b28 <__ascii_wctomb+0x18>
 8006b16:	2aff      	cmp	r2, #255	; 0xff
 8006b18:	d904      	bls.n	8006b24 <__ascii_wctomb+0x14>
 8006b1a:	228a      	movs	r2, #138	; 0x8a
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	4770      	bx	lr
 8006b24:	2001      	movs	r0, #1
 8006b26:	700a      	strb	r2, [r1, #0]
 8006b28:	4770      	bx	lr
	...

08006b2c <__assert_func>:
 8006b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b2e:	4614      	mov	r4, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <__assert_func+0x2c>)
 8006b34:	4605      	mov	r5, r0
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68d8      	ldr	r0, [r3, #12]
 8006b3a:	b14c      	cbz	r4, 8006b50 <__assert_func+0x24>
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <__assert_func+0x30>)
 8006b3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b42:	9100      	str	r1, [sp, #0]
 8006b44:	462b      	mov	r3, r5
 8006b46:	4906      	ldr	r1, [pc, #24]	; (8006b60 <__assert_func+0x34>)
 8006b48:	f000 f80e 	bl	8006b68 <fiprintf>
 8006b4c:	f000 fa82 	bl	8007054 <abort>
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <__assert_func+0x38>)
 8006b52:	461c      	mov	r4, r3
 8006b54:	e7f3      	b.n	8006b3e <__assert_func+0x12>
 8006b56:	bf00      	nop
 8006b58:	20000020 	.word	0x20000020
 8006b5c:	08007b1d 	.word	0x08007b1d
 8006b60:	08007b2a 	.word	0x08007b2a
 8006b64:	080076bb 	.word	0x080076bb

08006b68 <fiprintf>:
 8006b68:	b40e      	push	{r1, r2, r3}
 8006b6a:	b503      	push	{r0, r1, lr}
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	ab03      	add	r3, sp, #12
 8006b70:	4805      	ldr	r0, [pc, #20]	; (8006b88 <fiprintf+0x20>)
 8006b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f000 f87b 	bl	8006c74 <_vfiprintf_r>
 8006b7e:	b002      	add	sp, #8
 8006b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b84:	b003      	add	sp, #12
 8006b86:	4770      	bx	lr
 8006b88:	20000020 	.word	0x20000020

08006b8c <memmove>:
 8006b8c:	4288      	cmp	r0, r1
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	eb01 0402 	add.w	r4, r1, r2
 8006b94:	d902      	bls.n	8006b9c <memmove+0x10>
 8006b96:	4284      	cmp	r4, r0
 8006b98:	4623      	mov	r3, r4
 8006b9a:	d807      	bhi.n	8006bac <memmove+0x20>
 8006b9c:	1e43      	subs	r3, r0, #1
 8006b9e:	42a1      	cmp	r1, r4
 8006ba0:	d008      	beq.n	8006bb4 <memmove+0x28>
 8006ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006baa:	e7f8      	b.n	8006b9e <memmove+0x12>
 8006bac:	4601      	mov	r1, r0
 8006bae:	4402      	add	r2, r0
 8006bb0:	428a      	cmp	r2, r1
 8006bb2:	d100      	bne.n	8006bb6 <memmove+0x2a>
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bbe:	e7f7      	b.n	8006bb0 <memmove+0x24>

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f000 bc07 	b.w	80073d4 <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20003460 	.word	0x20003460

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f000 bc02 	b.w	80073d6 <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20003460 	.word	0x20003460

08006bd8 <_realloc_r>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4607      	mov	r7, r0
 8006bdc:	4614      	mov	r4, r2
 8006bde:	460e      	mov	r6, r1
 8006be0:	b921      	cbnz	r1, 8006bec <_realloc_r+0x14>
 8006be2:	4611      	mov	r1, r2
 8006be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006be8:	f7ff bdb4 	b.w	8006754 <_malloc_r>
 8006bec:	b922      	cbnz	r2, 8006bf8 <_realloc_r+0x20>
 8006bee:	f7ff fd65 	bl	80066bc <_free_r>
 8006bf2:	4625      	mov	r5, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf8:	f000 fc52 	bl	80074a0 <_malloc_usable_size_r>
 8006bfc:	42a0      	cmp	r0, r4
 8006bfe:	d20f      	bcs.n	8006c20 <_realloc_r+0x48>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4638      	mov	r0, r7
 8006c04:	f7ff fda6 	bl	8006754 <_malloc_r>
 8006c08:	4605      	mov	r5, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0f2      	beq.n	8006bf4 <_realloc_r+0x1c>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4622      	mov	r2, r4
 8006c12:	f7fc f92d 	bl	8002e70 <memcpy>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff fd4f 	bl	80066bc <_free_r>
 8006c1e:	e7e9      	b.n	8006bf4 <_realloc_r+0x1c>
 8006c20:	4635      	mov	r5, r6
 8006c22:	e7e7      	b.n	8006bf4 <_realloc_r+0x1c>

08006c24 <__sfputc_r>:
 8006c24:	6893      	ldr	r3, [r2, #8]
 8006c26:	b410      	push	{r4}
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	6093      	str	r3, [r2, #8]
 8006c2e:	da07      	bge.n	8006c40 <__sfputc_r+0x1c>
 8006c30:	6994      	ldr	r4, [r2, #24]
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	db01      	blt.n	8006c3a <__sfputc_r+0x16>
 8006c36:	290a      	cmp	r1, #10
 8006c38:	d102      	bne.n	8006c40 <__sfputc_r+0x1c>
 8006c3a:	bc10      	pop	{r4}
 8006c3c:	f000 b94a 	b.w	8006ed4 <__swbuf_r>
 8006c40:	6813      	ldr	r3, [r2, #0]
 8006c42:	1c58      	adds	r0, r3, #1
 8006c44:	6010      	str	r0, [r2, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	4608      	mov	r0, r1
 8006c4a:	bc10      	pop	{r4}
 8006c4c:	4770      	bx	lr

08006c4e <__sfputs_r>:
 8006c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c50:	4606      	mov	r6, r0
 8006c52:	460f      	mov	r7, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	18d5      	adds	r5, r2, r3
 8006c58:	42ac      	cmp	r4, r5
 8006c5a:	d101      	bne.n	8006c60 <__sfputs_r+0x12>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	e007      	b.n	8006c70 <__sfputs_r+0x22>
 8006c60:	463a      	mov	r2, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c68:	f7ff ffdc 	bl	8006c24 <__sfputc_r>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d1f3      	bne.n	8006c58 <__sfputs_r+0xa>
 8006c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c74 <_vfiprintf_r>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	460d      	mov	r5, r1
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	4698      	mov	r8, r3
 8006c7e:	4606      	mov	r6, r0
 8006c80:	b09d      	sub	sp, #116	; 0x74
 8006c82:	b118      	cbz	r0, 8006c8c <_vfiprintf_r+0x18>
 8006c84:	6983      	ldr	r3, [r0, #24]
 8006c86:	b90b      	cbnz	r3, 8006c8c <_vfiprintf_r+0x18>
 8006c88:	f000 fb06 	bl	8007298 <__sinit>
 8006c8c:	4b89      	ldr	r3, [pc, #548]	; (8006eb4 <_vfiprintf_r+0x240>)
 8006c8e:	429d      	cmp	r5, r3
 8006c90:	d11b      	bne.n	8006cca <_vfiprintf_r+0x56>
 8006c92:	6875      	ldr	r5, [r6, #4]
 8006c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c96:	07d9      	lsls	r1, r3, #31
 8006c98:	d405      	bmi.n	8006ca6 <_vfiprintf_r+0x32>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	059a      	lsls	r2, r3, #22
 8006c9e:	d402      	bmi.n	8006ca6 <_vfiprintf_r+0x32>
 8006ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ca2:	f000 fb97 	bl	80073d4 <__retarget_lock_acquire_recursive>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	071b      	lsls	r3, r3, #28
 8006caa:	d501      	bpl.n	8006cb0 <_vfiprintf_r+0x3c>
 8006cac:	692b      	ldr	r3, [r5, #16]
 8006cae:	b9eb      	cbnz	r3, 8006cec <_vfiprintf_r+0x78>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f000 f960 	bl	8006f78 <__swsetup_r>
 8006cb8:	b1c0      	cbz	r0, 8006cec <_vfiprintf_r+0x78>
 8006cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cbc:	07dc      	lsls	r4, r3, #31
 8006cbe:	d50e      	bpl.n	8006cde <_vfiprintf_r+0x6a>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	b01d      	add	sp, #116	; 0x74
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <_vfiprintf_r+0x244>)
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	d101      	bne.n	8006cd4 <_vfiprintf_r+0x60>
 8006cd0:	68b5      	ldr	r5, [r6, #8]
 8006cd2:	e7df      	b.n	8006c94 <_vfiprintf_r+0x20>
 8006cd4:	4b79      	ldr	r3, [pc, #484]	; (8006ebc <_vfiprintf_r+0x248>)
 8006cd6:	429d      	cmp	r5, r3
 8006cd8:	bf08      	it	eq
 8006cda:	68f5      	ldreq	r5, [r6, #12]
 8006cdc:	e7da      	b.n	8006c94 <_vfiprintf_r+0x20>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	0598      	lsls	r0, r3, #22
 8006ce2:	d4ed      	bmi.n	8006cc0 <_vfiprintf_r+0x4c>
 8006ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce6:	f000 fb76 	bl	80073d6 <__retarget_lock_release_recursive>
 8006cea:	e7e9      	b.n	8006cc0 <_vfiprintf_r+0x4c>
 8006cec:	2300      	movs	r3, #0
 8006cee:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf6:	2330      	movs	r3, #48	; 0x30
 8006cf8:	f04f 0901 	mov.w	r9, #1
 8006cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ec0 <_vfiprintf_r+0x24c>
 8006d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d08:	4623      	mov	r3, r4
 8006d0a:	469a      	mov	sl, r3
 8006d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d10:	b10a      	cbz	r2, 8006d16 <_vfiprintf_r+0xa2>
 8006d12:	2a25      	cmp	r2, #37	; 0x25
 8006d14:	d1f9      	bne.n	8006d0a <_vfiprintf_r+0x96>
 8006d16:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1a:	d00b      	beq.n	8006d34 <_vfiprintf_r+0xc0>
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ff93 	bl	8006c4e <__sfputs_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f000 80aa 	beq.w	8006e82 <_vfiprintf_r+0x20e>
 8006d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d30:	445a      	add	r2, fp
 8006d32:	9209      	str	r2, [sp, #36]	; 0x24
 8006d34:	f89a 3000 	ldrb.w	r3, [sl]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80a2 	beq.w	8006e82 <_vfiprintf_r+0x20e>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d48:	f10a 0a01 	add.w	sl, sl, #1
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	9307      	str	r3, [sp, #28]
 8006d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d54:	931a      	str	r3, [sp, #104]	; 0x68
 8006d56:	4654      	mov	r4, sl
 8006d58:	2205      	movs	r2, #5
 8006d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5e:	4858      	ldr	r0, [pc, #352]	; (8006ec0 <_vfiprintf_r+0x24c>)
 8006d60:	f7fe ffd8 	bl	8005d14 <memchr>
 8006d64:	9a04      	ldr	r2, [sp, #16]
 8006d66:	b9d8      	cbnz	r0, 8006da0 <_vfiprintf_r+0x12c>
 8006d68:	06d1      	lsls	r1, r2, #27
 8006d6a:	bf44      	itt	mi
 8006d6c:	2320      	movmi	r3, #32
 8006d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d72:	0713      	lsls	r3, r2, #28
 8006d74:	bf44      	itt	mi
 8006d76:	232b      	movmi	r3, #43	; 0x2b
 8006d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d80:	2b2a      	cmp	r3, #42	; 0x2a
 8006d82:	d015      	beq.n	8006db0 <_vfiprintf_r+0x13c>
 8006d84:	4654      	mov	r4, sl
 8006d86:	2000      	movs	r0, #0
 8006d88:	f04f 0c0a 	mov.w	ip, #10
 8006d8c:	9a07      	ldr	r2, [sp, #28]
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d94:	3b30      	subs	r3, #48	; 0x30
 8006d96:	2b09      	cmp	r3, #9
 8006d98:	d94e      	bls.n	8006e38 <_vfiprintf_r+0x1c4>
 8006d9a:	b1b0      	cbz	r0, 8006dca <_vfiprintf_r+0x156>
 8006d9c:	9207      	str	r2, [sp, #28]
 8006d9e:	e014      	b.n	8006dca <_vfiprintf_r+0x156>
 8006da0:	eba0 0308 	sub.w	r3, r0, r8
 8006da4:	fa09 f303 	lsl.w	r3, r9, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	46a2      	mov	sl, r4
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	e7d2      	b.n	8006d56 <_vfiprintf_r+0xe2>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	1d19      	adds	r1, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	9103      	str	r1, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfbb      	ittet	lt
 8006dbc:	425b      	neglt	r3, r3
 8006dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc2:	9307      	strge	r3, [sp, #28]
 8006dc4:	9307      	strlt	r3, [sp, #28]
 8006dc6:	bfb8      	it	lt
 8006dc8:	9204      	strlt	r2, [sp, #16]
 8006dca:	7823      	ldrb	r3, [r4, #0]
 8006dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dce:	d10c      	bne.n	8006dea <_vfiprintf_r+0x176>
 8006dd0:	7863      	ldrb	r3, [r4, #1]
 8006dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd4:	d135      	bne.n	8006e42 <_vfiprintf_r+0x1ce>
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	3402      	adds	r4, #2
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	9203      	str	r2, [sp, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfb8      	it	lt
 8006de4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006de8:	9305      	str	r3, [sp, #20]
 8006dea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ed0 <_vfiprintf_r+0x25c>
 8006dee:	2203      	movs	r2, #3
 8006df0:	4650      	mov	r0, sl
 8006df2:	7821      	ldrb	r1, [r4, #0]
 8006df4:	f7fe ff8e 	bl	8005d14 <memchr>
 8006df8:	b140      	cbz	r0, 8006e0c <_vfiprintf_r+0x198>
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	eba0 000a 	sub.w	r0, r0, sl
 8006e00:	fa03 f000 	lsl.w	r0, r3, r0
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	3401      	adds	r4, #1
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e10:	2206      	movs	r2, #6
 8006e12:	482c      	ldr	r0, [pc, #176]	; (8006ec4 <_vfiprintf_r+0x250>)
 8006e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e18:	f7fe ff7c 	bl	8005d14 <memchr>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d03f      	beq.n	8006ea0 <_vfiprintf_r+0x22c>
 8006e20:	4b29      	ldr	r3, [pc, #164]	; (8006ec8 <_vfiprintf_r+0x254>)
 8006e22:	bb1b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x1f8>
 8006e24:	9b03      	ldr	r3, [sp, #12]
 8006e26:	3307      	adds	r3, #7
 8006e28:	f023 0307 	bic.w	r3, r3, #7
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	9303      	str	r3, [sp, #12]
 8006e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e32:	443b      	add	r3, r7
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	e767      	b.n	8006d08 <_vfiprintf_r+0x94>
 8006e38:	460c      	mov	r4, r1
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e40:	e7a5      	b.n	8006d8e <_vfiprintf_r+0x11a>
 8006e42:	2300      	movs	r3, #0
 8006e44:	f04f 0c0a 	mov.w	ip, #10
 8006e48:	4619      	mov	r1, r3
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e54:	3a30      	subs	r2, #48	; 0x30
 8006e56:	2a09      	cmp	r2, #9
 8006e58:	d903      	bls.n	8006e62 <_vfiprintf_r+0x1ee>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0c5      	beq.n	8006dea <_vfiprintf_r+0x176>
 8006e5e:	9105      	str	r1, [sp, #20]
 8006e60:	e7c3      	b.n	8006dea <_vfiprintf_r+0x176>
 8006e62:	4604      	mov	r4, r0
 8006e64:	2301      	movs	r3, #1
 8006e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6a:	e7f0      	b.n	8006e4e <_vfiprintf_r+0x1da>
 8006e6c:	ab03      	add	r3, sp, #12
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <_vfiprintf_r+0x258>)
 8006e76:	a904      	add	r1, sp, #16
 8006e78:	f7fc f8ae 	bl	8002fd8 <_printf_float>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	1c78      	adds	r0, r7, #1
 8006e80:	d1d6      	bne.n	8006e30 <_vfiprintf_r+0x1bc>
 8006e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e84:	07d9      	lsls	r1, r3, #31
 8006e86:	d405      	bmi.n	8006e94 <_vfiprintf_r+0x220>
 8006e88:	89ab      	ldrh	r3, [r5, #12]
 8006e8a:	059a      	lsls	r2, r3, #22
 8006e8c:	d402      	bmi.n	8006e94 <_vfiprintf_r+0x220>
 8006e8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e90:	f000 faa1 	bl	80073d6 <__retarget_lock_release_recursive>
 8006e94:	89ab      	ldrh	r3, [r5, #12]
 8006e96:	065b      	lsls	r3, r3, #25
 8006e98:	f53f af12 	bmi.w	8006cc0 <_vfiprintf_r+0x4c>
 8006e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e9e:	e711      	b.n	8006cc4 <_vfiprintf_r+0x50>
 8006ea0:	ab03      	add	r3, sp, #12
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	462a      	mov	r2, r5
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <_vfiprintf_r+0x258>)
 8006eaa:	a904      	add	r1, sp, #16
 8006eac:	f7fc fb30 	bl	8003510 <_printf_i>
 8006eb0:	e7e4      	b.n	8006e7c <_vfiprintf_r+0x208>
 8006eb2:	bf00      	nop
 8006eb4:	08007b7c 	.word	0x08007b7c
 8006eb8:	08007b9c 	.word	0x08007b9c
 8006ebc:	08007b5c 	.word	0x08007b5c
 8006ec0:	08007b0c 	.word	0x08007b0c
 8006ec4:	08007b16 	.word	0x08007b16
 8006ec8:	08002fd9 	.word	0x08002fd9
 8006ecc:	08006c4f 	.word	0x08006c4f
 8006ed0:	08007b12 	.word	0x08007b12

08006ed4 <__swbuf_r>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	460e      	mov	r6, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	4605      	mov	r5, r0
 8006edc:	b118      	cbz	r0, 8006ee6 <__swbuf_r+0x12>
 8006ede:	6983      	ldr	r3, [r0, #24]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <__swbuf_r+0x12>
 8006ee2:	f000 f9d9 	bl	8007298 <__sinit>
 8006ee6:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <__swbuf_r+0x98>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	d12b      	bne.n	8006f44 <__swbuf_r+0x70>
 8006eec:	686c      	ldr	r4, [r5, #4]
 8006eee:	69a3      	ldr	r3, [r4, #24]
 8006ef0:	60a3      	str	r3, [r4, #8]
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	071a      	lsls	r2, r3, #28
 8006ef6:	d52f      	bpl.n	8006f58 <__swbuf_r+0x84>
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	b36b      	cbz	r3, 8006f58 <__swbuf_r+0x84>
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	6820      	ldr	r0, [r4, #0]
 8006f00:	b2f6      	uxtb	r6, r6
 8006f02:	1ac0      	subs	r0, r0, r3
 8006f04:	6963      	ldr	r3, [r4, #20]
 8006f06:	4637      	mov	r7, r6
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	dc04      	bgt.n	8006f16 <__swbuf_r+0x42>
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 f92e 	bl	8007170 <_fflush_r>
 8006f14:	bb30      	cbnz	r0, 8006f64 <__swbuf_r+0x90>
 8006f16:	68a3      	ldr	r3, [r4, #8]
 8006f18:	3001      	adds	r0, #1
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	6022      	str	r2, [r4, #0]
 8006f24:	701e      	strb	r6, [r3, #0]
 8006f26:	6963      	ldr	r3, [r4, #20]
 8006f28:	4283      	cmp	r3, r0
 8006f2a:	d004      	beq.n	8006f36 <__swbuf_r+0x62>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	07db      	lsls	r3, r3, #31
 8006f30:	d506      	bpl.n	8006f40 <__swbuf_r+0x6c>
 8006f32:	2e0a      	cmp	r6, #10
 8006f34:	d104      	bne.n	8006f40 <__swbuf_r+0x6c>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 f919 	bl	8007170 <_fflush_r>
 8006f3e:	b988      	cbnz	r0, 8006f64 <__swbuf_r+0x90>
 8006f40:	4638      	mov	r0, r7
 8006f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <__swbuf_r+0x9c>)
 8006f46:	429c      	cmp	r4, r3
 8006f48:	d101      	bne.n	8006f4e <__swbuf_r+0x7a>
 8006f4a:	68ac      	ldr	r4, [r5, #8]
 8006f4c:	e7cf      	b.n	8006eee <__swbuf_r+0x1a>
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <__swbuf_r+0xa0>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	bf08      	it	eq
 8006f54:	68ec      	ldreq	r4, [r5, #12]
 8006f56:	e7ca      	b.n	8006eee <__swbuf_r+0x1a>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f80c 	bl	8006f78 <__swsetup_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d0cb      	beq.n	8006efc <__swbuf_r+0x28>
 8006f64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f68:	e7ea      	b.n	8006f40 <__swbuf_r+0x6c>
 8006f6a:	bf00      	nop
 8006f6c:	08007b7c 	.word	0x08007b7c
 8006f70:	08007b9c 	.word	0x08007b9c
 8006f74:	08007b5c 	.word	0x08007b5c

08006f78 <__swsetup_r>:
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <__swsetup_r+0xcc>)
 8006f7a:	b570      	push	{r4, r5, r6, lr}
 8006f7c:	681d      	ldr	r5, [r3, #0]
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	b125      	cbz	r5, 8006f8e <__swsetup_r+0x16>
 8006f84:	69ab      	ldr	r3, [r5, #24]
 8006f86:	b913      	cbnz	r3, 8006f8e <__swsetup_r+0x16>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f985 	bl	8007298 <__sinit>
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <__swsetup_r+0xd0>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d10f      	bne.n	8006fb4 <__swsetup_r+0x3c>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9c:	0719      	lsls	r1, r3, #28
 8006f9e:	d42c      	bmi.n	8006ffa <__swsetup_r+0x82>
 8006fa0:	06dd      	lsls	r5, r3, #27
 8006fa2:	d411      	bmi.n	8006fc8 <__swsetup_r+0x50>
 8006fa4:	2309      	movs	r3, #9
 8006fa6:	6033      	str	r3, [r6, #0]
 8006fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	e03e      	b.n	8007032 <__swsetup_r+0xba>
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <__swsetup_r+0xd4>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d101      	bne.n	8006fbe <__swsetup_r+0x46>
 8006fba:	68ac      	ldr	r4, [r5, #8]
 8006fbc:	e7eb      	b.n	8006f96 <__swsetup_r+0x1e>
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <__swsetup_r+0xd8>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	bf08      	it	eq
 8006fc4:	68ec      	ldreq	r4, [r5, #12]
 8006fc6:	e7e6      	b.n	8006f96 <__swsetup_r+0x1e>
 8006fc8:	0758      	lsls	r0, r3, #29
 8006fca:	d512      	bpl.n	8006ff2 <__swsetup_r+0x7a>
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	b141      	cbz	r1, 8006fe2 <__swsetup_r+0x6a>
 8006fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	d002      	beq.n	8006fde <__swsetup_r+0x66>
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff fb6f 	bl	80066bc <_free_r>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	2300      	movs	r3, #0
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f043 0308 	orr.w	r3, r3, #8
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	b94b      	cbnz	r3, 8007012 <__swsetup_r+0x9a>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d003      	beq.n	8007012 <__swsetup_r+0x9a>
 800700a:	4621      	mov	r1, r4
 800700c:	4630      	mov	r0, r6
 800700e:	f000 fa07 	bl	8007420 <__smakebuf_r>
 8007012:	89a0      	ldrh	r0, [r4, #12]
 8007014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007018:	f010 0301 	ands.w	r3, r0, #1
 800701c:	d00a      	beq.n	8007034 <__swsetup_r+0xbc>
 800701e:	2300      	movs	r3, #0
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	6963      	ldr	r3, [r4, #20]
 8007024:	425b      	negs	r3, r3
 8007026:	61a3      	str	r3, [r4, #24]
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b943      	cbnz	r3, 800703e <__swsetup_r+0xc6>
 800702c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007030:	d1ba      	bne.n	8006fa8 <__swsetup_r+0x30>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	0781      	lsls	r1, r0, #30
 8007036:	bf58      	it	pl
 8007038:	6963      	ldrpl	r3, [r4, #20]
 800703a:	60a3      	str	r3, [r4, #8]
 800703c:	e7f4      	b.n	8007028 <__swsetup_r+0xb0>
 800703e:	2000      	movs	r0, #0
 8007040:	e7f7      	b.n	8007032 <__swsetup_r+0xba>
 8007042:	bf00      	nop
 8007044:	20000020 	.word	0x20000020
 8007048:	08007b7c 	.word	0x08007b7c
 800704c:	08007b9c 	.word	0x08007b9c
 8007050:	08007b5c 	.word	0x08007b5c

08007054 <abort>:
 8007054:	2006      	movs	r0, #6
 8007056:	b508      	push	{r3, lr}
 8007058:	f000 fa52 	bl	8007500 <raise>
 800705c:	2001      	movs	r0, #1
 800705e:	f7fb fe73 	bl	8002d48 <_exit>
	...

08007064 <__sflush_r>:
 8007064:	898a      	ldrh	r2, [r1, #12]
 8007066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	4605      	mov	r5, r0
 800706c:	0710      	lsls	r0, r2, #28
 800706e:	460c      	mov	r4, r1
 8007070:	d458      	bmi.n	8007124 <__sflush_r+0xc0>
 8007072:	684b      	ldr	r3, [r1, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dc05      	bgt.n	8007084 <__sflush_r+0x20>
 8007078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	dc02      	bgt.n	8007084 <__sflush_r+0x20>
 800707e:	2000      	movs	r0, #0
 8007080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007086:	2e00      	cmp	r6, #0
 8007088:	d0f9      	beq.n	800707e <__sflush_r+0x1a>
 800708a:	2300      	movs	r3, #0
 800708c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007090:	682f      	ldr	r7, [r5, #0]
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	d032      	beq.n	80070fc <__sflush_r+0x98>
 8007096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	075a      	lsls	r2, r3, #29
 800709c:	d505      	bpl.n	80070aa <__sflush_r+0x46>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	1ac0      	subs	r0, r0, r3
 80070a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a4:	b10b      	cbz	r3, 80070aa <__sflush_r+0x46>
 80070a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070a8:	1ac0      	subs	r0, r0, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	4602      	mov	r2, r0
 80070ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b0:	4628      	mov	r0, r5
 80070b2:	6a21      	ldr	r1, [r4, #32]
 80070b4:	47b0      	blx	r6
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	d106      	bne.n	80070ca <__sflush_r+0x66>
 80070bc:	6829      	ldr	r1, [r5, #0]
 80070be:	291d      	cmp	r1, #29
 80070c0:	d82c      	bhi.n	800711c <__sflush_r+0xb8>
 80070c2:	4a2a      	ldr	r2, [pc, #168]	; (800716c <__sflush_r+0x108>)
 80070c4:	40ca      	lsrs	r2, r1
 80070c6:	07d6      	lsls	r6, r2, #31
 80070c8:	d528      	bpl.n	800711c <__sflush_r+0xb8>
 80070ca:	2200      	movs	r2, #0
 80070cc:	6062      	str	r2, [r4, #4]
 80070ce:	6922      	ldr	r2, [r4, #16]
 80070d0:	04d9      	lsls	r1, r3, #19
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	d504      	bpl.n	80070e0 <__sflush_r+0x7c>
 80070d6:	1c42      	adds	r2, r0, #1
 80070d8:	d101      	bne.n	80070de <__sflush_r+0x7a>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	b903      	cbnz	r3, 80070e0 <__sflush_r+0x7c>
 80070de:	6560      	str	r0, [r4, #84]	; 0x54
 80070e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e2:	602f      	str	r7, [r5, #0]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d0ca      	beq.n	800707e <__sflush_r+0x1a>
 80070e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <__sflush_r+0x92>
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7ff fae3 	bl	80066bc <_free_r>
 80070f6:	2000      	movs	r0, #0
 80070f8:	6360      	str	r0, [r4, #52]	; 0x34
 80070fa:	e7c1      	b.n	8007080 <__sflush_r+0x1c>
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	2301      	movs	r3, #1
 8007100:	4628      	mov	r0, r5
 8007102:	47b0      	blx	r6
 8007104:	1c41      	adds	r1, r0, #1
 8007106:	d1c7      	bne.n	8007098 <__sflush_r+0x34>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c4      	beq.n	8007098 <__sflush_r+0x34>
 800710e:	2b1d      	cmp	r3, #29
 8007110:	d001      	beq.n	8007116 <__sflush_r+0xb2>
 8007112:	2b16      	cmp	r3, #22
 8007114:	d101      	bne.n	800711a <__sflush_r+0xb6>
 8007116:	602f      	str	r7, [r5, #0]
 8007118:	e7b1      	b.n	800707e <__sflush_r+0x1a>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e7ad      	b.n	8007080 <__sflush_r+0x1c>
 8007124:	690f      	ldr	r7, [r1, #16]
 8007126:	2f00      	cmp	r7, #0
 8007128:	d0a9      	beq.n	800707e <__sflush_r+0x1a>
 800712a:	0793      	lsls	r3, r2, #30
 800712c:	bf18      	it	ne
 800712e:	2300      	movne	r3, #0
 8007130:	680e      	ldr	r6, [r1, #0]
 8007132:	bf08      	it	eq
 8007134:	694b      	ldreq	r3, [r1, #20]
 8007136:	eba6 0807 	sub.w	r8, r6, r7
 800713a:	600f      	str	r7, [r1, #0]
 800713c:	608b      	str	r3, [r1, #8]
 800713e:	f1b8 0f00 	cmp.w	r8, #0
 8007142:	dd9c      	ble.n	800707e <__sflush_r+0x1a>
 8007144:	4643      	mov	r3, r8
 8007146:	463a      	mov	r2, r7
 8007148:	4628      	mov	r0, r5
 800714a:	6a21      	ldr	r1, [r4, #32]
 800714c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800714e:	47b0      	blx	r6
 8007150:	2800      	cmp	r0, #0
 8007152:	dc06      	bgt.n	8007162 <__sflush_r+0xfe>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800715a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	e78e      	b.n	8007080 <__sflush_r+0x1c>
 8007162:	4407      	add	r7, r0
 8007164:	eba8 0800 	sub.w	r8, r8, r0
 8007168:	e7e9      	b.n	800713e <__sflush_r+0xda>
 800716a:	bf00      	nop
 800716c:	20400001 	.word	0x20400001

08007170 <_fflush_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	690b      	ldr	r3, [r1, #16]
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	b913      	cbnz	r3, 8007180 <_fflush_r+0x10>
 800717a:	2500      	movs	r5, #0
 800717c:	4628      	mov	r0, r5
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	b118      	cbz	r0, 800718a <_fflush_r+0x1a>
 8007182:	6983      	ldr	r3, [r0, #24]
 8007184:	b90b      	cbnz	r3, 800718a <_fflush_r+0x1a>
 8007186:	f000 f887 	bl	8007298 <__sinit>
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <_fflush_r+0x6c>)
 800718c:	429c      	cmp	r4, r3
 800718e:	d11b      	bne.n	80071c8 <_fflush_r+0x58>
 8007190:	686c      	ldr	r4, [r5, #4]
 8007192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0ef      	beq.n	800717a <_fflush_r+0xa>
 800719a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800719c:	07d0      	lsls	r0, r2, #31
 800719e:	d404      	bmi.n	80071aa <_fflush_r+0x3a>
 80071a0:	0599      	lsls	r1, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_fflush_r+0x3a>
 80071a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a6:	f000 f915 	bl	80073d4 <__retarget_lock_acquire_recursive>
 80071aa:	4628      	mov	r0, r5
 80071ac:	4621      	mov	r1, r4
 80071ae:	f7ff ff59 	bl	8007064 <__sflush_r>
 80071b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b4:	4605      	mov	r5, r0
 80071b6:	07da      	lsls	r2, r3, #31
 80071b8:	d4e0      	bmi.n	800717c <_fflush_r+0xc>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	059b      	lsls	r3, r3, #22
 80071be:	d4dd      	bmi.n	800717c <_fflush_r+0xc>
 80071c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071c2:	f000 f908 	bl	80073d6 <__retarget_lock_release_recursive>
 80071c6:	e7d9      	b.n	800717c <_fflush_r+0xc>
 80071c8:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <_fflush_r+0x70>)
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d101      	bne.n	80071d2 <_fflush_r+0x62>
 80071ce:	68ac      	ldr	r4, [r5, #8]
 80071d0:	e7df      	b.n	8007192 <_fflush_r+0x22>
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <_fflush_r+0x74>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	bf08      	it	eq
 80071d8:	68ec      	ldreq	r4, [r5, #12]
 80071da:	e7da      	b.n	8007192 <_fflush_r+0x22>
 80071dc:	08007b7c 	.word	0x08007b7c
 80071e0:	08007b9c 	.word	0x08007b9c
 80071e4:	08007b5c 	.word	0x08007b5c

080071e8 <std>:
 80071e8:	2300      	movs	r3, #0
 80071ea:	b510      	push	{r4, lr}
 80071ec:	4604      	mov	r4, r0
 80071ee:	e9c0 3300 	strd	r3, r3, [r0]
 80071f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f6:	6083      	str	r3, [r0, #8]
 80071f8:	8181      	strh	r1, [r0, #12]
 80071fa:	6643      	str	r3, [r0, #100]	; 0x64
 80071fc:	81c2      	strh	r2, [r0, #14]
 80071fe:	6183      	str	r3, [r0, #24]
 8007200:	4619      	mov	r1, r3
 8007202:	2208      	movs	r2, #8
 8007204:	305c      	adds	r0, #92	; 0x5c
 8007206:	f7fb fe41 	bl	8002e8c <memset>
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <std+0x38>)
 800720c:	6224      	str	r4, [r4, #32]
 800720e:	6263      	str	r3, [r4, #36]	; 0x24
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <std+0x3c>)
 8007212:	62a3      	str	r3, [r4, #40]	; 0x28
 8007214:	4b04      	ldr	r3, [pc, #16]	; (8007228 <std+0x40>)
 8007216:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <std+0x44>)
 800721a:	6323      	str	r3, [r4, #48]	; 0x30
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	08007539 	.word	0x08007539
 8007224:	0800755b 	.word	0x0800755b
 8007228:	08007593 	.word	0x08007593
 800722c:	080075b7 	.word	0x080075b7

08007230 <_cleanup_r>:
 8007230:	4901      	ldr	r1, [pc, #4]	; (8007238 <_cleanup_r+0x8>)
 8007232:	f000 b8af 	b.w	8007394 <_fwalk_reent>
 8007236:	bf00      	nop
 8007238:	08007171 	.word	0x08007171

0800723c <__sfmoreglue>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	2568      	movs	r5, #104	; 0x68
 8007240:	1e4a      	subs	r2, r1, #1
 8007242:	4355      	muls	r5, r2
 8007244:	460e      	mov	r6, r1
 8007246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800724a:	f7ff fa83 	bl	8006754 <_malloc_r>
 800724e:	4604      	mov	r4, r0
 8007250:	b140      	cbz	r0, 8007264 <__sfmoreglue+0x28>
 8007252:	2100      	movs	r1, #0
 8007254:	e9c0 1600 	strd	r1, r6, [r0]
 8007258:	300c      	adds	r0, #12
 800725a:	60a0      	str	r0, [r4, #8]
 800725c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007260:	f7fb fe14 	bl	8002e8c <memset>
 8007264:	4620      	mov	r0, r4
 8007266:	bd70      	pop	{r4, r5, r6, pc}

08007268 <__sfp_lock_acquire>:
 8007268:	4801      	ldr	r0, [pc, #4]	; (8007270 <__sfp_lock_acquire+0x8>)
 800726a:	f000 b8b3 	b.w	80073d4 <__retarget_lock_acquire_recursive>
 800726e:	bf00      	nop
 8007270:	20003464 	.word	0x20003464

08007274 <__sfp_lock_release>:
 8007274:	4801      	ldr	r0, [pc, #4]	; (800727c <__sfp_lock_release+0x8>)
 8007276:	f000 b8ae 	b.w	80073d6 <__retarget_lock_release_recursive>
 800727a:	bf00      	nop
 800727c:	20003464 	.word	0x20003464

08007280 <__sinit_lock_acquire>:
 8007280:	4801      	ldr	r0, [pc, #4]	; (8007288 <__sinit_lock_acquire+0x8>)
 8007282:	f000 b8a7 	b.w	80073d4 <__retarget_lock_acquire_recursive>
 8007286:	bf00      	nop
 8007288:	2000345f 	.word	0x2000345f

0800728c <__sinit_lock_release>:
 800728c:	4801      	ldr	r0, [pc, #4]	; (8007294 <__sinit_lock_release+0x8>)
 800728e:	f000 b8a2 	b.w	80073d6 <__retarget_lock_release_recursive>
 8007292:	bf00      	nop
 8007294:	2000345f 	.word	0x2000345f

08007298 <__sinit>:
 8007298:	b510      	push	{r4, lr}
 800729a:	4604      	mov	r4, r0
 800729c:	f7ff fff0 	bl	8007280 <__sinit_lock_acquire>
 80072a0:	69a3      	ldr	r3, [r4, #24]
 80072a2:	b11b      	cbz	r3, 80072ac <__sinit+0x14>
 80072a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a8:	f7ff bff0 	b.w	800728c <__sinit_lock_release>
 80072ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072b0:	6523      	str	r3, [r4, #80]	; 0x50
 80072b2:	4b13      	ldr	r3, [pc, #76]	; (8007300 <__sinit+0x68>)
 80072b4:	4a13      	ldr	r2, [pc, #76]	; (8007304 <__sinit+0x6c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	bf08      	it	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	4620      	mov	r0, r4
 80072c2:	bf08      	it	eq
 80072c4:	61a3      	streq	r3, [r4, #24]
 80072c6:	f000 f81f 	bl	8007308 <__sfp>
 80072ca:	6060      	str	r0, [r4, #4]
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f81b 	bl	8007308 <__sfp>
 80072d2:	60a0      	str	r0, [r4, #8]
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f817 	bl	8007308 <__sfp>
 80072da:	2200      	movs	r2, #0
 80072dc:	2104      	movs	r1, #4
 80072de:	60e0      	str	r0, [r4, #12]
 80072e0:	6860      	ldr	r0, [r4, #4]
 80072e2:	f7ff ff81 	bl	80071e8 <std>
 80072e6:	2201      	movs	r2, #1
 80072e8:	2109      	movs	r1, #9
 80072ea:	68a0      	ldr	r0, [r4, #8]
 80072ec:	f7ff ff7c 	bl	80071e8 <std>
 80072f0:	2202      	movs	r2, #2
 80072f2:	2112      	movs	r1, #18
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	f7ff ff77 	bl	80071e8 <std>
 80072fa:	2301      	movs	r3, #1
 80072fc:	61a3      	str	r3, [r4, #24]
 80072fe:	e7d1      	b.n	80072a4 <__sinit+0xc>
 8007300:	08007704 	.word	0x08007704
 8007304:	08007231 	.word	0x08007231

08007308 <__sfp>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	4607      	mov	r7, r0
 800730c:	f7ff ffac 	bl	8007268 <__sfp_lock_acquire>
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <__sfp+0x84>)
 8007312:	681e      	ldr	r6, [r3, #0]
 8007314:	69b3      	ldr	r3, [r6, #24]
 8007316:	b913      	cbnz	r3, 800731e <__sfp+0x16>
 8007318:	4630      	mov	r0, r6
 800731a:	f7ff ffbd 	bl	8007298 <__sinit>
 800731e:	3648      	adds	r6, #72	; 0x48
 8007320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	d503      	bpl.n	8007330 <__sfp+0x28>
 8007328:	6833      	ldr	r3, [r6, #0]
 800732a:	b30b      	cbz	r3, 8007370 <__sfp+0x68>
 800732c:	6836      	ldr	r6, [r6, #0]
 800732e:	e7f7      	b.n	8007320 <__sfp+0x18>
 8007330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007334:	b9d5      	cbnz	r5, 800736c <__sfp+0x64>
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <__sfp+0x88>)
 8007338:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800733c:	60e3      	str	r3, [r4, #12]
 800733e:	6665      	str	r5, [r4, #100]	; 0x64
 8007340:	f000 f847 	bl	80073d2 <__retarget_lock_init_recursive>
 8007344:	f7ff ff96 	bl	8007274 <__sfp_lock_release>
 8007348:	2208      	movs	r2, #8
 800734a:	4629      	mov	r1, r5
 800734c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	61a5      	str	r5, [r4, #24]
 8007358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800735c:	f7fb fd96 	bl	8002e8c <memset>
 8007360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007368:	4620      	mov	r0, r4
 800736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800736c:	3468      	adds	r4, #104	; 0x68
 800736e:	e7d9      	b.n	8007324 <__sfp+0x1c>
 8007370:	2104      	movs	r1, #4
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff ff62 	bl	800723c <__sfmoreglue>
 8007378:	4604      	mov	r4, r0
 800737a:	6030      	str	r0, [r6, #0]
 800737c:	2800      	cmp	r0, #0
 800737e:	d1d5      	bne.n	800732c <__sfp+0x24>
 8007380:	f7ff ff78 	bl	8007274 <__sfp_lock_release>
 8007384:	230c      	movs	r3, #12
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	e7ee      	b.n	8007368 <__sfp+0x60>
 800738a:	bf00      	nop
 800738c:	08007704 	.word	0x08007704
 8007390:	ffff0001 	.word	0xffff0001

08007394 <_fwalk_reent>:
 8007394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007398:	4606      	mov	r6, r0
 800739a:	4688      	mov	r8, r1
 800739c:	2700      	movs	r7, #0
 800739e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a6:	f1b9 0901 	subs.w	r9, r9, #1
 80073aa:	d505      	bpl.n	80073b8 <_fwalk_reent+0x24>
 80073ac:	6824      	ldr	r4, [r4, #0]
 80073ae:	2c00      	cmp	r4, #0
 80073b0:	d1f7      	bne.n	80073a2 <_fwalk_reent+0xe>
 80073b2:	4638      	mov	r0, r7
 80073b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b8:	89ab      	ldrh	r3, [r5, #12]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d907      	bls.n	80073ce <_fwalk_reent+0x3a>
 80073be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c2:	3301      	adds	r3, #1
 80073c4:	d003      	beq.n	80073ce <_fwalk_reent+0x3a>
 80073c6:	4629      	mov	r1, r5
 80073c8:	4630      	mov	r0, r6
 80073ca:	47c0      	blx	r8
 80073cc:	4307      	orrs	r7, r0
 80073ce:	3568      	adds	r5, #104	; 0x68
 80073d0:	e7e9      	b.n	80073a6 <_fwalk_reent+0x12>

080073d2 <__retarget_lock_init_recursive>:
 80073d2:	4770      	bx	lr

080073d4 <__retarget_lock_acquire_recursive>:
 80073d4:	4770      	bx	lr

080073d6 <__retarget_lock_release_recursive>:
 80073d6:	4770      	bx	lr

080073d8 <__swhatbuf_r>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	460e      	mov	r6, r1
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	4614      	mov	r4, r2
 80073e2:	2900      	cmp	r1, #0
 80073e4:	461d      	mov	r5, r3
 80073e6:	b096      	sub	sp, #88	; 0x58
 80073e8:	da07      	bge.n	80073fa <__swhatbuf_r+0x22>
 80073ea:	2300      	movs	r3, #0
 80073ec:	602b      	str	r3, [r5, #0]
 80073ee:	89b3      	ldrh	r3, [r6, #12]
 80073f0:	061a      	lsls	r2, r3, #24
 80073f2:	d410      	bmi.n	8007416 <__swhatbuf_r+0x3e>
 80073f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f8:	e00e      	b.n	8007418 <__swhatbuf_r+0x40>
 80073fa:	466a      	mov	r2, sp
 80073fc:	f000 f902 	bl	8007604 <_fstat_r>
 8007400:	2800      	cmp	r0, #0
 8007402:	dbf2      	blt.n	80073ea <__swhatbuf_r+0x12>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800740a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800740e:	425a      	negs	r2, r3
 8007410:	415a      	adcs	r2, r3
 8007412:	602a      	str	r2, [r5, #0]
 8007414:	e7ee      	b.n	80073f4 <__swhatbuf_r+0x1c>
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	2000      	movs	r0, #0
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	b016      	add	sp, #88	; 0x58
 800741e:	bd70      	pop	{r4, r5, r6, pc}

08007420 <__smakebuf_r>:
 8007420:	898b      	ldrh	r3, [r1, #12]
 8007422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007424:	079d      	lsls	r5, r3, #30
 8007426:	4606      	mov	r6, r0
 8007428:	460c      	mov	r4, r1
 800742a:	d507      	bpl.n	800743c <__smakebuf_r+0x1c>
 800742c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	2301      	movs	r3, #1
 8007436:	6163      	str	r3, [r4, #20]
 8007438:	b002      	add	sp, #8
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	466a      	mov	r2, sp
 800743e:	ab01      	add	r3, sp, #4
 8007440:	f7ff ffca 	bl	80073d8 <__swhatbuf_r>
 8007444:	9900      	ldr	r1, [sp, #0]
 8007446:	4605      	mov	r5, r0
 8007448:	4630      	mov	r0, r6
 800744a:	f7ff f983 	bl	8006754 <_malloc_r>
 800744e:	b948      	cbnz	r0, 8007464 <__smakebuf_r+0x44>
 8007450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007454:	059a      	lsls	r2, r3, #22
 8007456:	d4ef      	bmi.n	8007438 <__smakebuf_r+0x18>
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	e7e3      	b.n	800742c <__smakebuf_r+0xc>
 8007464:	4b0d      	ldr	r3, [pc, #52]	; (800749c <__smakebuf_r+0x7c>)
 8007466:	62b3      	str	r3, [r6, #40]	; 0x28
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	6020      	str	r0, [r4, #0]
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	6120      	str	r0, [r4, #16]
 8007476:	6163      	str	r3, [r4, #20]
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	b15b      	cbz	r3, 8007494 <__smakebuf_r+0x74>
 800747c:	4630      	mov	r0, r6
 800747e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007482:	f000 f8d1 	bl	8007628 <_isatty_r>
 8007486:	b128      	cbz	r0, 8007494 <__smakebuf_r+0x74>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	89a0      	ldrh	r0, [r4, #12]
 8007496:	4305      	orrs	r5, r0
 8007498:	81a5      	strh	r5, [r4, #12]
 800749a:	e7cd      	b.n	8007438 <__smakebuf_r+0x18>
 800749c:	08007231 	.word	0x08007231

080074a0 <_malloc_usable_size_r>:
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f18      	subs	r0, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfbc      	itt	lt
 80074aa:	580b      	ldrlt	r3, [r1, r0]
 80074ac:	18c0      	addlt	r0, r0, r3
 80074ae:	4770      	bx	lr

080074b0 <_raise_r>:
 80074b0:	291f      	cmp	r1, #31
 80074b2:	b538      	push	{r3, r4, r5, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	d904      	bls.n	80074c4 <_raise_r+0x14>
 80074ba:	2316      	movs	r3, #22
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074c6:	b112      	cbz	r2, 80074ce <_raise_r+0x1e>
 80074c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074cc:	b94b      	cbnz	r3, 80074e2 <_raise_r+0x32>
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f830 	bl	8007534 <_getpid_r>
 80074d4:	462a      	mov	r2, r5
 80074d6:	4601      	mov	r1, r0
 80074d8:	4620      	mov	r0, r4
 80074da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074de:	f000 b817 	b.w	8007510 <_kill_r>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d00a      	beq.n	80074fc <_raise_r+0x4c>
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	d103      	bne.n	80074f2 <_raise_r+0x42>
 80074ea:	2316      	movs	r3, #22
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7e7      	b.n	80074c2 <_raise_r+0x12>
 80074f2:	2400      	movs	r4, #0
 80074f4:	4628      	mov	r0, r5
 80074f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074fa:	4798      	blx	r3
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7e0      	b.n	80074c2 <_raise_r+0x12>

08007500 <raise>:
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <raise+0xc>)
 8007502:	4601      	mov	r1, r0
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	f7ff bfd3 	b.w	80074b0 <_raise_r>
 800750a:	bf00      	nop
 800750c:	20000020 	.word	0x20000020

08007510 <_kill_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	2300      	movs	r3, #0
 8007514:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_kill_r+0x20>)
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	f7fb fc0b 	bl	8002d38 <_kill>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	d102      	bne.n	800752c <_kill_r+0x1c>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	b103      	cbz	r3, 800752c <_kill_r+0x1c>
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	bd38      	pop	{r3, r4, r5, pc}
 800752e:	bf00      	nop
 8007530:	20003458 	.word	0x20003458

08007534 <_getpid_r>:
 8007534:	f7fb bbfe 	b.w	8002d34 <_getpid>

08007538 <__sread>:
 8007538:	b510      	push	{r4, lr}
 800753a:	460c      	mov	r4, r1
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	f000 f894 	bl	800766c <_read_r>
 8007544:	2800      	cmp	r0, #0
 8007546:	bfab      	itete	ge
 8007548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800754a:	89a3      	ldrhlt	r3, [r4, #12]
 800754c:	181b      	addge	r3, r3, r0
 800754e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007552:	bfac      	ite	ge
 8007554:	6563      	strge	r3, [r4, #84]	; 0x54
 8007556:	81a3      	strhlt	r3, [r4, #12]
 8007558:	bd10      	pop	{r4, pc}

0800755a <__swrite>:
 800755a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	461f      	mov	r7, r3
 8007560:	898b      	ldrh	r3, [r1, #12]
 8007562:	4605      	mov	r5, r0
 8007564:	05db      	lsls	r3, r3, #23
 8007566:	460c      	mov	r4, r1
 8007568:	4616      	mov	r6, r2
 800756a:	d505      	bpl.n	8007578 <__swrite+0x1e>
 800756c:	2302      	movs	r3, #2
 800756e:	2200      	movs	r2, #0
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	f000 f868 	bl	8007648 <_lseek_r>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	4632      	mov	r2, r6
 800757c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	4628      	mov	r0, r5
 8007584:	463b      	mov	r3, r7
 8007586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800758a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	f000 b817 	b.w	80075c0 <_write_r>

08007592 <__sseek>:
 8007592:	b510      	push	{r4, lr}
 8007594:	460c      	mov	r4, r1
 8007596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759a:	f000 f855 	bl	8007648 <_lseek_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	bf15      	itete	ne
 80075a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ae:	81a3      	strheq	r3, [r4, #12]
 80075b0:	bf18      	it	ne
 80075b2:	81a3      	strhne	r3, [r4, #12]
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <__sclose>:
 80075b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ba:	f000 b813 	b.w	80075e4 <_close_r>
	...

080075c0 <_write_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	2200      	movs	r2, #0
 80075ca:	4d05      	ldr	r5, [pc, #20]	; (80075e0 <_write_r+0x20>)
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fb fbcd 	bl	8002d6e <_write>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_write_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_write_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20003458 	.word	0x20003458

080075e4 <_close_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	2300      	movs	r3, #0
 80075e8:	4d05      	ldr	r5, [pc, #20]	; (8007600 <_close_r+0x1c>)
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	f7fb fbe4 	bl	8002dbc <_close>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_close_r+0x1a>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_close_r+0x1a>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20003458 	.word	0x20003458

08007604 <_fstat_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	2300      	movs	r3, #0
 8007608:	4d06      	ldr	r5, [pc, #24]	; (8007624 <_fstat_r+0x20>)
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f7fb fbd6 	bl	8002dc2 <_fstat>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	d102      	bne.n	8007620 <_fstat_r+0x1c>
 800761a:	682b      	ldr	r3, [r5, #0]
 800761c:	b103      	cbz	r3, 8007620 <_fstat_r+0x1c>
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	20003458 	.word	0x20003458

08007628 <_isatty_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	2300      	movs	r3, #0
 800762c:	4d05      	ldr	r5, [pc, #20]	; (8007644 <_isatty_r+0x1c>)
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f7fb fbca 	bl	8002dcc <_isatty>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_isatty_r+0x1a>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_isatty_r+0x1a>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20003458 	.word	0x20003458

08007648 <_lseek_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	2200      	movs	r2, #0
 8007652:	4d05      	ldr	r5, [pc, #20]	; (8007668 <_lseek_r+0x20>)
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7fb fbba 	bl	8002dd0 <_lseek>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_lseek_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_lseek_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20003458 	.word	0x20003458

0800766c <_read_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	4611      	mov	r1, r2
 8007674:	2200      	movs	r2, #0
 8007676:	4d05      	ldr	r5, [pc, #20]	; (800768c <_read_r+0x20>)
 8007678:	602a      	str	r2, [r5, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f7fb fb6a 	bl	8002d54 <_read>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_read_r+0x1e>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_read_r+0x1e>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	20003458 	.word	0x20003458

08007690 <_init>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr

0800769c <_fini>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr
