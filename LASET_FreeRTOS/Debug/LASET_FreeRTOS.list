
LASET_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008128  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08008238  08008238  00018238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008784  08008784  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008784  08008784  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008784  08008784  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800878c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000325c  200001f4  08008980  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20003450  08008980  00023450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012575  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0f  00000000  00000000  00032792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000081d6  00000000  00000000  000354a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0003d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0003e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053ed  00000000  00000000  0003f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f083  00000000  00000000  0004479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f8c8  00000000  00000000  00053820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b30e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003798  00000000  00000000  000b313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008220 	.word	0x08008220

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08008220 	.word	0x08008220

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2iz>:
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30f      	bcc.n	8001002 <__aeabi_f2iz+0x2a>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d90d      	bls.n	8001008 <__aeabi_f2iz+0x30>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	bf18      	it	ne
 8000ffe:	4240      	negne	r0, r0
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2iz+0x3a>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d105      	bne.n	800101e <__aeabi_f2iz+0x46>
 8001012:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001016:	bf08      	it	eq
 8001018:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	460c      	mov	r4, r1
 8001068:	4605      	mov	r5, r0
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	f7ff fd57 	bl	8000b24 <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff facd 	bl	8000640 <__aeabi_dmul>
 80010a6:	f7ff fda3 	bl	8000bf0 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff fa4e 	bl	800054c <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fac4 	bl	8000640 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f906 	bl	80002d0 <__aeabi_dsub>
 80010c4:	f7ff fd94 	bl	8000bf0 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80010d8:	f000 fe0e 	bl	8001cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <pvPortMalloc+0x9c>)
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	b970      	cbnz	r0, 8001100 <pvPortMalloc+0x2c>
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
	xEnd.pxNextFreeBlock = NULL;
 80010e2:	4619      	mov	r1, r3
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80010e4:	f642 75f8 	movw	r5, #12280	; 0x2ff8
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <pvPortMalloc+0xa0>)
	xEnd.pxNextFreeBlock = NULL;
 80010ea:	f841 0f0c 	str.w	r0, [r1, #12]!
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80010ee:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80010f2:	e9c3 2000 	strd	r2, r0, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80010f6:	e9c2 1500 	strd	r1, r5, [r2]
			xHeapHasBeenInitialised = pdTRUE;
 80010fa:	2201      	movs	r2, #1
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80010fc:	611d      	str	r5, [r3, #16]
			xHeapHasBeenInitialised = pdTRUE;
 80010fe:	609a      	str	r2, [r3, #8]
		if( xWantedSize > 0 )
 8001100:	b12c      	cbz	r4, 800110e <pvPortMalloc+0x3a>
			xWantedSize += heapSTRUCT_SIZE;
 8001102:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001104:	0762      	lsls	r2, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001106:	bf1c      	itt	ne
 8001108:	f024 0407 	bicne.w	r4, r4, #7
 800110c:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800110e:	f642 72f6 	movw	r2, #12278	; 0x2ff6
 8001112:	1e61      	subs	r1, r4, #1
 8001114:	4291      	cmp	r1, r2
 8001116:	d829      	bhi.n	800116c <pvPortMalloc+0x98>
			pxBlock = xStart.pxNextFreeBlock;
 8001118:	681b      	ldr	r3, [r3, #0]
			pxPreviousBlock = &xStart;
 800111a:	4815      	ldr	r0, [pc, #84]	; (8001170 <pvPortMalloc+0x9c>)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	42a1      	cmp	r1, r4
 8001120:	d201      	bcs.n	8001126 <pvPortMalloc+0x52>
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	b9fa      	cbnz	r2, 8001166 <pvPortMalloc+0x92>
			if( pxBlock != &xEnd )
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <pvPortMalloc+0xa4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d01f      	beq.n	800116c <pvPortMalloc+0x98>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800112c:	6805      	ldr	r5, [r0, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800112e:	681e      	ldr	r6, [r3, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001130:	1b09      	subs	r1, r1, r4
 8001132:	2910      	cmp	r1, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001134:	f105 0508 	add.w	r5, r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001138:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800113a:	d90b      	bls.n	8001154 <pvPortMalloc+0x80>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800113c:	1918      	adds	r0, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800113e:	6041      	str	r1, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001140:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8001142:	6844      	ldr	r4, [r0, #4]
 8001144:	3a0c      	subs	r2, #12
 8001146:	4611      	mov	r1, r2
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	6856      	ldr	r6, [r2, #4]
 800114c:	42a6      	cmp	r6, r4
 800114e:	d3fa      	bcc.n	8001146 <pvPortMalloc+0x72>
 8001150:	6002      	str	r2, [r0, #0]
 8001152:	6008      	str	r0, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001154:	4909      	ldr	r1, [pc, #36]	; (800117c <pvPortMalloc+0xa8>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	680a      	ldr	r2, [r1, #0]
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
 800115e:	f000 fe67 	bl	8001e30 <xTaskResumeAll>
}
 8001162:	4628      	mov	r0, r5
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	4618      	mov	r0, r3
 8001168:	4613      	mov	r3, r2
 800116a:	e7d7      	b.n	800111c <pvPortMalloc+0x48>
void *pvReturn = NULL;
 800116c:	2500      	movs	r5, #0
 800116e:	e7f6      	b.n	800115e <pvPortMalloc+0x8a>
 8001170:	20000210 	.word	0x20000210
 8001174:	2000022c 	.word	0x2000022c
 8001178:	2000021c 	.word	0x2000021c
 800117c:	20000000 	.word	0x20000000

08001180 <vPortFree>:
{
 8001180:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8001182:	4604      	mov	r4, r0
 8001184:	b1b0      	cbz	r0, 80011b4 <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
 8001186:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
 800118a:	f000 fdb5 	bl	8001cf8 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800118e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <vPortFree+0x38>)
 8001194:	461a      	mov	r2, r3
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	4288      	cmp	r0, r1
 800119c:	d3fa      	bcc.n	8001194 <vPortFree+0x14>
 800119e:	f844 3c08 	str.w	r3, [r4, #-8]
 80011a2:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <vPortFree+0x3c>)
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	440b      	add	r3, r1
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
 80011b0:	f000 be3e 	b.w	8001e30 <xTaskResumeAll>
}
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop
 80011b8:	20000210 	.word	0x20000210
 80011bc:	20000000 	.word	0x20000000

080011c0 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011c4:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011cc:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011ce:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80011d4:	4770      	bx	lr

080011d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80011da:	4770      	bx	lr

080011dc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80011dc:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80011de:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80011e0:	1c63      	adds	r3, r4, #1
 80011e2:	d10a      	bne.n	80011fa <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80011e4:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80011ea:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80011ec:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80011ee:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 80011f0:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 80011f2:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 80011f4:	3301      	adds	r3, #1
 80011f6:	6003      	str	r3, [r0, #0]
}
 80011f8:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80011fa:	f100 0208 	add.w	r2, r0, #8
 80011fe:	4613      	mov	r3, r2
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	6815      	ldr	r5, [r2, #0]
 8001204:	42a5      	cmp	r5, r4
 8001206:	d9fa      	bls.n	80011fe <vListInsert+0x22>
 8001208:	e7ed      	b.n	80011e6 <vListInsert+0xa>

0800120a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800120a:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800120c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8001210:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001212:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001218:	bf08      	it	eq
 800121a:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800121c:	2200      	movs	r2, #0
 800121e:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	3a01      	subs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	4770      	bx	lr

0800122a <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800122a:	2300      	movs	r3, #0
{
 800122c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800122e:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001230:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001234:	f383 8811 	msr	BASEPRI, r3
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001240:	9b01      	ldr	r3, [sp, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0fc      	beq.n	8001240 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001246:	b002      	add	sp, #8
 8001248:	4770      	bx	lr
	...

0800124c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <prvPortStartFirstTask+0x1c>)
 800124e:	6800      	ldr	r0, [r0, #0]
 8001250:	6800      	ldr	r0, [r0, #0]
 8001252:	f380 8808 	msr	MSP, r0
 8001256:	b662      	cpsie	i
 8001258:	b661      	cpsie	f
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	df00      	svc	0
 8001264:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001266:	0000      	.short	0x0000
 8001268:	e000ed08 	.word	0xe000ed08

0800126c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001276:	f021 0101 	bic.w	r1, r1, #1
 800127a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800127e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001282:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001286:	3840      	subs	r0, #64	; 0x40
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	0800122b 	.word	0x0800122b

08001290 <SVC_Handler>:
	__asm volatile (
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <pxCurrentTCBConst2>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	6808      	ldr	r0, [r1, #0]
 8001296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800129a:	f380 8809 	msr	PSP, r0
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f380 8811 	msr	BASEPRI, r0
 80012aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80012ae:	4770      	bx	lr

080012b0 <pxCurrentTCBConst2>:
 80012b0:	20003228 	.word	0x20003228

080012b4 <vPortEnterCritical>:
 80012b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80012c4:	4a02      	ldr	r2, [pc, #8]	; (80012d0 <vPortEnterCritical+0x1c>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000004 	.word	0x20000004

080012d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <vPortExitCritical+0x10>)
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80012dc:	b90b      	cbnz	r3, 80012e2 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80012de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80012e2:	4770      	bx	lr
 80012e4:	20000004 	.word	0x20000004
	...

080012f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012f0:	f3ef 8009 	mrs	r0, PSP
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <pxCurrentTCBConst>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001300:	6010      	str	r0, [r2, #0]
 8001302:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001306:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800130a:	f380 8811 	msr	BASEPRI, r0
 800130e:	f000 fe2b 	bl	8001f68 <vTaskSwitchContext>
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	f380 8811 	msr	BASEPRI, r0
 800131a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	6808      	ldr	r0, [r1, #0]
 8001322:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001326:	f380 8809 	msr	PSP, r0
 800132a:	f3bf 8f6f 	isb	sy
 800132e:	4770      	bx	lr

08001330 <pxCurrentTCBConst>:
 8001330:	20003228 	.word	0x20003228

08001334 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001334:	b508      	push	{r3, lr}
	__asm volatile
 8001336:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800133a:	f383 8811 	msr	BASEPRI, r3
 800133e:	f3bf 8f6f 	isb	sy
 8001342:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001346:	f000 fce1 	bl	8001d0c <xTaskIncrementTick>
 800134a:	b118      	cbz	r0, 8001354 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800134c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <SysTick_Handler+0x28>)
 8001352:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001354:	2300      	movs	r3, #0
 8001356:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800135a:	bd08      	pop	{r3, pc}
 800135c:	e000ed04 	.word	0xe000ed04

08001360 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001360:	2200      	movs	r2, #0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001364:	4905      	ldr	r1, [pc, #20]	; (800137c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001366:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001368:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <vPortSetupTimerInterrupt+0x20>)
 800136c:	4905      	ldr	r1, [pc, #20]	; (8001384 <vPortSetupTimerInterrupt+0x24>)
 800136e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010
 800137c:	e000e018 	.word	0xe000e018
 8001380:	e000e014 	.word	0xe000e014
 8001384:	0001193f 	.word	0x0001193f

08001388 <xPortStartScheduler>:
{
 8001388:	b510      	push	{r4, lr}
	uxCriticalNesting = 0;
 800138a:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <xPortStartScheduler+0x30>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8001394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800139c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800139e:	f7ff ffdf 	bl	8001360 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <xPortStartScheduler+0x34>)
 80013a4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80013a6:	f7ff ff51 	bl	800124c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80013aa:	f000 fddd 	bl	8001f68 <vTaskSwitchContext>
	prvTaskExitError();
 80013ae:	f7ff ff3c 	bl	800122a <prvTaskExitError>
}
 80013b2:	4620      	mov	r0, r4
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	e000ed20 	.word	0xe000ed20
 80013bc:	20000004 	.word	0x20000004

080013c0 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80013c4:	f7ff ff76 	bl	80012b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80013c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80013ca:	f7ff ff83 	bl	80012d4 <vPortExitCritical>

    return xReturn;
}
 80013ce:	fab4 f084 	clz	r0, r4
 80013d2:	0940      	lsrs	r0, r0, #5
 80013d4:	bd10      	pop	{r4, pc}

080013d6 <prvCopyDataToQueue>:
{
 80013d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d8:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013da:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80013dc:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013de:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013e0:	b952      	cbnz	r2, 80013f8 <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013e2:	6807      	ldr	r7, [r0, #0]
 80013e4:	bb47      	cbnz	r7, 8001438 <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013e6:	6880      	ldr	r0, [r0, #8]
 80013e8:	f000 fed8 	bl	800219c <xTaskPriorityDisinherit>
 80013ec:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013ee:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013f0:	3601      	adds	r6, #1
}
 80013f2:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013f4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80013f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80013f8:	b965      	cbnz	r5, 8001414 <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013fa:	6840      	ldr	r0, [r0, #4]
 80013fc:	f002 fb02 	bl	8003a04 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001400:	6863      	ldr	r3, [r4, #4]
 8001402:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001404:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001406:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001408:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800140a:	4293      	cmp	r3, r2
 800140c:	d3f0      	bcc.n	80013f0 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	6063      	str	r3, [r4, #4]
 8001412:	e7ed      	b.n	80013f0 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001414:	68c0      	ldr	r0, [r0, #12]
 8001416:	f002 faf5 	bl	8003a04 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800141a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800141c:	68e3      	ldr	r3, [r4, #12]
 800141e:	4251      	negs	r1, r2
 8001420:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001422:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001424:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001426:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001428:	bf3e      	ittt	cc
 800142a:	68a3      	ldrcc	r3, [r4, #8]
 800142c:	185b      	addcc	r3, r3, r1
 800142e:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8001430:	2d02      	cmp	r5, #2
 8001432:	d101      	bne.n	8001438 <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001434:	b116      	cbz	r6, 800143c <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 8001436:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8001438:	2500      	movs	r5, #0
 800143a:	e7d9      	b.n	80013f0 <prvCopyDataToQueue+0x1a>
 800143c:	4635      	mov	r5, r6
 800143e:	e7d7      	b.n	80013f0 <prvCopyDataToQueue+0x1a>

08001440 <prvCopyDataFromQueue>:
{
 8001440:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001444:	4608      	mov	r0, r1
 8001446:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001448:	b162      	cbz	r2, 8001464 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800144a:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800144c:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800144e:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001450:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001452:	bf28      	it	cs
 8001454:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001456:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001458:	bf28      	it	cs
 800145a:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800145c:	68d9      	ldr	r1, [r3, #12]
}
 800145e:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001460:	f002 bad0 	b.w	8003a04 <memcpy>
}
 8001464:	bc10      	pop	{r4}
 8001466:	4770      	bx	lr

08001468 <prvUnlockQueue>:
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800146c:	f7ff ff22 	bl	80012b4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001470:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001474:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8001478:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800147a:	2d00      	cmp	r5, #0
 800147c:	dc14      	bgt.n	80014a8 <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001484:	f7ff ff26 	bl	80012d4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001488:	f7ff ff14 	bl	80012b4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800148c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001490:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8001494:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001496:	2d00      	cmp	r5, #0
 8001498:	dc12      	bgt.n	80014c0 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80014a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80014a4:	f7ff bf16 	b.w	80012d4 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0e7      	beq.n	800147e <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fd92 	bl	8001fd8 <xTaskRemoveFromEventList>
 80014b4:	b108      	cbz	r0, 80014ba <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 80014b6:	f000 fe19 	bl	80020ec <vTaskMissedYield>
            --cTxLock;
 80014ba:	3d01      	subs	r5, #1
 80014bc:	b26d      	sxtb	r5, r5
 80014be:	e7dc      	b.n	800147a <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014c0:	6923      	ldr	r3, [r4, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0e9      	beq.n	800149a <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014c6:	4630      	mov	r0, r6
 80014c8:	f000 fd86 	bl	8001fd8 <xTaskRemoveFromEventList>
 80014cc:	b108      	cbz	r0, 80014d2 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 80014ce:	f000 fe0d 	bl	80020ec <vTaskMissedYield>
                --cRxLock;
 80014d2:	3d01      	subs	r5, #1
 80014d4:	b26d      	sxtb	r5, r5
 80014d6:	e7de      	b.n	8001496 <prvUnlockQueue+0x2e>

080014d8 <xQueueGenericReset>:
{
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 80014dc:	4604      	mov	r4, r0
 80014de:	b310      	cbz	r0, 8001526 <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 80014e0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80014e2:	b300      	cbz	r0, 8001526 <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80014e4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80014e6:	fba5 3500 	umull	r3, r5, r5, r0
 80014ea:	b9dd      	cbnz	r5, 8001524 <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 80014ec:	f7ff fee2 	bl	80012b4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014f0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80014f4:	434b      	muls	r3, r1
 80014f6:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80014f8:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014fa:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80014fc:	1a5b      	subs	r3, r3, r1
 80014fe:	4413      	add	r3, r2
 8001500:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001502:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001504:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001506:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800150a:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 800150c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001510:	b156      	cbz	r6, 8001528 <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001512:	f104 0010 	add.w	r0, r4, #16
 8001516:	f7ff fe53 	bl	80011c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800151a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800151e:	f7ff fe4f 	bl	80011c0 <vListInitialise>
 8001522:	e010      	b.n	8001546 <xQueueGenericReset+0x6e>
        xReturn = pdFAIL;
 8001524:	2000      	movs	r0, #0
}
 8001526:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001528:	6923      	ldr	r3, [r4, #16]
 800152a:	b163      	cbz	r3, 8001546 <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800152c:	f104 0010 	add.w	r0, r4, #16
 8001530:	f000 fd52 	bl	8001fd8 <xTaskRemoveFromEventList>
 8001534:	b138      	cbz	r0, 8001546 <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8001536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <xQueueGenericReset+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8001546:	f7ff fec5 	bl	80012d4 <vPortExitCritical>
 800154a:	2001      	movs	r0, #1
 800154c:	e7eb      	b.n	8001526 <xQueueGenericReset+0x4e>
 800154e:	bf00      	nop
 8001550:	e000ed04 	.word	0xe000ed04

08001554 <xQueueGenericCreate>:
    {
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	460d      	mov	r5, r1
 8001558:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800155a:	4606      	mov	r6, r0
 800155c:	b910      	cbnz	r0, 8001564 <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 800155e:	2400      	movs	r4, #0
    }
 8001560:	4620      	mov	r0, r4
 8001562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001564:	fba0 2301 	umull	r2, r3, r0, r1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f8      	bne.n	800155e <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800156c:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800156e:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8001572:	d8f4      	bhi.n	800155e <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001574:	3050      	adds	r0, #80	; 0x50
 8001576:	f7ff fdad 	bl	80010d4 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800157a:	4604      	mov	r4, r0
 800157c:	2800      	cmp	r0, #0
 800157e:	d0ee      	beq.n	800155e <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001580:	b15d      	cbz	r5, 800159a <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001582:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001586:	2101      	movs	r1, #1
 8001588:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 800158a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 800158e:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001590:	f7ff ffa2 	bl	80014d8 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8001594:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 8001598:	e7e2      	b.n	8001560 <xQueueGenericCreate+0xc>
 800159a:	4603      	mov	r3, r0
 800159c:	e7f3      	b.n	8001586 <xQueueGenericCreate+0x32>
	...

080015a0 <xQueueGenericSend>:
{
 80015a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80015a4:	f04f 0800 	mov.w	r8, #0
{
 80015a8:	4604      	mov	r4, r0
 80015aa:	460f      	mov	r7, r1
 80015ac:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 80015ae:	46c1      	mov	r9, r8
                    portYIELD_WITHIN_API();
 80015b0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80016a0 <xQueueGenericSend+0x100>
{
 80015b4:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 80015b6:	f7ff fe7d 	bl	80012b4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80015ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015be:	429a      	cmp	r2, r3
 80015c0:	d301      	bcc.n	80015c6 <xQueueGenericSend+0x26>
 80015c2:	2e02      	cmp	r6, #2
 80015c4:	d119      	bne.n	80015fa <xQueueGenericSend+0x5a>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80015c6:	4632      	mov	r2, r6
 80015c8:	4639      	mov	r1, r7
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff ff03 	bl	80013d6 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015d2:	b11b      	cbz	r3, 80015dc <xQueueGenericSend+0x3c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015d8:	f000 fcfe 	bl	8001fd8 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 80015dc:	b138      	cbz	r0, 80015ee <xQueueGenericSend+0x4e>
                            queueYIELD_IF_USING_PREEMPTION();
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <xQueueGenericSend+0x100>)
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80015ee:	f7ff fe71 	bl	80012d4 <vPortExitCritical>
                return pdPASS;
 80015f2:	2001      	movs	r0, #1
}
 80015f4:	b004      	add	sp, #16
 80015f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 80015fa:	9d01      	ldr	r5, [sp, #4]
 80015fc:	b91d      	cbnz	r5, 8001606 <xQueueGenericSend+0x66>
                    taskEXIT_CRITICAL();
 80015fe:	f7ff fe69 	bl	80012d4 <vPortExitCritical>
            return errQUEUE_FULL;
 8001602:	2000      	movs	r0, #0
 8001604:	e7f6      	b.n	80015f4 <xQueueGenericSend+0x54>
                else if( xEntryTimeSet == pdFALSE )
 8001606:	f1b8 0f00 	cmp.w	r8, #0
 800160a:	d102      	bne.n	8001612 <xQueueGenericSend+0x72>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800160c:	a802      	add	r0, sp, #8
 800160e:	f000 fd3d 	bl	800208c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001612:	f7ff fe5f 	bl	80012d4 <vPortExitCritical>
        vTaskSuspendAll();
 8001616:	f000 fb6f 	bl	8001cf8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800161a:	f7ff fe4b 	bl	80012b4 <vPortEnterCritical>
 800161e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	bf08      	it	eq
 8001626:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800162a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	bf08      	it	eq
 8001632:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8001636:	f7ff fe4d 	bl	80012d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800163a:	a901      	add	r1, sp, #4
 800163c:	a802      	add	r0, sp, #8
 800163e:	f000 fd2f 	bl	80020a0 <xTaskCheckForTimeOut>
 8001642:	bb30      	cbnz	r0, 8001692 <xQueueGenericSend+0xf2>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001644:	f7ff fe36 	bl	80012b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001648:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800164a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800164c:	429a      	cmp	r2, r3
 800164e:	d10f      	bne.n	8001670 <xQueueGenericSend+0xd0>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8001650:	f7ff fe40 	bl	80012d4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001654:	9901      	ldr	r1, [sp, #4]
 8001656:	f104 0010 	add.w	r0, r4, #16
 800165a:	f000 fcad 	bl	8001fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff ff02 	bl	8001468 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001664:	f000 fbe4 	bl	8001e30 <xTaskResumeAll>
 8001668:	b150      	cbz	r0, 8001680 <xQueueGenericSend+0xe0>
{
 800166a:	f04f 0801 	mov.w	r8, #1
 800166e:	e7a2      	b.n	80015b6 <xQueueGenericSend+0x16>
    taskEXIT_CRITICAL();
 8001670:	f7ff fe30 	bl	80012d4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fef7 	bl	8001468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800167a:	f000 fbd9 	bl	8001e30 <xTaskResumeAll>
 800167e:	e7f4      	b.n	800166a <xQueueGenericSend+0xca>
                    portYIELD_WITHIN_API();
 8001680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001684:	f8ca 3000 	str.w	r3, [sl]
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	f3bf 8f6f 	isb	sy
 8001690:	e7eb      	b.n	800166a <xQueueGenericSend+0xca>
            prvUnlockQueue( pxQueue );
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff fee8 	bl	8001468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001698:	f000 fbca 	bl	8001e30 <xTaskResumeAll>
 800169c:	e7b1      	b.n	8001602 <xQueueGenericSend+0x62>
 800169e:	bf00      	nop
 80016a0:	e000ed04 	.word	0xe000ed04

080016a4 <xQueueGenericSendFromISR>:
{
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	4617      	mov	r7, r2
 80016a8:	4604      	mov	r4, r0
 80016aa:	461a      	mov	r2, r3
	__asm volatile
 80016ac:	f3ef 8611 	mrs	r6, BASEPRI
 80016b0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016b4:	f383 8811 	msr	BASEPRI, r3
 80016b8:	f3bf 8f6f 	isb	sy
 80016bc:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80016c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016c4:	4298      	cmp	r0, r3
 80016c6:	d301      	bcc.n	80016cc <xQueueGenericSendFromISR+0x28>
 80016c8:	2a02      	cmp	r2, #2
 80016ca:	d11e      	bne.n	800170a <xQueueGenericSendFromISR+0x66>
            const int8_t cTxLock = pxQueue->cTxLock;
 80016cc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016d0:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 80016d2:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016d6:	f7ff fe7e 	bl	80013d6 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80016da:	1c6b      	adds	r3, r5, #1
 80016dc:	d110      	bne.n	8001700 <xQueueGenericSendFromISR+0x5c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016e0:	b90b      	cbnz	r3, 80016e6 <xQueueGenericSendFromISR+0x42>
            xReturn = pdPASS;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e009      	b.n	80016fa <xQueueGenericSendFromISR+0x56>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80016ea:	f000 fc75 	bl	8001fd8 <xTaskRemoveFromEventList>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d0f7      	beq.n	80016e2 <xQueueGenericSendFromISR+0x3e>
                                if( pxHigherPriorityTaskWoken != NULL )
 80016f2:	2f00      	cmp	r7, #0
 80016f4:	d0f5      	beq.n	80016e2 <xQueueGenericSendFromISR+0x3e>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80016f6:	2001      	movs	r0, #1
 80016f8:	6038      	str	r0, [r7, #0]
	__asm volatile
 80016fa:	f386 8811 	msr	BASEPRI, r6
}
 80016fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001700:	3501      	adds	r5, #1
 8001702:	b26d      	sxtb	r5, r5
 8001704:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001708:	e7eb      	b.n	80016e2 <xQueueGenericSendFromISR+0x3e>
            xReturn = errQUEUE_FULL;
 800170a:	2000      	movs	r0, #0
 800170c:	e7f5      	b.n	80016fa <xQueueGenericSendFromISR+0x56>
	...

08001710 <xQueueReceive>:
{
 8001710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8001714:	2700      	movs	r7, #0
{
 8001716:	4604      	mov	r4, r0
 8001718:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 800171a:	46b8      	mov	r8, r7
{
 800171c:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 800171e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80017fc <xQueueReceive+0xec>
{
 8001722:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8001724:	f7ff fdc6 	bl	80012b4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001728:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800172a:	b1d5      	cbz	r5, 8001762 <xQueueReceive+0x52>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800172c:	4631      	mov	r1, r6
 800172e:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001730:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001732:	f7ff fe85 	bl	8001440 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001736:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001738:	6923      	ldr	r3, [r4, #16]
 800173a:	b163      	cbz	r3, 8001756 <xQueueReceive+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800173c:	f104 0010 	add.w	r0, r4, #16
 8001740:	f000 fc4a 	bl	8001fd8 <xTaskRemoveFromEventList>
 8001744:	b138      	cbz	r0, 8001756 <xQueueReceive+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <xQueueReceive+0xec>)
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001756:	f7ff fdbd 	bl	80012d4 <vPortExitCritical>
                return pdPASS;
 800175a:	2001      	movs	r0, #1
}
 800175c:	b005      	add	sp, #20
 800175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8001762:	9d01      	ldr	r5, [sp, #4]
 8001764:	b91d      	cbnz	r5, 800176e <xQueueReceive+0x5e>
                    taskEXIT_CRITICAL();
 8001766:	f7ff fdb5 	bl	80012d4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 800176a:	2000      	movs	r0, #0
 800176c:	e7f6      	b.n	800175c <xQueueReceive+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 800176e:	b917      	cbnz	r7, 8001776 <xQueueReceive+0x66>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001770:	a802      	add	r0, sp, #8
 8001772:	f000 fc8b 	bl	800208c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001776:	f7ff fdad 	bl	80012d4 <vPortExitCritical>
        vTaskSuspendAll();
 800177a:	f000 fabd 	bl	8001cf8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800177e:	f7ff fd99 	bl	80012b4 <vPortEnterCritical>
 8001782:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	bf08      	it	eq
 800178a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800178e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	bf08      	it	eq
 8001796:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800179a:	f7ff fd9b 	bl	80012d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800179e:	a901      	add	r1, sp, #4
 80017a0:	a802      	add	r0, sp, #8
 80017a2:	f000 fc7d 	bl	80020a0 <xTaskCheckForTimeOut>
 80017a6:	b9f0      	cbnz	r0, 80017e6 <xQueueReceive+0xd6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fe09 	bl	80013c0 <prvIsQueueEmpty>
 80017ae:	b1a0      	cbz	r0, 80017da <xQueueReceive+0xca>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017b0:	9901      	ldr	r1, [sp, #4]
 80017b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017b6:	f000 fbff 	bl	8001fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fe54 	bl	8001468 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80017c0:	f000 fb36 	bl	8001e30 <xTaskResumeAll>
 80017c4:	b938      	cbnz	r0, 80017d6 <xQueueReceive+0xc6>
                    portYIELD_WITHIN_API();
 80017c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017ca:	f8c9 3000 	str.w	r3, [r9]
 80017ce:	f3bf 8f4f 	dsb	sy
 80017d2:	f3bf 8f6f 	isb	sy
{
 80017d6:	2701      	movs	r7, #1
 80017d8:	e7a4      	b.n	8001724 <xQueueReceive+0x14>
                prvUnlockQueue( pxQueue );
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fe44 	bl	8001468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017e0:	f000 fb26 	bl	8001e30 <xTaskResumeAll>
 80017e4:	e7f7      	b.n	80017d6 <xQueueReceive+0xc6>
            prvUnlockQueue( pxQueue );
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff fe3e 	bl	8001468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017ec:	f000 fb20 	bl	8001e30 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fde5 	bl	80013c0 <prvIsQueueEmpty>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d0ed      	beq.n	80017d6 <xQueueReceive+0xc6>
 80017fa:	e7b6      	b.n	800176a <xQueueReceive+0x5a>
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <xQueueSemaphoreTake>:
{
 8001800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001804:	2500      	movs	r5, #0
{
 8001806:	4604      	mov	r4, r0
    BaseType_t xEntryTimeSet = pdFALSE;
 8001808:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 800180a:	462e      	mov	r6, r5
{
 800180c:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 800180e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001924 <xQueueSemaphoreTake+0x124>
{
 8001812:	9101      	str	r1, [sp, #4]
        taskENTER_CRITICAL();
 8001814:	f7ff fd4e 	bl	80012b4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800181a:	b1e3      	cbz	r3, 8001856 <xQueueSemaphoreTake+0x56>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800181c:	3b01      	subs	r3, #1
 800181e:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	b913      	cbnz	r3, 800182a <xQueueSemaphoreTake+0x2a>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001824:	f000 fd38 	bl	8002298 <pvTaskIncrementMutexHeldCount>
 8001828:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800182a:	6923      	ldr	r3, [r4, #16]
 800182c:	b163      	cbz	r3, 8001848 <xQueueSemaphoreTake+0x48>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800182e:	f104 0010 	add.w	r0, r4, #16
 8001832:	f000 fbd1 	bl	8001fd8 <xTaskRemoveFromEventList>
 8001836:	b138      	cbz	r0, 8001848 <xQueueSemaphoreTake+0x48>
                        queueYIELD_IF_USING_PREEMPTION();
 8001838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <xQueueSemaphoreTake+0x124>)
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001848:	f7ff fd44 	bl	80012d4 <vPortExitCritical>
                return pdPASS;
 800184c:	2501      	movs	r5, #1
}
 800184e:	4628      	mov	r0, r5
 8001850:	b005      	add	sp, #20
 8001852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8001856:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800185a:	f1b8 0f00 	cmp.w	r8, #0
 800185e:	d103      	bne.n	8001868 <xQueueSemaphoreTake+0x68>
                            taskEXIT_CRITICAL();
 8001860:	f7ff fd38 	bl	80012d4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8001864:	2500      	movs	r5, #0
 8001866:	e7f2      	b.n	800184e <xQueueSemaphoreTake+0x4e>
                else if( xEntryTimeSet == pdFALSE )
 8001868:	b917      	cbnz	r7, 8001870 <xQueueSemaphoreTake+0x70>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800186a:	a802      	add	r0, sp, #8
 800186c:	f000 fc0e 	bl	800208c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001870:	f7ff fd30 	bl	80012d4 <vPortExitCritical>
        vTaskSuspendAll();
 8001874:	f000 fa40 	bl	8001cf8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001878:	f7ff fd1c 	bl	80012b4 <vPortEnterCritical>
 800187c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001880:	2bff      	cmp	r3, #255	; 0xff
 8001882:	bf08      	it	eq
 8001884:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 8001888:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800188c:	2bff      	cmp	r3, #255	; 0xff
 800188e:	bf08      	it	eq
 8001890:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 8001894:	f7ff fd1e 	bl	80012d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001898:	a901      	add	r1, sp, #4
 800189a:	a802      	add	r0, sp, #8
 800189c:	f000 fc00 	bl	80020a0 <xTaskCheckForTimeOut>
 80018a0:	bb40      	cbnz	r0, 80018f4 <xQueueSemaphoreTake+0xf4>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fd8c 	bl	80013c0 <prvIsQueueEmpty>
 80018a8:	b1f0      	cbz	r0, 80018e8 <xQueueSemaphoreTake+0xe8>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	b93b      	cbnz	r3, 80018be <xQueueSemaphoreTake+0xbe>
                            taskENTER_CRITICAL();
 80018ae:	f7ff fd01 	bl	80012b4 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80018b2:	68a0      	ldr	r0, [r4, #8]
 80018b4:	f000 fc22 	bl	80020fc <xTaskPriorityInherit>
 80018b8:	4605      	mov	r5, r0
                            taskEXIT_CRITICAL();
 80018ba:	f7ff fd0b 	bl	80012d4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018be:	9901      	ldr	r1, [sp, #4]
 80018c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018c4:	f000 fb78 	bl	8001fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fdcd 	bl	8001468 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80018ce:	f000 faaf 	bl	8001e30 <xTaskResumeAll>
 80018d2:	b938      	cbnz	r0, 80018e4 <xQueueSemaphoreTake+0xe4>
                    portYIELD_WITHIN_API();
 80018d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018d8:	f8c9 3000 	str.w	r3, [r9]
 80018dc:	f3bf 8f4f 	dsb	sy
 80018e0:	f3bf 8f6f 	isb	sy
{
 80018e4:	2701      	movs	r7, #1
 80018e6:	e795      	b.n	8001814 <xQueueSemaphoreTake+0x14>
                prvUnlockQueue( pxQueue );
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff fdbd 	bl	8001468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80018ee:	f000 fa9f 	bl	8001e30 <xTaskResumeAll>
 80018f2:	e7f7      	b.n	80018e4 <xQueueSemaphoreTake+0xe4>
            prvUnlockQueue( pxQueue );
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fdb7 	bl	8001468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80018fa:	f000 fa99 	bl	8001e30 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff fd5e 	bl	80013c0 <prvIsQueueEmpty>
 8001904:	2800      	cmp	r0, #0
 8001906:	d0ed      	beq.n	80018e4 <xQueueSemaphoreTake+0xe4>
                        if( xInheritanceOccurred != pdFALSE )
 8001908:	2d00      	cmp	r5, #0
 800190a:	d0a0      	beq.n	800184e <xQueueSemaphoreTake+0x4e>
                            taskENTER_CRITICAL();
 800190c:	f7ff fcd2 	bl	80012b4 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001910:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001912:	b119      	cbz	r1, 800191c <xQueueSemaphoreTake+0x11c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001914:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	f1c1 010f 	rsb	r1, r1, #15
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800191c:	68a0      	ldr	r0, [r4, #8]
 800191e:	f000 fc79 	bl	8002214 <vTaskPriorityDisinheritAfterTimeout>
 8001922:	e79d      	b.n	8001860 <xQueueSemaphoreTake+0x60>
 8001924:	e000ed04 	.word	0xe000ed04

08001928 <xQueuePeek>:
{
 8001928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 800192c:	2700      	movs	r7, #0
{
 800192e:	4604      	mov	r4, r0
 8001930:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 8001932:	46b8      	mov	r8, r7
{
 8001934:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 8001936:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001a14 <xQueuePeek+0xec>
{
 800193a:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 800193c:	f7ff fcba 	bl	80012b4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001942:	b1d3      	cbz	r3, 800197a <xQueuePeek+0x52>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001944:	4631      	mov	r1, r6
 8001946:	4620      	mov	r0, r4
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001948:	68e5      	ldr	r5, [r4, #12]
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800194a:	f7ff fd79 	bl	8001440 <prvCopyDataFromQueue>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800194e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001950:	60e5      	str	r5, [r4, #12]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001952:	b163      	cbz	r3, 800196e <xQueuePeek+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001954:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001958:	f000 fb3e 	bl	8001fd8 <xTaskRemoveFromEventList>
 800195c:	b138      	cbz	r0, 800196e <xQueuePeek+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 800195e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001962:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <xQueuePeek+0xec>)
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800196e:	f7ff fcb1 	bl	80012d4 <vPortExitCritical>
                return pdPASS;
 8001972:	2001      	movs	r0, #1
}
 8001974:	b005      	add	sp, #20
 8001976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 800197a:	9d01      	ldr	r5, [sp, #4]
 800197c:	b91d      	cbnz	r5, 8001986 <xQueuePeek+0x5e>
                    taskEXIT_CRITICAL();
 800197e:	f7ff fca9 	bl	80012d4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8001982:	2000      	movs	r0, #0
 8001984:	e7f6      	b.n	8001974 <xQueuePeek+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 8001986:	b917      	cbnz	r7, 800198e <xQueuePeek+0x66>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001988:	a802      	add	r0, sp, #8
 800198a:	f000 fb7f 	bl	800208c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800198e:	f7ff fca1 	bl	80012d4 <vPortExitCritical>
        vTaskSuspendAll();
 8001992:	f000 f9b1 	bl	8001cf8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001996:	f7ff fc8d 	bl	80012b4 <vPortEnterCritical>
 800199a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	bf08      	it	eq
 80019a2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80019a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	bf08      	it	eq
 80019ae:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80019b2:	f7ff fc8f 	bl	80012d4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019b6:	a901      	add	r1, sp, #4
 80019b8:	a802      	add	r0, sp, #8
 80019ba:	f000 fb71 	bl	80020a0 <xTaskCheckForTimeOut>
 80019be:	b9f0      	cbnz	r0, 80019fe <xQueuePeek+0xd6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff fcfd 	bl	80013c0 <prvIsQueueEmpty>
 80019c6:	b1a0      	cbz	r0, 80019f2 <xQueuePeek+0xca>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019c8:	9901      	ldr	r1, [sp, #4]
 80019ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019ce:	f000 faf3 	bl	8001fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fd48 	bl	8001468 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80019d8:	f000 fa2a 	bl	8001e30 <xTaskResumeAll>
 80019dc:	b938      	cbnz	r0, 80019ee <xQueuePeek+0xc6>
                    portYIELD_WITHIN_API();
 80019de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019e2:	f8c9 3000 	str.w	r3, [r9]
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	f3bf 8f6f 	isb	sy
{
 80019ee:	2701      	movs	r7, #1
 80019f0:	e7a4      	b.n	800193c <xQueuePeek+0x14>
                prvUnlockQueue( pxQueue );
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff fd38 	bl	8001468 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80019f8:	f000 fa1a 	bl	8001e30 <xTaskResumeAll>
 80019fc:	e7f7      	b.n	80019ee <xQueuePeek+0xc6>
            prvUnlockQueue( pxQueue );
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff fd32 	bl	8001468 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001a04:	f000 fa14 	bl	8001e30 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fcd9 	bl	80013c0 <prvIsQueueEmpty>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d0ed      	beq.n	80019ee <xQueuePeek+0xc6>
 8001a12:	e7b6      	b.n	8001982 <xQueuePeek+0x5a>
 8001a14:	e000ed04 	.word	0xe000ed04

08001a18 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a1a:	4c1e      	ldr	r4, [pc, #120]	; (8001a94 <prvAddCurrentTaskToDelayedList+0x7c>)
{
 8001a1c:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 8001a1e:	6825      	ldr	r5, [r4, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a20:	6860      	ldr	r0, [r4, #4]
{
 8001a22:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a24:	3004      	adds	r0, #4
 8001a26:	f7ff fbf0 	bl	800120a <uxListRemove>
 8001a2a:	b938      	cbnz	r0, 8001a3c <prvAddCurrentTaskToDelayedList+0x24>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a2c:	6862      	ldr	r2, [r4, #4]
 8001a2e:	68a3      	ldr	r3, [r4, #8]
 8001a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a32:	2201      	movs	r2, #1
 8001a34:	408a      	lsls	r2, r1
 8001a36:	ea23 0302 	bic.w	r3, r3, r2
 8001a3a:	60a3      	str	r3, [r4, #8]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a3c:	1c73      	adds	r3, r6, #1
 8001a3e:	d114      	bne.n	8001a6a <prvAddCurrentTaskToDelayedList+0x52>
 8001a40:	b19f      	cbz	r7, 8001a6a <prvAddCurrentTaskToDelayedList+0x52>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a42:	6862      	ldr	r2, [r4, #4]
 8001a44:	6923      	ldr	r3, [r4, #16]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	6093      	str	r3, [r2, #8]
 8001a4a:	6862      	ldr	r2, [r4, #4]
 8001a4c:	60d1      	str	r1, [r2, #12]
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	3204      	adds	r2, #4
 8001a54:	604a      	str	r2, [r1, #4]
 8001a56:	6862      	ldr	r2, [r4, #4]
 8001a58:	3204      	adds	r2, #4
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <prvAddCurrentTaskToDelayedList+0x80>)
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	68e3      	ldr	r3, [r4, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60e3      	str	r3, [r4, #12]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a6a:	6863      	ldr	r3, [r4, #4]
 8001a6c:	19ad      	adds	r5, r5, r6
 8001a6e:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001a70:	d306      	bcc.n	8001a80 <prvAddCurrentTaskToDelayedList+0x68>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a72:	6a20      	ldr	r0, [r4, #32]
 8001a74:	6861      	ldr	r1, [r4, #4]
}
 8001a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a7a:	3104      	adds	r1, #4
 8001a7c:	f7ff bbae 	b.w	80011dc <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a82:	6861      	ldr	r1, [r4, #4]
 8001a84:	3104      	adds	r1, #4
 8001a86:	f7ff fba9 	bl	80011dc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a8c:	42ab      	cmp	r3, r5
                        xNextTaskUnblockTime = xTimeToWake;
 8001a8e:	bf88      	it	hi
 8001a90:	62a5      	strhi	r5, [r4, #40]	; 0x28
}
 8001a92:	e7e9      	b.n	8001a68 <prvAddCurrentTaskToDelayedList+0x50>
 8001a94:	20003224 	.word	0x20003224
 8001a98:	20003230 	.word	0x20003230

08001a9c <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <prvResetNextTaskUnblockTime+0x18>)
 8001a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	b91a      	cbnz	r2, 8001aac <prvResetNextTaskUnblockTime+0x10>
        xNextTaskUnblockTime = portMAX_DELAY;
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aaa:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aae:	68d2      	ldr	r2, [r2, #12]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	e7f9      	b.n	8001aa8 <prvResetNextTaskUnblockTime+0xc>
 8001ab4:	20003224 	.word	0x20003224

08001ab8 <prvIdleTask>:
{
 8001ab8:	b580      	push	{r7, lr}
                    taskYIELD();
 8001aba:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001abe:	4c11      	ldr	r4, [pc, #68]	; (8001b04 <prvIdleTask+0x4c>)
                    taskYIELD();
 8001ac0:	4e11      	ldr	r6, [pc, #68]	; (8001b08 <prvIdleTask+0x50>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ac4:	b943      	cbnz	r3, 8001ad8 <prvIdleTask+0x20>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ac6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d9fa      	bls.n	8001ac2 <prvIdleTask+0xa>
                    taskYIELD();
 8001acc:	6037      	str	r7, [r6, #0]
 8001ace:	f3bf 8f4f 	dsb	sy
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	e7f4      	b.n	8001ac2 <prvIdleTask+0xa>
                taskENTER_CRITICAL();
 8001ad8:	f7ff fbec 	bl	80012b4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ade:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ae0:	1d28      	adds	r0, r5, #4
 8001ae2:	f7ff fb92 	bl	800120a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	6423      	str	r3, [r4, #64]	; 0x40
                    --uxDeletedTasksWaitingCleanUp;
 8001aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6463      	str	r3, [r4, #68]	; 0x44
                taskEXIT_CRITICAL();
 8001af2:	f7ff fbef 	bl	80012d4 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 8001af6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001af8:	f7ff fb42 	bl	8001180 <vPortFree>
                vPortFree( pxTCB );
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7ff fb3f 	bl	8001180 <vPortFree>
    }
 8001b02:	e7de      	b.n	8001ac2 <prvIdleTask+0xa>
 8001b04:	20003224 	.word	0x20003224
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <xTaskCreate>:
    {
 8001b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b10:	0096      	lsls	r6, r2, #2
    {
 8001b12:	4680      	mov	r8, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b14:	4630      	mov	r0, r6
    {
 8001b16:	460d      	mov	r5, r1
 8001b18:	4699      	mov	r9, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b1a:	f7ff fadb 	bl	80010d4 <pvPortMalloc>
                if( pxStack != NULL )
 8001b1e:	4607      	mov	r7, r0
 8001b20:	b198      	cbz	r0, 8001b4a <xTaskCreate+0x3e>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b22:	205c      	movs	r0, #92	; 0x5c
 8001b24:	f7ff fad6 	bl	80010d4 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8001b28:	4604      	mov	r4, r0
 8001b2a:	b158      	cbz	r0, 8001b44 <xTaskCreate+0x38>
                        pxNewTCB->pxStack = pxStack;
 8001b2c:	6307      	str	r7, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b2e:	4632      	mov	r2, r6
 8001b30:	21a5      	movs	r1, #165	; 0xa5
 8001b32:	4638      	mov	r0, r7
 8001b34:	f001 ff74 	bl	8003a20 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b38:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8001b3c:	b945      	cbnz	r5, 8001b50 <xTaskCreate+0x44>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b3e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8001b42:	e014      	b.n	8001b6e <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 8001b44:	4638      	mov	r0, r7
 8001b46:	f7ff fb1b 	bl	8001180 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001b4e:	e093      	b.n	8001c78 <xTaskCreate+0x16c>
 8001b50:	1e6b      	subs	r3, r5, #1
 8001b52:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001b56:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b58:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001b5c:	f802 1b01 	strb.w	r1, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8001b60:	7819      	ldrb	r1, [r3, #0]
 8001b62:	b109      	cbz	r1, 8001b68 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	d1f7      	bne.n	8001b58 <xTaskCreate+0x4c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8001b70:	f04f 0a00 	mov.w	sl, #0
 8001b74:	2d0e      	cmp	r5, #14
 8001b76:	bf28      	it	cs
 8001b78:	250e      	movcs	r5, #14
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b7a:	1d27      	adds	r7, r4, #4
 8001b7c:	4638      	mov	r0, r7
    pxNewTCB->uxPriority = uxPriority;
 8001b7e:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8001b80:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8001b82:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b86:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b88:	f7ff fb25 	bl	80011d6 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b8c:	f1c5 050f 	rsb	r5, r5, #15
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b90:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b94:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b96:	f7ff fb1e 	bl	80011d6 <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	4641      	mov	r1, r8
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b9e:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ba0:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ba2:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001ba4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001ba8:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bac:	f026 0007 	bic.w	r0, r6, #7
 8001bb0:	f7ff fb5c 	bl	800126c <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8001bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bb6:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8001bb8:	b103      	cbz	r3, 8001bbc <xTaskCreate+0xb0>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bba:	601c      	str	r4, [r3, #0]
        uxCurrentNumberOfTasks++;
 8001bbc:	4d35      	ldr	r5, [pc, #212]	; (8001c94 <xTaskCreate+0x188>)
    taskENTER_CRITICAL();
 8001bbe:	f7ff fb79 	bl	80012b4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8001bc2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001bc4:	f105 0848 	add.w	r8, r5, #72	; 0x48
 8001bc8:	3301      	adds	r3, #1
 8001bca:	642b      	str	r3, [r5, #64]	; 0x40
        if( pxCurrentTCB == NULL )
 8001bcc:	686e      	ldr	r6, [r5, #4]
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d155      	bne.n	8001c7e <xTaskCreate+0x172>
            pxCurrentTCB = pxNewTCB;
 8001bd2:	606c      	str	r4, [r5, #4]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bd4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d120      	bne.n	8001c1c <xTaskCreate+0x110>
 8001bda:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bdc:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bde:	3601      	adds	r6, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001be0:	f7ff faee 	bl	80011c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001be4:	2e0f      	cmp	r6, #15
 8001be6:	f109 0914 	add.w	r9, r9, #20
 8001bea:	d1f7      	bne.n	8001bdc <xTaskCreate+0xd0>
    vListInitialise( &xDelayedTaskList1 );
 8001bec:	4e2a      	ldr	r6, [pc, #168]	; (8001c98 <xTaskCreate+0x18c>)
 8001bee:	4630      	mov	r0, r6
    vListInitialise( &xDelayedTaskList2 );
 8001bf0:	f106 0914 	add.w	r9, r6, #20
    vListInitialise( &xDelayedTaskList1 );
 8001bf4:	f7ff fae4 	bl	80011c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001bf8:	4648      	mov	r0, r9
 8001bfa:	f7ff fae1 	bl	80011c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001bfe:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8001c02:	f7ff fadd 	bl	80011c0 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8001c06:	f5a6 70a4 	sub.w	r0, r6, #328	; 0x148
 8001c0a:	f7ff fad9 	bl	80011c0 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8001c0e:	f5a6 70b4 	sub.w	r0, r6, #360	; 0x168
 8001c12:	f7ff fad5 	bl	80011c0 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c16:	626e      	str	r6, [r5, #36]	; 0x24
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c18:	f8c5 9020 	str.w	r9, [r5, #32]
        prvAddTaskToReadyList( pxNewTCB );
 8001c1c:	2601      	movs	r6, #1
        uxTaskNumber++;
 8001c1e:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 8001c22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        uxTaskNumber++;
 8001c24:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c26:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8001c28:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 8001c2c:	68ab      	ldr	r3, [r5, #8]
 8001c2e:	fa06 f201 	lsl.w	r2, r6, r1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	2314      	movs	r3, #20
 8001c36:	434b      	muls	r3, r1
 8001c38:	18e8      	adds	r0, r5, r3
 8001c3a:	60aa      	str	r2, [r5, #8]
 8001c3c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001c3e:	4443      	add	r3, r8
 8001c40:	6891      	ldr	r1, [r2, #8]
 8001c42:	60a2      	str	r2, [r4, #8]
 8001c44:	60e1      	str	r1, [r4, #12]
 8001c46:	6891      	ldr	r1, [r2, #8]
 8001c48:	604f      	str	r7, [r1, #4]
 8001c4a:	6097      	str	r7, [r2, #8]
 8001c4c:	6163      	str	r3, [r4, #20]
 8001c4e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c50:	4433      	add	r3, r6
 8001c52:	6483      	str	r3, [r0, #72]	; 0x48
    taskEXIT_CRITICAL();
 8001c54:	f7ff fb3e 	bl	80012d4 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8001c58:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 8001c5c:	b163      	cbz	r3, 8001c78 <xTaskCreate+0x16c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c5e:	686b      	ldr	r3, [r5, #4]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <xTaskCreate+0x16c>
            taskYIELD_IF_USING_PREEMPTION();
 8001c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <xTaskCreate+0x190>)
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	f3bf 8f6f 	isb	sy
    }
 8001c78:	4630      	mov	r0, r6
 8001c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8001c7e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ca      	bne.n	8001c1c <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c86:	686b      	ldr	r3, [r5, #4]
 8001c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8001c8e:	bf28      	it	cs
 8001c90:	606c      	strcs	r4, [r5, #4]
 8001c92:	e7c3      	b.n	8001c1c <xTaskCreate+0x110>
 8001c94:	20003224 	.word	0x20003224
 8001c98:	20003398 	.word	0x20003398
 8001c9c:	e000ed04 	.word	0xe000ed04

08001ca0 <vTaskStartScheduler>:
{
 8001ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
            xReturn = xTaskCreate( prvIdleTask,
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	4c10      	ldr	r4, [pc, #64]	; (8001ce8 <vTaskStartScheduler+0x48>)
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	490f      	ldr	r1, [pc, #60]	; (8001cec <vTaskStartScheduler+0x4c>)
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	480f      	ldr	r0, [pc, #60]	; (8001cf0 <vTaskStartScheduler+0x50>)
 8001cb4:	9500      	str	r5, [sp, #0]
 8001cb6:	f7ff ff29 	bl	8001b0c <xTaskCreate>
    if( xReturn == pdPASS )
 8001cba:	2801      	cmp	r0, #1
 8001cbc:	d10f      	bne.n	8001cde <vTaskStartScheduler+0x3e>
	__asm volatile
 8001cbe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd2:	62a3      	str	r3, [r4, #40]	; 0x28
        xSchedulerRunning = pdTRUE;
 8001cd4:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001cd8:	6025      	str	r5, [r4, #0]
        if( xPortStartScheduler() != pdFALSE )
 8001cda:	f7ff fb55 	bl	8001388 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <vTaskStartScheduler+0x54>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
}
 8001ce2:	b003      	add	sp, #12
 8001ce4:	bd30      	pop	{r4, r5, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20003224 	.word	0x20003224
 8001cec:	08008238 	.word	0x08008238
 8001cf0:	08001ab9 	.word	0x08001ab9
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <vTaskSuspendAll+0x10>)
 8001cfa:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20003224 	.word	0x20003224

08001d0c <xTaskIncrementTick>:
{
 8001d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <xTaskIncrementTick+0x11c>)
 8001d12:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8001d16:	4619      	mov	r1, r3
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d17e      	bne.n	8001e1a <xTaskIncrementTick+0x10e>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d1c:	681c      	ldr	r4, [r3, #0]
 8001d1e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8001d20:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d22:	b954      	cbnz	r4, 8001d3a <xTaskIncrementTick+0x2e>
            taskSWITCH_DELAYED_LISTS();
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	6a0a      	ldr	r2, [r1, #32]
 8001d28:	624a      	str	r2, [r1, #36]	; 0x24
 8001d2a:	620b      	str	r3, [r1, #32]
 8001d2c:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001d30:	3301      	adds	r3, #1
 8001d32:	f8c1 31c4 	str.w	r3, [r1, #452]	; 0x1c4
 8001d36:	f7ff feb1 	bl	8001a9c <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001d3a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    BaseType_t xSwitchRequired = pdFALSE;
 8001d3c:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	d20f      	bcs.n	8001d62 <xTaskIncrementTick+0x56>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d42:	2214      	movs	r2, #20
 8001d44:	684b      	ldr	r3, [r1, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	fb02 1303 	mla	r3, r2, r3, r1
 8001d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    xSwitchRequired = pdTRUE;
 8001d4e:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 8001d50:	f8d1 31bc 	ldr.w	r3, [r1, #444]	; 0x1bc
                    xSwitchRequired = pdTRUE;
 8001d54:	bf28      	it	cs
 8001d56:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf18      	it	ne
 8001d5c:	2001      	movne	r0, #1
}
 8001d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    prvAddTaskToReadyList( pxTCB );
 8001d62:	f04f 0801 	mov.w	r8, #1
 8001d66:	f04f 0e14 	mov.w	lr, #20
 8001d6a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001e2c <xTaskIncrementTick+0x120>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d6e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b91b      	cbnz	r3, 8001d7c <xTaskIncrementTick+0x70>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d78:	628b      	str	r3, [r1, #40]	; 0x28
                    break;
 8001d7a:	e7e2      	b.n	8001d42 <xTaskIncrementTick+0x36>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d82:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8001d84:	4294      	cmp	r4, r2
 8001d86:	d201      	bcs.n	8001d8c <xTaskIncrementTick+0x80>
                        xNextTaskUnblockTime = xItemValue;
 8001d88:	628a      	str	r2, [r1, #40]	; 0x28
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001d8a:	e7da      	b.n	8001d42 <xTaskIncrementTick+0x36>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d8c:	695f      	ldr	r7, [r3, #20]
 8001d8e:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 8001d92:	f8c2 9008 	str.w	r9, [r2, #8]
 8001d96:	f8c9 2004 	str.w	r2, [r9, #4]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	1d1d      	adds	r5, r3, #4
 8001d9e:	42aa      	cmp	r2, r5
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	bf08      	it	eq
 8001da6:	f8c7 9004 	streq.w	r9, [r7, #4]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	3a01      	subs	r2, #1
 8001db0:	603a      	str	r2, [r7, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001db2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8001db4:	b18f      	cbz	r7, 8001dda <xTaskIncrementTick+0xce>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001db6:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 8001dba:	f8c9 2008 	str.w	r2, [r9, #8]
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	687e      	ldr	r6, [r7, #4]
 8001dc2:	f8c2 9004 	str.w	r9, [r2, #4]
 8001dc6:	f103 0918 	add.w	r9, r3, #24
 8001dca:	454e      	cmp	r6, r9
 8001dcc:	bf08      	it	eq
 8001dce:	607a      	streq	r2, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	603a      	str	r2, [r7, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001dda:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
 8001dde:	688f      	ldr	r7, [r1, #8]
 8001de0:	fa08 f20a 	lsl.w	r2, r8, sl
 8001de4:	433a      	orrs	r2, r7
 8001de6:	608a      	str	r2, [r1, #8]
 8001de8:	fb0e f20a 	mul.w	r2, lr, sl
 8001dec:	eb01 0b02 	add.w	fp, r1, r2
 8001df0:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 8001df4:	4462      	add	r2, ip
 8001df6:	68be      	ldr	r6, [r7, #8]
 8001df8:	609f      	str	r7, [r3, #8]
 8001dfa:	60de      	str	r6, [r3, #12]
 8001dfc:	68be      	ldr	r6, [r7, #8]
 8001dfe:	6075      	str	r5, [r6, #4]
 8001e00:	60bd      	str	r5, [r7, #8]
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e0e:	684b      	ldr	r3, [r1, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8001e12:	459a      	cmp	sl, r3
 8001e14:	bf28      	it	cs
 8001e16:	2001      	movcs	r0, #1
 8001e18:	e7a9      	b.n	8001d6e <xTaskIncrementTick+0x62>
        ++xPendedTicks;
 8001e1a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
    BaseType_t xSwitchRequired = pdFALSE;
 8001e1e:	2000      	movs	r0, #0
        ++xPendedTicks;
 8001e20:	3201      	adds	r2, #1
 8001e22:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    return xSwitchRequired;
 8001e26:	e79a      	b.n	8001d5e <xTaskIncrementTick+0x52>
 8001e28:	20003224 	.word	0x20003224
 8001e2c:	2000326c 	.word	0x2000326c

08001e30 <xTaskResumeAll>:
{
 8001e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        --uxSchedulerSuspended;
 8001e34:	4c3e      	ldr	r4, [pc, #248]	; (8001f30 <xTaskResumeAll+0x100>)
    taskENTER_CRITICAL();
 8001e36:	f7ff fa3d 	bl	80012b4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8001e3a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e44:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001e48:	b12b      	cbz	r3, 8001e56 <xTaskResumeAll+0x26>
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e4a:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001e4c:	f7ff fa42 	bl	80012d4 <vPortExitCritical>
}
 8001e50:	4620      	mov	r0, r4
 8001e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	d0f6      	beq.n	8001e4a <xTaskResumeAll+0x1a>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e5c:	469c      	mov	ip, r3
                    prvAddTaskToReadyList( pxTCB );
 8001e5e:	f04f 0a01 	mov.w	sl, #1
 8001e62:	f04f 0e14 	mov.w	lr, #20
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e66:	f8d4 61a8 	ldr.w	r6, [r4, #424]	; 0x1a8
                    prvAddTaskToReadyList( pxTCB );
 8001e6a:	f104 0848 	add.w	r8, r4, #72	; 0x48
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e6e:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8001e72:	b9ea      	cbnz	r2, 8001eb0 <xTaskResumeAll+0x80>
                if( pxTCB != NULL )
 8001e74:	b10b      	cbz	r3, 8001e7a <xTaskResumeAll+0x4a>
                    prvResetNextTaskUnblockTime();
 8001e76:	f7ff fe11 	bl	8001a9c <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e7a:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e7e:	b14d      	cbz	r5, 8001e94 <xTaskResumeAll+0x64>
                                xYieldPending = pdTRUE;
 8001e80:	2601      	movs	r6, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8001e82:	f7ff ff43 	bl	8001d0c <xTaskIncrementTick>
 8001e86:	b108      	cbz	r0, 8001e8c <xTaskResumeAll+0x5c>
                                xYieldPending = pdTRUE;
 8001e88:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e8c:	3d01      	subs	r5, #1
 8001e8e:	d1f8      	bne.n	8001e82 <xTaskResumeAll+0x52>
                        xPendedTicks = 0;
 8001e90:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
                if( xYieldPending != pdFALSE )
 8001e94:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0d6      	beq.n	8001e4a <xTaskResumeAll+0x1a>
                    taskYIELD_IF_USING_PREEMPTION();
 8001e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <xTaskResumeAll+0x104>)
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8001eac:	2401      	movs	r4, #1
 8001eae:	e7cd      	b.n	8001e4c <xTaskResumeAll+0x1c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb0:	68f3      	ldr	r3, [r6, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001eb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001eb4:	e9d3 7007 	ldrd	r7, r0, [r3, #28]
 8001eb8:	60b8      	str	r0, [r7, #8]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ebc:	f103 0904 	add.w	r9, r3, #4
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ec0:	6057      	str	r7, [r2, #4]
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	f103 0718 	add.w	r7, r3, #24
 8001ec8:	42ba      	cmp	r2, r7
 8001eca:	680a      	ldr	r2, [r1, #0]
 8001ecc:	bf08      	it	eq
 8001ece:	6048      	streq	r0, [r1, #4]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8001ed6:	600a      	str	r2, [r1, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ed8:	6959      	ldr	r1, [r3, #20]
 8001eda:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	684a      	ldr	r2, [r1, #4]
 8001ee2:	68d8      	ldr	r0, [r3, #12]
 8001ee4:	454a      	cmp	r2, r9
 8001ee6:	680a      	ldr	r2, [r1, #0]
 8001ee8:	6047      	str	r7, [r0, #4]
 8001eea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8001eee:	bf08      	it	eq
 8001ef0:	6048      	streq	r0, [r1, #4]
 8001ef2:	600a      	str	r2, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	68a0      	ldr	r0, [r4, #8]
 8001ef8:	fa0a f201 	lsl.w	r2, sl, r1
 8001efc:	4302      	orrs	r2, r0
 8001efe:	60a2      	str	r2, [r4, #8]
 8001f00:	fb0e f201 	mul.w	r2, lr, r1
 8001f04:	18a0      	adds	r0, r4, r2
 8001f06:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001f08:	4442      	add	r2, r8
 8001f0a:	68bd      	ldr	r5, [r7, #8]
 8001f0c:	609f      	str	r7, [r3, #8]
 8001f0e:	60dd      	str	r5, [r3, #12]
 8001f10:	68bd      	ldr	r5, [r7, #8]
 8001f12:	f8c5 9004 	str.w	r9, [r5, #4]
 8001f16:	f8c7 9008 	str.w	r9, [r7, #8]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001f1e:	3201      	adds	r2, #1
 8001f20:	6482      	str	r2, [r0, #72]	; 0x48
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f22:	6862      	ldr	r2, [r4, #4]
 8001f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f26:	4291      	cmp	r1, r2
                        xYieldPending = pdTRUE;
 8001f28:	bf28      	it	cs
 8001f2a:	f8c4 a1bc 	strcs.w	sl, [r4, #444]	; 0x1bc
 8001f2e:	e79e      	b.n	8001e6e <xTaskResumeAll+0x3e>
 8001f30:	20003224 	.word	0x20003224
 8001f34:	e000ed04 	.word	0xe000ed04

08001f38 <vTaskDelay>:
    {
 8001f38:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f3a:	b940      	cbnz	r0, 8001f4e <vTaskDelay+0x16>
            portYIELD_WITHIN_API();
 8001f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <vTaskDelay+0x2c>)
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
    }
 8001f4c:	bd08      	pop	{r3, pc}
            vTaskSuspendAll();
 8001f4e:	f7ff fed3 	bl	8001cf8 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f52:	2100      	movs	r1, #0
 8001f54:	f7ff fd60 	bl	8001a18 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8001f58:	f7ff ff6a 	bl	8001e30 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d0ed      	beq.n	8001f3c <vTaskDelay+0x4>
 8001f60:	e7f4      	b.n	8001f4c <vTaskDelay+0x14>
 8001f62:	bf00      	nop
 8001f64:	e000ed04 	.word	0xe000ed04

08001f68 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <vTaskSwitchContext+0x4c>)
{
 8001f6a:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f6c:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 8001f70:	461a      	mov	r2, r3
 8001f72:	b119      	cbz	r1, 8001f7c <vTaskSwitchContext+0x14>
        xYieldPending = pdTRUE;
 8001f74:	2201      	movs	r2, #1
 8001f76:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 8001f7a:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8001f7c:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f80:	689b      	ldr	r3, [r3, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	2014      	movs	r0, #20
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f1c3 031f 	rsb	r3, r3, #31
 8001f8e:	fb00 f103 	mul.w	r1, r0, r3
 8001f92:	1854      	adds	r4, r2, r1
 8001f94:	4621      	mov	r1, r4
 8001f96:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001f98:	3150      	adds	r1, #80	; 0x50
 8001f9a:	686d      	ldr	r5, [r5, #4]
 8001f9c:	fb00 2303 	mla	r3, r0, r3, r2
 8001fa0:	428d      	cmp	r5, r1
 8001fa2:	bf08      	it	eq
 8001fa4:	6869      	ldreq	r1, [r5, #4]
 8001fa6:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001fa8:	bf08      	it	eq
 8001faa:	64e1      	streq	r1, [r4, #76]	; 0x4c
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	6053      	str	r3, [r2, #4]
}
 8001fb2:	e7e2      	b.n	8001f7a <vTaskSwitchContext+0x12>
 8001fb4:	20003224 	.word	0x20003224

08001fb8 <vTaskPlaceOnEventList>:
{
 8001fb8:	b510      	push	{r4, lr}
 8001fba:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <vTaskPlaceOnEventList+0x1c>)
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	3118      	adds	r1, #24
 8001fc2:	f7ff f90b 	bl	80011dc <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fc6:	4620      	mov	r0, r4
}
 8001fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fcc:	2101      	movs	r1, #1
 8001fce:	f7ff bd23 	b.w	8001a18 <prvAddCurrentTaskToDelayedList>
 8001fd2:	bf00      	nop
 8001fd4:	20003224 	.word	0x20003224

08001fd8 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fd8:	68c3      	ldr	r3, [r0, #12]
{
 8001fda:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fdc:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe0:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8001fe4:	6854      	ldr	r4, [r2, #4]
 8001fe6:	6081      	str	r1, [r0, #8]
 8001fe8:	6048      	str	r0, [r1, #4]
 8001fea:	f103 0018 	add.w	r0, r3, #24
 8001fee:	4284      	cmp	r4, r0
 8001ff0:	bf08      	it	eq
 8001ff2:	6051      	streq	r1, [r2, #4]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	6299      	str	r1, [r3, #40]	; 0x28
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001ffc:	3901      	subs	r1, #1
 8001ffe:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002000:	4a20      	ldr	r2, [pc, #128]	; (8002084 <xTaskRemoveFromEventList+0xac>)
 8002002:	f8d2 11b8 	ldr.w	r1, [r2, #440]	; 0x1b8
 8002006:	2900      	cmp	r1, #0
 8002008:	d12b      	bne.n	8002062 <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800200a:	e9d3 5002 	ldrd	r5, r0, [r3, #8]
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	60a8      	str	r0, [r5, #8]
 8002012:	68d8      	ldr	r0, [r3, #12]
 8002014:	1d1e      	adds	r6, r3, #4
 8002016:	6045      	str	r5, [r0, #4]
 8002018:	684d      	ldr	r5, [r1, #4]
 800201a:	42b5      	cmp	r5, r6
 800201c:	bf08      	it	eq
 800201e:	6048      	streq	r0, [r1, #4]
 8002020:	6808      	ldr	r0, [r1, #0]
 8002022:	3801      	subs	r0, #1
 8002024:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002026:	2101      	movs	r1, #1
 8002028:	6890      	ldr	r0, [r2, #8]
 800202a:	40a1      	lsls	r1, r4
 800202c:	4301      	orrs	r1, r0
 800202e:	6091      	str	r1, [r2, #8]
 8002030:	2114      	movs	r1, #20
 8002032:	4361      	muls	r1, r4
 8002034:	1855      	adds	r5, r2, r1
 8002036:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8002038:	6887      	ldr	r7, [r0, #8]
 800203a:	6098      	str	r0, [r3, #8]
 800203c:	60df      	str	r7, [r3, #12]
 800203e:	6887      	ldr	r7, [r0, #8]
 8002040:	607e      	str	r6, [r7, #4]
 8002042:	6086      	str	r6, [r0, #8]
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <xTaskRemoveFromEventList+0xb0>)
 8002046:	4401      	add	r1, r0
 8002048:	6159      	str	r1, [r3, #20]
 800204a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800204c:	3301      	adds	r3, #1
 800204e:	64ab      	str	r3, [r5, #72]	; 0x48
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002050:	6853      	ldr	r3, [r2, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	429c      	cmp	r4, r3
        xYieldPending = pdTRUE;
 8002056:	bf8a      	itet	hi
 8002058:	2001      	movhi	r0, #1
        xReturn = pdFALSE;
 800205a:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 800205c:	f8c2 01bc 	strhi.w	r0, [r2, #444]	; 0x1bc
}
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002062:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
 8002066:	688d      	ldr	r5, [r1, #8]
 8002068:	61d9      	str	r1, [r3, #28]
 800206a:	621d      	str	r5, [r3, #32]
 800206c:	688d      	ldr	r5, [r1, #8]
 800206e:	6068      	str	r0, [r5, #4]
 8002070:	6088      	str	r0, [r1, #8]
 8002072:	f502 71ce 	add.w	r1, r2, #412	; 0x19c
 8002076:	6299      	str	r1, [r3, #40]	; 0x28
 8002078:	f8d2 319c 	ldr.w	r3, [r2, #412]	; 0x19c
 800207c:	3301      	adds	r3, #1
 800207e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8002082:	e7e5      	b.n	8002050 <xTaskRemoveFromEventList+0x78>
 8002084:	20003224 	.word	0x20003224
 8002088:	2000326c 	.word	0x2000326c

0800208c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <vTaskInternalSetTimeOutState+0x10>)
 800208e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002092:	681b      	ldr	r3, [r3, #0]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002094:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002096:	6043      	str	r3, [r0, #4]
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20003224 	.word	0x20003224

080020a0 <xTaskCheckForTimeOut>:
{
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	460d      	mov	r5, r1
 80020a4:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80020a6:	f7ff f905 	bl	80012b4 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 80020aa:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <xTaskCheckForTimeOut+0x48>)
            if( *pxTicksToWait == portMAX_DELAY )
 80020ae:	1c5a      	adds	r2, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 80020b0:	6801      	ldr	r1, [r0, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80020b2:	d017      	beq.n	80020e4 <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020b4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
 80020b8:	6826      	ldr	r6, [r4, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020ba:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020bc:	4286      	cmp	r6, r0
 80020be:	d008      	beq.n	80020d2 <xTaskCheckForTimeOut+0x32>
 80020c0:	428a      	cmp	r2, r1
 80020c2:	d806      	bhi.n	80020d2 <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 80020c4:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80020c6:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80020c8:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80020ca:	f7ff f903 	bl	80012d4 <vPortExitCritical>
}
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020d2:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80020d4:	4283      	cmp	r3, r0
 80020d6:	d9f5      	bls.n	80020c4 <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 80020d8:	1a5b      	subs	r3, r3, r1
 80020da:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 80020dc:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 80020de:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80020e0:	f7ff ffd4 	bl	800208c <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 80020e4:	2400      	movs	r4, #0
 80020e6:	e7f0      	b.n	80020ca <xTaskCheckForTimeOut+0x2a>
 80020e8:	20003224 	.word	0x20003224

080020ec <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 80020ec:	2201      	movs	r2, #1
 80020ee:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <vTaskMissedYield+0xc>)
 80020f0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20003224 	.word	0x20003224

080020fc <xTaskPriorityInherit>:
    {
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 80020fe:	4604      	mov	r4, r0
 8002100:	2800      	cmp	r0, #0
 8002102:	d039      	beq.n	8002178 <xTaskPriorityInherit+0x7c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <xTaskPriorityInherit+0x98>)
 8002106:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002108:	6851      	ldr	r1, [r2, #4]
 800210a:	4615      	mov	r5, r2
 800210c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800210e:	428b      	cmp	r3, r1
 8002110:	d238      	bcs.n	8002184 <xTaskPriorityInherit+0x88>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002112:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002114:	4e20      	ldr	r6, [pc, #128]	; (8002198 <xTaskPriorityInherit+0x9c>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002116:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002118:	bfa1      	itttt	ge
 800211a:	686a      	ldrge	r2, [r5, #4]
 800211c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800211e:	f1c2 020f 	rsbge	r2, r2, #15
 8002122:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002124:	2214      	movs	r2, #20
 8002126:	fb02 6303 	mla	r3, r2, r3, r6
 800212a:	6942      	ldr	r2, [r0, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	d124      	bne.n	800217a <xTaskPriorityInherit+0x7e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002130:	1d07      	adds	r7, r0, #4
 8002132:	4638      	mov	r0, r7
 8002134:	f7ff f869 	bl	800120a <uxListRemove>
 8002138:	b930      	cbnz	r0, 8002148 <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800213a:	2201      	movs	r2, #1
 800213c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800213e:	68ab      	ldr	r3, [r5, #8]
 8002140:	408a      	lsls	r2, r1
 8002142:	ea23 0302 	bic.w	r3, r3, r2
 8002146:	60ab      	str	r3, [r5, #8]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002148:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800214a:	686b      	ldr	r3, [r5, #4]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800214c:	68a9      	ldr	r1, [r5, #8]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002150:	fa00 f302 	lsl.w	r3, r0, r2
 8002154:	430b      	orrs	r3, r1
 8002156:	60ab      	str	r3, [r5, #8]
 8002158:	2314      	movs	r3, #20
 800215a:	4353      	muls	r3, r2
 800215c:	441d      	add	r5, r3
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800215e:	62e2      	str	r2, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002160:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8002162:	441e      	add	r6, r3
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002168:	60e1      	str	r1, [r4, #12]
 800216a:	6891      	ldr	r1, [r2, #8]
 800216c:	4403      	add	r3, r0
 800216e:	60a2      	str	r2, [r4, #8]
 8002170:	604f      	str	r7, [r1, #4]
 8002172:	6097      	str	r7, [r2, #8]
 8002174:	6166      	str	r6, [r4, #20]
 8002176:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 8002178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800217a:	686b      	ldr	r3, [r5, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	62c3      	str	r3, [r0, #44]	; 0x2c
                xReturn = pdTRUE;
 8002180:	2001      	movs	r0, #1
 8002182:	e7f9      	b.n	8002178 <xTaskPriorityInherit+0x7c>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002184:	6853      	ldr	r3, [r2, #4]
 8002186:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002188:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800218a:	42a0      	cmp	r0, r4
 800218c:	bf2c      	ite	cs
 800218e:	2000      	movcs	r0, #0
 8002190:	2001      	movcc	r0, #1
 8002192:	e7f1      	b.n	8002178 <xTaskPriorityInherit+0x7c>
 8002194:	20003224 	.word	0x20003224
 8002198:	2000326c 	.word	0x2000326c

0800219c <xTaskPriorityDisinherit>:
    {
 800219c:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 800219e:	4604      	mov	r4, r0
 80021a0:	b908      	cbnz	r0, 80021a6 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 80021a2:	2000      	movs	r0, #0
    }
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
            ( pxTCB->uxMutexesHeld )--;
 80021a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80021aa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 80021ac:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021ae:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 80021b0:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021b2:	d0f6      	beq.n	80021a2 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f4      	bne.n	80021a2 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021b8:	1d05      	adds	r5, r0, #4
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7ff f825 	bl	800120a <uxListRemove>
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <xTaskPriorityDisinherit+0x70>)
 80021c2:	b930      	cbnz	r0, 80021d2 <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80021c4:	2101      	movs	r1, #1
 80021c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4081      	lsls	r1, r0
 80021cc:	ea22 0201 	bic.w	r2, r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
                    prvAddTaskToReadyList( pxTCB );
 80021d2:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 80021d6:	689e      	ldr	r6, [r3, #8]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021d8:	f1c1 020f 	rsb	r2, r1, #15
 80021dc:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 80021de:	fa00 f201 	lsl.w	r2, r0, r1
 80021e2:	4332      	orrs	r2, r6
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	2214      	movs	r2, #20
 80021e8:	434a      	muls	r2, r1
 80021ea:	4413      	add	r3, r2
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021ec:	62e1      	str	r1, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 80021ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021f0:	688e      	ldr	r6, [r1, #8]
 80021f2:	60a1      	str	r1, [r4, #8]
 80021f4:	60e6      	str	r6, [r4, #12]
 80021f6:	688e      	ldr	r6, [r1, #8]
 80021f8:	6075      	str	r5, [r6, #4]
 80021fa:	608d      	str	r5, [r1, #8]
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <xTaskPriorityDisinherit+0x74>)
 80021fe:	440a      	add	r2, r1
 8002200:	6162      	str	r2, [r4, #20]
 8002202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002204:	4402      	add	r2, r0
 8002206:	649a      	str	r2, [r3, #72]	; 0x48
        return xReturn;
 8002208:	e7cc      	b.n	80021a4 <xTaskPriorityDisinherit+0x8>
 800220a:	bf00      	nop
 800220c:	20003224 	.word	0x20003224
 8002210:	2000326c 	.word	0x2000326c

08002214 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8002216:	4604      	mov	r4, r0
 8002218:	2800      	cmp	r0, #0
 800221a:	d03a      	beq.n	8002292 <vTaskPriorityDisinheritAfterTimeout+0x7e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800221c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800221e:	4299      	cmp	r1, r3
 8002220:	bf38      	it	cc
 8002222:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002224:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002226:	428b      	cmp	r3, r1
 8002228:	d033      	beq.n	8002292 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800222a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800222c:	2a01      	cmp	r2, #1
 800222e:	d130      	bne.n	8002292 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002230:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002232:	4d18      	ldr	r5, [pc, #96]	; (8002294 <vTaskPriorityDisinheritAfterTimeout+0x80>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002234:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002236:	f04f 0214 	mov.w	r2, #20
 800223a:	f105 0648 	add.w	r6, r5, #72	; 0x48
 800223e:	fb02 6303 	mla	r3, r2, r3, r6
 8002242:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002244:	62c1      	str	r1, [r0, #44]	; 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002246:	bfa4      	itt	ge
 8002248:	f1c1 010f 	rsbge	r1, r1, #15
 800224c:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800224e:	429a      	cmp	r2, r3
 8002250:	d11f      	bne.n	8002292 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002252:	1d07      	adds	r7, r0, #4
 8002254:	4638      	mov	r0, r7
 8002256:	f7fe ffd8 	bl	800120a <uxListRemove>
 800225a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800225c:	b928      	cbnz	r0, 800226a <vTaskPriorityDisinheritAfterTimeout+0x56>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800225e:	2101      	movs	r1, #1
 8002260:	68ab      	ldr	r3, [r5, #8]
 8002262:	4091      	lsls	r1, r2
 8002264:	ea23 0301 	bic.w	r3, r3, r1
 8002268:	60ab      	str	r3, [r5, #8]
                        prvAddTaskToReadyList( pxTCB );
 800226a:	2301      	movs	r3, #1
 800226c:	68a9      	ldr	r1, [r5, #8]
 800226e:	4093      	lsls	r3, r2
 8002270:	430b      	orrs	r3, r1
 8002272:	60ab      	str	r3, [r5, #8]
 8002274:	2314      	movs	r3, #20
 8002276:	4353      	muls	r3, r2
 8002278:	441d      	add	r5, r3
 800227a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800227c:	441e      	add	r6, r3
 800227e:	6891      	ldr	r1, [r2, #8]
 8002280:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002282:	60e1      	str	r1, [r4, #12]
 8002284:	6891      	ldr	r1, [r2, #8]
 8002286:	3301      	adds	r3, #1
 8002288:	60a2      	str	r2, [r4, #8]
 800228a:	604f      	str	r7, [r1, #4]
 800228c:	6097      	str	r7, [r2, #8]
 800228e:	6166      	str	r6, [r4, #20]
 8002290:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 8002292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002294:	20003224 	.word	0x20003224

08002298 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <pvTaskIncrementMutexHeldCount+0x14>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	b11a      	cbz	r2, 80022a6 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80022a2:	3201      	adds	r2, #1
 80022a4:	650a      	str	r2, [r1, #80]	; 0x50
        return pxCurrentTCB;
 80022a6:	6858      	ldr	r0, [r3, #4]
    }
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20003224 	.word	0x20003224

080022b0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <NVIC_PriorityGroupConfig+0x10>)
 80022b2:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80022b6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80022ba:	60d8      	str	r0, [r3, #12]
}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	2501      	movs	r5, #1
 80022c8:	7801      	ldrb	r1, [r0, #0]
 80022ca:	f001 031f 	and.w	r3, r1, #31
 80022ce:	409d      	lsls	r5, r3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80022d0:	78c3      	ldrb	r3, [r0, #3]
 80022d2:	094c      	lsrs	r4, r1, #5
 80022d4:	b1c3      	cbz	r3, 8002308 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <NVIC_Init+0x50>)
 80022d8:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80022da:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80022dc:	43d2      	mvns	r2, r2
 80022de:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80022e2:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80022e6:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80022ea:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 80022ec:	200f      	movs	r0, #15
 80022ee:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80022f2:	4013      	ands	r3, r2
 80022f4:	4333      	orrs	r3, r6
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 80022f8:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4411      	add	r1, r2
 80022fe:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002302:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002306:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <NVIC_Init+0x54>)
 800230a:	3420      	adds	r4, #32
 800230c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 8002310:	e7f9      	b.n	8002306 <NVIC_Init+0x42>
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	e000e100 	.word	0xe000e100

0800231c <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800231c:	4a03      	ldr	r2, [pc, #12]	; (800232c <FLASH_SetLatency+0x10>)
 800231e:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8002320:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8002324:	4303      	orrs	r3, r0
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000

08002330 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <FLASH_PrefetchBufferCmd+0x14>)
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	f021 0110 	bic.w	r1, r1, #16
 8002338:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4302      	orrs	r2, r0
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000

08002348 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800234c:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800234e:	880e      	ldrh	r6, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002350:	06da      	lsls	r2, r3, #27
 8002352:	bf48      	it	mi
 8002354:	788a      	ldrbmi	r2, [r1, #2]
 8002356:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800235a:	bf48      	it	mi
 800235c:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800235e:	780a      	ldrb	r2, [r1, #0]
 8002360:	b1d2      	cbz	r2, 8002398 <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002362:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002364:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8002368:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 800236c:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 800236e:	fa0c f701 	lsl.w	r7, ip, r1
      if (currentpin == pos)
 8002372:	ea37 0406 	bics.w	r4, r7, r6
 8002376:	d10b      	bne.n	8002390 <GPIO_Init+0x48>
        pos = pinpos << 2;
 8002378:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 800237a:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 800237e:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002382:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002386:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8002388:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800238c:	d124      	bne.n	80023d8 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800238e:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002390:	3101      	adds	r1, #1
 8002392:	2908      	cmp	r1, #8
 8002394:	d1eb      	bne.n	800236e <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002396:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002398:	2eff      	cmp	r6, #255	; 0xff
 800239a:	d91b      	bls.n	80023d4 <GPIO_Init+0x8c>
  {
    tmpreg = GPIOx->CRH;
 800239c:	2408      	movs	r4, #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800239e:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80023a2:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 80023a6:	6841      	ldr	r1, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80023a8:	fa0c f704 	lsl.w	r7, ip, r4
      if (currentpin == pos)
 80023ac:	ea37 0206 	bics.w	r2, r7, r6
 80023b0:	d10c      	bne.n	80023cc <GPIO_Init+0x84>
        pos = pinpos << 2;
 80023b2:	00a2      	lsls	r2, r4, #2
 80023b4:	3a20      	subs	r2, #32
        pinmask = ((uint32_t)0x0F) << pos;
 80023b6:	fa0e f802 	lsl.w	r8, lr, r2
        tmpreg &= ~pinmask;
 80023ba:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80023be:	fa05 f202 	lsl.w	r2, r5, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80023c2:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 80023c4:	ea41 0102 	orr.w	r1, r1, r2
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80023c8:	d10a      	bne.n	80023e0 <GPIO_Init+0x98>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80023ca:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80023cc:	3401      	adds	r4, #1
 80023ce:	2c10      	cmp	r4, #16
 80023d0:	d1ea      	bne.n	80023a8 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80023d2:	6041      	str	r1, [r0, #4]
  }
}
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80023d8:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80023da:	bf08      	it	eq
 80023dc:	6107      	streq	r7, [r0, #16]
 80023de:	e7d7      	b.n	8002390 <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80023e0:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80023e2:	bf08      	it	eq
 80023e4:	6107      	streq	r7, [r0, #16]
 80023e6:	e7f1      	b.n	80023cc <GPIO_Init+0x84>

080023e8 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <RCC_DeInit+0x38>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <RCC_DeInit+0x3c>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002404:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002414:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002416:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800241a:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	f8ff0000 	.word	0xf8ff0000

08002428 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800242a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002434:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800243c:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 800243e:	d003      	beq.n	8002448 <RCC_HSEConfig+0x20>
 8002440:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002444:	d005      	beq.n	8002452 <RCC_HSEConfig+0x2a>
 8002446:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800244e:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 8002450:	4770      	bx	lr
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8002458:	e7f9      	b.n	800244e <RCC_HSEConfig+0x26>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <RCC_PLLConfig+0x10>)
 8002462:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8002464:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002468:	430b      	orrs	r3, r1
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800246a:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800246c:	6053      	str	r3, [r2, #4]
}
 800246e:	4770      	bx	lr
 8002470:	40021000 	.word	0x40021000

08002474 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8002474:	4b01      	ldr	r3, [pc, #4]	; (800247c <RCC_PLLCmd+0x8>)
 8002476:	6018      	str	r0, [r3, #0]
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	42420060 	.word	0x42420060

08002480 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8002480:	4a03      	ldr	r2, [pc, #12]	; (8002490 <RCC_SYSCLKConfig+0x10>)
 8002482:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8002484:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002488:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800248a:	6053      	str	r3, [r2, #4]
}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000

08002494 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <RCC_GetSYSCLKSource+0xc>)
 8002496:	6858      	ldr	r0, [r3, #4]
}
 8002498:	f000 000c 	and.w	r0, r0, #12
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000

080024a4 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <RCC_HCLKConfig+0x10>)
 80024a6:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80024a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80024ac:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80024ae:	6053      	str	r3, [r2, #4]
}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000

080024b8 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <RCC_PCLK1Config+0x10>)
 80024ba:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80024bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80024c0:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80024c2:	6053      	str	r3, [r2, #4]
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <RCC_PCLK2Config+0x10>)
 80024ce:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80024d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80024d4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80024d8:	6053      	str	r3, [r2, #4]
}
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000

080024e0 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <RCC_GetClocksFreq+0x78>)
{
 80024e2:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80024e4:	6853      	ldr	r3, [r2, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d021      	beq.n	8002532 <RCC_GetClocksFreq+0x52>
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d021      	beq.n	8002536 <RCC_GetClocksFreq+0x56>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <RCC_GetClocksFreq+0x7c>)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80024f4:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80024f6:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80024f8:	4919      	ldr	r1, [pc, #100]	; (8002560 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 80024fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80024fe:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	40e3      	lsrs	r3, r4
 8002504:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002506:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8002508:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 800250c:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800250e:	fa23 f404 	lsr.w	r4, r3, r4
 8002512:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002514:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8002516:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 800251a:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800251c:	40e3      	lsrs	r3, r4
 800251e:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002520:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8002522:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002526:	4411      	add	r1, r2
 8002528:	7c0a      	ldrb	r2, [r1, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800252a:	fbb3 f3f2 	udiv	r3, r3, r2
 800252e:	6103      	str	r3, [r0, #16]
}
 8002530:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <RCC_GetClocksFreq+0x84>)
 8002534:	e7de      	b.n	80024f4 <RCC_GetClocksFreq+0x14>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8002536:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8002538:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 800253a:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 800253e:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8002540:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8002544:	d402      	bmi.n	800254c <RCC_GetClocksFreq+0x6c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <RCC_GetClocksFreq+0x88>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002548:	434b      	muls	r3, r1
 800254a:	e7d3      	b.n	80024f4 <RCC_GetClocksFreq+0x14>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800254c:	6851      	ldr	r1, [r2, #4]
 800254e:	0389      	lsls	r1, r1, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8002550:	bf4c      	ite	mi
 8002552:	4906      	ldrmi	r1, [pc, #24]	; (800256c <RCC_GetClocksFreq+0x8c>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002554:	4903      	ldrpl	r1, [pc, #12]	; (8002564 <RCC_GetClocksFreq+0x84>)
 8002556:	e7f7      	b.n	8002548 <RCC_GetClocksFreq+0x68>
 8002558:	40021000 	.word	0x40021000
 800255c:	007a1200 	.word	0x007a1200
 8002560:	2000000c 	.word	0x2000000c
 8002564:	00b71b00 	.word	0x00b71b00
 8002568:	003d0900 	.word	0x003d0900
 800256c:	005b8d80 	.word	0x005b8d80

08002570 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002572:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 8002574:	b111      	cbz	r1, 800257c <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 8002576:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002578:	6198      	str	r0, [r3, #24]
  }
}
 800257a:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800257c:	ea22 0000 	bic.w	r0, r2, r0
 8002580:	e7fa      	b.n	8002578 <RCC_APB2PeriphClockCmd+0x8>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800258a:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 800258c:	b111      	cbz	r1, 8002594 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 800258e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002590:	61d8      	str	r0, [r3, #28]
  }
}
 8002592:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002594:	ea22 0000 	bic.w	r0, r2, r0
 8002598:	e7fa      	b.n	8002590 <RCC_APB1PeriphClockCmd+0x8>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <RCC_APB2PeriphResetCmd+0x14>)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80025a2:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 80025a4:	b111      	cbz	r1, 80025ac <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 80025a6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80025a8:	60d8      	str	r0, [r3, #12]
  }
}
 80025aa:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80025ac:	ea22 0000 	bic.w	r0, r2, r0
 80025b0:	e7fa      	b.n	80025a8 <RCC_APB2PeriphResetCmd+0x8>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <RCC_APB1PeriphResetCmd+0x14>)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80025ba:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 80025bc:	b111      	cbz	r1, 80025c4 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 80025be:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80025c0:	6118      	str	r0, [r3, #16]
  }
}
 80025c2:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80025c4:	ea22 0000 	bic.w	r0, r2, r0
 80025c8:	e7fa      	b.n	80025c0 <RCC_APB1PeriphResetCmd+0x8>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000

080025d0 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80025d0:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80025d2:	2a01      	cmp	r2, #1
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <RCC_GetFlagStatus+0x24>)
 80025d6:	d107      	bne.n	80025e8 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 80025d8:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80025da:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80025de:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 80025e2:	f000 0001 	and.w	r0, r0, #1
 80025e6:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80025e8:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 80025ea:	bf0c      	ite	eq
 80025ec:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 80025ee:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80025f0:	e7f3      	b.n	80025da <RCC_GetFlagStatus+0xa>
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <RCC_WaitForHSEStartUp>:
  __IO uint32_t StartUpCounter = 0;
 80025f8:	2300      	movs	r3, #0
{
 80025fa:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 80025fc:	9301      	str	r3, [sp, #4]
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80025fe:	2031      	movs	r0, #49	; 0x31
 8002600:	f7ff ffe6 	bl	80025d0 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002604:	9b01      	ldr	r3, [sp, #4]
 8002606:	3301      	adds	r3, #1
 8002608:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800260a:	9b01      	ldr	r3, [sp, #4]
 800260c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002610:	d001      	beq.n	8002616 <RCC_WaitForHSEStartUp+0x1e>
 8002612:	2800      	cmp	r0, #0
 8002614:	d0f3      	beq.n	80025fe <RCC_WaitForHSEStartUp+0x6>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002616:	2031      	movs	r0, #49	; 0x31
 8002618:	f7ff ffda 	bl	80025d0 <RCC_GetFlagStatus>
}
 800261c:	3800      	subs	r0, #0
 800261e:	bf18      	it	ne
 8002620:	2001      	movne	r0, #1
 8002622:	b003      	add	sp, #12
 8002624:	f85d fb04 	ldr.w	pc, [sp], #4

08002628 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002628:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800262a:	8c06      	ldrh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800262c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002630:	f026 0601 	bic.w	r6, r6, #1
 8002634:	0436      	lsls	r6, r6, #16
 8002636:	0c36      	lsrs	r6, r6, #16
 8002638:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263a:	8b04      	ldrh	r4, [r0, #24]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <TI1_Config+0x6c>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800263e:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8002642:	0424      	lsls	r4, r4, #16
  tmpccer = TIMx->CCER;
 8002644:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002646:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002648:	4314      	orrs	r4, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800264a:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 800264c:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800264e:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002650:	d012      	beq.n	8002678 <TI1_Config+0x50>
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	4298      	cmp	r0, r3
 8002658:	d00e      	beq.n	8002678 <TI1_Config+0x50>
 800265a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800265e:	d00b      	beq.n	8002678 <TI1_Config+0x50>
 8002660:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002664:	4298      	cmp	r0, r3
 8002666:	d007      	beq.n	8002678 <TI1_Config+0x50>
 8002668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266c:	4298      	cmp	r0, r3
 800266e:	d003      	beq.n	8002678 <TI1_Config+0x50>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002674:	4298      	cmp	r0, r3
 8002676:	d108      	bne.n	800268a <TI1_Config+0x62>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8002678:	f025 0302 	bic.w	r3, r5, #2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800267c:	ea41 0503 	orr.w	r5, r1, r3
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002680:	f045 0501 	orr.w	r5, r5, #1
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002684:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002686:	8405      	strh	r5, [r0, #32]
}
 8002688:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800268a:	f025 050a 	bic.w	r5, r5, #10
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800268e:	430d      	orrs	r5, r1
 8002690:	e7f6      	b.n	8002680 <TI1_Config+0x58>
 8002692:	bf00      	nop
 8002694:	40012c00 	.word	0x40012c00

08002698 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002698:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800269a:	8c04      	ldrh	r4, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800269c:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800269e:	f024 0410 	bic.w	r4, r4, #16
 80026a2:	0424      	lsls	r4, r4, #16
 80026a4:	0c24      	lsrs	r4, r4, #16
 80026a6:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a8:	8b05      	ldrh	r5, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80026aa:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80026ae:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <TI2_Config+0x70>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80026b4:	052d      	lsls	r5, r5, #20
  tmpccer = TIMx->CCER;
 80026b6:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80026b8:	0d2d      	lsrs	r5, r5, #20
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80026ba:	010e      	lsls	r6, r1, #4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80026bc:	4315      	orrs	r5, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80026be:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 80026c0:	b2a4      	uxth	r4, r4
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80026c2:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80026c4:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80026c6:	d012      	beq.n	80026ee <TI2_Config+0x56>
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	4298      	cmp	r0, r3
 80026ce:	d00e      	beq.n	80026ee <TI2_Config+0x56>
 80026d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026d4:	d00b      	beq.n	80026ee <TI2_Config+0x56>
 80026d6:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80026da:	4298      	cmp	r0, r3
 80026dc:	d007      	beq.n	80026ee <TI2_Config+0x56>
 80026de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e2:	4298      	cmp	r0, r3
 80026e4:	d003      	beq.n	80026ee <TI2_Config+0x56>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80026e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ea:	4298      	cmp	r0, r3
 80026ec:	d108      	bne.n	8002700 <TI2_Config+0x68>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 80026ee:	f024 0420 	bic.w	r4, r4, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80026f2:	ea46 0104 	orr.w	r1, r6, r4
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80026f6:	f041 0110 	orr.w	r1, r1, #16
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026fa:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 80026fc:	8401      	strh	r1, [r0, #32]
}
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002700:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8002704:	4321      	orrs	r1, r4
 8002706:	e7f6      	b.n	80026f6 <TI2_Config+0x5e>
 8002708:	40012c00 	.word	0x40012c00

0800270c <TIM_DeInit>:
{
 800270c:	b508      	push	{r3, lr}
  if (TIMx == TIM1)
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <TIM_DeInit+0x188>)
 8002710:	4298      	cmp	r0, r3
 8002712:	d10b      	bne.n	800272c <TIM_DeInit+0x20>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002714:	2101      	movs	r1, #1
 8002716:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800271a:	f7ff ff41 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800271e:	2100      	movs	r1, #0
 8002720:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002728:	f7ff bf3a 	b.w	80025a0 <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 800272c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002730:	d109      	bne.n	8002746 <TIM_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002732:	2101      	movs	r1, #1
 8002734:	4608      	mov	r0, r1
 8002736:	f7ff ff3f 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800273a:	2100      	movs	r1, #0
 800273c:	2001      	movs	r0, #1
}
 800273e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002742:	f7ff bf39 	b.w	80025b8 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <TIM_DeInit+0x18c>)
 8002748:	4298      	cmp	r0, r3
 800274a:	d106      	bne.n	800275a <TIM_DeInit+0x4e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800274c:	2101      	movs	r1, #1
 800274e:	2002      	movs	r0, #2
 8002750:	f7ff ff32 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002754:	2100      	movs	r1, #0
 8002756:	2002      	movs	r0, #2
 8002758:	e7f1      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM4)
 800275a:	4b50      	ldr	r3, [pc, #320]	; (800289c <TIM_DeInit+0x190>)
 800275c:	4298      	cmp	r0, r3
 800275e:	d106      	bne.n	800276e <TIM_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002760:	2101      	movs	r1, #1
 8002762:	2004      	movs	r0, #4
 8002764:	f7ff ff28 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002768:	2100      	movs	r1, #0
 800276a:	2004      	movs	r0, #4
 800276c:	e7e7      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM5)
 800276e:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <TIM_DeInit+0x194>)
 8002770:	4298      	cmp	r0, r3
 8002772:	d106      	bne.n	8002782 <TIM_DeInit+0x76>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002774:	2101      	movs	r1, #1
 8002776:	2008      	movs	r0, #8
 8002778:	f7ff ff1e 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800277c:	2100      	movs	r1, #0
 800277e:	2008      	movs	r0, #8
 8002780:	e7dd      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <TIM_DeInit+0x198>)
 8002784:	4298      	cmp	r0, r3
 8002786:	d106      	bne.n	8002796 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002788:	2101      	movs	r1, #1
 800278a:	2010      	movs	r0, #16
 800278c:	f7ff ff14 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002790:	2100      	movs	r1, #0
 8002792:	2010      	movs	r0, #16
 8002794:	e7d3      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM7)
 8002796:	4b44      	ldr	r3, [pc, #272]	; (80028a8 <TIM_DeInit+0x19c>)
 8002798:	4298      	cmp	r0, r3
 800279a:	d106      	bne.n	80027aa <TIM_DeInit+0x9e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800279c:	2101      	movs	r1, #1
 800279e:	2020      	movs	r0, #32
 80027a0:	f7ff ff0a 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80027a4:	2100      	movs	r1, #0
 80027a6:	2020      	movs	r0, #32
 80027a8:	e7c9      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM8)
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <TIM_DeInit+0x1a0>)
 80027ac:	4298      	cmp	r0, r3
 80027ae:	d108      	bne.n	80027c2 <TIM_DeInit+0xb6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80027b0:	2101      	movs	r1, #1
 80027b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027b6:	f7ff fef3 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80027ba:	2100      	movs	r1, #0
 80027bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027c0:	e7b0      	b.n	8002724 <TIM_DeInit+0x18>
  else if (TIMx == TIM9)
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <TIM_DeInit+0x1a4>)
 80027c4:	4298      	cmp	r0, r3
 80027c6:	d108      	bne.n	80027da <TIM_DeInit+0xce>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80027c8:	2101      	movs	r1, #1
 80027ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027ce:	f7ff fee7 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80027d2:	2100      	movs	r1, #0
 80027d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027d8:	e7a4      	b.n	8002724 <TIM_DeInit+0x18>
  else if (TIMx == TIM10)
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <TIM_DeInit+0x1a8>)
 80027dc:	4298      	cmp	r0, r3
 80027de:	d108      	bne.n	80027f2 <TIM_DeInit+0xe6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80027e0:	2101      	movs	r1, #1
 80027e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027e6:	f7ff fedb 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80027ea:	2100      	movs	r1, #0
 80027ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027f0:	e798      	b.n	8002724 <TIM_DeInit+0x18>
  else if (TIMx == TIM11) 
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <TIM_DeInit+0x1ac>)
 80027f4:	4298      	cmp	r0, r3
 80027f6:	d108      	bne.n	800280a <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80027f8:	2101      	movs	r1, #1
 80027fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027fe:	f7ff fecf 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002802:	2100      	movs	r1, #0
 8002804:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002808:	e78c      	b.n	8002724 <TIM_DeInit+0x18>
  else if (TIMx == TIM12)
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <TIM_DeInit+0x1b0>)
 800280c:	4298      	cmp	r0, r3
 800280e:	d106      	bne.n	800281e <TIM_DeInit+0x112>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002810:	2101      	movs	r1, #1
 8002812:	2040      	movs	r0, #64	; 0x40
 8002814:	f7ff fed0 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002818:	2100      	movs	r1, #0
 800281a:	2040      	movs	r0, #64	; 0x40
 800281c:	e78f      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM13) 
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <TIM_DeInit+0x1b4>)
 8002820:	4298      	cmp	r0, r3
 8002822:	d106      	bne.n	8002832 <TIM_DeInit+0x126>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002824:	2101      	movs	r1, #1
 8002826:	2080      	movs	r0, #128	; 0x80
 8002828:	f7ff fec6 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800282c:	2100      	movs	r1, #0
 800282e:	2080      	movs	r0, #128	; 0x80
 8002830:	e785      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <TIM_DeInit+0x1b8>)
 8002834:	4298      	cmp	r0, r3
 8002836:	d108      	bne.n	800284a <TIM_DeInit+0x13e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002838:	2101      	movs	r1, #1
 800283a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800283e:	f7ff febb 	bl	80025b8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002842:	2100      	movs	r1, #0
 8002844:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002848:	e779      	b.n	800273e <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <TIM_DeInit+0x1bc>)
 800284c:	4298      	cmp	r0, r3
 800284e:	d108      	bne.n	8002862 <TIM_DeInit+0x156>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8002850:	2101      	movs	r1, #1
 8002852:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002856:	f7ff fea3 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800285a:	2100      	movs	r1, #0
 800285c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002860:	e760      	b.n	8002724 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <TIM_DeInit+0x1c0>)
 8002864:	4298      	cmp	r0, r3
 8002866:	d108      	bne.n	800287a <TIM_DeInit+0x16e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002868:	2101      	movs	r1, #1
 800286a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800286e:	f7ff fe97 	bl	80025a0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8002872:	2100      	movs	r1, #0
 8002874:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002878:	e754      	b.n	8002724 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <TIM_DeInit+0x1c4>)
 800287c:	4298      	cmp	r0, r3
 800287e:	d108      	bne.n	8002892 <TIM_DeInit+0x186>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002880:	2101      	movs	r1, #1
 8002882:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002886:	f7ff fe8b 	bl	80025a0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800288a:	2100      	movs	r1, #0
 800288c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002890:	e748      	b.n	8002724 <TIM_DeInit+0x18>
}
 8002892:	bd08      	pop	{r3, pc}
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40001000 	.word	0x40001000
 80028a8:	40001400 	.word	0x40001400
 80028ac:	40013400 	.word	0x40013400
 80028b0:	40014c00 	.word	0x40014c00
 80028b4:	40015000 	.word	0x40015000
 80028b8:	40015400 	.word	0x40015400
 80028bc:	40001800 	.word	0x40001800
 80028c0:	40001c00 	.word	0x40001c00
 80028c4:	40002000 	.word	0x40002000
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <TIM_TimeBaseInit>:
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <TIM_TimeBaseInit+0x8c>)
  tmpcr1 = TIMx->CR1;  
 80028d6:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80028d8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80028da:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80028dc:	d012      	beq.n	8002904 <TIM_TimeBaseInit+0x30>
 80028de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e2:	4290      	cmp	r0, r2
 80028e4:	d00e      	beq.n	8002904 <TIM_TimeBaseInit+0x30>
 80028e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028ea:	d00b      	beq.n	8002904 <TIM_TimeBaseInit+0x30>
 80028ec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80028f0:	4290      	cmp	r0, r2
 80028f2:	d007      	beq.n	8002904 <TIM_TimeBaseInit+0x30>
 80028f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f8:	4290      	cmp	r0, r2
 80028fa:	d003      	beq.n	8002904 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80028fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002900:	4290      	cmp	r0, r2
 8002902:	d103      	bne.n	800290c <TIM_TimeBaseInit+0x38>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002904:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800290a:	4313      	orrs	r3, r2
  if((TIMx != TIM6) && (TIMx != TIM7))
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <TIM_TimeBaseInit+0x90>)
 800290e:	4290      	cmp	r0, r2
 8002910:	d008      	beq.n	8002924 <TIM_TimeBaseInit+0x50>
 8002912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002916:	4290      	cmp	r0, r2
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002918:	bf1f      	itttt	ne
 800291a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800291e:	88ca      	ldrhne	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002920:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002922:	4313      	orrne	r3, r2
  TIMx->CR1 = tmpcr1;
 8002924:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002926:	888b      	ldrh	r3, [r1, #4]
 8002928:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800292a:	880b      	ldrh	r3, [r1, #0]
 800292c:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <TIM_TimeBaseInit+0x8c>)
 8002930:	4298      	cmp	r0, r3
 8002932:	d00f      	beq.n	8002954 <TIM_TimeBaseInit+0x80>
 8002934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002938:	4298      	cmp	r0, r3
 800293a:	d00b      	beq.n	8002954 <TIM_TimeBaseInit+0x80>
 800293c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002940:	4298      	cmp	r0, r3
 8002942:	d007      	beq.n	8002954 <TIM_TimeBaseInit+0x80>
 8002944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002948:	4298      	cmp	r0, r3
 800294a:	d003      	beq.n	8002954 <TIM_TimeBaseInit+0x80>
 800294c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002950:	4298      	cmp	r0, r3
 8002952:	d101      	bne.n	8002958 <TIM_TimeBaseInit+0x84>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002954:	7a0b      	ldrb	r3, [r1, #8]
 8002956:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002958:	2301      	movs	r3, #1
 800295a:	8283      	strh	r3, [r0, #20]
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40001000 	.word	0x40001000

08002968 <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002968:	8c03      	ldrh	r3, [r0, #32]
{
 800296a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002976:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002978:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800297a:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800297c:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800297e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002982:	0412      	lsls	r2, r2, #16
 8002984:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002986:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002988:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800298a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800298e:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002990:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002992:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002994:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002996:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002998:	4d14      	ldr	r5, [pc, #80]	; (80029ec <TIM_OC1Init+0x84>)
  tmpcr2 =  TIMx->CR2;
 800299a:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800299c:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800299e:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80029a0:	d00f      	beq.n	80029c2 <TIM_OC1Init+0x5a>
 80029a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80029a6:	42a8      	cmp	r0, r5
 80029a8:	d00b      	beq.n	80029c2 <TIM_OC1Init+0x5a>
 80029aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80029ae:	42a8      	cmp	r0, r5
 80029b0:	d007      	beq.n	80029c2 <TIM_OC1Init+0x5a>
 80029b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d003      	beq.n	80029c2 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80029ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029be:	42a8      	cmp	r0, r5
 80029c0:	d10e      	bne.n	80029e0 <TIM_OC1Init+0x78>
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80029c2:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80029c4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80029c8:	432b      	orrs	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80029ca:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80029cc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80029d0:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80029d2:	432b      	orrs	r3, r5
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80029d4:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80029d6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80029da:	4335      	orrs	r5, r6
 80029dc:	432c      	orrs	r4, r5
 80029de:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 80029e0:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80029e2:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80029e4:	88ca      	ldrh	r2, [r1, #6]
 80029e6:	8682      	strh	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80029e8:	8403      	strh	r3, [r0, #32]
}
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	40012c00 	.word	0x40012c00

080029f0 <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80029f0:	8c03      	ldrh	r3, [r0, #32]
{
 80029f2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80029f4:	f023 0310 	bic.w	r3, r3, #16
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	0c1b      	lsrs	r3, r3, #16
 80029fc:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80029fe:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a00:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a02:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a04:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8002a06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002a0a:	0412      	lsls	r2, r2, #16
 8002a0c:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002a12:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002a14:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002a16:	f023 0320 	bic.w	r3, r3, #32
 8002a1a:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002a1c:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002a1e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002a20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a24:	4d11      	ldr	r5, [pc, #68]	; (8002a6c <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 8002a26:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a28:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a2a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002a2c:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a2e:	d003      	beq.n	8002a38 <TIM_OC2Init+0x48>
 8002a30:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a34:	42a8      	cmp	r0, r5
 8002a36:	d113      	bne.n	8002a60 <TIM_OC2Init+0x70>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002a38:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8002a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002a3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002a42:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8002a46:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002a48:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002a4a:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002a4c:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002a50:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002a52:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002a56:	4335      	orrs	r5, r6
 8002a58:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002a5c:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002a5e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002a60:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a62:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002a64:	88ca      	ldrh	r2, [r1, #6]
 8002a66:	8702      	strh	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002a68:	8403      	strh	r3, [r0, #32]
}
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	40012c00 	.word	0x40012c00

08002a70 <TIM_OC3Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002a70:	8c03      	ldrh	r3, [r0, #32]
{
 8002a72:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a7e:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a80:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002a82:	8b84      	ldrh	r4, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002a84:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002a86:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002a8a:	0424      	lsls	r4, r4, #16
 8002a8c:	0c24      	lsrs	r4, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002a8e:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002a90:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002a92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002a96:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002a98:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002a9a:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002a9c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002a9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002aa2:	4d11      	ldr	r5, [pc, #68]	; (8002ae8 <TIM_OC3Init+0x78>)
  tmpcr2 =  TIMx->CR2;
 8002aa4:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002aa6:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002aa8:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002aaa:	d003      	beq.n	8002ab4 <TIM_OC3Init+0x44>
 8002aac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ab0:	42a8      	cmp	r0, r5
 8002ab2:	d113      	bne.n	8002adc <TIM_OC3Init+0x6c>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002ab4:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002aba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002abe:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8002ac2:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002ac4:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002ac6:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002ac8:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002acc:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002ace:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002ad2:	4335      	orrs	r5, r6
 8002ad4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002ad8:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002ada:	b292      	uxth	r2, r2
  TIMx->CR2 = tmpcr2;
 8002adc:	8082      	strh	r2, [r0, #4]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002ade:	88ca      	ldrh	r2, [r1, #6]
  TIMx->CCMR2 = tmpccmrx;
 8002ae0:	8384      	strh	r4, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002ae2:	8782      	strh	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002ae4:	8403      	strh	r3, [r0, #32]
}
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002aec:	8c03      	ldrh	r3, [r0, #32]
{
 8002aee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002afa:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002afc:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002afe:	8b82      	ldrh	r2, [r0, #28]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b00:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002b02:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002b06:	0412      	lsls	r2, r2, #16
 8002b08:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002b0e:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002b10:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b16:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002b18:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002b1a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002b1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b20:	4d0b      	ldr	r5, [pc, #44]	; (8002b50 <TIM_OC4Init+0x64>)
  tmpcr2 =  TIMx->CR2;
 8002b22:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b24:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b26:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002b28:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b2a:	d003      	beq.n	8002b34 <TIM_OC4Init+0x48>
 8002b2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b30:	42a8      	cmp	r0, r5
 8002b32:	d105      	bne.n	8002b40 <TIM_OC4Init+0x54>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002b34:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8002b36:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002b3a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002b3e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002b40:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b42:	8382      	strh	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002b44:	88ca      	ldrh	r2, [r1, #6]
 8002b46:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002b4a:	8403      	strh	r3, [r0, #32]
}
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002b54:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002b56:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002b58:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002b5a:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002b5c:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002b5e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002b60:	8103      	strh	r3, [r0, #8]
}
 8002b62:	4770      	bx	lr

08002b64 <TIM_Cmd>:
    TIMx->CR1 |= TIM_CR1_CEN;
 8002b64:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8002b66:	b121      	cbz	r1, 8002b72 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002b6e:	8003      	strh	r3, [r0, #0]
}
 8002b70:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	e7f8      	b.n	8002b6e <TIM_Cmd+0xa>

08002b7c <TIM_ITConfig>:
    TIMx->DIER |= TIM_IT;
 8002b7c:	8983      	ldrh	r3, [r0, #12]
 8002b7e:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8002b80:	b112      	cbz	r2, 8002b88 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 8002b82:	4319      	orrs	r1, r3
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002b84:	8181      	strh	r1, [r0, #12]
}
 8002b86:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002b88:	ea23 0101 	bic.w	r1, r3, r1
 8002b8c:	e7fa      	b.n	8002b84 <TIM_ITConfig+0x8>

08002b8e <TIM_EncoderInterfaceConfig>:
{
 8002b8e:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = TIMx->SMCR;
 8002b90:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 8002b92:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b94:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002b96:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002b9a:	f024 0403 	bic.w	r4, r4, #3
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002b9e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002ba2:	f026 0607 	bic.w	r6, r6, #7
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002ba6:	0424      	lsls	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002ba8:	042d      	lsls	r5, r5, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002baa:	0436      	lsls	r6, r6, #16
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002bac:	0c24      	lsrs	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002bae:	0c2d      	lsrs	r5, r5, #16
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002bb0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002bb4:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002bb6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002bba:	4315      	orrs	r5, r2
  tmpsmcr |= TIM_EncoderMode;
 8002bbc:	430e      	orrs	r6, r1
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002bbe:	f044 0401 	orr.w	r4, r4, #1
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002bc2:	b2ad      	uxth	r5, r5
  TIMx->SMCR = tmpsmcr;
 8002bc4:	8106      	strh	r6, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8002bc6:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bc8:	8405      	strh	r5, [r0, #32]
}
 8002bca:	bd70      	pop	{r4, r5, r6, pc}

08002bcc <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8002bcc:	8481      	strh	r1, [r0, #36]	; 0x24
}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 8002bd0:	8681      	strh	r1, [r0, #52]	; 0x34
}
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 8002bd4:	8701      	strh	r1, [r0, #56]	; 0x38
}
 8002bd6:	4770      	bx	lr

08002bd8 <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002bd8:	8b03      	ldrh	r3, [r0, #24]
 8002bda:	f023 030c 	bic.w	r3, r3, #12
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 8002be4:	8b03      	ldrh	r3, [r0, #24]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	430b      	orrs	r3, r1
 8002bea:	8303      	strh	r3, [r0, #24]
}
 8002bec:	4770      	bx	lr

08002bee <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002bee:	8b02      	ldrh	r2, [r0, #24]
 8002bf0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bf4:	0412      	lsls	r2, r2, #16
 8002bf6:	0c12      	lsrs	r2, r2, #16
 8002bf8:	8302      	strh	r2, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002bfa:	8b03      	ldrh	r3, [r0, #24]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8303      	strh	r3, [r0, #24]
}
 8002c06:	4770      	bx	lr

08002c08 <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002c08:	8b83      	ldrh	r3, [r0, #28]
 8002c0a:	f023 030c 	bic.w	r3, r3, #12
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 8002c14:	8b83      	ldrh	r3, [r0, #28]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	8383      	strh	r3, [r0, #28]
}
 8002c1c:	4770      	bx	lr

08002c1e <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002c1e:	8b82      	ldrh	r2, [r0, #28]
 8002c20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c24:	0412      	lsls	r2, r2, #16
 8002c26:	0c12      	lsrs	r2, r2, #16
 8002c28:	8382      	strh	r2, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c2a:	8b83      	ldrh	r3, [r0, #28]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8383      	strh	r3, [r0, #28]
}
 8002c36:	4770      	bx	lr

08002c38 <TIM_ICInit>:
{
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	460f      	mov	r7, r1
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002c3c:	8809      	ldrh	r1, [r1, #0]
{
 8002c3e:	4604      	mov	r4, r0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002c40:	887d      	ldrh	r5, [r7, #2]
 8002c42:	88ba      	ldrh	r2, [r7, #4]
 8002c44:	893b      	ldrh	r3, [r7, #8]
 8002c46:	b939      	cbnz	r1, 8002c58 <TIM_ICInit+0x20>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f7ff fced 	bl	8002628 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c4e:	88f9      	ldrh	r1, [r7, #6]
}
 8002c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c54:	f7ff bfc0 	b.w	8002bd8 <TIM_SetIC1Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002c58:	2904      	cmp	r1, #4
 8002c5a:	d107      	bne.n	8002c6c <TIM_ICInit+0x34>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7ff fd1b 	bl	8002698 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c62:	88f9      	ldrh	r1, [r7, #6]
}
 8002c64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c68:	f7ff bfc1 	b.w	8002bee <TIM_SetIC2Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002c6c:	2908      	cmp	r1, #8
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002c6e:	8c00      	ldrh	r0, [r0, #32]
 8002c70:	88f9      	ldrh	r1, [r7, #6]
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002c72:	d136      	bne.n	8002ce2 <TIM_ICInit+0xaa>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002c74:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002c78:	0400      	lsls	r0, r0, #16
 8002c7a:	0c00      	lsrs	r0, r0, #16
 8002c7c:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c7e:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8002c80:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c82:	b2b6      	uxth	r6, r6
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002c84:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8002c88:	4316      	orrs	r6, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c8a:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <TIM_ICInit+0x124>)
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002c90:	022f      	lsls	r7, r5, #8
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002c92:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002c94:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002c96:	b2bf      	uxth	r7, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002c98:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002c9a:	d012      	beq.n	8002cc2 <TIM_ICInit+0x8a>
 8002c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	d00e      	beq.n	8002cc2 <TIM_ICInit+0x8a>
 8002ca4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002ca8:	d00b      	beq.n	8002cc2 <TIM_ICInit+0x8a>
 8002caa:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	d007      	beq.n	8002cc2 <TIM_ICInit+0x8a>
 8002cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	d003      	beq.n	8002cc2 <TIM_ICInit+0x8a>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cbe:	429c      	cmp	r4, r3
 8002cc0:	d10b      	bne.n	8002cda <TIM_ICInit+0xa2>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002cc2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002cc6:	4338      	orrs	r0, r7
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002cc8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ccc:	83a6      	strh	r6, [r4, #28]
  TIMx->CCER = tmpccer;
 8002cce:	8420      	strh	r0, [r4, #32]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cd0:	4620      	mov	r0, r4
}
 8002cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002cd6:	f7ff bf97 	b.w	8002c08 <TIM_SetIC3Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002cda:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002cde:	4328      	orrs	r0, r5
 8002ce0:	e7f2      	b.n	8002cc8 <TIM_ICInit+0x90>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002ce2:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002ce6:	0400      	lsls	r0, r0, #16
 8002ce8:	0c00      	lsrs	r0, r0, #16
 8002cea:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cec:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002cee:	031e      	lsls	r6, r3, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002cf0:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <TIM_ICInit+0x124>)
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002cf6:	053f      	lsls	r7, r7, #20
  tmpccer = TIMx->CCER;
 8002cf8:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002cfa:	0d3f      	lsrs	r7, r7, #20
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002cfc:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002d00:	ea4f 3c05 	mov.w	ip, r5, lsl #12
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002d04:	433e      	orrs	r6, r7
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002d06:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002d08:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002d0a:	fa1f fc8c 	uxth.w	ip, ip
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002d0e:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002d10:	d012      	beq.n	8002d38 <TIM_ICInit+0x100>
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	429c      	cmp	r4, r3
 8002d18:	d00e      	beq.n	8002d38 <TIM_ICInit+0x100>
 8002d1a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002d1e:	d00b      	beq.n	8002d38 <TIM_ICInit+0x100>
 8002d20:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002d24:	429c      	cmp	r4, r3
 8002d26:	d007      	beq.n	8002d38 <TIM_ICInit+0x100>
 8002d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d003      	beq.n	8002d38 <TIM_ICInit+0x100>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d34:	429c      	cmp	r4, r3
 8002d36:	d10c      	bne.n	8002d52 <TIM_ICInit+0x11a>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002d38:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002d3c:	ea4c 0300 	orr.w	r3, ip, r0
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d44:	83a6      	strh	r6, [r4, #28]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d46:	4620      	mov	r0, r4
  TIMx->CCER = tmpccer;
 8002d48:	8423      	strh	r3, [r4, #32]
}
 8002d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d4e:	f7ff bf66 	b.w	8002c1e <TIM_SetIC4Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002d52:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8002d56:	4003      	ands	r3, r0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002d58:	432b      	orrs	r3, r5
 8002d5a:	e7f1      	b.n	8002d40 <TIM_ICInit+0x108>
 8002d5c:	40012c00 	.word	0x40012c00

08002d60 <TIM_ClearFlag>:
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002d60:	43c9      	mvns	r1, r1
 8002d62:	b289      	uxth	r1, r1
 8002d64:	8201      	strh	r1, [r0, #16]
}
 8002d66:	4770      	bx	lr

08002d68 <TIM_ClearITPendingBit>:
 8002d68:	43c9      	mvns	r1, r1
 8002d6a:	b289      	uxth	r1, r1
 8002d6c:	8201      	strh	r1, [r0, #16]
 8002d6e:	4770      	bx	lr

08002d70 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	460d      	mov	r5, r1
 8002d74:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002d76:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8002d78:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 8002d7a:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002d7c:	88c9      	ldrh	r1, [r1, #6]
 8002d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d82:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002d84:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002d86:	8983      	ldrh	r3, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002d88:	88a9      	ldrh	r1, [r5, #4]
 8002d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d8e:	f023 030c 	bic.w	r3, r3, #12
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	430b      	orrs	r3, r1
 8002d98:	8929      	ldrh	r1, [r5, #8]
{
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	8969      	ldrh	r1, [r5, #10]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002da4:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002da6:	8a83      	ldrh	r3, [r0, #20]
 8002da8:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dae:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002db0:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002db2:	a801      	add	r0, sp, #4
 8002db4:	f7ff fb94 	bl	80024e0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002db8:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <USART_Init+0xa4>)
 8002dbe:	4294      	cmp	r4, r2
 8002dc0:	bf08      	it	eq
 8002dc2:	4619      	moveq	r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002dc4:	2319      	movs	r3, #25
 8002dc6:	89a2      	ldrh	r2, [r4, #12]
 8002dc8:	434b      	muls	r3, r1
 8002dca:	6829      	ldr	r1, [r5, #0]
 8002dcc:	0410      	lsls	r0, r2, #16
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002dce:	bf4c      	ite	mi
 8002dd0:	0049      	lslmi	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002dd2:	0089      	lslpl	r1, r1, #2
 8002dd4:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8002dd8:	2564      	movs	r5, #100	; 0x64
 8002dda:	fbb1 f3f5 	udiv	r3, r1, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002dde:	89a2      	ldrh	r2, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8002de0:	0118      	lsls	r0, r3, #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002de2:	0412      	lsls	r2, r2, #16
 8002de4:	fb05 1313 	mls	r3, r5, r3, r1
 8002de8:	d50b      	bpl.n	8002e02 <USART_Init+0x92>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002dea:	00da      	lsls	r2, r3, #3
 8002dec:	3232      	adds	r2, #50	; 0x32
 8002dee:	fbb2 f2f5 	udiv	r2, r2, r5
 8002df2:	f002 0207 	and.w	r2, r2, #7
 8002df6:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8123      	strh	r3, [r4, #8]
}
 8002dfe:	b007      	add	sp, #28
 8002e00:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	fbb3 f3f5 	udiv	r3, r3, r5
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4303      	orrs	r3, r0
 8002e10:	e7f3      	b.n	8002dfa <USART_Init+0x8a>
 8002e12:	bf00      	nop
 8002e14:	40013800 	.word	0x40013800

08002e18 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002e18:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8002e1a:	b121      	cbz	r1, 8002e26 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002e22:	8183      	strh	r3, [r0, #12]
  }
}
 8002e24:	4770      	bx	lr
    USARTx->CR1 &= CR1_UE_Reset;
 8002e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	e7f8      	b.n	8002e22 <USART_Cmd+0xa>

08002e30 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002e30:	2301      	movs	r3, #1
{
 8002e32:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e34:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e38:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_Mask;
 8002e3a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002e3e:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002e42:	d105      	bne.n	8002e50 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 8002e44:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e46:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8002e48:	b13a      	cbz	r2, 8002e5a <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002e4a:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002e4c:	6001      	str	r1, [r0, #0]
  }
}
 8002e4e:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002e50:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 8002e52:	bf0c      	ite	eq
 8002e54:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 8002e56:	3014      	addne	r0, #20
 8002e58:	e7f5      	b.n	8002e46 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002e5a:	ea23 0101 	bic.w	r1, r3, r1
 8002e5e:	e7f5      	b.n	8002e4c <USART_ITConfig+0x1c>

08002e60 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002e60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002e64:	8081      	strh	r1, [r0, #4]
}
 8002e66:	4770      	bx	lr

08002e68 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002e68:	8880      	ldrh	r0, [r0, #4]
}
 8002e6a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002e6e:	4770      	bx	lr

08002e70 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002e70:	8803      	ldrh	r3, [r0, #0]
 8002e72:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002e74:	bf14      	ite	ne
 8002e76:	2001      	movne	r0, #1
 8002e78:	2000      	moveq	r0, #0
 8002e7a:	4770      	bx	lr

08002e7c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	0a09      	lsrs	r1, r1, #8
 8002e80:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002e82:	43db      	mvns	r3, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8003      	strh	r3, [r0, #0]
}
 8002e88:	4770      	bx	lr
	...

08002e8c <prvSendMessageUSART2>:
#include <string.h>
#include "stm32f10x_it.h"


 void prvSendMessageUSART2(char *message)
{
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	4604      	mov	r4, r0
uint16_t cont_aux=0;

    while(cont_aux != strlen(message))
 8002e90:	2500      	movs	r5, #0
    {
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 8002e92:	4f0a      	ldr	r7, [pc, #40]	; (8002ebc <prvSendMessageUSART2+0x30>)
    while(cont_aux != strlen(message))
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7fd f95b 	bl	8000150 <strlen>
 8002e9a:	b2ae      	uxth	r6, r5
 8002e9c:	42b0      	cmp	r0, r6
 8002e9e:	d100      	bne.n	8002ea2 <prvSendMessageUSART2+0x16>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
        {
        }
        cont_aux++;
    }
}
 8002ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	5da1      	ldrb	r1, [r4, r6]
 8002ea6:	f7ff ffdb 	bl	8002e60 <USART_SendData>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	4638      	mov	r0, r7
 8002eae:	f7ff ffdf 	bl	8002e70 <USART_GetFlagStatus>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d0f9      	beq.n	8002eaa <prvSendMessageUSART2+0x1e>
        cont_aux++;
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	e7ec      	b.n	8002e94 <prvSendMessageUSART2+0x8>
 8002eba:	bf00      	nop
 8002ebc:	40004400 	.word	0x40004400

08002ec0 <float2String>:

 void float2String(float num, char* str)
{
 8002ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ec2:	460d      	mov	r5, r1
	char *tmpSign = (num < 0) ? "-" : "";
 8002ec4:	2100      	movs	r1, #0
{
 8002ec6:	4604      	mov	r4, r0
	char *tmpSign = (num < 0) ? "-" : "";
 8002ec8:	f7fe f85e 	bl	8000f88 <__aeabi_fcmplt>
 8002ecc:	b1d0      	cbz	r0, 8002f04 <float2String+0x44>
 8002ece:	4f0e      	ldr	r7, [pc, #56]	; (8002f08 <float2String+0x48>)
	float tmpVal = (num < 0) ? -num : num;
 8002ed0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000

	int tmpInt1 = tmpVal;                  // Get the integer (678).
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7fe f87f 	bl	8000fd8 <__aeabi_f2iz>
 8002eda:	4606      	mov	r6, r0
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8002edc:	f7fd ffb2 	bl	8000e44 <__aeabi_i2f>
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7fd fef8 	bl	8000cd8 <__aeabi_fsub>
	int tmpInt2 = tmpFrac * 10000;  	   // Turn into integer (123).
 8002ee8:	4908      	ldr	r1, [pc, #32]	; (8002f0c <float2String+0x4c>)
 8002eea:	f7fd f939 	bl	8000160 <__aeabi_fmul>
 8002eee:	f7fe f873 	bl	8000fd8 <__aeabi_f2iz>

	// Print as parts, note that you need 0-padding for fractional bit.
	sprintf (str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
 8002ef2:	4633      	mov	r3, r6
 8002ef4:	9000      	str	r0, [sp, #0]
 8002ef6:	463a      	mov	r2, r7
 8002ef8:	4628      	mov	r0, r5
 8002efa:	4905      	ldr	r1, [pc, #20]	; (8002f10 <float2String+0x50>)
 8002efc:	f001 fc0e 	bl	800471c <siprintf>

}
 8002f00:	b003      	add	sp, #12
 8002f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char *tmpSign = (num < 0) ? "-" : "";
 8002f04:	4f03      	ldr	r7, [pc, #12]	; (8002f14 <float2String+0x54>)
 8002f06:	e7e5      	b.n	8002ed4 <float2String+0x14>
 8002f08:	0800824c 	.word	0x0800824c
 8002f0c:	461c4000 	.word	0x461c4000
 8002f10:	0800824e 	.word	0x0800824e
 8002f14:	0800824b 	.word	0x0800824b

08002f18 <prvSetupRCC>:
	pvrIntrp();
}


 void prvSetupRCC( void )
{
 8002f18:	b510      	push	{r4, lr}
    /* RCC configuration - 72 MHz */
    ErrorStatus HSEStartUpStatus;

   RCC_DeInit();
 8002f1a:	f7ff fa65 	bl	80023e8 <RCC_DeInit>
    /*Enable the HSE*/
    RCC_HSEConfig(RCC_HSE_ON);
 8002f1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002f22:	f7ff fa81 	bl	8002428 <RCC_HSEConfig>
    /* Wait untill HSE is ready or time out */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002f26:	f7ff fb67 	bl	80025f8 <RCC_WaitForHSEStartUp>
    if(HSEStartUpStatus == SUCCESS)
 8002f2a:	2801      	cmp	r0, #1
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8002f2c:	4604      	mov	r4, r0
    if(HSEStartUpStatus == SUCCESS)
 8002f2e:	d125      	bne.n	8002f7c <prvSetupRCC+0x64>
    {
        /* Enable The Prefetch Buffer */
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8002f30:	2010      	movs	r0, #16
 8002f32:	f7ff f9fd 	bl	8002330 <FLASH_PrefetchBufferCmd>
        /* 72 MHZ - 2 wait states */
        FLASH_SetLatency(FLASH_Latency_2);
 8002f36:	2002      	movs	r0, #2
 8002f38:	f7ff f9f0 	bl	800231c <FLASH_SetLatency>

        /* No division HCLK = SYSCLK */
        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff fab1 	bl	80024a4 <RCC_HCLKConfig>
        /* PCLK1 = HCLK/2 (36MHz) */
        RCC_PCLK1Config(RCC_HCLK_Div2);
 8002f42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f46:	f7ff fab7 	bl	80024b8 <RCC_PCLK1Config>
        /* PCLK2 = HCLK (72MHz)*/
        RCC_PCLK2Config(RCC_HCLK_Div1);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7ff fabe 	bl	80024cc <RCC_PCLK2Config>

        /* Use PLL with HSE=12MHz */
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
 8002f50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002f54:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002f58:	f7ff fa82 	bl	8002460 <RCC_PLLConfig>
        /* Enable the PLL */
        RCC_PLLCmd(ENABLE);
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fa89 	bl	8002474 <RCC_PLLCmd>
        /* Wait for PLL ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET );
 8002f62:	2039      	movs	r0, #57	; 0x39
 8002f64:	f7ff fb34 	bl	80025d0 <RCC_GetFlagStatus>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0fa      	beq.n	8002f62 <prvSetupRCC+0x4a>

        /* Select the PLL as system clock source */
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f7ff fa87 	bl	8002480 <RCC_SYSCLKConfig>
        /* Wait until PLL is used as system clock */
        while( RCC_GetSYSCLKSource() != 0x08 );
 8002f72:	f7ff fa8f 	bl	8002494 <RCC_GetSYSCLKSource>
 8002f76:	2808      	cmp	r0, #8
 8002f78:	d1fb      	bne.n	8002f72 <prvSetupRCC+0x5a>
    }
    else
    {
        while(1);
    }
}
 8002f7a:	bd10      	pop	{r4, pc}
        while(1);
 8002f7c:	e7fe      	b.n	8002f7c <prvSetupRCC+0x64>
	...

08002f80 <prvSetupGPIO>:
/*-----------------------------------------------------------*/

 void prvSetupGPIO( void )
{
 8002f80:	b513      	push	{r0, r1, r4, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f82:	4c12      	ldr	r4, [pc, #72]	; (8002fcc <prvSetupGPIO+0x4c>)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );
 8002f84:	2101      	movs	r1, #1
 8002f86:	2004      	movs	r0, #4
 8002f88:	f7ff faf2 	bl	8002570 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <prvSetupGPIO+0x50>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f8e:	4620      	mov	r0, r4
 8002f90:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 8002f92:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f94:	f7ff f9d8 	bl	8002348 <GPIO_Init>

	// Pinos Motor (A) IN1A | IN2A
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <prvSetupGPIO+0x54>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 8002f9e:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002fa0:	f7ff f9d2 	bl	8002348 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	f7ff fae2 	bl	8002570 <RCC_APB2PeriphClockCmd>

	// GPIO Encoder (A)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <prvSetupGPIO+0x58>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8002fb6:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fb8:	f7ff f9c6 	bl	8002348 <GPIO_Init>

	// GPIO Motor (B) IN1B | IN2B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <prvSetupGPIO+0x5c>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 8002fc2:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fc4:	f7ff f9c0 	bl	8002348 <GPIO_Init>

}
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd10      	pop	{r4, pc}
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	04030003 	.word	0x04030003
 8002fd4:	180300c0 	.word	0x180300c0
 8002fd8:	040300c0 	.word	0x040300c0
 8002fdc:	18030003 	.word	0x18030003

08002fe0 <prvTIMERs>:

/*-----------------------------------------------------------*/

 void prvTIMERs( void )
{
 8002fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Configuração TIM4 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_DeInit(TIM4);

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	f44f 4675 	mov.w	r6, #62720	; 0xf500
    TIM_DeInit(TIM4);
 8002fea:	4d58      	ldr	r5, [pc, #352]	; (800314c <prvTIMERs+0x16c>)
{
 8002fec:	b08a      	sub	sp, #40	; 0x28
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2004      	movs	r0, #4
 8002ff2:	f7ff fac9 	bl	8002588 <RCC_APB1PeriphClockCmd>
    TIM_DeInit(TIM4);
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f7ff fb88 	bl	800270c <TIM_DeInit>
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8002ffc:	4669      	mov	r1, sp
 8002ffe:	4628      	mov	r0, r5
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8003000:	e9cd 4600 	strd	r4, r6, [sp]
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8003004:	f7ff fc66 	bl	80028d4 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8003008:	4623      	mov	r3, r4
 800300a:	4622      	mov	r2, r4
 800300c:	2103      	movs	r1, #3
 800300e:	4628      	mov	r0, r5
 8003010:	f7ff fdbd 	bl	8002b8e <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 8003014:	a803      	add	r0, sp, #12
 8003016:	f7ff fd9d 	bl	8002b54 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 800301a:	4628      	mov	r0, r5
 800301c:	a903      	add	r1, sp, #12
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 800301e:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 8003022:	f7ff fe09 	bl	8002c38 <TIM_ICInit>
	TIM_SetCounter(TIM4, CNT1_INIT);      /*CNT Set initial value */
 8003026:	4621      	mov	r1, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f7ff fdcf 	bl	8002bcc <TIM_SetCounter>
	TIM_ClearFlag(TIM4,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 800302e:	4628      	mov	r0, r5
 8003030:	2101      	movs	r1, #1
 8003032:	f7ff fe95 	bl	8002d60 <TIM_ClearFlag>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE); /* Interrupt enable */
 8003036:	2201      	movs	r2, #1
 8003038:	4628      	mov	r0, r5
 800303a:	4611      	mov	r1, r2
 800303c:	f7ff fd9e 	bl	8002b7c <TIM_ITConfig>
	TIM_Cmd(TIM4,ENABLE);                /* Can make CR register */
 8003040:	4628      	mov	r0, r5
 8003042:	2101      	movs	r1, #1
 8003044:	f7ff fd8e 	bl	8002b64 <TIM_Cmd>

	// Configuração TIM2 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003048:	2101      	movs	r1, #1
 800304a:	4608      	mov	r0, r1
 800304c:	f7ff fa9c 	bl	8002588 <RCC_APB1PeriphClockCmd>
	TIM_DeInit(TIM2);
 8003050:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003054:	f7ff fb5a 	bl	800270c <TIM_DeInit>

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003058:	4669      	mov	r1, sp
 800305a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 800305e:	e9cd 4600 	strd	r4, r6, [sp]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003062:	f7ff fc37 	bl	80028d4 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8003066:	4623      	mov	r3, r4
 8003068:	4622      	mov	r2, r4
 800306a:	2103      	movs	r1, #3
 800306c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003070:	f7ff fd8d 	bl	8002b8e <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 8003074:	a803      	add	r0, sp, #12
 8003076:	f7ff fd6d 	bl	8002b54 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 800307a:	a903      	add	r1, sp, #12
 800307c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 8003080:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 8003084:	f7ff fdd8 	bl	8002c38 <TIM_ICInit>
	TIM_SetCounter(TIM2, CNT2_INIT);      /*CNT Set initial value */
 8003088:	4621      	mov	r1, r4
 800308a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800308e:	f7ff fd9d 	bl	8002bcc <TIM_SetCounter>
	TIM_ClearFlag(TIM2,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 8003092:	2101      	movs	r1, #1
 8003094:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003098:	f7ff fe62 	bl	8002d60 <TIM_ClearFlag>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); /* Interrupt enable */
 800309c:	2201      	movs	r2, #1
 800309e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030a2:	4611      	mov	r1, r2
 80030a4:	f7ff fd6a 	bl	8002b7c <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);                /* Can make CR register */
 80030a8:	2101      	movs	r1, #1
 80030aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

	// Configuração TIM3 PWM Motores
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_DeInit(TIM3);
 80030ae:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
	TIM_Cmd(TIM2,ENABLE);                /* Can make CR register */
 80030b2:	f7ff fd57 	bl	8002b64 <TIM_Cmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80030b6:	2101      	movs	r1, #1
 80030b8:	2002      	movs	r0, #2
 80030ba:	f7ff fa65 	bl	8002588 <RCC_APB1PeriphClockCmd>
	TIM_DeInit(TIM3);
 80030be:	4628      	mov	r0, r5
 80030c0:	f7ff fb24 	bl	800270c <TIM_DeInit>

	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80030c4:	2364      	movs	r3, #100	; 0x64

	// IN1B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80030c6:	f04f 0802 	mov.w	r8, #2
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <prvTIMERs+0x170>)
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 80030cc:	4e21      	ldr	r6, [pc, #132]	; (8003154 <prvTIMERs+0x174>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80030ce:	4669      	mov	r1, sp
 80030d0:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 80030d2:	e9cd 2300 	strd	r2, r3, [sp]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80030d6:	4f20      	ldr	r7, [pc, #128]	; (8003158 <prvTIMERs+0x178>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80030d8:	f7ff fbfc 	bl	80028d4 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 80030dc:	8833      	ldrh	r3, [r6, #0]
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 80030de:	4628      	mov	r0, r5
 80030e0:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 80030e2:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80030e6:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80030e8:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 80030ec:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 80030f0:	f7ff fc3a 	bl	8002968 <TIM_OC1Init>
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 80030f4:	8873      	ldrh	r3, [r6, #2]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 80030f6:	4628      	mov	r0, r5
 80030f8:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 80030fa:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80030fe:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003100:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8003104:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 8003108:	f7ff fc72 	bl	80029f0 <TIM_OC2Init>
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 800310c:	88b3      	ldrh	r3, [r6, #4]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 800310e:	4628      	mov	r0, r5
 8003110:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 8003112:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003116:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003118:	f8ad 8020 	strh.w	r8, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 800311c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8003120:	f7ff fca6 	bl	8002a70 <TIM_OC3Init>

	// IN2B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 8003124:	88f3      	ldrh	r3, [r6, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8003126:	4628      	mov	r0, r5
 8003128:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 800312a:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800312e:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003130:	f8ad 8020 	strh.w	r8, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8003134:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8003138:	f7ff fcd8 	bl	8002aec <TIM_OC4Init>
	TIM_Cmd(TIM3, ENABLE);
 800313c:	2101      	movs	r1, #1
 800313e:	4628      	mov	r0, r5
 8003140:	f7ff fd10 	bl	8002b64 <TIM_Cmd>
}
 8003144:	b00a      	add	sp, #40	; 0x28
 8003146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800314a:	bf00      	nop
 800314c:	40000800 	.word	0x40000800
 8003150:	001002c7 	.word	0x001002c7
 8003154:	200033f0 	.word	0x200033f0
 8003158:	00010060 	.word	0x00010060

0800315c <pvrIntrp>:



 void pvrIntrp(void)
{
 800315c:	b507      	push	{r0, r1, r2, lr}
	NVIC_InitTypeDef NVIC_InitStructure;
	/* Configura o Priority Group com 1 bit */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800315e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003162:	f7ff f8a5 	bl	80022b0 <NVIC_PriorityGroupConfig>

	/* Interrupção global do TIM com prioridade 0 sub-prioridade */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <pvrIntrp+0x64>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003168:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800316a:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 800316c:	f7ff f8aa 	bl	80022c4 <NVIC_Init>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003170:	2201      	movs	r2, #1
 8003172:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003176:	4611      	mov	r1, r2
 8003178:	f7ff fd00 	bl	8002b7c <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <pvrIntrp+0x68>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800317e:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 8003180:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 8003182:	f7ff f89f 	bl	80022c4 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003186:	2201      	movs	r2, #1
 8003188:	480f      	ldr	r0, [pc, #60]	; (80031c8 <pvrIntrp+0x6c>)
 800318a:	4611      	mov	r1, r2
 800318c:	f7ff fcf6 	bl	8002b7c <TIM_ITConfig>

	// TIM3 Int
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <pvrIntrp+0x70>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003192:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8003194:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 8003196:	f7ff f895 	bl	80022c4 <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800319a:	2201      	movs	r2, #1
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <pvrIntrp+0x74>)
 800319e:	4611      	mov	r1, r2
 80031a0:	f7ff fcec 	bl	8002b7c <TIM_ITConfig>

	// Interrupt USART
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <pvrIntrp+0x78>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80031a6:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80031a8:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 80031aa:	f7ff f88b 	bl	80022c4 <NVIC_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80031ae:	2201      	movs	r2, #1
 80031b0:	f240 5125 	movw	r1, #1317	; 0x525
 80031b4:	4808      	ldr	r0, [pc, #32]	; (80031d8 <pvrIntrp+0x7c>)
 80031b6:	f7ff fe3b 	bl	8002e30 <USART_ITConfig>

}
 80031ba:	b003      	add	sp, #12
 80031bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031c0:	0100001c 	.word	0x0100001c
 80031c4:	0100001e 	.word	0x0100001e
 80031c8:	40000800 	.word	0x40000800
 80031cc:	0100001d 	.word	0x0100001d
 80031d0:	40000400 	.word	0x40000400
 80031d4:	01000026 	.word	0x01000026
 80031d8:	40004400 	.word	0x40004400

080031dc <prvSetupUSART2>:

void prvSetupUSART2( void )
{
 80031dc:	b510      	push	{r4, lr}
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled */

    /* Enable GPIOA clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 80031de:	2101      	movs	r1, #1
{
 80031e0:	b086      	sub	sp, #24
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 80031e2:	2004      	movs	r0, #4
 80031e4:	f7ff f9c4 	bl	8002570 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031e8:	4c13      	ldr	r4, [pc, #76]	; (8003238 <prvSetupUSART2+0x5c>)
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80031ea:	2101      	movs	r1, #1
 80031ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031f0:	f7ff f9ca 	bl	8002588 <RCC_APB1PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <prvSetupUSART2+0x60>)
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031f6:	4620      	mov	r0, r4
 80031f8:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 80031fa:	9301      	str	r3, [sp, #4]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031fc:	f7ff f8a4 	bl	8002348 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <prvSetupUSART2+0x64>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003202:	4620      	mov	r0, r4
 8003204:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8003206:	9301      	str	r3, [sp, #4]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003208:	f7ff f89e 	bl	8002348 <GPIO_Init>

    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800320c:	2300      	movs	r3, #0
 800320e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003212:	e9cd 2302 	strd	r2, r3, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003216:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;

    /* Configure the USART2 */
    USART_Init(USART2, &USART_InitStructure);
 800321a:	f5a4 4444 	sub.w	r4, r4, #50176	; 0xc400
 800321e:	4620      	mov	r0, r4
 8003220:	a902      	add	r1, sp, #8
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003222:	9204      	str	r2, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003224:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_Init(USART2, &USART_InitStructure);
 8003228:	f7ff fda2 	bl	8002d70 <USART_Init>
    /* Enable the USART2 */
    USART_Cmd(USART2, ENABLE);
 800322c:	2101      	movs	r1, #1
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff fdf2 	bl	8002e18 <USART_Cmd>
 }
 8003234:	b006      	add	sp, #24
 8003236:	bd10      	pop	{r4, pc}
 8003238:	40010800 	.word	0x40010800
 800323c:	18030004 	.word	0x18030004
 8003240:	04030008 	.word	0x04030008

08003244 <prvInitial_configuration>:
void prvInitial_configuration(void){
 8003244:	b508      	push	{r3, lr}
	prvSetupRCC();
 8003246:	f7ff fe67 	bl	8002f18 <prvSetupRCC>
	prvSetupGPIO();
 800324a:	f7ff fe99 	bl	8002f80 <prvSetupGPIO>
	prvTIMERs();
 800324e:	f7ff fec7 	bl	8002fe0 <prvTIMERs>
	prvSetupUSART2();
 8003252:	f7ff ffc3 	bl	80031dc <prvSetupUSART2>
}
 8003256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pvrIntrp();
 800325a:	f7ff bf7f 	b.w	800315c <pvrIntrp>

0800325e <init_odom_var>:
	odom.pose.orientation.w=0;
	odom.pose.position.x=0;
	odom.pose.position.y=0;
	odom.twist.linear.x=0;
	odom.twist.angular.z=0;
	return odom;
 800325e:	2200      	movs	r2, #0
 8003260:	6002      	str	r2, [r0, #0]
 8003262:	6042      	str	r2, [r0, #4]
 8003264:	6082      	str	r2, [r0, #8]
 8003266:	60c2      	str	r2, [r0, #12]
 8003268:	6102      	str	r2, [r0, #16]
 800326a:	6142      	str	r2, [r0, #20]
}
 800326c:	4770      	bx	lr
	...

08003270 <prvOdometryTrack>:
	}
}

/*-----------------------------------------------------------*/

static void prvOdometryTrack(void *pvParameters){
 8003270:	b530      	push	{r4, r5, lr}
 8003272:	b089      	sub	sp, #36	; 0x24

	Odometry odom=init_odom_var();
 8003274:	a802      	add	r0, sp, #8
 8003276:	f7ff fff2 	bl	800325e <init_odom_var>
//	char buf_x[15],buf_y[15],buf_th[15],buf[msg_length];


	for(;;){
		/* Receive data, Give permition to next task to read and delete */
		xSemaphoreTake( xSemaphore_Ticks1, ( TickType_t ) portMAX_DELAY );
 800327a:	4d0a      	ldr	r5, [pc, #40]	; (80032a4 <prvOdometryTrack+0x34>)
		xQueuePeek( xQueueTicks, &v_ticks , ( TickType_t ) portMAX_DELAY );
 800327c:	4c0a      	ldr	r4, [pc, #40]	; (80032a8 <prvOdometryTrack+0x38>)
		xSemaphoreTake( xSemaphore_Ticks1, ( TickType_t ) portMAX_DELAY );
 800327e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003282:	6828      	ldr	r0, [r5, #0]
 8003284:	f7fe fabc 	bl	8001800 <xQueueSemaphoreTake>
		xQueuePeek( xQueueTicks, &v_ticks , ( TickType_t ) portMAX_DELAY );
 8003288:	a901      	add	r1, sp, #4
 800328a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328e:	6820      	ldr	r0, [r4, #0]
 8003290:	f7fe fb4a 	bl	8001928 <xQueuePeek>
		xSemaphoreGive( xSemaphore_Ticks2 );
 8003294:	2300      	movs	r3, #0
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <prvOdometryTrack+0x3c>)
 8003298:	461a      	mov	r2, r3
 800329a:	4619      	mov	r1, r3
 800329c:	6800      	ldr	r0, [r0, #0]
 800329e:	f7fe f97f 	bl	80015a0 <xQueueGenericSend>
	for(;;){
 80032a2:	e7ec      	b.n	800327e <prvOdometryTrack+0xe>
 80032a4:	20003418 	.word	0x20003418
 80032a8:	20003410 	.word	0x20003410
 80032ac:	20003424 	.word	0x20003424

080032b0 <prvReadUsart>:
	}
}

static void prvReadUsart(void *pvParameters)
{
	uint8_t command=0;
 80032b0:	2300      	movs	r3, #0
{
 80032b2:	b507      	push	{r0, r1, r2, lr}

	uint16_t rx;
	for(;;){
//		xQueueReceive(xQueueUsart, &message,(TickType_t)portMAX_DELAY);
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 80032b4:	4d39      	ldr	r5, [pc, #228]	; (800339c <prvReadUsart+0xec>)
		{/* process receive message */

			if(rx ==42317){	command=100;xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80032b6:	4c3a      	ldr	r4, [pc, #232]	; (80033a0 <prvReadUsart+0xf0>)
	uint8_t command=0;
 80032b8:	f88d 3005 	strb.w	r3, [sp, #5]
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c0:	6828      	ldr	r0, [r5, #0]
 80032c2:	f10d 0106 	add.w	r1, sp, #6
 80032c6:	f7fe fa23 	bl	8001710 <xQueueReceive>
 80032ca:	2801      	cmp	r0, #1
 80032cc:	d1f6      	bne.n	80032bc <prvReadUsart+0xc>
			if(rx ==42317){	command=100;xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80032ce:	f24a 534d 	movw	r3, #42317	; 0xa54d
 80032d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10a      	bne.n	80032f0 <prvReadUsart+0x40>
 80032da:	2364      	movs	r3, #100	; 0x64
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	f10d 0105 	add.w	r1, sp, #5
 80032ec:	f7fe f958 	bl	80015a0 <xQueueGenericSend>
			if(rx ==42323){	command=0;  xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80032f0:	f24a 5353 	movw	r3, #42323	; 0xa553
 80032f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d109      	bne.n	8003310 <prvReadUsart+0x60>
 80032fc:	2300      	movs	r3, #0
 80032fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	f10d 0105 	add.w	r1, sp, #5
 8003308:	f88d 3005 	strb.w	r3, [sp, #5]
 800330c:	f7fe f948 	bl	80015a0 <xQueueGenericSend>
			if(rx ==42321){	command=20; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8003310:	f24a 5351 	movw	r3, #42321	; 0xa551
 8003314:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003318:	429a      	cmp	r2, r3
 800331a:	d10a      	bne.n	8003332 <prvReadUsart+0x82>
 800331c:	2314      	movs	r3, #20
 800331e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003322:	f88d 3005 	strb.w	r3, [sp, #5]
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	2300      	movs	r3, #0
 800332a:	f10d 0105 	add.w	r1, sp, #5
 800332e:	f7fe f937 	bl	80015a0 <xQueueGenericSend>
			if(rx ==42327){	command=40; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8003332:	f24a 5357 	movw	r3, #42327	; 0xa557
 8003336:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800333a:	429a      	cmp	r2, r3
 800333c:	d10a      	bne.n	8003354 <prvReadUsart+0xa4>
 800333e:	2328      	movs	r3, #40	; 0x28
 8003340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003344:	f88d 3005 	strb.w	r3, [sp, #5]
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	f10d 0105 	add.w	r1, sp, #5
 8003350:	f7fe f926 	bl	80015a0 <xQueueGenericSend>
			if(rx ==42309){	command=60; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8003354:	f24a 5345 	movw	r3, #42309	; 0xa545
 8003358:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800335c:	429a      	cmp	r2, r3
 800335e:	d10a      	bne.n	8003376 <prvReadUsart+0xc6>
 8003360:	233c      	movs	r3, #60	; 0x3c
 8003362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003366:	f88d 3005 	strb.w	r3, [sp, #5]
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	f10d 0105 	add.w	r1, sp, #5
 8003372:	f7fe f915 	bl	80015a0 <xQueueGenericSend>
			if(rx ==42322){	command=80; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8003376:	f24a 5352 	movw	r3, #42322	; 0xa552
 800337a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800337e:	429a      	cmp	r2, r3
 8003380:	d19c      	bne.n	80032bc <prvReadUsart+0xc>
 8003382:	2350      	movs	r3, #80	; 0x50
 8003384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003388:	f88d 3005 	strb.w	r3, [sp, #5]
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	f10d 0105 	add.w	r1, sp, #5
 8003394:	f7fe f904 	bl	80015a0 <xQueueGenericSend>
 8003398:	e790      	b.n	80032bc <prvReadUsart+0xc>
 800339a:	bf00      	nop
 800339c:	20003428 	.word	0x20003428
 80033a0:	20003420 	.word	0x20003420

080033a4 <prvSendMessage>:
		}
	}
}

static void prvSendMessage(void *pvParameters){
 80033a4:	b500      	push	{lr}
	char mes[msg_length];

	for(;;){
		/* Receive and send the message */
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 80033a6:	4c06      	ldr	r4, [pc, #24]	; (80033c0 <prvSendMessage+0x1c>)
static void prvSendMessage(void *pvParameters){
 80033a8:	b09f      	sub	sp, #124	; 0x7c
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ae:	4669      	mov	r1, sp
 80033b0:	6820      	ldr	r0, [r4, #0]
 80033b2:	f7fe f9ad 	bl	8001710 <xQueueReceive>
		prvSendMessageUSART2(mes);
 80033b6:	4668      	mov	r0, sp
 80033b8:	f7ff fd68 	bl	8002e8c <prvSendMessageUSART2>
	for(;;){
 80033bc:	e7f5      	b.n	80033aa <prvSendMessage+0x6>
 80033be:	bf00      	nop
 80033c0:	2000343c 	.word	0x2000343c

080033c4 <prvMotorDrive>:
	pwm.esq=0; pwm.dir=0;
 80033c4:	2300      	movs	r3, #0
static void prvMotorDrive(void *pvParameters){
 80033c6:	b507      	push	{r0, r1, r2, lr}
		xQueueReceive( xQueuePWM, &pwm,( TickType_t ) portMAX_DELAY );
 80033c8:	4d0a      	ldr	r5, [pc, #40]	; (80033f4 <prvMotorDrive+0x30>)
		TIM_SetCompare2(TIM3,pwm.dir); // laranja perto do cabo
 80033ca:	4c0b      	ldr	r4, [pc, #44]	; (80033f8 <prvMotorDrive+0x34>)
	pwm.esq=0; pwm.dir=0;
 80033cc:	f8ad 3004 	strh.w	r3, [sp, #4]
		xQueueReceive( xQueuePWM, &pwm,( TickType_t ) portMAX_DELAY );
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d4:	a901      	add	r1, sp, #4
 80033d6:	6828      	ldr	r0, [r5, #0]
 80033d8:	f7fe f99a 	bl	8001710 <xQueueReceive>
		TIM_SetCompare2(TIM3,pwm.dir); // laranja perto do cabo
 80033dc:	4620      	mov	r0, r4
 80033de:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80033e2:	f7ff fbf7 	bl	8002bd4 <TIM_SetCompare2>
		TIM_SetCompare1(TIM3,pwm.esq); // azul  mais longe do cabo
 80033e6:	4620      	mov	r0, r4
 80033e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80033ec:	f7ff fbf0 	bl	8002bd0 <TIM_SetCompare1>
	for(;;){
 80033f0:	e7ee      	b.n	80033d0 <prvMotorDrive+0xc>
 80033f2:	bf00      	nop
 80033f4:	2000341c 	.word	0x2000341c
 80033f8:	40000400 	.word	0x40000400

080033fc <prvControlador>:
{
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cmd_vel.angular.z=0;
 8003400:	2400      	movs	r4, #0
	uint8_t command=0;
 8003402:	2300      	movs	r3, #0
	float erro=0,erro_ant=0, erro_acum=0, float_pwm=0,P=0,Kp=0.02,D=0,Kd=0.14,I=0, Ki=0.0002, PID=0;
 8003404:	46a2      	mov	sl, r4
{
 8003406:	b0c3      	sub	sp, #268	; 0x10c
	uint8_t command=0;
 8003408:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	cmd_vel.angular.z=0;
 800340c:	940e      	str	r4, [sp, #56]	; 0x38
	cmd_vel.linear.x = 0;
 800340e:	940d      	str	r4, [sp, #52]	; 0x34
	pwm_real.esq=0;
 8003410:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	float erro=0,erro_ant=0, erro_acum=0, float_pwm=0,P=0,Kp=0.02,D=0,Kd=0.14,I=0, Ki=0.0002, PID=0;
 8003414:	9408      	str	r4, [sp, #32]
	int16_t veloc=0, vel_final=0;
 8003416:	9307      	str	r3, [sp, #28]
		xSemaphoreTake( xSemaphore_Ticks2, ( TickType_t ) portMAX_DELAY );
 8003418:	4b62      	ldr	r3, [pc, #392]	; (80035a4 <prvControlador+0x1a8>)
 800341a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	f7fe f9ee 	bl	8001800 <xQueueSemaphoreTake>
		xQueueReceive(xQueueTicks,(void*)&delta_ticks_real,(TickType_t)portMAX_DELAY); /*Receive ticks from encoders*/
 8003424:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <prvControlador+0x1ac>)
 8003426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	a90c      	add	r1, sp, #48	; 0x30
 800342e:	f7fe f96f 	bl	8001710 <xQueueReceive>
		xSemaphoreGive( xSemaphore_Ticks1 );
 8003432:	2300      	movs	r3, #0
 8003434:	485d      	ldr	r0, [pc, #372]	; (80035ac <prvControlador+0x1b0>)
 8003436:	461a      	mov	r2, r3
 8003438:	4619      	mov	r1, r3
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)1)== pdPASS ){
 800343a:	4d5d      	ldr	r5, [pc, #372]	; (80035b0 <prvControlador+0x1b4>)
		xSemaphoreGive( xSemaphore_Ticks1 );
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f7fe f8af 	bl	80015a0 <xQueueGenericSend>
		veloc=delta_ticks_real.esq;
 8003442:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)1)== pdPASS ){
 8003446:	2201      	movs	r2, #1
 8003448:	6828      	ldr	r0, [r5, #0]
 800344a:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
		veloc=delta_ticks_real.esq;
 800344e:	9309      	str	r3, [sp, #36]	; 0x24
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)1)== pdPASS ){
 8003450:	f7fe f95e 	bl	8001710 <xQueueReceive>
 8003454:	2801      	cmp	r0, #1
			vel_final=command;
 8003456:	bf08      	it	eq
 8003458:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
		if(xQueueReceive(xQueueVelCommand,&cmd_vel,(TickType_t)1)== pdPASS ){
 800345c:	f04f 0201 	mov.w	r2, #1
 8003460:	a90d      	add	r1, sp, #52	; 0x34
 8003462:	6828      	ldr	r0, [r5, #0]
			vel_final=command;
 8003464:	bf08      	it	eq
 8003466:	9307      	streq	r3, [sp, #28]
		if(xQueueReceive(xQueueVelCommand,&cmd_vel,(TickType_t)1)== pdPASS ){
 8003468:	f7fe f952 	bl	8001710 <xQueueReceive>
		erro = ((float)vel_final-(float)veloc);
 800346c:	9807      	ldr	r0, [sp, #28]
 800346e:	f7fd fce9 	bl	8000e44 <__aeabi_i2f>
 8003472:	4605      	mov	r5, r0
 8003474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003476:	f7fd fce5 	bl	8000e44 <__aeabi_i2f>
 800347a:	4601      	mov	r1, r0
 800347c:	4628      	mov	r0, r5
 800347e:	f7fd fc2b 	bl	8000cd8 <__aeabi_fsub>
		P=erro*Kp;
 8003482:	494c      	ldr	r1, [pc, #304]	; (80035b4 <prvControlador+0x1b8>)
		erro = ((float)vel_final-(float)veloc);
 8003484:	4606      	mov	r6, r0
		P=erro*Kp;
 8003486:	f7fc fe6b 	bl	8000160 <__aeabi_fmul>
		erro_acum+=erro;
 800348a:	4631      	mov	r1, r6
		P=erro*Kp;
 800348c:	4681      	mov	r9, r0
		erro_acum+=erro;
 800348e:	9808      	ldr	r0, [sp, #32]
 8003490:	f7fd fc24 	bl	8000cdc <__addsf3>
		I=Ki*erro_acum;
 8003494:	4948      	ldr	r1, [pc, #288]	; (80035b8 <prvControlador+0x1bc>)
		erro_acum+=erro;
 8003496:	9008      	str	r0, [sp, #32]
		I=Ki*erro_acum;
 8003498:	f7fc fe62 	bl	8000160 <__aeabi_fmul>
		D=Kd*(erro-erro_ant);
 800349c:	4651      	mov	r1, sl
		I=Ki*erro_acum;
 800349e:	4680      	mov	r8, r0
		D=Kd*(erro-erro_ant);
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7fd fc19 	bl	8000cd8 <__aeabi_fsub>
 80034a6:	4945      	ldr	r1, [pc, #276]	; (80035bc <prvControlador+0x1c0>)
 80034a8:	f7fc fe5a 	bl	8000160 <__aeabi_fmul>
 80034ac:	4607      	mov	r7, r0
		PID=MAX(-10,MIN(10,P+I+D));
 80034ae:	4641      	mov	r1, r8
 80034b0:	4648      	mov	r0, r9
 80034b2:	f7fd fc13 	bl	8000cdc <__addsf3>
 80034b6:	4639      	mov	r1, r7
 80034b8:	f7fd fc10 	bl	8000cdc <__addsf3>
 80034bc:	4940      	ldr	r1, [pc, #256]	; (80035c0 <prvControlador+0x1c4>)
 80034be:	4605      	mov	r5, r0
 80034c0:	f7fd fd80 	bl	8000fc4 <__aeabi_fcmpgt>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d165      	bne.n	8003594 <prvControlador+0x198>
 80034c8:	4628      	mov	r0, r5
 80034ca:	493e      	ldr	r1, [pc, #248]	; (80035c4 <prvControlador+0x1c8>)
 80034cc:	f7fd fd5c 	bl	8000f88 <__aeabi_fcmplt>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d161      	bne.n	8003598 <prvControlador+0x19c>
		if (vel_final==0){float_pwm =0;}
 80034d4:	9b07      	ldr	r3, [sp, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d062      	beq.n	80035a0 <prvControlador+0x1a4>
			float_pwm=MAX(0,MIN(100,float_pwm+PID));
 80034da:	4629      	mov	r1, r5
 80034dc:	4620      	mov	r0, r4
 80034de:	f7fd fbfd 	bl	8000cdc <__addsf3>
 80034e2:	4939      	ldr	r1, [pc, #228]	; (80035c8 <prvControlador+0x1cc>)
 80034e4:	4604      	mov	r4, r0
 80034e6:	f7fd fd6d 	bl	8000fc4 <__aeabi_fcmpgt>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d156      	bne.n	800359c <prvControlador+0x1a0>
 80034ee:	2100      	movs	r1, #0
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7fd fd49 	bl	8000f88 <__aeabi_fcmplt>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d152      	bne.n	80035a0 <prvControlador+0x1a4>
		pwm_real.esq=float_pwm;
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fd fd92 	bl	8001024 <__aeabi_f2uiz>
		pwm_real.dir=0;
 8003500:	f04f 0b00 	mov.w	fp, #0
		pwm_real.esq=float_pwm;
 8003504:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		xQueueSendToBack(xQueuePWM,&pwm_real,(TickType_t)portMAX_DELAY);
 8003508:	4830      	ldr	r0, [pc, #192]	; (80035cc <prvControlador+0x1d0>)
 800350a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800350e:	465b      	mov	r3, fp
 8003510:	a90b      	add	r1, sp, #44	; 0x2c
 8003512:	6800      	ldr	r0, [r0, #0]
		pwm_real.dir=0;
 8003514:	f88d b02d 	strb.w	fp, [sp, #45]	; 0x2d
		xQueueSendToBack(xQueuePWM,&pwm_real,(TickType_t)portMAX_DELAY);
 8003518:	f7fe f842 	bl	80015a0 <xQueueGenericSend>
		float2String(erro, buf_erro);
 800351c:	4630      	mov	r0, r6
 800351e:	a90f      	add	r1, sp, #60	; 0x3c
 8003520:	f7ff fcce 	bl	8002ec0 <float2String>
		float2String(erro_ant, buf_erro_ant);
 8003524:	ab12      	add	r3, sp, #72	; 0x48
 8003526:	4619      	mov	r1, r3
 8003528:	4650      	mov	r0, sl
		float2String(P, buf_P);
 800352a:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
		float2String(erro_ant, buf_erro_ant);
 800352e:	f7ff fcc7 	bl	8002ec0 <float2String>
		float2String(P, buf_P);
 8003532:	4651      	mov	r1, sl
 8003534:	4648      	mov	r0, r9
		float2String(I, buf_I);
 8003536:	f10d 0960 	add.w	r9, sp, #96	; 0x60
		float2String(P, buf_P);
 800353a:	f7ff fcc1 	bl	8002ec0 <float2String>
		float2String(I, buf_I);
 800353e:	4640      	mov	r0, r8
 8003540:	4649      	mov	r1, r9
		float2String(D, buf_D);
 8003542:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
		float2String(I, buf_I);
 8003546:	f7ff fcbb 	bl	8002ec0 <float2String>
		float2String(D, buf_D);
 800354a:	4638      	mov	r0, r7
 800354c:	4641      	mov	r1, r8
		float2String(PID, buf_PID);
 800354e:	af1e      	add	r7, sp, #120	; 0x78
		float2String(D, buf_D);
 8003550:	f7ff fcb6 	bl	8002ec0 <float2String>
		float2String(PID, buf_PID);
 8003554:	4628      	mov	r0, r5
 8003556:	4639      	mov	r1, r7
		float2String(float_pwm, buf_pwm);
 8003558:	ad21      	add	r5, sp, #132	; 0x84
		float2String(PID, buf_PID);
 800355a:	f7ff fcb1 	bl	8002ec0 <float2String>
		float2String(float_pwm, buf_pwm);
 800355e:	4629      	mov	r1, r5
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff fcad 	bl	8002ec0 <float2String>
		sprintf(buf,"V:%d  E:%s  Ea:%s  P:%s  I:%s  D:%s  PID:%s  PWM:%s\n",veloc,buf_erro,buf_erro_ant,buf_P,buf_I,buf_D,buf_PID,buf_pwm);
 8003566:	ab12      	add	r3, sp, #72	; 0x48
 8003568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800356a:	4919      	ldr	r1, [pc, #100]	; (80035d0 <prvControlador+0x1d4>)
 800356c:	f8cd a004 	str.w	sl, [sp, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	e9cd 7504 	strd	r7, r5, [sp, #16]
 8003576:	ab0f      	add	r3, sp, #60	; 0x3c
 8003578:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800357c:	a824      	add	r0, sp, #144	; 0x90
 800357e:	f001 f8cd 	bl	800471c <siprintf>
		xQueueSendToBack(xQueueMessageOut,&buf,(TickType_t)1);
 8003582:	4814      	ldr	r0, [pc, #80]	; (80035d4 <prvControlador+0x1d8>)
 8003584:	465b      	mov	r3, fp
 8003586:	2201      	movs	r2, #1
 8003588:	6800      	ldr	r0, [r0, #0]
 800358a:	a924      	add	r1, sp, #144	; 0x90
 800358c:	f7fe f808 	bl	80015a0 <xQueueGenericSend>
		erro = ((float)vel_final-(float)veloc);
 8003590:	46b2      	mov	sl, r6
		xSemaphoreTake( xSemaphore_Ticks2, ( TickType_t ) portMAX_DELAY );
 8003592:	e741      	b.n	8003418 <prvControlador+0x1c>
		PID=MAX(-10,MIN(10,P+I+D));
 8003594:	4d0a      	ldr	r5, [pc, #40]	; (80035c0 <prvControlador+0x1c4>)
 8003596:	e79d      	b.n	80034d4 <prvControlador+0xd8>
 8003598:	4d0a      	ldr	r5, [pc, #40]	; (80035c4 <prvControlador+0x1c8>)
 800359a:	e79b      	b.n	80034d4 <prvControlador+0xd8>
			float_pwm=MAX(0,MIN(100,float_pwm+PID));
 800359c:	4c0a      	ldr	r4, [pc, #40]	; (80035c8 <prvControlador+0x1cc>)
 800359e:	e7ac      	b.n	80034fa <prvControlador+0xfe>
 80035a0:	2400      	movs	r4, #0
 80035a2:	e7aa      	b.n	80034fa <prvControlador+0xfe>
 80035a4:	20003424 	.word	0x20003424
 80035a8:	20003410 	.word	0x20003410
 80035ac:	20003418 	.word	0x20003418
 80035b0:	20003420 	.word	0x20003420
 80035b4:	3ca3d70a 	.word	0x3ca3d70a
 80035b8:	3951b717 	.word	0x3951b717
 80035bc:	3e0f5c29 	.word	0x3e0f5c29
 80035c0:	41200000 	.word	0x41200000
 80035c4:	c1200000 	.word	0xc1200000
 80035c8:	42c80000 	.word	0x42c80000
 80035cc:	2000341c 	.word	0x2000341c
 80035d0:	08008258 	.word	0x08008258
 80035d4:	2000343c 	.word	0x2000343c

080035d8 <prvReadEncoders>:
{
 80035d8:	b583      	push	{r0, r1, r7, lr}
	ticksOld.dir=0; ticksOld.esq=0;
 80035da:	2100      	movs	r1, #0
		if(d_ticks.esq/2000){  /* Overflow correction */
 80035dc:	f640 769e 	movw	r6, #3998	; 0xf9e
	ticksOld.dir=0; ticksOld.esq=0;
 80035e0:	468c      	mov	ip, r1
		ticks.dir =TIM4->CNT;	/* Save value of Ticks from encoderA */
 80035e2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003690 <prvReadEncoders+0xb8>
		xQueueSendToBack(xQueueTicks,&d_ticks,(TickType_t)portMAX_DELAY);
 80035e6:	4f29      	ldr	r7, [pc, #164]	; (800368c <prvReadEncoders+0xb4>)
		ticks.esq =TIM2->CNT;	/* Save value of Ticks from encoderB */
 80035e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		ticks.dir =TIM4->CNT;	/* Save value of Ticks from encoderA */
 80035ec:	f8b8 5024 	ldrh.w	r5, [r8, #36]	; 0x24
		ticks.esq =TIM2->CNT;	/* Save value of Ticks from encoderB */
 80035f0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
		ticks.dir =TIM4->CNT;	/* Save value of Ticks from encoderA */
 80035f2:	b2ad      	uxth	r5, r5
		ticks.esq =TIM2->CNT;	/* Save value of Ticks from encoderB */
 80035f4:	b2a4      	uxth	r4, r4
		d_ticks.esq = ticks.esq - ticksOld.esq;
 80035f6:	eba4 030c 	sub.w	r3, r4, ip
 80035fa:	b218      	sxth	r0, r3
		if(d_ticks.esq/2000){  /* Overflow correction */
 80035fc:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8003600:	b29b      	uxth	r3, r3
 8003602:	42b3      	cmp	r3, r6
 8003604:	d817      	bhi.n	8003636 <prvReadEncoders+0x5e>
		d_ticks.esq = ticks.esq - ticksOld.esq;
 8003606:	f8ad 0004 	strh.w	r0, [sp, #4]
		d_ticks.dir = ticks.dir - ticksOld.dir;
 800360a:	1a6a      	subs	r2, r5, r1
 800360c:	b210      	sxth	r0, r2
		if(d_ticks.dir/2000){	/* Overflow correction */
 800360e:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
 8003612:	b292      	uxth	r2, r2
 8003614:	42b2      	cmp	r2, r6
 8003616:	d823      	bhi.n	8003660 <prvReadEncoders+0x88>
		d_ticks.dir = ticks.dir - ticksOld.dir;
 8003618:	f8ad 0006 	strh.w	r0, [sp, #6]
		xQueueSendToBack(xQueueTicks,&d_ticks,(TickType_t)portMAX_DELAY);
 800361c:	a901      	add	r1, sp, #4
 800361e:	2300      	movs	r3, #0
 8003620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7fd ffbb 	bl	80015a0 <xQueueGenericSend>
		vTaskDelay( ( TickType_t ) 10 / portTICK_PERIOD_MS  );
 800362a:	200a      	movs	r0, #10
 800362c:	f7fe fc84 	bl	8001f38 <vTaskDelay>
		ticksOld.dir=ticks.dir;
 8003630:	4629      	mov	r1, r5
		ticksOld.esq=ticks.esq;
 8003632:	46a4      	mov	ip, r4
		ticks.dir =TIM4->CNT;	/* Save value of Ticks from encoderA */
 8003634:	e7d8      	b.n	80035e8 <prvReadEncoders+0x10>
			d_ticks.esq=d_ticks.esq/abs(d_ticks.esq)*(62720-MAX(ticks.esq,ticksOld.esq)+MIN(ticks.esq,ticksOld.esq));
 8003636:	45a4      	cmp	ip, r4
 8003638:	4662      	mov	r2, ip
 800363a:	bf38      	it	cc
 800363c:	4622      	movcc	r2, r4
 800363e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8003642:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003646:	f5c2 4275 	rsb	r2, r2, #62720	; 0xf500
 800364a:	b29b      	uxth	r3, r3
 800364c:	45a4      	cmp	ip, r4
 800364e:	bf94      	ite	ls
 8003650:	4462      	addls	r2, ip
 8003652:	1912      	addhi	r2, r2, r4
 8003654:	fb90 f0f3 	sdiv	r0, r0, r3
 8003658:	4342      	muls	r2, r0
 800365a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800365e:	e7d4      	b.n	800360a <prvReadEncoders+0x32>
			d_ticks.dir=d_ticks.dir/abs(d_ticks.dir)*(62720-MAX(ticks.esq,ticksOld.dir)+MIN(ticks.esq,ticksOld.dir));
 8003660:	42a1      	cmp	r1, r4
 8003662:	460b      	mov	r3, r1
 8003664:	bf38      	it	cc
 8003666:	4623      	movcc	r3, r4
 8003668:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800366c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8003670:	f5c3 4375 	rsb	r3, r3, #62720	; 0xf500
 8003674:	b292      	uxth	r2, r2
 8003676:	42a1      	cmp	r1, r4
 8003678:	bf94      	ite	ls
 800367a:	185b      	addls	r3, r3, r1
 800367c:	191b      	addhi	r3, r3, r4
 800367e:	fb90 f0f2 	sdiv	r0, r0, r2
 8003682:	4343      	muls	r3, r0
 8003684:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003688:	e7c8      	b.n	800361c <prvReadEncoders+0x44>
 800368a:	bf00      	nop
 800368c:	20003410 	.word	0x20003410
 8003690:	40000800 	.word	0x40000800

08003694 <main>:
{
 8003694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prvInitial_configuration();
 8003696:	f7ff fdd5 	bl	8003244 <prvInitial_configuration>
	xQueueTicks 	 = xQueueCreate( 5, 		sizeof( Var_ticks )		  ); /* Queue to send Encoder's ticks */
 800369a:	2200      	movs	r2, #0
 800369c:	2104      	movs	r1, #4
 800369e:	2005      	movs	r0, #5
 80036a0:	f7fd ff58 	bl	8001554 <xQueueGenericCreate>
 80036a4:	4f3f      	ldr	r7, [pc, #252]	; (80037a4 <main+0x110>)
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80036a6:	2200      	movs	r2, #0
 80036a8:	2101      	movs	r1, #1
	xQueueTicks 	 = xQueueCreate( 5, 		sizeof( Var_ticks )		  ); /* Queue to send Encoder's ticks */
 80036aa:	6038      	str	r0, [r7, #0]
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80036ac:	2078      	movs	r0, #120	; 0x78
 80036ae:	f7fd ff51 	bl	8001554 <xQueueGenericCreate>
 80036b2:	4e3d      	ldr	r6, [pc, #244]	; (80037a8 <main+0x114>)
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80036b4:	2200      	movs	r2, #0
 80036b6:	2103      	movs	r1, #3
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80036b8:	6030      	str	r0, [r6, #0]
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80036ba:	2002      	movs	r0, #2
 80036bc:	f7fd ff4a 	bl	8001554 <xQueueGenericCreate>
 80036c0:	4d3a      	ldr	r5, [pc, #232]	; (80037ac <main+0x118>)
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*msg_length ); /* Queue to send PWM*/
 80036c2:	2200      	movs	r2, #0
 80036c4:	2178      	movs	r1, #120	; 0x78
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80036c6:	6028      	str	r0, [r5, #0]
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*msg_length ); /* Queue to send PWM*/
 80036c8:	200a      	movs	r0, #10
 80036ca:	f7fd ff43 	bl	8001554 <xQueueGenericCreate>
 80036ce:	4c38      	ldr	r4, [pc, #224]	; (80037b0 <main+0x11c>)
	xQueueVelCommand = xQueueCreate( 5, 		sizeof( uint8_t )      	  ); /* Queue to send velocity command to controller*/
 80036d0:	2200      	movs	r2, #0
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*msg_length ); /* Queue to send PWM*/
 80036d2:	6020      	str	r0, [r4, #0]
	xQueueVelCommand = xQueueCreate( 5, 		sizeof( uint8_t )      	  ); /* Queue to send velocity command to controller*/
 80036d4:	2101      	movs	r1, #1
 80036d6:	2005      	movs	r0, #5
 80036d8:	f7fd ff3c 	bl	8001554 <xQueueGenericCreate>
 80036dc:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <main+0x120>)
 80036de:	6018      	str	r0, [r3, #0]
	if(/*( xQueueOdometry == NULL )&&*/( xQueueTicks == NULL )&&( xQueueUsart == NULL )&&( xQueuePWM == NULL )&&( xQueueMessageOut == NULL )&&( xQueueVelCommand == NULL ))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b93b      	cbnz	r3, 80036f4 <main+0x60>
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	b92b      	cbnz	r3, 80036f4 <main+0x60>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b91b      	cbnz	r3, 80036f4 <main+0x60>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	b90b      	cbnz	r3, 80036f4 <main+0x60>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d053      	beq.n	800379c <main+0x108>
	xSemaphore_Ticks1 = xSemaphoreCreateBinary();
 80036f4:	2203      	movs	r2, #3
 80036f6:	2100      	movs	r1, #0
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7fd ff2b 	bl	8001554 <xQueueGenericCreate>
 80036fe:	4c2e      	ldr	r4, [pc, #184]	; (80037b8 <main+0x124>)
	xSemaphore_Ticks2 = xSemaphoreCreateBinary();
 8003700:	2203      	movs	r2, #3
	xSemaphore_Ticks1 = xSemaphoreCreateBinary();
 8003702:	6020      	str	r0, [r4, #0]
	xSemaphore_Ticks2 = xSemaphoreCreateBinary();
 8003704:	2100      	movs	r1, #0
 8003706:	2001      	movs	r0, #1
 8003708:	f7fd ff24 	bl	8001554 <xQueueGenericCreate>
 800370c:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <main+0x128>)
 800370e:	4603      	mov	r3, r0
 8003710:	6010      	str	r0, [r2, #0]
	if(( xSemaphore_Ticks1 == NULL )&&( xSemaphore_Ticks2 == NULL ))
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	b908      	cbnz	r0, 800371a <main+0x86>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <main+0x108>
	xSemaphoreGive( xSemaphore_Ticks1 );
 800371a:	2300      	movs	r3, #0
    xTaskCreate(prvReadEncoders, "EncoderReads",configMINIMAL_STACK_SIZE, NULL, normalTaskPriority, &HandleTask1);
 800371c:	2401      	movs	r4, #1
	xSemaphoreGive( xSemaphore_Ticks1 );
 800371e:	461a      	mov	r2, r3
 8003720:	4619      	mov	r1, r3
 8003722:	f7fd ff3d 	bl	80015a0 <xQueueGenericSend>
    xTaskCreate(prvReadEncoders, "EncoderReads",configMINIMAL_STACK_SIZE, NULL, normalTaskPriority, &HandleTask1);
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <main+0x12c>)
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <main+0x130>)
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	4826      	ldr	r0, [pc, #152]	; (80037c8 <main+0x134>)
 8003730:	2300      	movs	r3, #0
 8003732:	9400      	str	r4, [sp, #0]
 8003734:	f7fe f9ea 	bl	8001b0c <xTaskCreate>
    xTaskCreate(prvControlador, "Controlador", 	configMINIMAL_STACK_SIZE+300, NULL, normalTaskPriority,&HandleTask2);
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <main+0x138>)
 800373a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800373e:	e9cd 4300 	strd	r4, r3, [sp]
 8003742:	4923      	ldr	r1, [pc, #140]	; (80037d0 <main+0x13c>)
 8003744:	2300      	movs	r3, #0
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <main+0x140>)
 8003748:	f7fe f9e0 	bl	8001b0c <xTaskCreate>
    xTaskCreate(prvReadUsart, "ReadUsart", 		configMINIMAL_STACK_SIZE+200, NULL, normalTaskPriority, &HandleTask3);
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <main+0x144>)
 800374e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003752:	e9cd 4300 	strd	r4, r3, [sp]
 8003756:	4921      	ldr	r1, [pc, #132]	; (80037dc <main+0x148>)
 8003758:	2300      	movs	r3, #0
 800375a:	4821      	ldr	r0, [pc, #132]	; (80037e0 <main+0x14c>)
 800375c:	f7fe f9d6 	bl	8001b0c <xTaskCreate>
	xTaskCreate(prvMotorDrive, "MotorDrive", 	configMINIMAL_STACK_SIZE, NULL, normalTaskPriority, &HandleTask4);
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <main+0x150>)
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	e9cd 4300 	strd	r4, r3, [sp]
 8003768:	491f      	ldr	r1, [pc, #124]	; (80037e8 <main+0x154>)
 800376a:	2300      	movs	r3, #0
 800376c:	481f      	ldr	r0, [pc, #124]	; (80037ec <main+0x158>)
 800376e:	f7fe f9cd 	bl	8001b0c <xTaskCreate>
	xTaskCreate(prvSendMessage, "SendUsart", 	configMINIMAL_STACK_SIZE, NULL, normalTaskPriority, &HandleTask5);
 8003772:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <main+0x15c>)
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	e9cd 4300 	strd	r4, r3, [sp]
 800377a:	491e      	ldr	r1, [pc, #120]	; (80037f4 <main+0x160>)
 800377c:	2300      	movs	r3, #0
 800377e:	481e      	ldr	r0, [pc, #120]	; (80037f8 <main+0x164>)
 8003780:	f7fe f9c4 	bl	8001b0c <xTaskCreate>
	xTaskCreate(prvOdometryTrack, "Odometry", 	configMINIMAL_STACK_SIZE+200, NULL, normalTaskPriority, &HandleTask6);
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <main+0x168>)
 8003786:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800378a:	e9cd 4300 	strd	r4, r3, [sp]
 800378e:	491c      	ldr	r1, [pc, #112]	; (8003800 <main+0x16c>)
 8003790:	2300      	movs	r3, #0
 8003792:	481c      	ldr	r0, [pc, #112]	; (8003804 <main+0x170>)
 8003794:	f7fe f9ba 	bl	8001b0c <xTaskCreate>
	vTaskStartScheduler();
 8003798:	f7fe fa82 	bl	8001ca0 <vTaskStartScheduler>
}
 800379c:	2000      	movs	r0, #0
 800379e:	b003      	add	sp, #12
 80037a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20003410 	.word	0x20003410
 80037a8:	20003428 	.word	0x20003428
 80037ac:	2000341c 	.word	0x2000341c
 80037b0:	2000343c 	.word	0x2000343c
 80037b4:	20003420 	.word	0x20003420
 80037b8:	20003418 	.word	0x20003418
 80037bc:	20003424 	.word	0x20003424
 80037c0:	20003434 	.word	0x20003434
 80037c4:	0800828d 	.word	0x0800828d
 80037c8:	080035d9 	.word	0x080035d9
 80037cc:	2000340c 	.word	0x2000340c
 80037d0:	0800829a 	.word	0x0800829a
 80037d4:	080033fd 	.word	0x080033fd
 80037d8:	20003414 	.word	0x20003414
 80037dc:	080082a6 	.word	0x080082a6
 80037e0:	080032b1 	.word	0x080032b1
 80037e4:	20003438 	.word	0x20003438
 80037e8:	080082b0 	.word	0x080082b0
 80037ec:	080033c5 	.word	0x080033c5
 80037f0:	20003430 	.word	0x20003430
 80037f4:	080082bb 	.word	0x080082bb
 80037f8:	080033a5 	.word	0x080033a5
 80037fc:	2000342c 	.word	0x2000342c
 8003800:	080082c5 	.word	0x080082c5
 8003804:	08003271 	.word	0x08003271

08003808 <WWDG_IRQHandler>:
 8003808:	4770      	bx	lr

0800380a <PVD_IRQHandler>:
 800380a:	4770      	bx	lr

0800380c <TAMPER_IRQHandler>:
 800380c:	4770      	bx	lr

0800380e <RTC_IRQHandler>:
 800380e:	4770      	bx	lr

08003810 <FLASH_IRQHandler>:
 8003810:	4770      	bx	lr

08003812 <RCC_IRQHandler>:
 8003812:	4770      	bx	lr

08003814 <EXTI0_IRQHandler>:
 8003814:	4770      	bx	lr

08003816 <EXTI1_IRQHandler>:
 8003816:	4770      	bx	lr

08003818 <EXTI2_IRQHandler>:
 8003818:	4770      	bx	lr

0800381a <EXTI3_IRQHandler>:
 800381a:	4770      	bx	lr

0800381c <EXTI4_IRQHandler>:
 800381c:	4770      	bx	lr

0800381e <DMA1_Channel1_IRQHandler>:
 800381e:	4770      	bx	lr

08003820 <DMA1_Channel2_IRQHandler>:
 8003820:	4770      	bx	lr

08003822 <DMA1_Channel3_IRQHandler>:
 8003822:	4770      	bx	lr

08003824 <DMA1_Channel4_IRQHandler>:
 8003824:	4770      	bx	lr

08003826 <DMA1_Channel5_IRQHandler>:
 8003826:	4770      	bx	lr

08003828 <DMA1_Channel6_IRQHandler>:
 8003828:	4770      	bx	lr

0800382a <DMA1_Channel7_IRQHandler>:
 800382a:	4770      	bx	lr

0800382c <ADC1_2_IRQHandler>:
 800382c:	4770      	bx	lr

0800382e <EXTI9_5_IRQHandler>:
 800382e:	4770      	bx	lr

08003830 <TIM1_BRK_IRQHandler>:
 8003830:	4770      	bx	lr

08003832 <TIM1_UP_IRQHandler>:
 8003832:	4770      	bx	lr

08003834 <TIM1_TRG_COM_IRQHandler>:
 8003834:	4770      	bx	lr

08003836 <TIM1_CC_IRQHandler>:
 8003836:	4770      	bx	lr

08003838 <TIM2_IRQHandler>:
*******************************************************************************/

extern int overflowB;
void TIM2_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003838:	2101      	movs	r1, #1
 800383a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800383e:	f7ff ba93 	b.w	8002d68 <TIM_ClearITPendingBit>
	...

08003844 <TIM3_IRQHandler>:
* Return         : None
*******************************************************************************/
extern long int contRPM;
void TIM3_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003844:	2101      	movs	r1, #1
 8003846:	4801      	ldr	r0, [pc, #4]	; (800384c <TIM3_IRQHandler+0x8>)
 8003848:	f7ff ba8e 	b.w	8002d68 <TIM_ClearITPendingBit>
 800384c:	40000400 	.word	0x40000400

08003850 <TIM4_IRQHandler>:
* Return         : None
*******************************************************************************/
extern int overflowA;
void TIM4_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003850:	2101      	movs	r1, #1
 8003852:	4801      	ldr	r0, [pc, #4]	; (8003858 <TIM4_IRQHandler+0x8>)
 8003854:	f7ff ba88 	b.w	8002d68 <TIM_ClearITPendingBit>
 8003858:	40000800 	.word	0x40000800

0800385c <I2C1_EV_IRQHandler>:
 800385c:	4770      	bx	lr

0800385e <I2C1_ER_IRQHandler>:
 800385e:	4770      	bx	lr

08003860 <I2C2_EV_IRQHandler>:
 8003860:	4770      	bx	lr

08003862 <I2C2_ER_IRQHandler>:
 8003862:	4770      	bx	lr

08003864 <SPI1_IRQHandler>:
 8003864:	4770      	bx	lr

08003866 <SPI2_IRQHandler>:
 8003866:	4770      	bx	lr

08003868 <USART1_IRQHandler>:
 8003868:	4770      	bx	lr
	...

0800386c <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void USART2_IRQHandler(void)
{
 800386c:	b513      	push	{r0, r1, r4, lr}
	static BaseType_t pxHigherPriorityTaskWoken;
	char ulVar;

	ulVar = USART_ReceiveData(USART2);
 800386e:	4810      	ldr	r0, [pc, #64]	; (80038b0 <USART2_IRQHandler+0x44>)
 8003870:	f7ff fafa 	bl	8002e68 <USART_ReceiveData>
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 8003874:	4c0f      	ldr	r4, [pc, #60]	; (80038b4 <USART2_IRQHandler+0x48>)
	ulVar = USART_ReceiveData(USART2);
 8003876:	f88d 0007 	strb.w	r0, [sp, #7]
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 800387a:	480f      	ldr	r0, [pc, #60]	; (80038b8 <USART2_IRQHandler+0x4c>)
 800387c:	2300      	movs	r3, #0
 800387e:	4622      	mov	r2, r4
 8003880:	6800      	ldr	r0, [r0, #0]
 8003882:	f10d 0107 	add.w	r1, sp, #7
 8003886:	f7fd ff0d 	bl	80016a4 <xQueueGenericSendFromISR>


	if( pxHigherPriorityTaskWoken == pdTRUE )
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <USART2_IRQHandler+0x34>
	{
		taskYIELD();
 8003890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <USART2_IRQHandler+0x50>)
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
	}

	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80038a0:	f240 5125 	movw	r1, #1317	; 0x525
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <USART2_IRQHandler+0x44>)
 80038a6:	f7ff fae9 	bl	8002e7c <USART_ClearITPendingBit>
}
 80038aa:	b002      	add	sp, #8
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	bf00      	nop
 80038b0:	40004400 	.word	0x40004400
 80038b4:	200033f8 	.word	0x200033f8
 80038b8:	20003428 	.word	0x20003428
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <USART3_IRQHandler>:
 80038c0:	4770      	bx	lr

080038c2 <EXTI15_10_IRQHandler>:
 80038c2:	4770      	bx	lr

080038c4 <RTCAlarm_IRQHandler>:
 80038c4:	4770      	bx	lr

080038c6 <USBWakeUp_IRQHandler>:
 80038c6:	4770      	bx	lr

080038c8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80038c8:	2001      	movs	r0, #1
 80038ca:	4770      	bx	lr

080038cc <_kill>:

int _kill(int pid, int sig)
{
 80038cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80038ce:	f000 f86f 	bl	80039b0 <__errno>
 80038d2:	2316      	movs	r3, #22
 80038d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038da:	bd08      	pop	{r3, pc}

080038dc <_exit>:

void _exit (int status)
{
 80038dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80038de:	f000 f867 	bl	80039b0 <__errno>
 80038e2:	2316      	movs	r3, #22
 80038e4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80038e6:	e7fe      	b.n	80038e6 <_exit+0xa>

080038e8 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	460e      	mov	r6, r1
 80038ec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	2500      	movs	r5, #0
 80038f0:	42a5      	cmp	r5, r4
 80038f2:	db01      	blt.n	80038f8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80038f4:	4620      	mov	r0, r4
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80038f8:	f3af 8000 	nop.w
 80038fc:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	3501      	adds	r5, #1
 8003900:	e7f6      	b.n	80038f0 <_read+0x8>

08003902 <_write>:

int _write(int file, char *ptr, int len)
{
 8003902:	b570      	push	{r4, r5, r6, lr}
 8003904:	460e      	mov	r6, r1
 8003906:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003908:	2500      	movs	r5, #0
 800390a:	42a5      	cmp	r5, r4
 800390c:	db01      	blt.n	8003912 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800390e:	4620      	mov	r0, r4
 8003910:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003912:	5d70      	ldrb	r0, [r6, r5]
 8003914:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003918:	3501      	adds	r5, #1
 800391a:	e7f6      	b.n	800390a <_write+0x8>

0800391c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800391c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <_sbrk+0x2c>)
{
 8003920:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	b909      	cbnz	r1, 800392a <_sbrk+0xe>
		heap_end = &end;
 8003926:	4909      	ldr	r1, [pc, #36]	; (800394c <_sbrk+0x30>)
 8003928:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800392a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800392c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800392e:	4402      	add	r2, r0
 8003930:	428a      	cmp	r2, r1
 8003932:	d906      	bls.n	8003942 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003934:	f000 f83c 	bl	80039b0 <__errno>
 8003938:	230c      	movs	r3, #12
 800393a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800393c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003940:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003942:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003944:	e7fc      	b.n	8003940 <_sbrk+0x24>
 8003946:	bf00      	nop
 8003948:	200033fc 	.word	0x200033fc
 800394c:	20003450 	.word	0x20003450

08003950 <_close>:

int _close(int file)
{
	return -1;
}
 8003950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003954:	4770      	bx	lr

08003956 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800395a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800395c:	604b      	str	r3, [r1, #4]
}
 800395e:	4770      	bx	lr

08003960 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003960:	2001      	movs	r0, #1
 8003962:	4770      	bx	lr

08003964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003964:	2000      	movs	r0, #0
 8003966:	4770      	bx	lr

08003968 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800396a:	e003      	b.n	8003974 <LoopCopyDataInit>

0800396c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 800396e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003972:	3104      	adds	r1, #4

08003974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8003978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800397a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800397c:	d3f6      	bcc.n	800396c <CopyDataInit>
	ldr	r2, =_sbss
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8003980:	e002      	b.n	8003988 <LoopFillZerobss>

08003982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003984:	f842 3b04 	str.w	r3, [r2], #4

08003988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 800398a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800398c:	d3f9      	bcc.n	8003982 <FillZerobss>

/* Call the clock system intitialization function.*/
/* 	bl  SystemInit */
/* Call static constructors */
    bl __libc_init_array
 800398e:	f000 f815 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003992:	f7ff fe7f 	bl	8003694 <main>
	bx	lr
 8003996:	4770      	bx	lr
	ldr	r3, =_sidata
 8003998:	0800878c 	.word	0x0800878c
	ldr	r0, =_sdata
 800399c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80039a0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80039a4:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80039a8:	20003450 	.word	0x20003450

080039ac <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <BusFault_Handler>
	...

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	; (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000020 	.word	0x20000020

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	2600      	movs	r6, #0
 80039c0:	4d0c      	ldr	r5, [pc, #48]	; (80039f4 <__libc_init_array+0x38>)
 80039c2:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	f004 fc28 	bl	8008220 <_init>
 80039d0:	2600      	movs	r6, #0
 80039d2:	4d0a      	ldr	r5, [pc, #40]	; (80039fc <__libc_init_array+0x40>)
 80039d4:	4c0a      	ldr	r4, [pc, #40]	; (8003a00 <__libc_init_array+0x44>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08008784 	.word	0x08008784
 80039f8:	08008784 	.word	0x08008784
 80039fc:	08008784 	.word	0x08008784
 8003a00:	08008788 	.word	0x08008788

08003a04 <memcpy>:
 8003a04:	440a      	add	r2, r1
 8003a06:	4291      	cmp	r1, r2
 8003a08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a0c:	d100      	bne.n	8003a10 <memcpy+0xc>
 8003a0e:	4770      	bx	lr
 8003a10:	b510      	push	{r4, lr}
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	4291      	cmp	r1, r2
 8003a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a1c:	d1f9      	bne.n	8003a12 <memcpy+0xe>
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <memset>:
 8003a20:	4603      	mov	r3, r0
 8003a22:	4402      	add	r2, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <__cvt>:
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a36:	461f      	mov	r7, r3
 8003a38:	bfbb      	ittet	lt
 8003a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	461f      	movlt	r7, r3
 8003a40:	2300      	movge	r3, #0
 8003a42:	232d      	movlt	r3, #45	; 0x2d
 8003a44:	b088      	sub	sp, #32
 8003a46:	4614      	mov	r4, r2
 8003a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a4c:	7013      	strb	r3, [r2, #0]
 8003a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a54:	f023 0820 	bic.w	r8, r3, #32
 8003a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a5c:	d005      	beq.n	8003a6a <__cvt+0x3a>
 8003a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a62:	d100      	bne.n	8003a66 <__cvt+0x36>
 8003a64:	3501      	adds	r5, #1
 8003a66:	2302      	movs	r3, #2
 8003a68:	e000      	b.n	8003a6c <__cvt+0x3c>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	aa07      	add	r2, sp, #28
 8003a6e:	9204      	str	r2, [sp, #16]
 8003a70:	aa06      	add	r2, sp, #24
 8003a72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a76:	e9cd 3500 	strd	r3, r5, [sp]
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f001 fd9f 	bl	80055c0 <_dtoa_r>
 8003a82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a86:	4606      	mov	r6, r0
 8003a88:	d102      	bne.n	8003a90 <__cvt+0x60>
 8003a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a8c:	07db      	lsls	r3, r3, #31
 8003a8e:	d522      	bpl.n	8003ad6 <__cvt+0xa6>
 8003a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a94:	eb06 0905 	add.w	r9, r6, r5
 8003a98:	d110      	bne.n	8003abc <__cvt+0x8c>
 8003a9a:	7833      	ldrb	r3, [r6, #0]
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d10a      	bne.n	8003ab6 <__cvt+0x86>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	f7fd f832 	bl	8000b10 <__aeabi_dcmpeq>
 8003aac:	b918      	cbnz	r0, 8003ab6 <__cvt+0x86>
 8003aae:	f1c5 0501 	rsb	r5, r5, #1
 8003ab2:	f8ca 5000 	str.w	r5, [sl]
 8003ab6:	f8da 3000 	ldr.w	r3, [sl]
 8003aba:	4499      	add	r9, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fd f824 	bl	8000b10 <__aeabi_dcmpeq>
 8003ac8:	b108      	cbz	r0, 8003ace <__cvt+0x9e>
 8003aca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ace:	2230      	movs	r2, #48	; 0x30
 8003ad0:	9b07      	ldr	r3, [sp, #28]
 8003ad2:	454b      	cmp	r3, r9
 8003ad4:	d307      	bcc.n	8003ae6 <__cvt+0xb6>
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003adc:	1b9b      	subs	r3, r3, r6
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	b008      	add	sp, #32
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	9107      	str	r1, [sp, #28]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e7f0      	b.n	8003ad0 <__cvt+0xa0>

08003aee <__exponent>:
 8003aee:	4603      	mov	r3, r0
 8003af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003af2:	2900      	cmp	r1, #0
 8003af4:	f803 2b02 	strb.w	r2, [r3], #2
 8003af8:	bfb6      	itet	lt
 8003afa:	222d      	movlt	r2, #45	; 0x2d
 8003afc:	222b      	movge	r2, #43	; 0x2b
 8003afe:	4249      	neglt	r1, r1
 8003b00:	2909      	cmp	r1, #9
 8003b02:	7042      	strb	r2, [r0, #1]
 8003b04:	dd2b      	ble.n	8003b5e <__exponent+0x70>
 8003b06:	f10d 0407 	add.w	r4, sp, #7
 8003b0a:	46a4      	mov	ip, r4
 8003b0c:	270a      	movs	r7, #10
 8003b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b12:	460a      	mov	r2, r1
 8003b14:	46a6      	mov	lr, r4
 8003b16:	fb07 1516 	mls	r5, r7, r6, r1
 8003b1a:	2a63      	cmp	r2, #99	; 0x63
 8003b1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003b20:	4631      	mov	r1, r6
 8003b22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003b26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b2a:	dcf0      	bgt.n	8003b0e <__exponent+0x20>
 8003b2c:	3130      	adds	r1, #48	; 0x30
 8003b2e:	f1ae 0502 	sub.w	r5, lr, #2
 8003b32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b36:	4629      	mov	r1, r5
 8003b38:	1c44      	adds	r4, r0, #1
 8003b3a:	4561      	cmp	r1, ip
 8003b3c:	d30a      	bcc.n	8003b54 <__exponent+0x66>
 8003b3e:	f10d 0209 	add.w	r2, sp, #9
 8003b42:	eba2 020e 	sub.w	r2, r2, lr
 8003b46:	4565      	cmp	r5, ip
 8003b48:	bf88      	it	hi
 8003b4a:	2200      	movhi	r2, #0
 8003b4c:	4413      	add	r3, r2
 8003b4e:	1a18      	subs	r0, r3, r0
 8003b50:	b003      	add	sp, #12
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b5c:	e7ed      	b.n	8003b3a <__exponent+0x4c>
 8003b5e:	2330      	movs	r3, #48	; 0x30
 8003b60:	3130      	adds	r1, #48	; 0x30
 8003b62:	7083      	strb	r3, [r0, #2]
 8003b64:	70c1      	strb	r1, [r0, #3]
 8003b66:	1d03      	adds	r3, r0, #4
 8003b68:	e7f1      	b.n	8003b4e <__exponent+0x60>
	...

08003b6c <_printf_float>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	b091      	sub	sp, #68	; 0x44
 8003b72:	460c      	mov	r4, r1
 8003b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b78:	4616      	mov	r6, r2
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	f002 fe73 	bl	8006868 <_localeconv_r>
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	9309      	str	r3, [sp, #36]	; 0x24
 8003b88:	f7fc fae2 	bl	8000150 <strlen>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b90:	f8d8 3000 	ldr.w	r3, [r8]
 8003b94:	900a      	str	r0, [sp, #40]	; 0x28
 8003b96:	3307      	adds	r3, #7
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	f103 0208 	add.w	r2, r3, #8
 8003ba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ba8:	f8c8 2000 	str.w	r2, [r8]
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003bb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <_printf_float+0x2cc>)
 8003bc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bc8:	f7fc ffd4 	bl	8000b74 <__aeabi_dcmpun>
 8003bcc:	bb70      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <_printf_float+0x2cc>)
 8003bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd8:	f7fc ffae 	bl	8000b38 <__aeabi_dcmple>
 8003bdc:	bb30      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bde:	2200      	movs	r2, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	4640      	mov	r0, r8
 8003be4:	4651      	mov	r1, sl
 8003be6:	f7fc ff9d 	bl	8000b24 <__aeabi_dcmplt>
 8003bea:	b110      	cbz	r0, 8003bf2 <_printf_float+0x86>
 8003bec:	232d      	movs	r3, #45	; 0x2d
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <_printf_float+0x2d0>)
 8003bf4:	4892      	ldr	r0, [pc, #584]	; (8003e40 <_printf_float+0x2d4>)
 8003bf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003bfa:	bf94      	ite	ls
 8003bfc:	4698      	movls	r8, r3
 8003bfe:	4680      	movhi	r8, r0
 8003c00:	2303      	movs	r3, #3
 8003c02:	f04f 0a00 	mov.w	sl, #0
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f02b 0304 	bic.w	r3, fp, #4
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	4633      	mov	r3, r6
 8003c10:	4621      	mov	r1, r4
 8003c12:	4628      	mov	r0, r5
 8003c14:	9700      	str	r7, [sp, #0]
 8003c16:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c18:	f000 f9d4 	bl	8003fc4 <_printf_common>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	f040 8090 	bne.w	8003d42 <_printf_float+0x1d6>
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c26:	b011      	add	sp, #68	; 0x44
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	4653      	mov	r3, sl
 8003c30:	4640      	mov	r0, r8
 8003c32:	4651      	mov	r1, sl
 8003c34:	f7fc ff9e 	bl	8000b74 <__aeabi_dcmpun>
 8003c38:	b148      	cbz	r0, 8003c4e <_printf_float+0xe2>
 8003c3a:	f1ba 0f00 	cmp.w	sl, #0
 8003c3e:	bfb8      	it	lt
 8003c40:	232d      	movlt	r3, #45	; 0x2d
 8003c42:	4880      	ldr	r0, [pc, #512]	; (8003e44 <_printf_float+0x2d8>)
 8003c44:	bfb8      	it	lt
 8003c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c4a:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <_printf_float+0x2dc>)
 8003c4c:	e7d3      	b.n	8003bf6 <_printf_float+0x8a>
 8003c4e:	6863      	ldr	r3, [r4, #4]
 8003c50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	d142      	bne.n	8003cde <_printf_float+0x172>
 8003c58:	2306      	movs	r3, #6
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	9206      	str	r2, [sp, #24]
 8003c60:	aa0e      	add	r2, sp, #56	; 0x38
 8003c62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c66:	aa0d      	add	r2, sp, #52	; 0x34
 8003c68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c6c:	9203      	str	r2, [sp, #12]
 8003c6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4642      	mov	r2, r8
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4653      	mov	r3, sl
 8003c82:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c84:	f7ff fed4 	bl	8003a30 <__cvt>
 8003c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	2947      	cmp	r1, #71	; 0x47
 8003c8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c90:	d108      	bne.n	8003ca4 <_printf_float+0x138>
 8003c92:	1cc8      	adds	r0, r1, #3
 8003c94:	db02      	blt.n	8003c9c <_printf_float+0x130>
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	dd40      	ble.n	8003d1e <_printf_float+0x1b2>
 8003c9c:	f1a9 0902 	sub.w	r9, r9, #2
 8003ca0:	fa5f f989 	uxtb.w	r9, r9
 8003ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ca8:	d81f      	bhi.n	8003cea <_printf_float+0x17e>
 8003caa:	464a      	mov	r2, r9
 8003cac:	3901      	subs	r1, #1
 8003cae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8003cb4:	f7ff ff1b 	bl	8003aee <__exponent>
 8003cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cba:	4682      	mov	sl, r0
 8003cbc:	1813      	adds	r3, r2, r0
 8003cbe:	2a01      	cmp	r2, #1
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	dc02      	bgt.n	8003cca <_printf_float+0x15e>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	07d2      	lsls	r2, r2, #31
 8003cc8:	d501      	bpl.n	8003cce <_printf_float+0x162>
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d09b      	beq.n	8003c0e <_printf_float+0xa2>
 8003cd6:	232d      	movs	r3, #45	; 0x2d
 8003cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cdc:	e797      	b.n	8003c0e <_printf_float+0xa2>
 8003cde:	2947      	cmp	r1, #71	; 0x47
 8003ce0:	d1bc      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ba      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7b7      	b.n	8003c5a <_printf_float+0xee>
 8003cea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003cee:	d118      	bne.n	8003d22 <_printf_float+0x1b6>
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	dd0b      	ble.n	8003d0e <_printf_float+0x1a2>
 8003cf6:	6121      	str	r1, [r4, #16]
 8003cf8:	b913      	cbnz	r3, 8003d00 <_printf_float+0x194>
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	07d0      	lsls	r0, r2, #31
 8003cfe:	d502      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d00:	3301      	adds	r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	f04f 0a00 	mov.w	sl, #0
 8003d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d0c:	e7df      	b.n	8003cce <_printf_float+0x162>
 8003d0e:	b913      	cbnz	r3, 8003d16 <_printf_float+0x1aa>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	07d2      	lsls	r2, r2, #31
 8003d14:	d501      	bpl.n	8003d1a <_printf_float+0x1ae>
 8003d16:	3302      	adds	r3, #2
 8003d18:	e7f4      	b.n	8003d04 <_printf_float+0x198>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e7f2      	b.n	8003d04 <_printf_float+0x198>
 8003d1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d24:	4299      	cmp	r1, r3
 8003d26:	db05      	blt.n	8003d34 <_printf_float+0x1c8>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	6121      	str	r1, [r4, #16]
 8003d2c:	07d8      	lsls	r0, r3, #31
 8003d2e:	d5ea      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d30:	1c4b      	adds	r3, r1, #1
 8003d32:	e7e7      	b.n	8003d04 <_printf_float+0x198>
 8003d34:	2900      	cmp	r1, #0
 8003d36:	bfcc      	ite	gt
 8003d38:	2201      	movgt	r2, #1
 8003d3a:	f1c1 0202 	rsble	r2, r1, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	e7e0      	b.n	8003d04 <_printf_float+0x198>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	055a      	lsls	r2, r3, #21
 8003d46:	d407      	bmi.n	8003d58 <_printf_float+0x1ec>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	d12b      	bne.n	8003dae <_printf_float+0x242>
 8003d56:	e764      	b.n	8003c22 <_printf_float+0xb6>
 8003d58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d5c:	f240 80dd 	bls.w	8003f1a <_printf_float+0x3ae>
 8003d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d64:	2200      	movs	r2, #0
 8003d66:	2300      	movs	r3, #0
 8003d68:	f7fc fed2 	bl	8000b10 <__aeabi_dcmpeq>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d033      	beq.n	8003dd8 <_printf_float+0x26c>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <_printf_float+0x2e0>)
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f af51 	beq.w	8003c22 <_printf_float+0xb6>
 8003d80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d84:	429a      	cmp	r2, r3
 8003d86:	db02      	blt.n	8003d8e <_printf_float+0x222>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	07d8      	lsls	r0, r3, #31
 8003d8c:	d50f      	bpl.n	8003dae <_printf_float+0x242>
 8003d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f af42 	beq.w	8003c22 <_printf_float+0xb6>
 8003d9e:	f04f 0800 	mov.w	r8, #0
 8003da2:	f104 091a 	add.w	r9, r4, #26
 8003da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4543      	cmp	r3, r8
 8003dac:	dc09      	bgt.n	8003dc2 <_printf_float+0x256>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	079b      	lsls	r3, r3, #30
 8003db2:	f100 8102 	bmi.w	8003fba <_printf_float+0x44e>
 8003db6:	68e0      	ldr	r0, [r4, #12]
 8003db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	bfb8      	it	lt
 8003dbe:	4618      	movlt	r0, r3
 8003dc0:	e731      	b.n	8003c26 <_printf_float+0xba>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f af28 	beq.w	8003c22 <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	e7e6      	b.n	8003da6 <_printf_float+0x23a>
 8003dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dc38      	bgt.n	8003e50 <_printf_float+0x2e4>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4631      	mov	r1, r6
 8003de2:	4628      	mov	r0, r5
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <_printf_float+0x2e0>)
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	f43f af1a 	beq.w	8003c22 <_printf_float+0xb6>
 8003dee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d102      	bne.n	8003dfc <_printf_float+0x290>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	07d9      	lsls	r1, r3, #31
 8003dfa:	d5d8      	bpl.n	8003dae <_printf_float+0x242>
 8003dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f af0b 	beq.w	8003c22 <_printf_float+0xb6>
 8003e0c:	f04f 0900 	mov.w	r9, #0
 8003e10:	f104 0a1a 	add.w	sl, r4, #26
 8003e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e16:	425b      	negs	r3, r3
 8003e18:	454b      	cmp	r3, r9
 8003e1a:	dc01      	bgt.n	8003e20 <_printf_float+0x2b4>
 8003e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1e:	e794      	b.n	8003d4a <_printf_float+0x1de>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4652      	mov	r2, sl
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f aef9 	beq.w	8003c22 <_printf_float+0xb6>
 8003e30:	f109 0901 	add.w	r9, r9, #1
 8003e34:	e7ee      	b.n	8003e14 <_printf_float+0x2a8>
 8003e36:	bf00      	nop
 8003e38:	7fefffff 	.word	0x7fefffff
 8003e3c:	080082d4 	.word	0x080082d4
 8003e40:	080082d8 	.word	0x080082d8
 8003e44:	080082e0 	.word	0x080082e0
 8003e48:	080082dc 	.word	0x080082dc
 8003e4c:	080082e4 	.word	0x080082e4
 8003e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bfa8      	it	ge
 8003e58:	461a      	movge	r2, r3
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	4691      	mov	r9, r2
 8003e5e:	dc37      	bgt.n	8003ed0 <_printf_float+0x364>
 8003e60:	f04f 0b00 	mov.w	fp, #0
 8003e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e68:	f104 021a 	add.w	r2, r4, #26
 8003e6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e70:	ebaa 0309 	sub.w	r3, sl, r9
 8003e74:	455b      	cmp	r3, fp
 8003e76:	dc33      	bgt.n	8003ee0 <_printf_float+0x374>
 8003e78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	db3b      	blt.n	8003ef8 <_printf_float+0x38c>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d438      	bmi.n	8003ef8 <_printf_float+0x38c>
 8003e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e8a:	eba2 030a 	sub.w	r3, r2, sl
 8003e8e:	eba2 0901 	sub.w	r9, r2, r1
 8003e92:	4599      	cmp	r9, r3
 8003e94:	bfa8      	it	ge
 8003e96:	4699      	movge	r9, r3
 8003e98:	f1b9 0f00 	cmp.w	r9, #0
 8003e9c:	dc34      	bgt.n	8003f08 <_printf_float+0x39c>
 8003e9e:	f04f 0800 	mov.w	r8, #0
 8003ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea6:	f104 0a1a 	add.w	sl, r4, #26
 8003eaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	eba3 0309 	sub.w	r3, r3, r9
 8003eb4:	4543      	cmp	r3, r8
 8003eb6:	f77f af7a 	ble.w	8003dae <_printf_float+0x242>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4652      	mov	r2, sl
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f aeac 	beq.w	8003c22 <_printf_float+0xb6>
 8003eca:	f108 0801 	add.w	r8, r8, #1
 8003ece:	e7ec      	b.n	8003eaa <_printf_float+0x33e>
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	d1c0      	bne.n	8003e60 <_printf_float+0x2f4>
 8003ede:	e6a0      	b.n	8003c22 <_printf_float+0xb6>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f ae99 	beq.w	8003c22 <_printf_float+0xb6>
 8003ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ef2:	f10b 0b01 	add.w	fp, fp, #1
 8003ef6:	e7b9      	b.n	8003e6c <_printf_float+0x300>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	d1bf      	bne.n	8003e86 <_printf_float+0x31a>
 8003f06:	e68c      	b.n	8003c22 <_printf_float+0xb6>
 8003f08:	464b      	mov	r3, r9
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	eb08 020a 	add.w	r2, r8, sl
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	d1c2      	bne.n	8003e9e <_printf_float+0x332>
 8003f18:	e683      	b.n	8003c22 <_printf_float+0xb6>
 8003f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1c:	2a01      	cmp	r2, #1
 8003f1e:	dc01      	bgt.n	8003f24 <_printf_float+0x3b8>
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d537      	bpl.n	8003f94 <_printf_float+0x428>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4642      	mov	r2, r8
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f ae77 	beq.w	8003c22 <_printf_float+0xb6>
 8003f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f43f ae6f 	beq.w	8003c22 <_printf_float+0xb6>
 8003f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f7fc fde0 	bl	8000b10 <__aeabi_dcmpeq>
 8003f50:	b9d8      	cbnz	r0, 8003f8a <_printf_float+0x41e>
 8003f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f54:	f108 0201 	add.w	r2, r8, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	d10e      	bne.n	8003f82 <_printf_float+0x416>
 8003f64:	e65d      	b.n	8003c22 <_printf_float+0xb6>
 8003f66:	2301      	movs	r3, #1
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae56 	beq.w	8003c22 <_printf_float+0xb6>
 8003f76:	f108 0801 	add.w	r8, r8, #1
 8003f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	4543      	cmp	r3, r8
 8003f80:	dcf1      	bgt.n	8003f66 <_printf_float+0x3fa>
 8003f82:	4653      	mov	r3, sl
 8003f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f88:	e6e0      	b.n	8003d4c <_printf_float+0x1e0>
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	f104 091a 	add.w	r9, r4, #26
 8003f92:	e7f2      	b.n	8003f7a <_printf_float+0x40e>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4642      	mov	r2, r8
 8003f98:	e7df      	b.n	8003f5a <_printf_float+0x3ee>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	464a      	mov	r2, r9
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f ae3c 	beq.w	8003c22 <_printf_float+0xb6>
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fb2:	1a5b      	subs	r3, r3, r1
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	dcf0      	bgt.n	8003f9a <_printf_float+0x42e>
 8003fb8:	e6fd      	b.n	8003db6 <_printf_float+0x24a>
 8003fba:	f04f 0800 	mov.w	r8, #0
 8003fbe:	f104 0919 	add.w	r9, r4, #25
 8003fc2:	e7f4      	b.n	8003fae <_printf_float+0x442>

08003fc4 <_printf_common>:
 8003fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	4616      	mov	r6, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	688a      	ldr	r2, [r1, #8]
 8003fce:	690b      	ldr	r3, [r1, #16]
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bfb8      	it	lt
 8003fd6:	4613      	movlt	r3, r2
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fde:	460c      	mov	r4, r1
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	b10a      	cbz	r2, 8003fea <_printf_common+0x26>
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	0699      	lsls	r1, r3, #26
 8003fee:	bf42      	ittt	mi
 8003ff0:	6833      	ldrmi	r3, [r6, #0]
 8003ff2:	3302      	addmi	r3, #2
 8003ff4:	6033      	strmi	r3, [r6, #0]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	f015 0506 	ands.w	r5, r5, #6
 8003ffc:	d106      	bne.n	800400c <_printf_common+0x48>
 8003ffe:	f104 0a19 	add.w	sl, r4, #25
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	6832      	ldr	r2, [r6, #0]
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	42ab      	cmp	r3, r5
 800400a:	dc28      	bgt.n	800405e <_printf_common+0x9a>
 800400c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004010:	1e13      	subs	r3, r2, #0
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	bf18      	it	ne
 8004016:	2301      	movne	r3, #1
 8004018:	0692      	lsls	r2, r2, #26
 800401a:	d42d      	bmi.n	8004078 <_printf_common+0xb4>
 800401c:	4649      	mov	r1, r9
 800401e:	4638      	mov	r0, r7
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	47c0      	blx	r8
 8004026:	3001      	adds	r0, #1
 8004028:	d020      	beq.n	800406c <_printf_common+0xa8>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	68e5      	ldr	r5, [r4, #12]
 800402e:	f003 0306 	and.w	r3, r3, #6
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf18      	it	ne
 8004036:	2500      	movne	r5, #0
 8004038:	6832      	ldr	r2, [r6, #0]
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	bf08      	it	eq
 8004042:	1aad      	subeq	r5, r5, r2
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	bf08      	it	eq
 8004048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800404c:	4293      	cmp	r3, r2
 800404e:	bfc4      	itt	gt
 8004050:	1a9b      	subgt	r3, r3, r2
 8004052:	18ed      	addgt	r5, r5, r3
 8004054:	341a      	adds	r4, #26
 8004056:	42b5      	cmp	r5, r6
 8004058:	d11a      	bne.n	8004090 <_printf_common+0xcc>
 800405a:	2000      	movs	r0, #0
 800405c:	e008      	b.n	8004070 <_printf_common+0xac>
 800405e:	2301      	movs	r3, #1
 8004060:	4652      	mov	r2, sl
 8004062:	4649      	mov	r1, r9
 8004064:	4638      	mov	r0, r7
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d103      	bne.n	8004074 <_printf_common+0xb0>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	3501      	adds	r5, #1
 8004076:	e7c4      	b.n	8004002 <_printf_common+0x3e>
 8004078:	2030      	movs	r0, #48	; 0x30
 800407a:	18e1      	adds	r1, r4, r3
 800407c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004086:	4422      	add	r2, r4
 8004088:	3302      	adds	r3, #2
 800408a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408e:	e7c5      	b.n	800401c <_printf_common+0x58>
 8004090:	2301      	movs	r3, #1
 8004092:	4622      	mov	r2, r4
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d0e6      	beq.n	800406c <_printf_common+0xa8>
 800409e:	3601      	adds	r6, #1
 80040a0:	e7d9      	b.n	8004056 <_printf_common+0x92>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	460c      	mov	r4, r1
 80040aa:	7e27      	ldrb	r7, [r4, #24]
 80040ac:	4691      	mov	r9, r2
 80040ae:	2f78      	cmp	r7, #120	; 0x78
 80040b0:	4680      	mov	r8, r0
 80040b2:	469a      	mov	sl, r3
 80040b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	; 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d9 	beq.w	8004278 <_printf_i+0x1d4>
 80040c6:	2f58      	cmp	r7, #88	; 0x58
 80040c8:	f000 80a4 	beq.w	8004214 <_printf_i+0x170>
 80040cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a001      	add	r0, pc, #4	; (adr r0, 80040e4 <_printf_i+0x40>)
 80040e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	0800425f 	.word	0x0800425f
 8004114:	08004181 	.word	0x08004181
 8004118:	08004241 	.word	0x08004241
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004281 	.word	0x08004281
 8004128:	080040cd 	.word	0x080040cd
 800412c:	08004181 	.word	0x08004181
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004249 	.word	0x08004249
 800413c:	680b      	ldr	r3, [r1, #0]
 800413e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	600a      	str	r2, [r1, #0]
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e0a4      	b.n	800429a <_printf_i+0x1f6>
 8004150:	6825      	ldr	r5, [r4, #0]
 8004152:	6808      	ldr	r0, [r1, #0]
 8004154:	062e      	lsls	r6, r5, #24
 8004156:	f100 0304 	add.w	r3, r0, #4
 800415a:	d50a      	bpl.n	8004172 <_printf_i+0xce>
 800415c:	6805      	ldr	r5, [r0, #0]
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	2d00      	cmp	r5, #0
 8004162:	da03      	bge.n	800416c <_printf_i+0xc8>
 8004164:	232d      	movs	r3, #45	; 0x2d
 8004166:	426d      	negs	r5, r5
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416c:	230a      	movs	r3, #10
 800416e:	485e      	ldr	r0, [pc, #376]	; (80042e8 <_printf_i+0x244>)
 8004170:	e019      	b.n	80041a6 <_printf_i+0x102>
 8004172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004176:	6805      	ldr	r5, [r0, #0]
 8004178:	600b      	str	r3, [r1, #0]
 800417a:	bf18      	it	ne
 800417c:	b22d      	sxthne	r5, r5
 800417e:	e7ef      	b.n	8004160 <_printf_i+0xbc>
 8004180:	680b      	ldr	r3, [r1, #0]
 8004182:	6825      	ldr	r5, [r4, #0]
 8004184:	1d18      	adds	r0, r3, #4
 8004186:	6008      	str	r0, [r1, #0]
 8004188:	0628      	lsls	r0, r5, #24
 800418a:	d501      	bpl.n	8004190 <_printf_i+0xec>
 800418c:	681d      	ldr	r5, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0xf2>
 8004190:	0669      	lsls	r1, r5, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0xe8>
 8004194:	881d      	ldrh	r5, [r3, #0]
 8004196:	2f6f      	cmp	r7, #111	; 0x6f
 8004198:	bf0c      	ite	eq
 800419a:	2308      	moveq	r3, #8
 800419c:	230a      	movne	r3, #10
 800419e:	4852      	ldr	r0, [pc, #328]	; (80042e8 <_printf_i+0x244>)
 80041a0:	2100      	movs	r1, #0
 80041a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a6:	6866      	ldr	r6, [r4, #4]
 80041a8:	2e00      	cmp	r6, #0
 80041aa:	bfa8      	it	ge
 80041ac:	6821      	ldrge	r1, [r4, #0]
 80041ae:	60a6      	str	r6, [r4, #8]
 80041b0:	bfa4      	itt	ge
 80041b2:	f021 0104 	bicge.w	r1, r1, #4
 80041b6:	6021      	strge	r1, [r4, #0]
 80041b8:	b90d      	cbnz	r5, 80041be <_printf_i+0x11a>
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d04d      	beq.n	800425a <_printf_i+0x1b6>
 80041be:	4616      	mov	r6, r2
 80041c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80041c4:	fb03 5711 	mls	r7, r3, r1, r5
 80041c8:	5dc7      	ldrb	r7, [r0, r7]
 80041ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ce:	462f      	mov	r7, r5
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	460d      	mov	r5, r1
 80041d4:	d9f4      	bls.n	80041c0 <_printf_i+0x11c>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10b      	bne.n	80041f2 <_printf_i+0x14e>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07df      	lsls	r7, r3, #31
 80041de:	d508      	bpl.n	80041f2 <_printf_i+0x14e>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	6861      	ldr	r1, [r4, #4]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	bfde      	ittt	le
 80041e8:	2330      	movle	r3, #48	; 0x30
 80041ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ee:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80041f2:	1b92      	subs	r2, r2, r6
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	464b      	mov	r3, r9
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	aa03      	add	r2, sp, #12
 8004202:	f7ff fedf 	bl	8003fc4 <_printf_common>
 8004206:	3001      	adds	r0, #1
 8004208:	d14c      	bne.n	80042a4 <_printf_i+0x200>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800420e:	b004      	add	sp, #16
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	4834      	ldr	r0, [pc, #208]	; (80042e8 <_printf_i+0x244>)
 8004216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800421a:	680e      	ldr	r6, [r1, #0]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004222:	061f      	lsls	r7, r3, #24
 8004224:	600e      	str	r6, [r1, #0]
 8004226:	d514      	bpl.n	8004252 <_printf_i+0x1ae>
 8004228:	07d9      	lsls	r1, r3, #31
 800422a:	bf44      	itt	mi
 800422c:	f043 0320 	orrmi.w	r3, r3, #32
 8004230:	6023      	strmi	r3, [r4, #0]
 8004232:	b91d      	cbnz	r5, 800423c <_printf_i+0x198>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	2310      	movs	r3, #16
 800423e:	e7af      	b.n	80041a0 <_printf_i+0xfc>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f043 0320 	orr.w	r3, r3, #32
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	2378      	movs	r3, #120	; 0x78
 800424a:	4828      	ldr	r0, [pc, #160]	; (80042ec <_printf_i+0x248>)
 800424c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004250:	e7e3      	b.n	800421a <_printf_i+0x176>
 8004252:	065e      	lsls	r6, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2ad      	uxthmi	r5, r5
 8004258:	e7e6      	b.n	8004228 <_printf_i+0x184>
 800425a:	4616      	mov	r6, r2
 800425c:	e7bb      	b.n	80041d6 <_printf_i+0x132>
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	6826      	ldr	r6, [r4, #0]
 8004262:	1d1d      	adds	r5, r3, #4
 8004264:	6960      	ldr	r0, [r4, #20]
 8004266:	600d      	str	r5, [r1, #0]
 8004268:	0635      	lsls	r5, r6, #24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	d501      	bpl.n	8004272 <_printf_i+0x1ce>
 800426e:	6018      	str	r0, [r3, #0]
 8004270:	e002      	b.n	8004278 <_printf_i+0x1d4>
 8004272:	0671      	lsls	r1, r6, #25
 8004274:	d5fb      	bpl.n	800426e <_printf_i+0x1ca>
 8004276:	8018      	strh	r0, [r3, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	4616      	mov	r6, r2
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	e7ba      	b.n	80041f6 <_printf_i+0x152>
 8004280:	680b      	ldr	r3, [r1, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	600a      	str	r2, [r1, #0]
 8004286:	681e      	ldr	r6, [r3, #0]
 8004288:	2100      	movs	r1, #0
 800428a:	4630      	mov	r0, r6
 800428c:	6862      	ldr	r2, [r4, #4]
 800428e:	f002 fb09 	bl	80068a4 <memchr>
 8004292:	b108      	cbz	r0, 8004298 <_printf_i+0x1f4>
 8004294:	1b80      	subs	r0, r0, r6
 8004296:	6060      	str	r0, [r4, #4]
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	e7a8      	b.n	80041f6 <_printf_i+0x152>
 80042a4:	4632      	mov	r2, r6
 80042a6:	4649      	mov	r1, r9
 80042a8:	4640      	mov	r0, r8
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	47d0      	blx	sl
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0ab      	beq.n	800420a <_printf_i+0x166>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d413      	bmi.n	80042e0 <_printf_i+0x23c>
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	4298      	cmp	r0, r3
 80042be:	bfb8      	it	lt
 80042c0:	4618      	movlt	r0, r3
 80042c2:	e7a4      	b.n	800420e <_printf_i+0x16a>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4632      	mov	r2, r6
 80042c8:	4649      	mov	r1, r9
 80042ca:	4640      	mov	r0, r8
 80042cc:	47d0      	blx	sl
 80042ce:	3001      	adds	r0, #1
 80042d0:	d09b      	beq.n	800420a <_printf_i+0x166>
 80042d2:	3501      	adds	r5, #1
 80042d4:	68e3      	ldr	r3, [r4, #12]
 80042d6:	9903      	ldr	r1, [sp, #12]
 80042d8:	1a5b      	subs	r3, r3, r1
 80042da:	42ab      	cmp	r3, r5
 80042dc:	dcf2      	bgt.n	80042c4 <_printf_i+0x220>
 80042de:	e7eb      	b.n	80042b8 <_printf_i+0x214>
 80042e0:	2500      	movs	r5, #0
 80042e2:	f104 0619 	add.w	r6, r4, #25
 80042e6:	e7f5      	b.n	80042d4 <_printf_i+0x230>
 80042e8:	080082e6 	.word	0x080082e6
 80042ec:	080082f7 	.word	0x080082f7

080042f0 <_scanf_float>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	b087      	sub	sp, #28
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	688b      	ldr	r3, [r1, #8]
 80042fa:	4617      	mov	r7, r2
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004302:	bf85      	ittet	hi
 8004304:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004308:	195b      	addhi	r3, r3, r5
 800430a:	2300      	movls	r3, #0
 800430c:	9302      	strhi	r3, [sp, #8]
 800430e:	bf88      	it	hi
 8004310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004314:	468b      	mov	fp, r1
 8004316:	f04f 0500 	mov.w	r5, #0
 800431a:	bf8c      	ite	hi
 800431c:	608b      	strhi	r3, [r1, #8]
 800431e:	9302      	strls	r3, [sp, #8]
 8004320:	680b      	ldr	r3, [r1, #0]
 8004322:	4680      	mov	r8, r0
 8004324:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004328:	f84b 3b1c 	str.w	r3, [fp], #28
 800432c:	460c      	mov	r4, r1
 800432e:	465e      	mov	r6, fp
 8004330:	46aa      	mov	sl, r5
 8004332:	46a9      	mov	r9, r5
 8004334:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004338:	9501      	str	r5, [sp, #4]
 800433a:	68a2      	ldr	r2, [r4, #8]
 800433c:	b152      	cbz	r2, 8004354 <_scanf_float+0x64>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b4e      	cmp	r3, #78	; 0x4e
 8004344:	d864      	bhi.n	8004410 <_scanf_float+0x120>
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d83c      	bhi.n	80043c4 <_scanf_float+0xd4>
 800434a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800434e:	b2c8      	uxtb	r0, r1
 8004350:	280e      	cmp	r0, #14
 8004352:	d93a      	bls.n	80043ca <_scanf_float+0xda>
 8004354:	f1b9 0f00 	cmp.w	r9, #0
 8004358:	d003      	beq.n	8004362 <_scanf_float+0x72>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004366:	f1ba 0f01 	cmp.w	sl, #1
 800436a:	f200 8113 	bhi.w	8004594 <_scanf_float+0x2a4>
 800436e:	455e      	cmp	r6, fp
 8004370:	f200 8105 	bhi.w	800457e <_scanf_float+0x28e>
 8004374:	2501      	movs	r5, #1
 8004376:	4628      	mov	r0, r5
 8004378:	b007      	add	sp, #28
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004382:	2a0d      	cmp	r2, #13
 8004384:	d8e6      	bhi.n	8004354 <_scanf_float+0x64>
 8004386:	a101      	add	r1, pc, #4	; (adr r1, 800438c <_scanf_float+0x9c>)
 8004388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800438c:	080044cb 	.word	0x080044cb
 8004390:	08004355 	.word	0x08004355
 8004394:	08004355 	.word	0x08004355
 8004398:	08004355 	.word	0x08004355
 800439c:	0800452b 	.word	0x0800452b
 80043a0:	08004503 	.word	0x08004503
 80043a4:	08004355 	.word	0x08004355
 80043a8:	08004355 	.word	0x08004355
 80043ac:	080044d9 	.word	0x080044d9
 80043b0:	08004355 	.word	0x08004355
 80043b4:	08004355 	.word	0x08004355
 80043b8:	08004355 	.word	0x08004355
 80043bc:	08004355 	.word	0x08004355
 80043c0:	08004491 	.word	0x08004491
 80043c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80043c8:	e7db      	b.n	8004382 <_scanf_float+0x92>
 80043ca:	290e      	cmp	r1, #14
 80043cc:	d8c2      	bhi.n	8004354 <_scanf_float+0x64>
 80043ce:	a001      	add	r0, pc, #4	; (adr r0, 80043d4 <_scanf_float+0xe4>)
 80043d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80043d4:	08004483 	.word	0x08004483
 80043d8:	08004355 	.word	0x08004355
 80043dc:	08004483 	.word	0x08004483
 80043e0:	08004517 	.word	0x08004517
 80043e4:	08004355 	.word	0x08004355
 80043e8:	08004431 	.word	0x08004431
 80043ec:	0800446d 	.word	0x0800446d
 80043f0:	0800446d 	.word	0x0800446d
 80043f4:	0800446d 	.word	0x0800446d
 80043f8:	0800446d 	.word	0x0800446d
 80043fc:	0800446d 	.word	0x0800446d
 8004400:	0800446d 	.word	0x0800446d
 8004404:	0800446d 	.word	0x0800446d
 8004408:	0800446d 	.word	0x0800446d
 800440c:	0800446d 	.word	0x0800446d
 8004410:	2b6e      	cmp	r3, #110	; 0x6e
 8004412:	d809      	bhi.n	8004428 <_scanf_float+0x138>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d8b2      	bhi.n	800437e <_scanf_float+0x8e>
 8004418:	2b54      	cmp	r3, #84	; 0x54
 800441a:	d077      	beq.n	800450c <_scanf_float+0x21c>
 800441c:	2b59      	cmp	r3, #89	; 0x59
 800441e:	d199      	bne.n	8004354 <_scanf_float+0x64>
 8004420:	2d07      	cmp	r5, #7
 8004422:	d197      	bne.n	8004354 <_scanf_float+0x64>
 8004424:	2508      	movs	r5, #8
 8004426:	e029      	b.n	800447c <_scanf_float+0x18c>
 8004428:	2b74      	cmp	r3, #116	; 0x74
 800442a:	d06f      	beq.n	800450c <_scanf_float+0x21c>
 800442c:	2b79      	cmp	r3, #121	; 0x79
 800442e:	e7f6      	b.n	800441e <_scanf_float+0x12e>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	05c8      	lsls	r0, r1, #23
 8004434:	d51a      	bpl.n	800446c <_scanf_float+0x17c>
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800443c:	6021      	str	r1, [r4, #0]
 800443e:	f109 0901 	add.w	r9, r9, #1
 8004442:	b11b      	cbz	r3, 800444c <_scanf_float+0x15c>
 8004444:	3b01      	subs	r3, #1
 8004446:	3201      	adds	r2, #1
 8004448:	9302      	str	r3, [sp, #8]
 800444a:	60a2      	str	r2, [r4, #8]
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	6123      	str	r3, [r4, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f340 8084 	ble.w	800456c <_scanf_float+0x27c>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	e766      	b.n	800433a <_scanf_float+0x4a>
 800446c:	eb1a 0f05 	cmn.w	sl, r5
 8004470:	f47f af70 	bne.w	8004354 <_scanf_float+0x64>
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	f806 3b01 	strb.w	r3, [r6], #1
 8004480:	e7e4      	b.n	800444c <_scanf_float+0x15c>
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	0610      	lsls	r0, r2, #24
 8004486:	f57f af65 	bpl.w	8004354 <_scanf_float+0x64>
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	e7f4      	b.n	800447a <_scanf_float+0x18a>
 8004490:	f1ba 0f00 	cmp.w	sl, #0
 8004494:	d10e      	bne.n	80044b4 <_scanf_float+0x1c4>
 8004496:	f1b9 0f00 	cmp.w	r9, #0
 800449a:	d10e      	bne.n	80044ba <_scanf_float+0x1ca>
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044a6:	d108      	bne.n	80044ba <_scanf_float+0x1ca>
 80044a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044ac:	f04f 0a01 	mov.w	sl, #1
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	e7e3      	b.n	800447c <_scanf_float+0x18c>
 80044b4:	f1ba 0f02 	cmp.w	sl, #2
 80044b8:	d055      	beq.n	8004566 <_scanf_float+0x276>
 80044ba:	2d01      	cmp	r5, #1
 80044bc:	d002      	beq.n	80044c4 <_scanf_float+0x1d4>
 80044be:	2d04      	cmp	r5, #4
 80044c0:	f47f af48 	bne.w	8004354 <_scanf_float+0x64>
 80044c4:	3501      	adds	r5, #1
 80044c6:	b2ed      	uxtb	r5, r5
 80044c8:	e7d8      	b.n	800447c <_scanf_float+0x18c>
 80044ca:	f1ba 0f01 	cmp.w	sl, #1
 80044ce:	f47f af41 	bne.w	8004354 <_scanf_float+0x64>
 80044d2:	f04f 0a02 	mov.w	sl, #2
 80044d6:	e7d1      	b.n	800447c <_scanf_float+0x18c>
 80044d8:	b97d      	cbnz	r5, 80044fa <_scanf_float+0x20a>
 80044da:	f1b9 0f00 	cmp.w	r9, #0
 80044de:	f47f af3c 	bne.w	800435a <_scanf_float+0x6a>
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044ec:	f47f af39 	bne.w	8004362 <_scanf_float+0x72>
 80044f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044f4:	2501      	movs	r5, #1
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	e7c0      	b.n	800447c <_scanf_float+0x18c>
 80044fa:	2d03      	cmp	r5, #3
 80044fc:	d0e2      	beq.n	80044c4 <_scanf_float+0x1d4>
 80044fe:	2d05      	cmp	r5, #5
 8004500:	e7de      	b.n	80044c0 <_scanf_float+0x1d0>
 8004502:	2d02      	cmp	r5, #2
 8004504:	f47f af26 	bne.w	8004354 <_scanf_float+0x64>
 8004508:	2503      	movs	r5, #3
 800450a:	e7b7      	b.n	800447c <_scanf_float+0x18c>
 800450c:	2d06      	cmp	r5, #6
 800450e:	f47f af21 	bne.w	8004354 <_scanf_float+0x64>
 8004512:	2507      	movs	r5, #7
 8004514:	e7b2      	b.n	800447c <_scanf_float+0x18c>
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	0591      	lsls	r1, r2, #22
 800451a:	f57f af1b 	bpl.w	8004354 <_scanf_float+0x64>
 800451e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004522:	6022      	str	r2, [r4, #0]
 8004524:	f8cd 9004 	str.w	r9, [sp, #4]
 8004528:	e7a8      	b.n	800447c <_scanf_float+0x18c>
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004530:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004534:	d006      	beq.n	8004544 <_scanf_float+0x254>
 8004536:	0550      	lsls	r0, r2, #21
 8004538:	f57f af0c 	bpl.w	8004354 <_scanf_float+0x64>
 800453c:	f1b9 0f00 	cmp.w	r9, #0
 8004540:	f43f af0f 	beq.w	8004362 <_scanf_float+0x72>
 8004544:	0591      	lsls	r1, r2, #22
 8004546:	bf58      	it	pl
 8004548:	9901      	ldrpl	r1, [sp, #4]
 800454a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800454e:	bf58      	it	pl
 8004550:	eba9 0101 	subpl.w	r1, r9, r1
 8004554:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004558:	f04f 0900 	mov.w	r9, #0
 800455c:	bf58      	it	pl
 800455e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004562:	6022      	str	r2, [r4, #0]
 8004564:	e78a      	b.n	800447c <_scanf_float+0x18c>
 8004566:	f04f 0a03 	mov.w	sl, #3
 800456a:	e787      	b.n	800447c <_scanf_float+0x18c>
 800456c:	4639      	mov	r1, r7
 800456e:	4640      	mov	r0, r8
 8004570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004574:	4798      	blx	r3
 8004576:	2800      	cmp	r0, #0
 8004578:	f43f aedf 	beq.w	800433a <_scanf_float+0x4a>
 800457c:	e6ea      	b.n	8004354 <_scanf_float+0x64>
 800457e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004582:	463a      	mov	r2, r7
 8004584:	4640      	mov	r0, r8
 8004586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800458a:	4798      	blx	r3
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	e6ec      	b.n	800436e <_scanf_float+0x7e>
 8004594:	1e6b      	subs	r3, r5, #1
 8004596:	2b06      	cmp	r3, #6
 8004598:	d825      	bhi.n	80045e6 <_scanf_float+0x2f6>
 800459a:	2d02      	cmp	r5, #2
 800459c:	d836      	bhi.n	800460c <_scanf_float+0x31c>
 800459e:	455e      	cmp	r6, fp
 80045a0:	f67f aee8 	bls.w	8004374 <_scanf_float+0x84>
 80045a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045a8:	463a      	mov	r2, r7
 80045aa:	4640      	mov	r0, r8
 80045ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045b0:	4798      	blx	r3
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	e7f1      	b.n	800459e <_scanf_float+0x2ae>
 80045ba:	9802      	ldr	r0, [sp, #8]
 80045bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80045c4:	463a      	mov	r2, r7
 80045c6:	9002      	str	r0, [sp, #8]
 80045c8:	4640      	mov	r0, r8
 80045ca:	4798      	blx	r3
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80045d6:	fa5f fa8a 	uxtb.w	sl, sl
 80045da:	f1ba 0f02 	cmp.w	sl, #2
 80045de:	d1ec      	bne.n	80045ba <_scanf_float+0x2ca>
 80045e0:	3d03      	subs	r5, #3
 80045e2:	b2ed      	uxtb	r5, r5
 80045e4:	1b76      	subs	r6, r6, r5
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	05da      	lsls	r2, r3, #23
 80045ea:	d52f      	bpl.n	800464c <_scanf_float+0x35c>
 80045ec:	055b      	lsls	r3, r3, #21
 80045ee:	d510      	bpl.n	8004612 <_scanf_float+0x322>
 80045f0:	455e      	cmp	r6, fp
 80045f2:	f67f aebf 	bls.w	8004374 <_scanf_float+0x84>
 80045f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045fa:	463a      	mov	r2, r7
 80045fc:	4640      	mov	r0, r8
 80045fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004602:	4798      	blx	r3
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	3b01      	subs	r3, #1
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	e7f1      	b.n	80045f0 <_scanf_float+0x300>
 800460c:	46aa      	mov	sl, r5
 800460e:	9602      	str	r6, [sp, #8]
 8004610:	e7df      	b.n	80045d2 <_scanf_float+0x2e2>
 8004612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	2965      	cmp	r1, #101	; 0x65
 800461a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800461e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	d00c      	beq.n	8004640 <_scanf_float+0x350>
 8004626:	2945      	cmp	r1, #69	; 0x45
 8004628:	d00a      	beq.n	8004640 <_scanf_float+0x350>
 800462a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800462e:	463a      	mov	r2, r7
 8004630:	4640      	mov	r0, r8
 8004632:	4798      	blx	r3
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800463a:	3b01      	subs	r3, #1
 800463c:	1eb5      	subs	r5, r6, #2
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	463a      	mov	r2, r7
 8004642:	4640      	mov	r0, r8
 8004644:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004648:	4798      	blx	r3
 800464a:	462e      	mov	r6, r5
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	f015 0510 	ands.w	r5, r5, #16
 8004652:	d159      	bne.n	8004708 <_scanf_float+0x418>
 8004654:	7035      	strb	r5, [r6, #0]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d11c      	bne.n	800469c <_scanf_float+0x3ac>
 8004662:	9b01      	ldr	r3, [sp, #4]
 8004664:	454b      	cmp	r3, r9
 8004666:	eba3 0209 	sub.w	r2, r3, r9
 800466a:	d124      	bne.n	80046b6 <_scanf_float+0x3c6>
 800466c:	2200      	movs	r2, #0
 800466e:	4659      	mov	r1, fp
 8004670:	4640      	mov	r0, r8
 8004672:	f000 fe89 	bl	8005388 <_strtod_r>
 8004676:	f8d4 c000 	ldr.w	ip, [r4]
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	f01c 0f02 	tst.w	ip, #2
 8004680:	4606      	mov	r6, r0
 8004682:	460f      	mov	r7, r1
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	d021      	beq.n	80046cc <_scanf_float+0x3dc>
 8004688:	9903      	ldr	r1, [sp, #12]
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	600a      	str	r2, [r1, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	e9c3 6700 	strd	r6, r7, [r3]
 8004694:	68e3      	ldr	r3, [r4, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60e3      	str	r3, [r4, #12]
 800469a:	e66c      	b.n	8004376 <_scanf_float+0x86>
 800469c:	9b04      	ldr	r3, [sp, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0e4      	beq.n	800466c <_scanf_float+0x37c>
 80046a2:	9905      	ldr	r1, [sp, #20]
 80046a4:	230a      	movs	r3, #10
 80046a6:	462a      	mov	r2, r5
 80046a8:	4640      	mov	r0, r8
 80046aa:	3101      	adds	r1, #1
 80046ac:	f000 fef8 	bl	80054a0 <_strtol_r>
 80046b0:	9b04      	ldr	r3, [sp, #16]
 80046b2:	9e05      	ldr	r6, [sp, #20]
 80046b4:	1ac2      	subs	r2, r0, r3
 80046b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80046ba:	429e      	cmp	r6, r3
 80046bc:	bf28      	it	cs
 80046be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80046c2:	4630      	mov	r0, r6
 80046c4:	4911      	ldr	r1, [pc, #68]	; (800470c <_scanf_float+0x41c>)
 80046c6:	f000 f829 	bl	800471c <siprintf>
 80046ca:	e7cf      	b.n	800466c <_scanf_float+0x37c>
 80046cc:	f01c 0f04 	tst.w	ip, #4
 80046d0:	f103 0e04 	add.w	lr, r3, #4
 80046d4:	d003      	beq.n	80046de <_scanf_float+0x3ee>
 80046d6:	9903      	ldr	r1, [sp, #12]
 80046d8:	f8c1 e000 	str.w	lr, [r1]
 80046dc:	e7d7      	b.n	800468e <_scanf_float+0x39e>
 80046de:	9a03      	ldr	r2, [sp, #12]
 80046e0:	f8c2 e000 	str.w	lr, [r2]
 80046e4:	f8d3 8000 	ldr.w	r8, [r3]
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	f7fc fa42 	bl	8000b74 <__aeabi_dcmpun>
 80046f0:	b128      	cbz	r0, 80046fe <_scanf_float+0x40e>
 80046f2:	4807      	ldr	r0, [pc, #28]	; (8004710 <_scanf_float+0x420>)
 80046f4:	f000 f80e 	bl	8004714 <nanf>
 80046f8:	f8c8 0000 	str.w	r0, [r8]
 80046fc:	e7ca      	b.n	8004694 <_scanf_float+0x3a4>
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fc fa95 	bl	8000c30 <__aeabi_d2f>
 8004706:	e7f7      	b.n	80046f8 <_scanf_float+0x408>
 8004708:	2500      	movs	r5, #0
 800470a:	e634      	b.n	8004376 <_scanf_float+0x86>
 800470c:	08008308 	.word	0x08008308
 8004710:	0800824b 	.word	0x0800824b

08004714 <nanf>:
 8004714:	4800      	ldr	r0, [pc, #0]	; (8004718 <nanf+0x4>)
 8004716:	4770      	bx	lr
 8004718:	7fc00000 	.word	0x7fc00000

0800471c <siprintf>:
 800471c:	b40e      	push	{r1, r2, r3}
 800471e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004722:	b500      	push	{lr}
 8004724:	b09c      	sub	sp, #112	; 0x70
 8004726:	ab1d      	add	r3, sp, #116	; 0x74
 8004728:	9002      	str	r0, [sp, #8]
 800472a:	9006      	str	r0, [sp, #24]
 800472c:	9107      	str	r1, [sp, #28]
 800472e:	9104      	str	r1, [sp, #16]
 8004730:	4808      	ldr	r0, [pc, #32]	; (8004754 <siprintf+0x38>)
 8004732:	4909      	ldr	r1, [pc, #36]	; (8004758 <siprintf+0x3c>)
 8004734:	f853 2b04 	ldr.w	r2, [r3], #4
 8004738:	9105      	str	r1, [sp, #20]
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	a902      	add	r1, sp, #8
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	f002 fe86 	bl	8007450 <_svfiprintf_r>
 8004744:	2200      	movs	r2, #0
 8004746:	9b02      	ldr	r3, [sp, #8]
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	b01c      	add	sp, #112	; 0x70
 800474c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004750:	b003      	add	sp, #12
 8004752:	4770      	bx	lr
 8004754:	20000020 	.word	0x20000020
 8004758:	ffff0208 	.word	0xffff0208

0800475c <sulp>:
 800475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004760:	460f      	mov	r7, r1
 8004762:	4690      	mov	r8, r2
 8004764:	f002 fc1c 	bl	8006fa0 <__ulp>
 8004768:	4604      	mov	r4, r0
 800476a:	460d      	mov	r5, r1
 800476c:	f1b8 0f00 	cmp.w	r8, #0
 8004770:	d011      	beq.n	8004796 <sulp+0x3a>
 8004772:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004776:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800477a:	2b00      	cmp	r3, #0
 800477c:	dd0b      	ble.n	8004796 <sulp+0x3a>
 800477e:	2400      	movs	r4, #0
 8004780:	051b      	lsls	r3, r3, #20
 8004782:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004786:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800478a:	4622      	mov	r2, r4
 800478c:	462b      	mov	r3, r5
 800478e:	f7fb ff57 	bl	8000640 <__aeabi_dmul>
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080047a0 <_strtod_l>:
 80047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a4:	469b      	mov	fp, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	b0a1      	sub	sp, #132	; 0x84
 80047aa:	931c      	str	r3, [sp, #112]	; 0x70
 80047ac:	4ba1      	ldr	r3, [pc, #644]	; (8004a34 <_strtod_l+0x294>)
 80047ae:	4682      	mov	sl, r0
 80047b0:	681f      	ldr	r7, [r3, #0]
 80047b2:	460e      	mov	r6, r1
 80047b4:	4638      	mov	r0, r7
 80047b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80047b8:	f7fb fcca 	bl	8000150 <strlen>
 80047bc:	f04f 0800 	mov.w	r8, #0
 80047c0:	4604      	mov	r4, r0
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80047c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	2a2b      	cmp	r2, #43	; 0x2b
 80047ce:	d04c      	beq.n	800486a <_strtod_l+0xca>
 80047d0:	d83a      	bhi.n	8004848 <_strtod_l+0xa8>
 80047d2:	2a0d      	cmp	r2, #13
 80047d4:	d833      	bhi.n	800483e <_strtod_l+0x9e>
 80047d6:	2a08      	cmp	r2, #8
 80047d8:	d833      	bhi.n	8004842 <_strtod_l+0xa2>
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d03d      	beq.n	800485a <_strtod_l+0xba>
 80047de:	2300      	movs	r3, #0
 80047e0:	930c      	str	r3, [sp, #48]	; 0x30
 80047e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80047e4:	782b      	ldrb	r3, [r5, #0]
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	f040 80af 	bne.w	800494a <_strtod_l+0x1aa>
 80047ec:	786b      	ldrb	r3, [r5, #1]
 80047ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80047f2:	2b58      	cmp	r3, #88	; 0x58
 80047f4:	d16c      	bne.n	80048d0 <_strtod_l+0x130>
 80047f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047f8:	4650      	mov	r0, sl
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	ab1c      	add	r3, sp, #112	; 0x70
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4a8d      	ldr	r2, [pc, #564]	; (8004a38 <_strtod_l+0x298>)
 8004802:	f8cd b008 	str.w	fp, [sp, #8]
 8004806:	ab1d      	add	r3, sp, #116	; 0x74
 8004808:	a91b      	add	r1, sp, #108	; 0x6c
 800480a:	f001 fd2f 	bl	800626c <__gethex>
 800480e:	f010 0607 	ands.w	r6, r0, #7
 8004812:	4604      	mov	r4, r0
 8004814:	d005      	beq.n	8004822 <_strtod_l+0x82>
 8004816:	2e06      	cmp	r6, #6
 8004818:	d129      	bne.n	800486e <_strtod_l+0xce>
 800481a:	2300      	movs	r3, #0
 800481c:	3501      	adds	r5, #1
 800481e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004820:	930c      	str	r3, [sp, #48]	; 0x30
 8004822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 8596 	bne.w	8005356 <_strtod_l+0xbb6>
 800482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800482c:	b1d3      	cbz	r3, 8004864 <_strtod_l+0xc4>
 800482e:	4642      	mov	r2, r8
 8004830:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	b021      	add	sp, #132	; 0x84
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	2a20      	cmp	r2, #32
 8004840:	d1cd      	bne.n	80047de <_strtod_l+0x3e>
 8004842:	3301      	adds	r3, #1
 8004844:	931b      	str	r3, [sp, #108]	; 0x6c
 8004846:	e7bf      	b.n	80047c8 <_strtod_l+0x28>
 8004848:	2a2d      	cmp	r2, #45	; 0x2d
 800484a:	d1c8      	bne.n	80047de <_strtod_l+0x3e>
 800484c:	2201      	movs	r2, #1
 800484e:	920c      	str	r2, [sp, #48]	; 0x30
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	921b      	str	r2, [sp, #108]	; 0x6c
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1c3      	bne.n	80047e2 <_strtod_l+0x42>
 800485a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800485c:	961b      	str	r6, [sp, #108]	; 0x6c
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 8577 	bne.w	8005352 <_strtod_l+0xbb2>
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	e7e4      	b.n	8004834 <_strtod_l+0x94>
 800486a:	2200      	movs	r2, #0
 800486c:	e7ef      	b.n	800484e <_strtod_l+0xae>
 800486e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004870:	b13a      	cbz	r2, 8004882 <_strtod_l+0xe2>
 8004872:	2135      	movs	r1, #53	; 0x35
 8004874:	a81e      	add	r0, sp, #120	; 0x78
 8004876:	f002 fc97 	bl	80071a8 <__copybits>
 800487a:	4650      	mov	r0, sl
 800487c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800487e:	f002 f85f 	bl	8006940 <_Bfree>
 8004882:	3e01      	subs	r6, #1
 8004884:	2e05      	cmp	r6, #5
 8004886:	d807      	bhi.n	8004898 <_strtod_l+0xf8>
 8004888:	e8df f006 	tbb	[pc, r6]
 800488c:	1d180b0e 	.word	0x1d180b0e
 8004890:	030e      	.short	0x030e
 8004892:	f04f 0900 	mov.w	r9, #0
 8004896:	46c8      	mov	r8, r9
 8004898:	0721      	lsls	r1, r4, #28
 800489a:	d5c2      	bpl.n	8004822 <_strtod_l+0x82>
 800489c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80048a0:	e7bf      	b.n	8004822 <_strtod_l+0x82>
 80048a2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80048a6:	e7f7      	b.n	8004898 <_strtod_l+0xf8>
 80048a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80048aa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80048ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80048b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80048ba:	e7ed      	b.n	8004898 <_strtod_l+0xf8>
 80048bc:	f04f 0800 	mov.w	r8, #0
 80048c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004a3c <_strtod_l+0x29c>
 80048c4:	e7e8      	b.n	8004898 <_strtod_l+0xf8>
 80048c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80048ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80048ce:	e7e3      	b.n	8004898 <_strtod_l+0xf8>
 80048d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b30      	cmp	r3, #48	; 0x30
 80048da:	d0f9      	beq.n	80048d0 <_strtod_l+0x130>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0a0      	beq.n	8004822 <_strtod_l+0x82>
 80048e0:	2301      	movs	r3, #1
 80048e2:	9307      	str	r3, [sp, #28]
 80048e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048e6:	220a      	movs	r2, #10
 80048e8:	9308      	str	r3, [sp, #32]
 80048ea:	2300      	movs	r3, #0
 80048ec:	469b      	mov	fp, r3
 80048ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80048f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80048f4:	7805      	ldrb	r5, [r0, #0]
 80048f6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80048fa:	b2d9      	uxtb	r1, r3
 80048fc:	2909      	cmp	r1, #9
 80048fe:	d926      	bls.n	800494e <_strtod_l+0x1ae>
 8004900:	4622      	mov	r2, r4
 8004902:	4639      	mov	r1, r7
 8004904:	f002 feba 	bl	800767c <strncmp>
 8004908:	2800      	cmp	r0, #0
 800490a:	d032      	beq.n	8004972 <_strtod_l+0x1d2>
 800490c:	2000      	movs	r0, #0
 800490e:	462b      	mov	r3, r5
 8004910:	465c      	mov	r4, fp
 8004912:	4602      	mov	r2, r0
 8004914:	9004      	str	r0, [sp, #16]
 8004916:	2b65      	cmp	r3, #101	; 0x65
 8004918:	d001      	beq.n	800491e <_strtod_l+0x17e>
 800491a:	2b45      	cmp	r3, #69	; 0x45
 800491c:	d113      	bne.n	8004946 <_strtod_l+0x1a6>
 800491e:	b91c      	cbnz	r4, 8004928 <_strtod_l+0x188>
 8004920:	9b07      	ldr	r3, [sp, #28]
 8004922:	4303      	orrs	r3, r0
 8004924:	d099      	beq.n	800485a <_strtod_l+0xba>
 8004926:	2400      	movs	r4, #0
 8004928:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800492a:	1c73      	adds	r3, r6, #1
 800492c:	931b      	str	r3, [sp, #108]	; 0x6c
 800492e:	7873      	ldrb	r3, [r6, #1]
 8004930:	2b2b      	cmp	r3, #43	; 0x2b
 8004932:	d078      	beq.n	8004a26 <_strtod_l+0x286>
 8004934:	2b2d      	cmp	r3, #45	; 0x2d
 8004936:	d07b      	beq.n	8004a30 <_strtod_l+0x290>
 8004938:	2700      	movs	r7, #0
 800493a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800493e:	2909      	cmp	r1, #9
 8004940:	f240 8082 	bls.w	8004a48 <_strtod_l+0x2a8>
 8004944:	961b      	str	r6, [sp, #108]	; 0x6c
 8004946:	2500      	movs	r5, #0
 8004948:	e09e      	b.n	8004a88 <_strtod_l+0x2e8>
 800494a:	2300      	movs	r3, #0
 800494c:	e7c9      	b.n	80048e2 <_strtod_l+0x142>
 800494e:	f1bb 0f08 	cmp.w	fp, #8
 8004952:	bfd5      	itete	le
 8004954:	9906      	ldrle	r1, [sp, #24]
 8004956:	9905      	ldrgt	r1, [sp, #20]
 8004958:	fb02 3301 	mlale	r3, r2, r1, r3
 800495c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004960:	f100 0001 	add.w	r0, r0, #1
 8004964:	bfd4      	ite	le
 8004966:	9306      	strle	r3, [sp, #24]
 8004968:	9305      	strgt	r3, [sp, #20]
 800496a:	f10b 0b01 	add.w	fp, fp, #1
 800496e:	901b      	str	r0, [sp, #108]	; 0x6c
 8004970:	e7bf      	b.n	80048f2 <_strtod_l+0x152>
 8004972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004974:	191a      	adds	r2, r3, r4
 8004976:	921b      	str	r2, [sp, #108]	; 0x6c
 8004978:	5d1b      	ldrb	r3, [r3, r4]
 800497a:	f1bb 0f00 	cmp.w	fp, #0
 800497e:	d036      	beq.n	80049ee <_strtod_l+0x24e>
 8004980:	465c      	mov	r4, fp
 8004982:	9004      	str	r0, [sp, #16]
 8004984:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004988:	2a09      	cmp	r2, #9
 800498a:	d912      	bls.n	80049b2 <_strtod_l+0x212>
 800498c:	2201      	movs	r2, #1
 800498e:	e7c2      	b.n	8004916 <_strtod_l+0x176>
 8004990:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004992:	3001      	adds	r0, #1
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	921b      	str	r2, [sp, #108]	; 0x6c
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b30      	cmp	r3, #48	; 0x30
 800499c:	d0f8      	beq.n	8004990 <_strtod_l+0x1f0>
 800499e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80049a2:	2a08      	cmp	r2, #8
 80049a4:	f200 84dc 	bhi.w	8005360 <_strtod_l+0xbc0>
 80049a8:	9004      	str	r0, [sp, #16]
 80049aa:	2000      	movs	r0, #0
 80049ac:	4604      	mov	r4, r0
 80049ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80049b0:	9208      	str	r2, [sp, #32]
 80049b2:	3b30      	subs	r3, #48	; 0x30
 80049b4:	f100 0201 	add.w	r2, r0, #1
 80049b8:	d013      	beq.n	80049e2 <_strtod_l+0x242>
 80049ba:	9904      	ldr	r1, [sp, #16]
 80049bc:	1905      	adds	r5, r0, r4
 80049be:	4411      	add	r1, r2
 80049c0:	9104      	str	r1, [sp, #16]
 80049c2:	4622      	mov	r2, r4
 80049c4:	210a      	movs	r1, #10
 80049c6:	42aa      	cmp	r2, r5
 80049c8:	d113      	bne.n	80049f2 <_strtod_l+0x252>
 80049ca:	1822      	adds	r2, r4, r0
 80049cc:	2a08      	cmp	r2, #8
 80049ce:	f104 0401 	add.w	r4, r4, #1
 80049d2:	4404      	add	r4, r0
 80049d4:	dc1b      	bgt.n	8004a0e <_strtod_l+0x26e>
 80049d6:	220a      	movs	r2, #10
 80049d8:	9906      	ldr	r1, [sp, #24]
 80049da:	fb02 3301 	mla	r3, r2, r1, r3
 80049de:	9306      	str	r3, [sp, #24]
 80049e0:	2200      	movs	r2, #0
 80049e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049e4:	4610      	mov	r0, r2
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	e7ca      	b.n	8004984 <_strtod_l+0x1e4>
 80049ee:	4658      	mov	r0, fp
 80049f0:	e7d3      	b.n	800499a <_strtod_l+0x1fa>
 80049f2:	2a08      	cmp	r2, #8
 80049f4:	dc04      	bgt.n	8004a00 <_strtod_l+0x260>
 80049f6:	9f06      	ldr	r7, [sp, #24]
 80049f8:	434f      	muls	r7, r1
 80049fa:	9706      	str	r7, [sp, #24]
 80049fc:	3201      	adds	r2, #1
 80049fe:	e7e2      	b.n	80049c6 <_strtod_l+0x226>
 8004a00:	1c57      	adds	r7, r2, #1
 8004a02:	2f10      	cmp	r7, #16
 8004a04:	bfde      	ittt	le
 8004a06:	9f05      	ldrle	r7, [sp, #20]
 8004a08:	434f      	mulle	r7, r1
 8004a0a:	9705      	strle	r7, [sp, #20]
 8004a0c:	e7f6      	b.n	80049fc <_strtod_l+0x25c>
 8004a0e:	2c10      	cmp	r4, #16
 8004a10:	bfdf      	itttt	le
 8004a12:	220a      	movle	r2, #10
 8004a14:	9905      	ldrle	r1, [sp, #20]
 8004a16:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a1a:	9305      	strle	r3, [sp, #20]
 8004a1c:	e7e0      	b.n	80049e0 <_strtod_l+0x240>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2201      	movs	r2, #1
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	e77c      	b.n	8004920 <_strtod_l+0x180>
 8004a26:	2700      	movs	r7, #0
 8004a28:	1cb3      	adds	r3, r6, #2
 8004a2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a2c:	78b3      	ldrb	r3, [r6, #2]
 8004a2e:	e784      	b.n	800493a <_strtod_l+0x19a>
 8004a30:	2701      	movs	r7, #1
 8004a32:	e7f9      	b.n	8004a28 <_strtod_l+0x288>
 8004a34:	08008560 	.word	0x08008560
 8004a38:	08008310 	.word	0x08008310
 8004a3c:	7ff00000 	.word	0x7ff00000
 8004a40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	911b      	str	r1, [sp, #108]	; 0x6c
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d0f9      	beq.n	8004a40 <_strtod_l+0x2a0>
 8004a4c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004a50:	2908      	cmp	r1, #8
 8004a52:	f63f af78 	bhi.w	8004946 <_strtod_l+0x1a6>
 8004a56:	f04f 0e0a 	mov.w	lr, #10
 8004a5a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a64:	1c59      	adds	r1, r3, #1
 8004a66:	911b      	str	r1, [sp, #108]	; 0x6c
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004a6e:	2d09      	cmp	r5, #9
 8004a70:	d935      	bls.n	8004ade <_strtod_l+0x33e>
 8004a72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004a74:	1b49      	subs	r1, r1, r5
 8004a76:	2908      	cmp	r1, #8
 8004a78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004a7c:	dc02      	bgt.n	8004a84 <_strtod_l+0x2e4>
 8004a7e:	4565      	cmp	r5, ip
 8004a80:	bfa8      	it	ge
 8004a82:	4665      	movge	r5, ip
 8004a84:	b107      	cbz	r7, 8004a88 <_strtod_l+0x2e8>
 8004a86:	426d      	negs	r5, r5
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	d14c      	bne.n	8004b26 <_strtod_l+0x386>
 8004a8c:	9907      	ldr	r1, [sp, #28]
 8004a8e:	4301      	orrs	r1, r0
 8004a90:	f47f aec7 	bne.w	8004822 <_strtod_l+0x82>
 8004a94:	2a00      	cmp	r2, #0
 8004a96:	f47f aee0 	bne.w	800485a <_strtod_l+0xba>
 8004a9a:	2b69      	cmp	r3, #105	; 0x69
 8004a9c:	d026      	beq.n	8004aec <_strtod_l+0x34c>
 8004a9e:	dc23      	bgt.n	8004ae8 <_strtod_l+0x348>
 8004aa0:	2b49      	cmp	r3, #73	; 0x49
 8004aa2:	d023      	beq.n	8004aec <_strtod_l+0x34c>
 8004aa4:	2b4e      	cmp	r3, #78	; 0x4e
 8004aa6:	f47f aed8 	bne.w	800485a <_strtod_l+0xba>
 8004aaa:	499c      	ldr	r1, [pc, #624]	; (8004d1c <_strtod_l+0x57c>)
 8004aac:	a81b      	add	r0, sp, #108	; 0x6c
 8004aae:	f001 fe2b 	bl	8006708 <__match>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f43f aed1 	beq.w	800485a <_strtod_l+0xba>
 8004ab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b28      	cmp	r3, #40	; 0x28
 8004abe:	d12c      	bne.n	8004b1a <_strtod_l+0x37a>
 8004ac0:	4997      	ldr	r1, [pc, #604]	; (8004d20 <_strtod_l+0x580>)
 8004ac2:	aa1e      	add	r2, sp, #120	; 0x78
 8004ac4:	a81b      	add	r0, sp, #108	; 0x6c
 8004ac6:	f001 fe33 	bl	8006730 <__hexnan>
 8004aca:	2805      	cmp	r0, #5
 8004acc:	d125      	bne.n	8004b1a <_strtod_l+0x37a>
 8004ace:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ad0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004ad4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004ad8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004adc:	e6a1      	b.n	8004822 <_strtod_l+0x82>
 8004ade:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004ae2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004ae6:	e7bc      	b.n	8004a62 <_strtod_l+0x2c2>
 8004ae8:	2b6e      	cmp	r3, #110	; 0x6e
 8004aea:	e7dc      	b.n	8004aa6 <_strtod_l+0x306>
 8004aec:	498d      	ldr	r1, [pc, #564]	; (8004d24 <_strtod_l+0x584>)
 8004aee:	a81b      	add	r0, sp, #108	; 0x6c
 8004af0:	f001 fe0a 	bl	8006708 <__match>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f43f aeb0 	beq.w	800485a <_strtod_l+0xba>
 8004afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004afc:	498a      	ldr	r1, [pc, #552]	; (8004d28 <_strtod_l+0x588>)
 8004afe:	3b01      	subs	r3, #1
 8004b00:	a81b      	add	r0, sp, #108	; 0x6c
 8004b02:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b04:	f001 fe00 	bl	8006708 <__match>
 8004b08:	b910      	cbnz	r0, 8004b10 <_strtod_l+0x370>
 8004b0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b10:	f04f 0800 	mov.w	r8, #0
 8004b14:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004d38 <_strtod_l+0x598>
 8004b18:	e683      	b.n	8004822 <_strtod_l+0x82>
 8004b1a:	4884      	ldr	r0, [pc, #528]	; (8004d2c <_strtod_l+0x58c>)
 8004b1c:	f002 fd98 	bl	8007650 <nan>
 8004b20:	4680      	mov	r8, r0
 8004b22:	4689      	mov	r9, r1
 8004b24:	e67d      	b.n	8004822 <_strtod_l+0x82>
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	f1bb 0f00 	cmp.w	fp, #0
 8004b2c:	bf08      	it	eq
 8004b2e:	46a3      	moveq	fp, r4
 8004b30:	1aeb      	subs	r3, r5, r3
 8004b32:	2c10      	cmp	r4, #16
 8004b34:	9806      	ldr	r0, [sp, #24]
 8004b36:	4626      	mov	r6, r4
 8004b38:	9307      	str	r3, [sp, #28]
 8004b3a:	bfa8      	it	ge
 8004b3c:	2610      	movge	r6, #16
 8004b3e:	f7fb fd05 	bl	800054c <__aeabi_ui2d>
 8004b42:	2c09      	cmp	r4, #9
 8004b44:	4680      	mov	r8, r0
 8004b46:	4689      	mov	r9, r1
 8004b48:	dd13      	ble.n	8004b72 <_strtod_l+0x3d2>
 8004b4a:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <_strtod_l+0x590>)
 8004b4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004b54:	f7fb fd74 	bl	8000640 <__aeabi_dmul>
 8004b58:	4680      	mov	r8, r0
 8004b5a:	9805      	ldr	r0, [sp, #20]
 8004b5c:	4689      	mov	r9, r1
 8004b5e:	f7fb fcf5 	bl	800054c <__aeabi_ui2d>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4640      	mov	r0, r8
 8004b68:	4649      	mov	r1, r9
 8004b6a:	f7fb fbb3 	bl	80002d4 <__adddf3>
 8004b6e:	4680      	mov	r8, r0
 8004b70:	4689      	mov	r9, r1
 8004b72:	2c0f      	cmp	r4, #15
 8004b74:	dc36      	bgt.n	8004be4 <_strtod_l+0x444>
 8004b76:	9b07      	ldr	r3, [sp, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f43f ae52 	beq.w	8004822 <_strtod_l+0x82>
 8004b7e:	dd22      	ble.n	8004bc6 <_strtod_l+0x426>
 8004b80:	2b16      	cmp	r3, #22
 8004b82:	dc09      	bgt.n	8004b98 <_strtod_l+0x3f8>
 8004b84:	4c6a      	ldr	r4, [pc, #424]	; (8004d30 <_strtod_l+0x590>)
 8004b86:	4642      	mov	r2, r8
 8004b88:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004b92:	f7fb fd55 	bl	8000640 <__aeabi_dmul>
 8004b96:	e7c3      	b.n	8004b20 <_strtod_l+0x380>
 8004b98:	9a07      	ldr	r2, [sp, #28]
 8004b9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	db20      	blt.n	8004be4 <_strtod_l+0x444>
 8004ba2:	4d63      	ldr	r5, [pc, #396]	; (8004d30 <_strtod_l+0x590>)
 8004ba4:	f1c4 040f 	rsb	r4, r4, #15
 8004ba8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004bac:	4642      	mov	r2, r8
 8004bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	f7fb fd44 	bl	8000640 <__aeabi_dmul>
 8004bb8:	9b07      	ldr	r3, [sp, #28]
 8004bba:	1b1c      	subs	r4, r3, r4
 8004bbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bc4:	e7e5      	b.n	8004b92 <_strtod_l+0x3f2>
 8004bc6:	9b07      	ldr	r3, [sp, #28]
 8004bc8:	3316      	adds	r3, #22
 8004bca:	db0b      	blt.n	8004be4 <_strtod_l+0x444>
 8004bcc:	9b04      	ldr	r3, [sp, #16]
 8004bce:	4a58      	ldr	r2, [pc, #352]	; (8004d30 <_strtod_l+0x590>)
 8004bd0:	1b5d      	subs	r5, r3, r5
 8004bd2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bdc:	4649      	mov	r1, r9
 8004bde:	f7fb fe59 	bl	8000894 <__aeabi_ddiv>
 8004be2:	e79d      	b.n	8004b20 <_strtod_l+0x380>
 8004be4:	9b07      	ldr	r3, [sp, #28]
 8004be6:	1ba6      	subs	r6, r4, r6
 8004be8:	441e      	add	r6, r3
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	dd71      	ble.n	8004cd2 <_strtod_l+0x532>
 8004bee:	f016 030f 	ands.w	r3, r6, #15
 8004bf2:	d00a      	beq.n	8004c0a <_strtod_l+0x46a>
 8004bf4:	494e      	ldr	r1, [pc, #312]	; (8004d30 <_strtod_l+0x590>)
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c00:	464b      	mov	r3, r9
 8004c02:	f7fb fd1d 	bl	8000640 <__aeabi_dmul>
 8004c06:	4680      	mov	r8, r0
 8004c08:	4689      	mov	r9, r1
 8004c0a:	f036 060f 	bics.w	r6, r6, #15
 8004c0e:	d050      	beq.n	8004cb2 <_strtod_l+0x512>
 8004c10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004c14:	dd27      	ble.n	8004c66 <_strtod_l+0x4c6>
 8004c16:	f04f 0b00 	mov.w	fp, #0
 8004c1a:	f8cd b010 	str.w	fp, [sp, #16]
 8004c1e:	f8cd b020 	str.w	fp, [sp, #32]
 8004c22:	f8cd b018 	str.w	fp, [sp, #24]
 8004c26:	2322      	movs	r3, #34	; 0x22
 8004c28:	f04f 0800 	mov.w	r8, #0
 8004c2c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004d38 <_strtod_l+0x598>
 8004c30:	f8ca 3000 	str.w	r3, [sl]
 8004c34:	9b08      	ldr	r3, [sp, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f43f adf3 	beq.w	8004822 <_strtod_l+0x82>
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c40:	f001 fe7e 	bl	8006940 <_Bfree>
 8004c44:	4650      	mov	r0, sl
 8004c46:	9906      	ldr	r1, [sp, #24]
 8004c48:	f001 fe7a 	bl	8006940 <_Bfree>
 8004c4c:	4650      	mov	r0, sl
 8004c4e:	9904      	ldr	r1, [sp, #16]
 8004c50:	f001 fe76 	bl	8006940 <_Bfree>
 8004c54:	4650      	mov	r0, sl
 8004c56:	9908      	ldr	r1, [sp, #32]
 8004c58:	f001 fe72 	bl	8006940 <_Bfree>
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	4650      	mov	r0, sl
 8004c60:	f001 fe6e 	bl	8006940 <_Bfree>
 8004c64:	e5dd      	b.n	8004822 <_strtod_l+0x82>
 8004c66:	2300      	movs	r3, #0
 8004c68:	4640      	mov	r0, r8
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	461f      	mov	r7, r3
 8004c6e:	1136      	asrs	r6, r6, #4
 8004c70:	2e01      	cmp	r6, #1
 8004c72:	dc21      	bgt.n	8004cb8 <_strtod_l+0x518>
 8004c74:	b10b      	cbz	r3, 8004c7a <_strtod_l+0x4da>
 8004c76:	4680      	mov	r8, r0
 8004c78:	4689      	mov	r9, r1
 8004c7a:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <_strtod_l+0x594>)
 8004c7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004c80:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004c84:	4642      	mov	r2, r8
 8004c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	f7fb fcd8 	bl	8000640 <__aeabi_dmul>
 8004c90:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <_strtod_l+0x598>)
 8004c92:	460a      	mov	r2, r1
 8004c94:	400b      	ands	r3, r1
 8004c96:	4929      	ldr	r1, [pc, #164]	; (8004d3c <_strtod_l+0x59c>)
 8004c98:	4680      	mov	r8, r0
 8004c9a:	428b      	cmp	r3, r1
 8004c9c:	d8bb      	bhi.n	8004c16 <_strtod_l+0x476>
 8004c9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ca2:	428b      	cmp	r3, r1
 8004ca4:	bf86      	itte	hi
 8004ca6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004caa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004d40 <_strtod_l+0x5a0>
 8004cae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9305      	str	r3, [sp, #20]
 8004cb6:	e07e      	b.n	8004db6 <_strtod_l+0x616>
 8004cb8:	07f2      	lsls	r2, r6, #31
 8004cba:	d507      	bpl.n	8004ccc <_strtod_l+0x52c>
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <_strtod_l+0x594>)
 8004cbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fcbb 	bl	8000640 <__aeabi_dmul>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	3701      	adds	r7, #1
 8004cce:	1076      	asrs	r6, r6, #1
 8004cd0:	e7ce      	b.n	8004c70 <_strtod_l+0x4d0>
 8004cd2:	d0ee      	beq.n	8004cb2 <_strtod_l+0x512>
 8004cd4:	4276      	negs	r6, r6
 8004cd6:	f016 020f 	ands.w	r2, r6, #15
 8004cda:	d00a      	beq.n	8004cf2 <_strtod_l+0x552>
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <_strtod_l+0x590>)
 8004cde:	4640      	mov	r0, r8
 8004ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f7fb fdd3 	bl	8000894 <__aeabi_ddiv>
 8004cee:	4680      	mov	r8, r0
 8004cf0:	4689      	mov	r9, r1
 8004cf2:	1136      	asrs	r6, r6, #4
 8004cf4:	d0dd      	beq.n	8004cb2 <_strtod_l+0x512>
 8004cf6:	2e1f      	cmp	r6, #31
 8004cf8:	dd24      	ble.n	8004d44 <_strtod_l+0x5a4>
 8004cfa:	f04f 0b00 	mov.w	fp, #0
 8004cfe:	f8cd b010 	str.w	fp, [sp, #16]
 8004d02:	f8cd b020 	str.w	fp, [sp, #32]
 8004d06:	f8cd b018 	str.w	fp, [sp, #24]
 8004d0a:	2322      	movs	r3, #34	; 0x22
 8004d0c:	f04f 0800 	mov.w	r8, #0
 8004d10:	f04f 0900 	mov.w	r9, #0
 8004d14:	f8ca 3000 	str.w	r3, [sl]
 8004d18:	e78c      	b.n	8004c34 <_strtod_l+0x494>
 8004d1a:	bf00      	nop
 8004d1c:	080082e1 	.word	0x080082e1
 8004d20:	08008324 	.word	0x08008324
 8004d24:	080082d9 	.word	0x080082d9
 8004d28:	08008464 	.word	0x08008464
 8004d2c:	0800824b 	.word	0x0800824b
 8004d30:	08008600 	.word	0x08008600
 8004d34:	080085d8 	.word	0x080085d8
 8004d38:	7ff00000 	.word	0x7ff00000
 8004d3c:	7ca00000 	.word	0x7ca00000
 8004d40:	7fefffff 	.word	0x7fefffff
 8004d44:	f016 0310 	ands.w	r3, r6, #16
 8004d48:	bf18      	it	ne
 8004d4a:	236a      	movne	r3, #106	; 0x6a
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	9305      	str	r3, [sp, #20]
 8004d50:	4649      	mov	r1, r9
 8004d52:	2300      	movs	r3, #0
 8004d54:	4fb2      	ldr	r7, [pc, #712]	; (8005020 <_strtod_l+0x880>)
 8004d56:	07f2      	lsls	r2, r6, #31
 8004d58:	d504      	bpl.n	8004d64 <_strtod_l+0x5c4>
 8004d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d5e:	f7fb fc6f 	bl	8000640 <__aeabi_dmul>
 8004d62:	2301      	movs	r3, #1
 8004d64:	1076      	asrs	r6, r6, #1
 8004d66:	f107 0708 	add.w	r7, r7, #8
 8004d6a:	d1f4      	bne.n	8004d56 <_strtod_l+0x5b6>
 8004d6c:	b10b      	cbz	r3, 8004d72 <_strtod_l+0x5d2>
 8004d6e:	4680      	mov	r8, r0
 8004d70:	4689      	mov	r9, r1
 8004d72:	9b05      	ldr	r3, [sp, #20]
 8004d74:	b1bb      	cbz	r3, 8004da6 <_strtod_l+0x606>
 8004d76:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004d7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	4649      	mov	r1, r9
 8004d82:	dd10      	ble.n	8004da6 <_strtod_l+0x606>
 8004d84:	2b1f      	cmp	r3, #31
 8004d86:	f340 812b 	ble.w	8004fe0 <_strtod_l+0x840>
 8004d8a:	2b34      	cmp	r3, #52	; 0x34
 8004d8c:	bfd8      	it	le
 8004d8e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004d92:	f04f 0800 	mov.w	r8, #0
 8004d96:	bfcf      	iteee	gt
 8004d98:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004d9c:	3b20      	suble	r3, #32
 8004d9e:	fa02 f303 	lslle.w	r3, r2, r3
 8004da2:	ea03 0901 	andle.w	r9, r3, r1
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	4640      	mov	r0, r8
 8004dac:	4649      	mov	r1, r9
 8004dae:	f7fb feaf 	bl	8000b10 <__aeabi_dcmpeq>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1a1      	bne.n	8004cfa <_strtod_l+0x55a>
 8004db6:	9b06      	ldr	r3, [sp, #24]
 8004db8:	465a      	mov	r2, fp
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	9908      	ldr	r1, [sp, #32]
 8004dc2:	f001 fe29 	bl	8006a18 <__s2b>
 8004dc6:	9008      	str	r0, [sp, #32]
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f43f af24 	beq.w	8004c16 <_strtod_l+0x476>
 8004dce:	9b04      	ldr	r3, [sp, #16]
 8004dd0:	f04f 0b00 	mov.w	fp, #0
 8004dd4:	1b5d      	subs	r5, r3, r5
 8004dd6:	9b07      	ldr	r3, [sp, #28]
 8004dd8:	f8cd b010 	str.w	fp, [sp, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bfb4      	ite	lt
 8004de0:	462b      	movlt	r3, r5
 8004de2:	2300      	movge	r3, #0
 8004de4:	930e      	str	r3, [sp, #56]	; 0x38
 8004de6:	9b07      	ldr	r3, [sp, #28]
 8004de8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004dec:	9316      	str	r3, [sp, #88]	; 0x58
 8004dee:	9b08      	ldr	r3, [sp, #32]
 8004df0:	4650      	mov	r0, sl
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	f001 fd64 	bl	80068c0 <_Balloc>
 8004df8:	9006      	str	r0, [sp, #24]
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f43f af13 	beq.w	8004c26 <_strtod_l+0x486>
 8004e00:	9b08      	ldr	r3, [sp, #32]
 8004e02:	300c      	adds	r0, #12
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	f103 010c 	add.w	r1, r3, #12
 8004e0a:	3202      	adds	r2, #2
 8004e0c:	0092      	lsls	r2, r2, #2
 8004e0e:	f7fe fdf9 	bl	8003a04 <memcpy>
 8004e12:	ab1e      	add	r3, sp, #120	; 0x78
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	ab1d      	add	r3, sp, #116	; 0x74
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	4650      	mov	r0, sl
 8004e20:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004e24:	f002 f936 	bl	8007094 <__d2b>
 8004e28:	901c      	str	r0, [sp, #112]	; 0x70
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	f43f aefb 	beq.w	8004c26 <_strtod_l+0x486>
 8004e30:	2101      	movs	r1, #1
 8004e32:	4650      	mov	r0, sl
 8004e34:	f001 fe88 	bl	8006b48 <__i2b>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	9004      	str	r0, [sp, #16]
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f43f aef2 	beq.w	8004c26 <_strtod_l+0x486>
 8004e42:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004e44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	bfab      	itete	ge
 8004e4a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004e4c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004e4e:	18ee      	addge	r6, r5, r3
 8004e50:	1b5c      	sublt	r4, r3, r5
 8004e52:	9b05      	ldr	r3, [sp, #20]
 8004e54:	bfa8      	it	ge
 8004e56:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004e58:	eba5 0503 	sub.w	r5, r5, r3
 8004e5c:	4415      	add	r5, r2
 8004e5e:	4b71      	ldr	r3, [pc, #452]	; (8005024 <_strtod_l+0x884>)
 8004e60:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004e64:	bfb8      	it	lt
 8004e66:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004e68:	429d      	cmp	r5, r3
 8004e6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004e6e:	f280 80c9 	bge.w	8005004 <_strtod_l+0x864>
 8004e72:	1b5b      	subs	r3, r3, r5
 8004e74:	2b1f      	cmp	r3, #31
 8004e76:	f04f 0701 	mov.w	r7, #1
 8004e7a:	eba2 0203 	sub.w	r2, r2, r3
 8004e7e:	f300 80b6 	bgt.w	8004fee <_strtod_l+0x84e>
 8004e82:	2500      	movs	r5, #0
 8004e84:	fa07 f303 	lsl.w	r3, r7, r3
 8004e88:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e8a:	18b7      	adds	r7, r6, r2
 8004e8c:	9b05      	ldr	r3, [sp, #20]
 8004e8e:	42be      	cmp	r6, r7
 8004e90:	4414      	add	r4, r2
 8004e92:	441c      	add	r4, r3
 8004e94:	4633      	mov	r3, r6
 8004e96:	bfa8      	it	ge
 8004e98:	463b      	movge	r3, r7
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	bfa8      	it	ge
 8004e9e:	4623      	movge	r3, r4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bfc2      	ittt	gt
 8004ea4:	1aff      	subgt	r7, r7, r3
 8004ea6:	1ae4      	subgt	r4, r4, r3
 8004ea8:	1af6      	subgt	r6, r6, r3
 8004eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dd17      	ble.n	8004ee0 <_strtod_l+0x740>
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	9904      	ldr	r1, [sp, #16]
 8004eb6:	f001 ff01 	bl	8006cbc <__pow5mult>
 8004eba:	9004      	str	r0, [sp, #16]
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f43f aeb2 	beq.w	8004c26 <_strtod_l+0x486>
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ec6:	4650      	mov	r0, sl
 8004ec8:	f001 fe54 	bl	8006b74 <__multiply>
 8004ecc:	9009      	str	r0, [sp, #36]	; 0x24
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	f43f aea9 	beq.w	8004c26 <_strtod_l+0x486>
 8004ed4:	4650      	mov	r0, sl
 8004ed6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ed8:	f001 fd32 	bl	8006940 <_Bfree>
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	931c      	str	r3, [sp, #112]	; 0x70
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	f300 8093 	bgt.w	800500c <_strtod_l+0x86c>
 8004ee6:	9b07      	ldr	r3, [sp, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	dd08      	ble.n	8004efe <_strtod_l+0x75e>
 8004eec:	4650      	mov	r0, sl
 8004eee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ef0:	9906      	ldr	r1, [sp, #24]
 8004ef2:	f001 fee3 	bl	8006cbc <__pow5mult>
 8004ef6:	9006      	str	r0, [sp, #24]
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f43f ae94 	beq.w	8004c26 <_strtod_l+0x486>
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	dd08      	ble.n	8004f14 <_strtod_l+0x774>
 8004f02:	4622      	mov	r2, r4
 8004f04:	4650      	mov	r0, sl
 8004f06:	9906      	ldr	r1, [sp, #24]
 8004f08:	f001 ff32 	bl	8006d70 <__lshift>
 8004f0c:	9006      	str	r0, [sp, #24]
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f43f ae89 	beq.w	8004c26 <_strtod_l+0x486>
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	dd08      	ble.n	8004f2a <_strtod_l+0x78a>
 8004f18:	4632      	mov	r2, r6
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	9904      	ldr	r1, [sp, #16]
 8004f1e:	f001 ff27 	bl	8006d70 <__lshift>
 8004f22:	9004      	str	r0, [sp, #16]
 8004f24:	2800      	cmp	r0, #0
 8004f26:	f43f ae7e 	beq.w	8004c26 <_strtod_l+0x486>
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	9a06      	ldr	r2, [sp, #24]
 8004f2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f30:	f001 ffa6 	bl	8006e80 <__mdiff>
 8004f34:	4683      	mov	fp, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f43f ae75 	beq.w	8004c26 <_strtod_l+0x486>
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	68c3      	ldr	r3, [r0, #12]
 8004f40:	9904      	ldr	r1, [sp, #16]
 8004f42:	60c4      	str	r4, [r0, #12]
 8004f44:	930d      	str	r3, [sp, #52]	; 0x34
 8004f46:	f001 ff7f 	bl	8006e48 <__mcmp>
 8004f4a:	42a0      	cmp	r0, r4
 8004f4c:	da70      	bge.n	8005030 <_strtod_l+0x890>
 8004f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f50:	ea53 0308 	orrs.w	r3, r3, r8
 8004f54:	f040 8096 	bne.w	8005084 <_strtod_l+0x8e4>
 8004f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8091 	bne.w	8005084 <_strtod_l+0x8e4>
 8004f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f66:	0d1b      	lsrs	r3, r3, #20
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004f6e:	f240 8089 	bls.w	8005084 <_strtod_l+0x8e4>
 8004f72:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004f76:	b923      	cbnz	r3, 8004f82 <_strtod_l+0x7e2>
 8004f78:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	f340 8081 	ble.w	8005084 <_strtod_l+0x8e4>
 8004f82:	4659      	mov	r1, fp
 8004f84:	2201      	movs	r2, #1
 8004f86:	4650      	mov	r0, sl
 8004f88:	f001 fef2 	bl	8006d70 <__lshift>
 8004f8c:	9904      	ldr	r1, [sp, #16]
 8004f8e:	4683      	mov	fp, r0
 8004f90:	f001 ff5a 	bl	8006e48 <__mcmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	dd75      	ble.n	8005084 <_strtod_l+0x8e4>
 8004f98:	9905      	ldr	r1, [sp, #20]
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	4a22      	ldr	r2, [pc, #136]	; (8005028 <_strtod_l+0x888>)
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	f000 8091 	beq.w	80050c6 <_strtod_l+0x926>
 8004fa4:	ea02 0109 	and.w	r1, r2, r9
 8004fa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004fac:	f300 808b 	bgt.w	80050c6 <_strtod_l+0x926>
 8004fb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004fb4:	f77f aea9 	ble.w	8004d0a <_strtod_l+0x56a>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <_strtod_l+0x88c>)
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004fc8:	f7fb fb3a 	bl	8000640 <__aeabi_dmul>
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4303      	orrs	r3, r0
 8004fd0:	bf08      	it	eq
 8004fd2:	2322      	moveq	r3, #34	; 0x22
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	4689      	mov	r9, r1
 8004fd8:	bf08      	it	eq
 8004fda:	f8ca 3000 	streq.w	r3, [sl]
 8004fde:	e62d      	b.n	8004c3c <_strtod_l+0x49c>
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	ea03 0808 	and.w	r8, r3, r8
 8004fec:	e6db      	b.n	8004da6 <_strtod_l+0x606>
 8004fee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004ff2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004ff6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004ffa:	35e2      	adds	r5, #226	; 0xe2
 8004ffc:	fa07 f505 	lsl.w	r5, r7, r5
 8005000:	970f      	str	r7, [sp, #60]	; 0x3c
 8005002:	e742      	b.n	8004e8a <_strtod_l+0x6ea>
 8005004:	2301      	movs	r3, #1
 8005006:	2500      	movs	r5, #0
 8005008:	930f      	str	r3, [sp, #60]	; 0x3c
 800500a:	e73e      	b.n	8004e8a <_strtod_l+0x6ea>
 800500c:	463a      	mov	r2, r7
 800500e:	4650      	mov	r0, sl
 8005010:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005012:	f001 fead 	bl	8006d70 <__lshift>
 8005016:	901c      	str	r0, [sp, #112]	; 0x70
 8005018:	2800      	cmp	r0, #0
 800501a:	f47f af64 	bne.w	8004ee6 <_strtod_l+0x746>
 800501e:	e602      	b.n	8004c26 <_strtod_l+0x486>
 8005020:	08008338 	.word	0x08008338
 8005024:	fffffc02 	.word	0xfffffc02
 8005028:	7ff00000 	.word	0x7ff00000
 800502c:	39500000 	.word	0x39500000
 8005030:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005034:	d166      	bne.n	8005104 <_strtod_l+0x964>
 8005036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800503c:	b35a      	cbz	r2, 8005096 <_strtod_l+0x8f6>
 800503e:	4a9c      	ldr	r2, [pc, #624]	; (80052b0 <_strtod_l+0xb10>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d12c      	bne.n	800509e <_strtod_l+0x8fe>
 8005044:	9b05      	ldr	r3, [sp, #20]
 8005046:	4640      	mov	r0, r8
 8005048:	b303      	cbz	r3, 800508c <_strtod_l+0x8ec>
 800504a:	464b      	mov	r3, r9
 800504c:	4a99      	ldr	r2, [pc, #612]	; (80052b4 <_strtod_l+0xb14>)
 800504e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005052:	401a      	ands	r2, r3
 8005054:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005058:	d81b      	bhi.n	8005092 <_strtod_l+0x8f2>
 800505a:	0d12      	lsrs	r2, r2, #20
 800505c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	4298      	cmp	r0, r3
 8005066:	d11a      	bne.n	800509e <_strtod_l+0x8fe>
 8005068:	4b93      	ldr	r3, [pc, #588]	; (80052b8 <_strtod_l+0xb18>)
 800506a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800506c:	429a      	cmp	r2, r3
 800506e:	d102      	bne.n	8005076 <_strtod_l+0x8d6>
 8005070:	3001      	adds	r0, #1
 8005072:	f43f add8 	beq.w	8004c26 <_strtod_l+0x486>
 8005076:	f04f 0800 	mov.w	r8, #0
 800507a:	4b8e      	ldr	r3, [pc, #568]	; (80052b4 <_strtod_l+0xb14>)
 800507c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507e:	401a      	ands	r2, r3
 8005080:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005084:	9b05      	ldr	r3, [sp, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d196      	bne.n	8004fb8 <_strtod_l+0x818>
 800508a:	e5d7      	b.n	8004c3c <_strtod_l+0x49c>
 800508c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005090:	e7e8      	b.n	8005064 <_strtod_l+0x8c4>
 8005092:	460b      	mov	r3, r1
 8005094:	e7e6      	b.n	8005064 <_strtod_l+0x8c4>
 8005096:	ea53 0308 	orrs.w	r3, r3, r8
 800509a:	f43f af7d 	beq.w	8004f98 <_strtod_l+0x7f8>
 800509e:	b1e5      	cbz	r5, 80050da <_strtod_l+0x93a>
 80050a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a2:	421d      	tst	r5, r3
 80050a4:	d0ee      	beq.n	8005084 <_strtod_l+0x8e4>
 80050a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	9a05      	ldr	r2, [sp, #20]
 80050ae:	b1c3      	cbz	r3, 80050e2 <_strtod_l+0x942>
 80050b0:	f7ff fb54 	bl	800475c <sulp>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050bc:	f7fb f90a 	bl	80002d4 <__adddf3>
 80050c0:	4680      	mov	r8, r0
 80050c2:	4689      	mov	r9, r1
 80050c4:	e7de      	b.n	8005084 <_strtod_l+0x8e4>
 80050c6:	4013      	ands	r3, r2
 80050c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80050cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80050d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80050d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80050d8:	e7d4      	b.n	8005084 <_strtod_l+0x8e4>
 80050da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050dc:	ea13 0f08 	tst.w	r3, r8
 80050e0:	e7e0      	b.n	80050a4 <_strtod_l+0x904>
 80050e2:	f7ff fb3b 	bl	800475c <sulp>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050ee:	f7fb f8ef 	bl	80002d0 <__aeabi_dsub>
 80050f2:	2200      	movs	r2, #0
 80050f4:	2300      	movs	r3, #0
 80050f6:	4680      	mov	r8, r0
 80050f8:	4689      	mov	r9, r1
 80050fa:	f7fb fd09 	bl	8000b10 <__aeabi_dcmpeq>
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0c0      	beq.n	8005084 <_strtod_l+0x8e4>
 8005102:	e602      	b.n	8004d0a <_strtod_l+0x56a>
 8005104:	4658      	mov	r0, fp
 8005106:	9904      	ldr	r1, [sp, #16]
 8005108:	f002 f820 	bl	800714c <__ratio>
 800510c:	2200      	movs	r2, #0
 800510e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005112:	4606      	mov	r6, r0
 8005114:	460f      	mov	r7, r1
 8005116:	f7fb fd0f 	bl	8000b38 <__aeabi_dcmple>
 800511a:	2800      	cmp	r0, #0
 800511c:	d075      	beq.n	800520a <_strtod_l+0xa6a>
 800511e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005120:	2b00      	cmp	r3, #0
 8005122:	d047      	beq.n	80051b4 <_strtod_l+0xa14>
 8005124:	2600      	movs	r6, #0
 8005126:	4f65      	ldr	r7, [pc, #404]	; (80052bc <_strtod_l+0xb1c>)
 8005128:	4d64      	ldr	r5, [pc, #400]	; (80052bc <_strtod_l+0xb1c>)
 800512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005130:	0d1b      	lsrs	r3, r3, #20
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	930f      	str	r3, [sp, #60]	; 0x3c
 8005136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005138:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <_strtod_l+0xb20>)
 800513a:	429a      	cmp	r2, r3
 800513c:	f040 80c8 	bne.w	80052d0 <_strtod_l+0xb30>
 8005140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005144:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	4640      	mov	r0, r8
 800514c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005150:	4649      	mov	r1, r9
 8005152:	f001 ff25 	bl	8006fa0 <__ulp>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4630      	mov	r0, r6
 800515c:	4639      	mov	r1, r7
 800515e:	f7fb fa6f 	bl	8000640 <__aeabi_dmul>
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	f7fb f8b5 	bl	80002d4 <__adddf3>
 800516a:	460b      	mov	r3, r1
 800516c:	4951      	ldr	r1, [pc, #324]	; (80052b4 <_strtod_l+0xb14>)
 800516e:	4a55      	ldr	r2, [pc, #340]	; (80052c4 <_strtod_l+0xb24>)
 8005170:	4019      	ands	r1, r3
 8005172:	4291      	cmp	r1, r2
 8005174:	4680      	mov	r8, r0
 8005176:	d95e      	bls.n	8005236 <_strtod_l+0xa96>
 8005178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800517a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800517e:	4293      	cmp	r3, r2
 8005180:	d103      	bne.n	800518a <_strtod_l+0x9ea>
 8005182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005184:	3301      	adds	r3, #1
 8005186:	f43f ad4e 	beq.w	8004c26 <_strtod_l+0x486>
 800518a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800518e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80052b8 <_strtod_l+0xb18>
 8005192:	4650      	mov	r0, sl
 8005194:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005196:	f001 fbd3 	bl	8006940 <_Bfree>
 800519a:	4650      	mov	r0, sl
 800519c:	9906      	ldr	r1, [sp, #24]
 800519e:	f001 fbcf 	bl	8006940 <_Bfree>
 80051a2:	4650      	mov	r0, sl
 80051a4:	9904      	ldr	r1, [sp, #16]
 80051a6:	f001 fbcb 	bl	8006940 <_Bfree>
 80051aa:	4659      	mov	r1, fp
 80051ac:	4650      	mov	r0, sl
 80051ae:	f001 fbc7 	bl	8006940 <_Bfree>
 80051b2:	e61c      	b.n	8004dee <_strtod_l+0x64e>
 80051b4:	f1b8 0f00 	cmp.w	r8, #0
 80051b8:	d119      	bne.n	80051ee <_strtod_l+0xa4e>
 80051ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051c0:	b9e3      	cbnz	r3, 80051fc <_strtod_l+0xa5c>
 80051c2:	2200      	movs	r2, #0
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <_strtod_l+0xb1c>)
 80051ca:	f7fb fcab 	bl	8000b24 <__aeabi_dcmplt>
 80051ce:	b9c8      	cbnz	r0, 8005204 <_strtod_l+0xa64>
 80051d0:	2200      	movs	r2, #0
 80051d2:	4630      	mov	r0, r6
 80051d4:	4639      	mov	r1, r7
 80051d6:	4b3c      	ldr	r3, [pc, #240]	; (80052c8 <_strtod_l+0xb28>)
 80051d8:	f7fb fa32 	bl	8000640 <__aeabi_dmul>
 80051dc:	4604      	mov	r4, r0
 80051de:	460d      	mov	r5, r1
 80051e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80051e4:	9418      	str	r4, [sp, #96]	; 0x60
 80051e6:	9319      	str	r3, [sp, #100]	; 0x64
 80051e8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80051ec:	e79d      	b.n	800512a <_strtod_l+0x98a>
 80051ee:	f1b8 0f01 	cmp.w	r8, #1
 80051f2:	d103      	bne.n	80051fc <_strtod_l+0xa5c>
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f43f ad87 	beq.w	8004d0a <_strtod_l+0x56a>
 80051fc:	2600      	movs	r6, #0
 80051fe:	2400      	movs	r4, #0
 8005200:	4f32      	ldr	r7, [pc, #200]	; (80052cc <_strtod_l+0xb2c>)
 8005202:	e791      	b.n	8005128 <_strtod_l+0x988>
 8005204:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005206:	4d30      	ldr	r5, [pc, #192]	; (80052c8 <_strtod_l+0xb28>)
 8005208:	e7ea      	b.n	80051e0 <_strtod_l+0xa40>
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <_strtod_l+0xb28>)
 800520c:	2200      	movs	r2, #0
 800520e:	4630      	mov	r0, r6
 8005210:	4639      	mov	r1, r7
 8005212:	f7fb fa15 	bl	8000640 <__aeabi_dmul>
 8005216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	b933      	cbnz	r3, 800522c <_strtod_l+0xa8c>
 800521e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005222:	9010      	str	r0, [sp, #64]	; 0x40
 8005224:	9311      	str	r3, [sp, #68]	; 0x44
 8005226:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800522a:	e77e      	b.n	800512a <_strtod_l+0x98a>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005234:	e7f7      	b.n	8005226 <_strtod_l+0xa86>
 8005236:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800523a:	9b05      	ldr	r3, [sp, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1a8      	bne.n	8005192 <_strtod_l+0x9f2>
 8005240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005246:	0d1b      	lsrs	r3, r3, #20
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	429a      	cmp	r2, r3
 800524c:	d1a1      	bne.n	8005192 <_strtod_l+0x9f2>
 800524e:	4620      	mov	r0, r4
 8005250:	4629      	mov	r1, r5
 8005252:	f7fb ff07 	bl	8001064 <__aeabi_d2lz>
 8005256:	f7fb f9c5 	bl	80005e4 <__aeabi_l2d>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4620      	mov	r0, r4
 8005260:	4629      	mov	r1, r5
 8005262:	f7fb f835 	bl	80002d0 <__aeabi_dsub>
 8005266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800526c:	ea43 0308 	orr.w	r3, r3, r8
 8005270:	4313      	orrs	r3, r2
 8005272:	4604      	mov	r4, r0
 8005274:	460d      	mov	r5, r1
 8005276:	d066      	beq.n	8005346 <_strtod_l+0xba6>
 8005278:	a309      	add	r3, pc, #36	; (adr r3, 80052a0 <_strtod_l+0xb00>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb fc51 	bl	8000b24 <__aeabi_dcmplt>
 8005282:	2800      	cmp	r0, #0
 8005284:	f47f acda 	bne.w	8004c3c <_strtod_l+0x49c>
 8005288:	a307      	add	r3, pc, #28	; (adr r3, 80052a8 <_strtod_l+0xb08>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f7fb fc65 	bl	8000b60 <__aeabi_dcmpgt>
 8005296:	2800      	cmp	r0, #0
 8005298:	f43f af7b 	beq.w	8005192 <_strtod_l+0x9f2>
 800529c:	e4ce      	b.n	8004c3c <_strtod_l+0x49c>
 800529e:	bf00      	nop
 80052a0:	94a03595 	.word	0x94a03595
 80052a4:	3fdfffff 	.word	0x3fdfffff
 80052a8:	35afe535 	.word	0x35afe535
 80052ac:	3fe00000 	.word	0x3fe00000
 80052b0:	000fffff 	.word	0x000fffff
 80052b4:	7ff00000 	.word	0x7ff00000
 80052b8:	7fefffff 	.word	0x7fefffff
 80052bc:	3ff00000 	.word	0x3ff00000
 80052c0:	7fe00000 	.word	0x7fe00000
 80052c4:	7c9fffff 	.word	0x7c9fffff
 80052c8:	3fe00000 	.word	0x3fe00000
 80052cc:	bff00000 	.word	0xbff00000
 80052d0:	9b05      	ldr	r3, [sp, #20]
 80052d2:	b313      	cbz	r3, 800531a <_strtod_l+0xb7a>
 80052d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80052da:	d81e      	bhi.n	800531a <_strtod_l+0xb7a>
 80052dc:	a326      	add	r3, pc, #152	; (adr r3, 8005378 <_strtod_l+0xbd8>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fb fc27 	bl	8000b38 <__aeabi_dcmple>
 80052ea:	b190      	cbz	r0, 8005312 <_strtod_l+0xb72>
 80052ec:	4629      	mov	r1, r5
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7fb fc7e 	bl	8000bf0 <__aeabi_d2uiz>
 80052f4:	2801      	cmp	r0, #1
 80052f6:	bf38      	it	cc
 80052f8:	2001      	movcc	r0, #1
 80052fa:	f7fb f927 	bl	800054c <__aeabi_ui2d>
 80052fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005300:	4604      	mov	r4, r0
 8005302:	460d      	mov	r5, r1
 8005304:	b9d3      	cbnz	r3, 800533c <_strtod_l+0xb9c>
 8005306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800530a:	9012      	str	r0, [sp, #72]	; 0x48
 800530c:	9313      	str	r3, [sp, #76]	; 0x4c
 800530e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005314:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005318:	1a9f      	subs	r7, r3, r2
 800531a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800531e:	f001 fe3f 	bl	8006fa0 <__ulp>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4630      	mov	r0, r6
 8005328:	4639      	mov	r1, r7
 800532a:	f7fb f989 	bl	8000640 <__aeabi_dmul>
 800532e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005332:	f7fa ffcf 	bl	80002d4 <__adddf3>
 8005336:	4680      	mov	r8, r0
 8005338:	4689      	mov	r9, r1
 800533a:	e77e      	b.n	800523a <_strtod_l+0xa9a>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005344:	e7e3      	b.n	800530e <_strtod_l+0xb6e>
 8005346:	a30e      	add	r3, pc, #56	; (adr r3, 8005380 <_strtod_l+0xbe0>)
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f7fb fbea 	bl	8000b24 <__aeabi_dcmplt>
 8005350:	e7a1      	b.n	8005296 <_strtod_l+0xaf6>
 8005352:	2300      	movs	r3, #0
 8005354:	930c      	str	r3, [sp, #48]	; 0x30
 8005356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005358:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	f7ff ba65 	b.w	800482a <_strtod_l+0x8a>
 8005360:	2b65      	cmp	r3, #101	; 0x65
 8005362:	f43f ab5c 	beq.w	8004a1e <_strtod_l+0x27e>
 8005366:	2b45      	cmp	r3, #69	; 0x45
 8005368:	f43f ab59 	beq.w	8004a1e <_strtod_l+0x27e>
 800536c:	2201      	movs	r2, #1
 800536e:	f7ff bb8d 	b.w	8004a8c <_strtod_l+0x2ec>
 8005372:	bf00      	nop
 8005374:	f3af 8000 	nop.w
 8005378:	ffc00000 	.word	0xffc00000
 800537c:	41dfffff 	.word	0x41dfffff
 8005380:	94a03595 	.word	0x94a03595
 8005384:	3fcfffff 	.word	0x3fcfffff

08005388 <_strtod_r>:
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <_strtod_r+0x8>)
 800538a:	f7ff ba09 	b.w	80047a0 <_strtod_l>
 800538e:	bf00      	nop
 8005390:	20000088 	.word	0x20000088

08005394 <_strtol_l.isra.0>:
 8005394:	2b01      	cmp	r3, #1
 8005396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539a:	4686      	mov	lr, r0
 800539c:	d001      	beq.n	80053a2 <_strtol_l.isra.0+0xe>
 800539e:	2b24      	cmp	r3, #36	; 0x24
 80053a0:	d906      	bls.n	80053b0 <_strtol_l.isra.0+0x1c>
 80053a2:	f7fe fb05 	bl	80039b0 <__errno>
 80053a6:	2316      	movs	r3, #22
 80053a8:	6003      	str	r3, [r0, #0]
 80053aa:	2000      	movs	r0, #0
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	468c      	mov	ip, r1
 80053b2:	4e3a      	ldr	r6, [pc, #232]	; (800549c <_strtol_l.isra.0+0x108>)
 80053b4:	4660      	mov	r0, ip
 80053b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80053ba:	5da5      	ldrb	r5, [r4, r6]
 80053bc:	f015 0508 	ands.w	r5, r5, #8
 80053c0:	d1f8      	bne.n	80053b4 <_strtol_l.isra.0+0x20>
 80053c2:	2c2d      	cmp	r4, #45	; 0x2d
 80053c4:	d133      	bne.n	800542e <_strtol_l.isra.0+0x9a>
 80053c6:	f04f 0801 	mov.w	r8, #1
 80053ca:	f89c 4000 	ldrb.w	r4, [ip]
 80053ce:	f100 0c02 	add.w	ip, r0, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d05d      	beq.n	8005492 <_strtol_l.isra.0+0xfe>
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d10c      	bne.n	80053f4 <_strtol_l.isra.0+0x60>
 80053da:	2c30      	cmp	r4, #48	; 0x30
 80053dc:	d10a      	bne.n	80053f4 <_strtol_l.isra.0+0x60>
 80053de:	f89c 0000 	ldrb.w	r0, [ip]
 80053e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80053e6:	2858      	cmp	r0, #88	; 0x58
 80053e8:	d14e      	bne.n	8005488 <_strtol_l.isra.0+0xf4>
 80053ea:	2310      	movs	r3, #16
 80053ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80053f0:	f10c 0c02 	add.w	ip, ip, #2
 80053f4:	2500      	movs	r5, #0
 80053f6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80053fa:	3f01      	subs	r7, #1
 80053fc:	fbb7 f9f3 	udiv	r9, r7, r3
 8005400:	4628      	mov	r0, r5
 8005402:	fb03 7a19 	mls	sl, r3, r9, r7
 8005406:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800540a:	2e09      	cmp	r6, #9
 800540c:	d818      	bhi.n	8005440 <_strtol_l.isra.0+0xac>
 800540e:	4634      	mov	r4, r6
 8005410:	42a3      	cmp	r3, r4
 8005412:	dd24      	ble.n	800545e <_strtol_l.isra.0+0xca>
 8005414:	2d00      	cmp	r5, #0
 8005416:	db1f      	blt.n	8005458 <_strtol_l.isra.0+0xc4>
 8005418:	4581      	cmp	r9, r0
 800541a:	d31d      	bcc.n	8005458 <_strtol_l.isra.0+0xc4>
 800541c:	d101      	bne.n	8005422 <_strtol_l.isra.0+0x8e>
 800541e:	45a2      	cmp	sl, r4
 8005420:	db1a      	blt.n	8005458 <_strtol_l.isra.0+0xc4>
 8005422:	2501      	movs	r5, #1
 8005424:	fb00 4003 	mla	r0, r0, r3, r4
 8005428:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800542c:	e7eb      	b.n	8005406 <_strtol_l.isra.0+0x72>
 800542e:	2c2b      	cmp	r4, #43	; 0x2b
 8005430:	bf08      	it	eq
 8005432:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005436:	46a8      	mov	r8, r5
 8005438:	bf08      	it	eq
 800543a:	f100 0c02 	addeq.w	ip, r0, #2
 800543e:	e7c8      	b.n	80053d2 <_strtol_l.isra.0+0x3e>
 8005440:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005444:	2e19      	cmp	r6, #25
 8005446:	d801      	bhi.n	800544c <_strtol_l.isra.0+0xb8>
 8005448:	3c37      	subs	r4, #55	; 0x37
 800544a:	e7e1      	b.n	8005410 <_strtol_l.isra.0+0x7c>
 800544c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005450:	2e19      	cmp	r6, #25
 8005452:	d804      	bhi.n	800545e <_strtol_l.isra.0+0xca>
 8005454:	3c57      	subs	r4, #87	; 0x57
 8005456:	e7db      	b.n	8005410 <_strtol_l.isra.0+0x7c>
 8005458:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800545c:	e7e4      	b.n	8005428 <_strtol_l.isra.0+0x94>
 800545e:	2d00      	cmp	r5, #0
 8005460:	da08      	bge.n	8005474 <_strtol_l.isra.0+0xe0>
 8005462:	2322      	movs	r3, #34	; 0x22
 8005464:	4638      	mov	r0, r7
 8005466:	f8ce 3000 	str.w	r3, [lr]
 800546a:	2a00      	cmp	r2, #0
 800546c:	d09e      	beq.n	80053ac <_strtol_l.isra.0+0x18>
 800546e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8005472:	e007      	b.n	8005484 <_strtol_l.isra.0+0xf0>
 8005474:	f1b8 0f00 	cmp.w	r8, #0
 8005478:	d000      	beq.n	800547c <_strtol_l.isra.0+0xe8>
 800547a:	4240      	negs	r0, r0
 800547c:	2a00      	cmp	r2, #0
 800547e:	d095      	beq.n	80053ac <_strtol_l.isra.0+0x18>
 8005480:	2d00      	cmp	r5, #0
 8005482:	d1f4      	bne.n	800546e <_strtol_l.isra.0+0xda>
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	e791      	b.n	80053ac <_strtol_l.isra.0+0x18>
 8005488:	2430      	movs	r4, #48	; 0x30
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1b2      	bne.n	80053f4 <_strtol_l.isra.0+0x60>
 800548e:	2308      	movs	r3, #8
 8005490:	e7b0      	b.n	80053f4 <_strtol_l.isra.0+0x60>
 8005492:	2c30      	cmp	r4, #48	; 0x30
 8005494:	d0a3      	beq.n	80053de <_strtol_l.isra.0+0x4a>
 8005496:	230a      	movs	r3, #10
 8005498:	e7ac      	b.n	80053f4 <_strtol_l.isra.0+0x60>
 800549a:	bf00      	nop
 800549c:	08008361 	.word	0x08008361

080054a0 <_strtol_r>:
 80054a0:	f7ff bf78 	b.w	8005394 <_strtol_l.isra.0>

080054a4 <quorem>:
 80054a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	6903      	ldr	r3, [r0, #16]
 80054aa:	690c      	ldr	r4, [r1, #16]
 80054ac:	4607      	mov	r7, r0
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	f2c0 8083 	blt.w	80055ba <quorem+0x116>
 80054b4:	3c01      	subs	r4, #1
 80054b6:	f100 0514 	add.w	r5, r0, #20
 80054ba:	f101 0814 	add.w	r8, r1, #20
 80054be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054cc:	3301      	adds	r3, #1
 80054ce:	429a      	cmp	r2, r3
 80054d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80054d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054dc:	d332      	bcc.n	8005544 <quorem+0xa0>
 80054de:	f04f 0e00 	mov.w	lr, #0
 80054e2:	4640      	mov	r0, r8
 80054e4:	46ac      	mov	ip, r5
 80054e6:	46f2      	mov	sl, lr
 80054e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054ec:	b293      	uxth	r3, r2
 80054ee:	fb06 e303 	mla	r3, r6, r3, lr
 80054f2:	0c12      	lsrs	r2, r2, #16
 80054f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054f8:	fb06 e202 	mla	r2, r6, r2, lr
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005502:	f8dc a000 	ldr.w	sl, [ip]
 8005506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800550a:	fa1f fa8a 	uxth.w	sl, sl
 800550e:	4453      	add	r3, sl
 8005510:	fa1f fa82 	uxth.w	sl, r2
 8005514:	f8dc 2000 	ldr.w	r2, [ip]
 8005518:	4581      	cmp	r9, r0
 800551a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800551e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005528:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800552c:	f84c 3b04 	str.w	r3, [ip], #4
 8005530:	d2da      	bcs.n	80054e8 <quorem+0x44>
 8005532:	f855 300b 	ldr.w	r3, [r5, fp]
 8005536:	b92b      	cbnz	r3, 8005544 <quorem+0xa0>
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	3b04      	subs	r3, #4
 800553c:	429d      	cmp	r5, r3
 800553e:	461a      	mov	r2, r3
 8005540:	d32f      	bcc.n	80055a2 <quorem+0xfe>
 8005542:	613c      	str	r4, [r7, #16]
 8005544:	4638      	mov	r0, r7
 8005546:	f001 fc7f 	bl	8006e48 <__mcmp>
 800554a:	2800      	cmp	r0, #0
 800554c:	db25      	blt.n	800559a <quorem+0xf6>
 800554e:	4628      	mov	r0, r5
 8005550:	f04f 0c00 	mov.w	ip, #0
 8005554:	3601      	adds	r6, #1
 8005556:	f858 1b04 	ldr.w	r1, [r8], #4
 800555a:	f8d0 e000 	ldr.w	lr, [r0]
 800555e:	b28b      	uxth	r3, r1
 8005560:	ebac 0303 	sub.w	r3, ip, r3
 8005564:	fa1f f28e 	uxth.w	r2, lr
 8005568:	4413      	add	r3, r2
 800556a:	0c0a      	lsrs	r2, r1, #16
 800556c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005574:	b29b      	uxth	r3, r3
 8005576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800557a:	45c1      	cmp	r9, r8
 800557c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005580:	f840 3b04 	str.w	r3, [r0], #4
 8005584:	d2e7      	bcs.n	8005556 <quorem+0xb2>
 8005586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800558a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800558e:	b922      	cbnz	r2, 800559a <quorem+0xf6>
 8005590:	3b04      	subs	r3, #4
 8005592:	429d      	cmp	r5, r3
 8005594:	461a      	mov	r2, r3
 8005596:	d30a      	bcc.n	80055ae <quorem+0x10a>
 8005598:	613c      	str	r4, [r7, #16]
 800559a:	4630      	mov	r0, r6
 800559c:	b003      	add	sp, #12
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	d1cb      	bne.n	8005542 <quorem+0x9e>
 80055aa:	3c01      	subs	r4, #1
 80055ac:	e7c6      	b.n	800553c <quorem+0x98>
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	3b04      	subs	r3, #4
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	d1f0      	bne.n	8005598 <quorem+0xf4>
 80055b6:	3c01      	subs	r4, #1
 80055b8:	e7eb      	b.n	8005592 <quorem+0xee>
 80055ba:	2000      	movs	r0, #0
 80055bc:	e7ee      	b.n	800559c <quorem+0xf8>
	...

080055c0 <_dtoa_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	4616      	mov	r6, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055ca:	b099      	sub	sp, #100	; 0x64
 80055cc:	4605      	mov	r5, r0
 80055ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80055d6:	b974      	cbnz	r4, 80055f6 <_dtoa_r+0x36>
 80055d8:	2010      	movs	r0, #16
 80055da:	f001 f949 	bl	8006870 <malloc>
 80055de:	4602      	mov	r2, r0
 80055e0:	6268      	str	r0, [r5, #36]	; 0x24
 80055e2:	b920      	cbnz	r0, 80055ee <_dtoa_r+0x2e>
 80055e4:	21ea      	movs	r1, #234	; 0xea
 80055e6:	4bae      	ldr	r3, [pc, #696]	; (80058a0 <_dtoa_r+0x2e0>)
 80055e8:	48ae      	ldr	r0, [pc, #696]	; (80058a4 <_dtoa_r+0x2e4>)
 80055ea:	f002 f867 	bl	80076bc <__assert_func>
 80055ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055f2:	6004      	str	r4, [r0, #0]
 80055f4:	60c4      	str	r4, [r0, #12]
 80055f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	b151      	cbz	r1, 8005612 <_dtoa_r+0x52>
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	2301      	movs	r3, #1
 8005600:	4093      	lsls	r3, r2
 8005602:	604a      	str	r2, [r1, #4]
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	4628      	mov	r0, r5
 8005608:	f001 f99a 	bl	8006940 <_Bfree>
 800560c:	2200      	movs	r2, #0
 800560e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	1e3b      	subs	r3, r7, #0
 8005614:	bfaf      	iteee	ge
 8005616:	2300      	movge	r3, #0
 8005618:	2201      	movlt	r2, #1
 800561a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800561e:	9305      	strlt	r3, [sp, #20]
 8005620:	bfa8      	it	ge
 8005622:	f8c8 3000 	strge.w	r3, [r8]
 8005626:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800562a:	4b9f      	ldr	r3, [pc, #636]	; (80058a8 <_dtoa_r+0x2e8>)
 800562c:	bfb8      	it	lt
 800562e:	f8c8 2000 	strlt.w	r2, [r8]
 8005632:	ea33 0309 	bics.w	r3, r3, r9
 8005636:	d119      	bne.n	800566c <_dtoa_r+0xac>
 8005638:	f242 730f 	movw	r3, #9999	; 0x270f
 800563c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005644:	4333      	orrs	r3, r6
 8005646:	f000 8580 	beq.w	800614a <_dtoa_r+0xb8a>
 800564a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800564c:	b953      	cbnz	r3, 8005664 <_dtoa_r+0xa4>
 800564e:	4b97      	ldr	r3, [pc, #604]	; (80058ac <_dtoa_r+0x2ec>)
 8005650:	e022      	b.n	8005698 <_dtoa_r+0xd8>
 8005652:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <_dtoa_r+0x2f0>)
 8005654:	9308      	str	r3, [sp, #32]
 8005656:	3308      	adds	r3, #8
 8005658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	9808      	ldr	r0, [sp, #32]
 800565e:	b019      	add	sp, #100	; 0x64
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4b91      	ldr	r3, [pc, #580]	; (80058ac <_dtoa_r+0x2ec>)
 8005666:	9308      	str	r3, [sp, #32]
 8005668:	3303      	adds	r3, #3
 800566a:	e7f5      	b.n	8005658 <_dtoa_r+0x98>
 800566c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005670:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005678:	2200      	movs	r2, #0
 800567a:	2300      	movs	r3, #0
 800567c:	f7fb fa48 	bl	8000b10 <__aeabi_dcmpeq>
 8005680:	4680      	mov	r8, r0
 8005682:	b158      	cbz	r0, 800569c <_dtoa_r+0xdc>
 8005684:	2301      	movs	r3, #1
 8005686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8559 	beq.w	8006144 <_dtoa_r+0xb84>
 8005692:	4888      	ldr	r0, [pc, #544]	; (80058b4 <_dtoa_r+0x2f4>)
 8005694:	6018      	str	r0, [r3, #0]
 8005696:	1e43      	subs	r3, r0, #1
 8005698:	9308      	str	r3, [sp, #32]
 800569a:	e7df      	b.n	800565c <_dtoa_r+0x9c>
 800569c:	ab16      	add	r3, sp, #88	; 0x58
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	ab17      	add	r3, sp, #92	; 0x5c
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4628      	mov	r0, r5
 80056a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056aa:	f001 fcf3 	bl	8007094 <__d2b>
 80056ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056b2:	4682      	mov	sl, r0
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d07e      	beq.n	80057b6 <_dtoa_r+0x1f6>
 80056b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80056d2:	2200      	movs	r2, #0
 80056d4:	4b78      	ldr	r3, [pc, #480]	; (80058b8 <_dtoa_r+0x2f8>)
 80056d6:	f7fa fdfb 	bl	80002d0 <__aeabi_dsub>
 80056da:	a36b      	add	r3, pc, #428	; (adr r3, 8005888 <_dtoa_r+0x2c8>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa ffae 	bl	8000640 <__aeabi_dmul>
 80056e4:	a36a      	add	r3, pc, #424	; (adr r3, 8005890 <_dtoa_r+0x2d0>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fdf3 	bl	80002d4 <__adddf3>
 80056ee:	4606      	mov	r6, r0
 80056f0:	4620      	mov	r0, r4
 80056f2:	460f      	mov	r7, r1
 80056f4:	f7fa ff3a 	bl	800056c <__aeabi_i2d>
 80056f8:	a367      	add	r3, pc, #412	; (adr r3, 8005898 <_dtoa_r+0x2d8>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa ff9f 	bl	8000640 <__aeabi_dmul>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4630      	mov	r0, r6
 8005708:	4639      	mov	r1, r7
 800570a:	f7fa fde3 	bl	80002d4 <__adddf3>
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	f7fb fa45 	bl	8000ba0 <__aeabi_d2iz>
 8005716:	2200      	movs	r2, #0
 8005718:	4681      	mov	r9, r0
 800571a:	2300      	movs	r3, #0
 800571c:	4630      	mov	r0, r6
 800571e:	4639      	mov	r1, r7
 8005720:	f7fb fa00 	bl	8000b24 <__aeabi_dcmplt>
 8005724:	b148      	cbz	r0, 800573a <_dtoa_r+0x17a>
 8005726:	4648      	mov	r0, r9
 8005728:	f7fa ff20 	bl	800056c <__aeabi_i2d>
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	f7fb f9ee 	bl	8000b10 <__aeabi_dcmpeq>
 8005734:	b908      	cbnz	r0, 800573a <_dtoa_r+0x17a>
 8005736:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800573a:	f1b9 0f16 	cmp.w	r9, #22
 800573e:	d857      	bhi.n	80057f0 <_dtoa_r+0x230>
 8005740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005744:	4b5d      	ldr	r3, [pc, #372]	; (80058bc <_dtoa_r+0x2fc>)
 8005746:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fb f9e9 	bl	8000b24 <__aeabi_dcmplt>
 8005752:	2800      	cmp	r0, #0
 8005754:	d04e      	beq.n	80057f4 <_dtoa_r+0x234>
 8005756:	2300      	movs	r3, #0
 8005758:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800575c:	930f      	str	r3, [sp, #60]	; 0x3c
 800575e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005760:	1b1c      	subs	r4, r3, r4
 8005762:	1e63      	subs	r3, r4, #1
 8005764:	9309      	str	r3, [sp, #36]	; 0x24
 8005766:	bf49      	itett	mi
 8005768:	f1c4 0301 	rsbmi	r3, r4, #1
 800576c:	2300      	movpl	r3, #0
 800576e:	9306      	strmi	r3, [sp, #24]
 8005770:	2300      	movmi	r3, #0
 8005772:	bf54      	ite	pl
 8005774:	9306      	strpl	r3, [sp, #24]
 8005776:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	db3c      	blt.n	80057f8 <_dtoa_r+0x238>
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005784:	444b      	add	r3, r9
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	2300      	movs	r3, #0
 800578a:	930a      	str	r3, [sp, #40]	; 0x28
 800578c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578e:	2b09      	cmp	r3, #9
 8005790:	d86c      	bhi.n	800586c <_dtoa_r+0x2ac>
 8005792:	2b05      	cmp	r3, #5
 8005794:	bfc4      	itt	gt
 8005796:	3b04      	subgt	r3, #4
 8005798:	9322      	strgt	r3, [sp, #136]	; 0x88
 800579a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800579c:	bfc8      	it	gt
 800579e:	2400      	movgt	r4, #0
 80057a0:	f1a3 0302 	sub.w	r3, r3, #2
 80057a4:	bfd8      	it	le
 80057a6:	2401      	movle	r4, #1
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	f200 808b 	bhi.w	80058c4 <_dtoa_r+0x304>
 80057ae:	e8df f003 	tbb	[pc, r3]
 80057b2:	4f2d      	.short	0x4f2d
 80057b4:	5b4d      	.short	0x5b4d
 80057b6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80057ba:	441c      	add	r4, r3
 80057bc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	bfc3      	ittte	gt
 80057c4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057c8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80057cc:	fa09 f303 	lslgt.w	r3, r9, r3
 80057d0:	f1c3 0320 	rsble	r3, r3, #32
 80057d4:	bfc6      	itte	gt
 80057d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057da:	4318      	orrgt	r0, r3
 80057dc:	fa06 f003 	lslle.w	r0, r6, r3
 80057e0:	f7fa feb4 	bl	800054c <__aeabi_ui2d>
 80057e4:	2301      	movs	r3, #1
 80057e6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80057ea:	3c01      	subs	r4, #1
 80057ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80057ee:	e770      	b.n	80056d2 <_dtoa_r+0x112>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7b3      	b.n	800575c <_dtoa_r+0x19c>
 80057f4:	900f      	str	r0, [sp, #60]	; 0x3c
 80057f6:	e7b2      	b.n	800575e <_dtoa_r+0x19e>
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	eba3 0309 	sub.w	r3, r3, r9
 80057fe:	9306      	str	r3, [sp, #24]
 8005800:	f1c9 0300 	rsb	r3, r9, #0
 8005804:	930a      	str	r3, [sp, #40]	; 0x28
 8005806:	2300      	movs	r3, #0
 8005808:	930e      	str	r3, [sp, #56]	; 0x38
 800580a:	e7bf      	b.n	800578c <_dtoa_r+0x1cc>
 800580c:	2300      	movs	r3, #0
 800580e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005812:	2b00      	cmp	r3, #0
 8005814:	dc59      	bgt.n	80058ca <_dtoa_r+0x30a>
 8005816:	f04f 0b01 	mov.w	fp, #1
 800581a:	465b      	mov	r3, fp
 800581c:	f8cd b008 	str.w	fp, [sp, #8]
 8005820:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005824:	2200      	movs	r2, #0
 8005826:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005828:	6042      	str	r2, [r0, #4]
 800582a:	2204      	movs	r2, #4
 800582c:	f102 0614 	add.w	r6, r2, #20
 8005830:	429e      	cmp	r6, r3
 8005832:	6841      	ldr	r1, [r0, #4]
 8005834:	d94f      	bls.n	80058d6 <_dtoa_r+0x316>
 8005836:	4628      	mov	r0, r5
 8005838:	f001 f842 	bl	80068c0 <_Balloc>
 800583c:	9008      	str	r0, [sp, #32]
 800583e:	2800      	cmp	r0, #0
 8005840:	d14d      	bne.n	80058de <_dtoa_r+0x31e>
 8005842:	4602      	mov	r2, r0
 8005844:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005848:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <_dtoa_r+0x300>)
 800584a:	e6cd      	b.n	80055e8 <_dtoa_r+0x28>
 800584c:	2301      	movs	r3, #1
 800584e:	e7de      	b.n	800580e <_dtoa_r+0x24e>
 8005850:	2300      	movs	r3, #0
 8005852:	930b      	str	r3, [sp, #44]	; 0x2c
 8005854:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005856:	eb09 0b03 	add.w	fp, r9, r3
 800585a:	f10b 0301 	add.w	r3, fp, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	bfb8      	it	lt
 8005864:	2301      	movlt	r3, #1
 8005866:	e7dd      	b.n	8005824 <_dtoa_r+0x264>
 8005868:	2301      	movs	r3, #1
 800586a:	e7f2      	b.n	8005852 <_dtoa_r+0x292>
 800586c:	2401      	movs	r4, #1
 800586e:	2300      	movs	r3, #0
 8005870:	940b      	str	r4, [sp, #44]	; 0x2c
 8005872:	9322      	str	r3, [sp, #136]	; 0x88
 8005874:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005878:	2200      	movs	r2, #0
 800587a:	2312      	movs	r3, #18
 800587c:	f8cd b008 	str.w	fp, [sp, #8]
 8005880:	9223      	str	r2, [sp, #140]	; 0x8c
 8005882:	e7cf      	b.n	8005824 <_dtoa_r+0x264>
 8005884:	f3af 8000 	nop.w
 8005888:	636f4361 	.word	0x636f4361
 800588c:	3fd287a7 	.word	0x3fd287a7
 8005890:	8b60c8b3 	.word	0x8b60c8b3
 8005894:	3fc68a28 	.word	0x3fc68a28
 8005898:	509f79fb 	.word	0x509f79fb
 800589c:	3fd34413 	.word	0x3fd34413
 80058a0:	0800846e 	.word	0x0800846e
 80058a4:	08008485 	.word	0x08008485
 80058a8:	7ff00000 	.word	0x7ff00000
 80058ac:	0800846a 	.word	0x0800846a
 80058b0:	08008461 	.word	0x08008461
 80058b4:	080082e5 	.word	0x080082e5
 80058b8:	3ff80000 	.word	0x3ff80000
 80058bc:	08008600 	.word	0x08008600
 80058c0:	080084e4 	.word	0x080084e4
 80058c4:	2301      	movs	r3, #1
 80058c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c8:	e7d4      	b.n	8005874 <_dtoa_r+0x2b4>
 80058ca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80058ce:	465b      	mov	r3, fp
 80058d0:	f8cd b008 	str.w	fp, [sp, #8]
 80058d4:	e7a6      	b.n	8005824 <_dtoa_r+0x264>
 80058d6:	3101      	adds	r1, #1
 80058d8:	6041      	str	r1, [r0, #4]
 80058da:	0052      	lsls	r2, r2, #1
 80058dc:	e7a6      	b.n	800582c <_dtoa_r+0x26c>
 80058de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058e0:	9a08      	ldr	r2, [sp, #32]
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	2b0e      	cmp	r3, #14
 80058e8:	f200 80a8 	bhi.w	8005a3c <_dtoa_r+0x47c>
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	f000 80a5 	beq.w	8005a3c <_dtoa_r+0x47c>
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	dd34      	ble.n	8005962 <_dtoa_r+0x3a2>
 80058f8:	4a9a      	ldr	r2, [pc, #616]	; (8005b64 <_dtoa_r+0x5a4>)
 80058fa:	f009 030f 	and.w	r3, r9, #15
 80058fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005902:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800590a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800590e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005912:	d016      	beq.n	8005942 <_dtoa_r+0x382>
 8005914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005918:	4b93      	ldr	r3, [pc, #588]	; (8005b68 <_dtoa_r+0x5a8>)
 800591a:	2703      	movs	r7, #3
 800591c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005920:	f7fa ffb8 	bl	8000894 <__aeabi_ddiv>
 8005924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005928:	f004 040f 	and.w	r4, r4, #15
 800592c:	4e8e      	ldr	r6, [pc, #568]	; (8005b68 <_dtoa_r+0x5a8>)
 800592e:	b954      	cbnz	r4, 8005946 <_dtoa_r+0x386>
 8005930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005938:	f7fa ffac 	bl	8000894 <__aeabi_ddiv>
 800593c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005940:	e029      	b.n	8005996 <_dtoa_r+0x3d6>
 8005942:	2702      	movs	r7, #2
 8005944:	e7f2      	b.n	800592c <_dtoa_r+0x36c>
 8005946:	07e1      	lsls	r1, r4, #31
 8005948:	d508      	bpl.n	800595c <_dtoa_r+0x39c>
 800594a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800594e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005952:	f7fa fe75 	bl	8000640 <__aeabi_dmul>
 8005956:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800595a:	3701      	adds	r7, #1
 800595c:	1064      	asrs	r4, r4, #1
 800595e:	3608      	adds	r6, #8
 8005960:	e7e5      	b.n	800592e <_dtoa_r+0x36e>
 8005962:	f000 80a5 	beq.w	8005ab0 <_dtoa_r+0x4f0>
 8005966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800596a:	f1c9 0400 	rsb	r4, r9, #0
 800596e:	4b7d      	ldr	r3, [pc, #500]	; (8005b64 <_dtoa_r+0x5a4>)
 8005970:	f004 020f 	and.w	r2, r4, #15
 8005974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fe60 	bl	8000640 <__aeabi_dmul>
 8005980:	2702      	movs	r7, #2
 8005982:	2300      	movs	r3, #0
 8005984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005988:	4e77      	ldr	r6, [pc, #476]	; (8005b68 <_dtoa_r+0x5a8>)
 800598a:	1124      	asrs	r4, r4, #4
 800598c:	2c00      	cmp	r4, #0
 800598e:	f040 8084 	bne.w	8005a9a <_dtoa_r+0x4da>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1d2      	bne.n	800593c <_dtoa_r+0x37c>
 8005996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 808b 	beq.w	8005ab4 <_dtoa_r+0x4f4>
 800599e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059aa:	2200      	movs	r2, #0
 80059ac:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <_dtoa_r+0x5ac>)
 80059ae:	f7fb f8b9 	bl	8000b24 <__aeabi_dcmplt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d07e      	beq.n	8005ab4 <_dtoa_r+0x4f4>
 80059b6:	9b02      	ldr	r3, [sp, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d07b      	beq.n	8005ab4 <_dtoa_r+0x4f4>
 80059bc:	f1bb 0f00 	cmp.w	fp, #0
 80059c0:	dd38      	ble.n	8005a34 <_dtoa_r+0x474>
 80059c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059c6:	2200      	movs	r2, #0
 80059c8:	4b69      	ldr	r3, [pc, #420]	; (8005b70 <_dtoa_r+0x5b0>)
 80059ca:	f7fa fe39 	bl	8000640 <__aeabi_dmul>
 80059ce:	465c      	mov	r4, fp
 80059d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80059d8:	3701      	adds	r7, #1
 80059da:	4638      	mov	r0, r7
 80059dc:	f7fa fdc6 	bl	800056c <__aeabi_i2d>
 80059e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e4:	f7fa fe2c 	bl	8000640 <__aeabi_dmul>
 80059e8:	2200      	movs	r2, #0
 80059ea:	4b62      	ldr	r3, [pc, #392]	; (8005b74 <_dtoa_r+0x5b4>)
 80059ec:	f7fa fc72 	bl	80002d4 <__adddf3>
 80059f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059f8:	9611      	str	r6, [sp, #68]	; 0x44
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	d15d      	bne.n	8005aba <_dtoa_r+0x4fa>
 80059fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a02:	2200      	movs	r2, #0
 8005a04:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <_dtoa_r+0x5b8>)
 8005a06:	f7fa fc63 	bl	80002d0 <__aeabi_dsub>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a12:	4633      	mov	r3, r6
 8005a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a16:	f7fb f8a3 	bl	8000b60 <__aeabi_dcmpgt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f040 829e 	bne.w	8005f5c <_dtoa_r+0x99c>
 8005a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a2a:	f7fb f87b 	bl	8000b24 <__aeabi_dcmplt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8292 	bne.w	8005f58 <_dtoa_r+0x998>
 8005a34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f2c0 8153 	blt.w	8005cea <_dtoa_r+0x72a>
 8005a44:	f1b9 0f0e 	cmp.w	r9, #14
 8005a48:	f300 814f 	bgt.w	8005cea <_dtoa_r+0x72a>
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <_dtoa_r+0x5a4>)
 8005a4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005a52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f280 80db 	bge.w	8005c18 <_dtoa_r+0x658>
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f300 80d7 	bgt.w	8005c18 <_dtoa_r+0x658>
 8005a6a:	f040 8274 	bne.w	8005f56 <_dtoa_r+0x996>
 8005a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a72:	2200      	movs	r2, #0
 8005a74:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <_dtoa_r+0x5b8>)
 8005a76:	f7fa fde3 	bl	8000640 <__aeabi_dmul>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	f7fb f865 	bl	8000b4c <__aeabi_dcmpge>
 8005a82:	9c02      	ldr	r4, [sp, #8]
 8005a84:	4626      	mov	r6, r4
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f040 824a 	bne.w	8005f20 <_dtoa_r+0x960>
 8005a8c:	2331      	movs	r3, #49	; 0x31
 8005a8e:	9f08      	ldr	r7, [sp, #32]
 8005a90:	f109 0901 	add.w	r9, r9, #1
 8005a94:	f807 3b01 	strb.w	r3, [r7], #1
 8005a98:	e246      	b.n	8005f28 <_dtoa_r+0x968>
 8005a9a:	07e2      	lsls	r2, r4, #31
 8005a9c:	d505      	bpl.n	8005aaa <_dtoa_r+0x4ea>
 8005a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aa2:	f7fa fdcd 	bl	8000640 <__aeabi_dmul>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	3701      	adds	r7, #1
 8005aaa:	1064      	asrs	r4, r4, #1
 8005aac:	3608      	adds	r6, #8
 8005aae:	e76d      	b.n	800598c <_dtoa_r+0x3cc>
 8005ab0:	2702      	movs	r7, #2
 8005ab2:	e770      	b.n	8005996 <_dtoa_r+0x3d6>
 8005ab4:	46c8      	mov	r8, r9
 8005ab6:	9c02      	ldr	r4, [sp, #8]
 8005ab8:	e78f      	b.n	80059da <_dtoa_r+0x41a>
 8005aba:	9908      	ldr	r1, [sp, #32]
 8005abc:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <_dtoa_r+0x5a4>)
 8005abe:	4421      	add	r1, r4
 8005ac0:	9112      	str	r1, [sp, #72]	; 0x48
 8005ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ac8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005acc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d055      	beq.n	8005b80 <_dtoa_r+0x5c0>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	4929      	ldr	r1, [pc, #164]	; (8005b7c <_dtoa_r+0x5bc>)
 8005ad8:	f7fa fedc 	bl	8000894 <__aeabi_ddiv>
 8005adc:	463b      	mov	r3, r7
 8005ade:	4632      	mov	r2, r6
 8005ae0:	f7fa fbf6 	bl	80002d0 <__aeabi_dsub>
 8005ae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ae8:	9f08      	ldr	r7, [sp, #32]
 8005aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aee:	f7fb f857 	bl	8000ba0 <__aeabi_d2iz>
 8005af2:	4604      	mov	r4, r0
 8005af4:	f7fa fd3a 	bl	800056c <__aeabi_i2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b00:	f7fa fbe6 	bl	80002d0 <__aeabi_dsub>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	3430      	adds	r4, #48	; 0x30
 8005b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b12:	f807 4b01 	strb.w	r4, [r7], #1
 8005b16:	f7fb f805 	bl	8000b24 <__aeabi_dcmplt>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d174      	bne.n	8005c08 <_dtoa_r+0x648>
 8005b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b22:	2000      	movs	r0, #0
 8005b24:	4911      	ldr	r1, [pc, #68]	; (8005b6c <_dtoa_r+0x5ac>)
 8005b26:	f7fa fbd3 	bl	80002d0 <__aeabi_dsub>
 8005b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b2e:	f7fa fff9 	bl	8000b24 <__aeabi_dcmplt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f040 80b6 	bne.w	8005ca4 <_dtoa_r+0x6e4>
 8005b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b3a:	429f      	cmp	r7, r3
 8005b3c:	f43f af7a 	beq.w	8005a34 <_dtoa_r+0x474>
 8005b40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b44:	2200      	movs	r2, #0
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <_dtoa_r+0x5b0>)
 8005b48:	f7fa fd7a 	bl	8000640 <__aeabi_dmul>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <_dtoa_r+0x5b0>)
 8005b58:	f7fa fd72 	bl	8000640 <__aeabi_dmul>
 8005b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b60:	e7c3      	b.n	8005aea <_dtoa_r+0x52a>
 8005b62:	bf00      	nop
 8005b64:	08008600 	.word	0x08008600
 8005b68:	080085d8 	.word	0x080085d8
 8005b6c:	3ff00000 	.word	0x3ff00000
 8005b70:	40240000 	.word	0x40240000
 8005b74:	401c0000 	.word	0x401c0000
 8005b78:	40140000 	.word	0x40140000
 8005b7c:	3fe00000 	.word	0x3fe00000
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa fd5c 	bl	8000640 <__aeabi_dmul>
 8005b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b8e:	9c08      	ldr	r4, [sp, #32]
 8005b90:	9314      	str	r3, [sp, #80]	; 0x50
 8005b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b96:	f7fb f803 	bl	8000ba0 <__aeabi_d2iz>
 8005b9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005b9c:	f7fa fce6 	bl	800056c <__aeabi_i2d>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba8:	f7fa fb92 	bl	80002d0 <__aeabi_dsub>
 8005bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bae:	4606      	mov	r6, r0
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	f804 3b01 	strb.w	r3, [r4], #1
 8005bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bb8:	460f      	mov	r7, r1
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	d124      	bne.n	8005c0c <_dtoa_r+0x64c>
 8005bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bc6:	4bb3      	ldr	r3, [pc, #716]	; (8005e94 <_dtoa_r+0x8d4>)
 8005bc8:	f7fa fb84 	bl	80002d4 <__adddf3>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa ffc4 	bl	8000b60 <__aeabi_dcmpgt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d162      	bne.n	8005ca2 <_dtoa_r+0x6e2>
 8005bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005be0:	2000      	movs	r0, #0
 8005be2:	49ac      	ldr	r1, [pc, #688]	; (8005e94 <_dtoa_r+0x8d4>)
 8005be4:	f7fa fb74 	bl	80002d0 <__aeabi_dsub>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa ff98 	bl	8000b24 <__aeabi_dcmplt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f43f af1d 	beq.w	8005a34 <_dtoa_r+0x474>
 8005bfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bfc:	1e7b      	subs	r3, r7, #1
 8005bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8005c00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d0f8      	beq.n	8005bfa <_dtoa_r+0x63a>
 8005c08:	46c1      	mov	r9, r8
 8005c0a:	e03a      	b.n	8005c82 <_dtoa_r+0x6c2>
 8005c0c:	4ba2      	ldr	r3, [pc, #648]	; (8005e98 <_dtoa_r+0x8d8>)
 8005c0e:	f7fa fd17 	bl	8000640 <__aeabi_dmul>
 8005c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c16:	e7bc      	b.n	8005b92 <_dtoa_r+0x5d2>
 8005c18:	9f08      	ldr	r7, [sp, #32]
 8005c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c22:	f7fa fe37 	bl	8000894 <__aeabi_ddiv>
 8005c26:	f7fa ffbb 	bl	8000ba0 <__aeabi_d2iz>
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7fa fc9e 	bl	800056c <__aeabi_i2d>
 8005c30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c34:	f7fa fd04 	bl	8000640 <__aeabi_dmul>
 8005c38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4602      	mov	r2, r0
 8005c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c44:	f7fa fb44 	bl	80002d0 <__aeabi_dsub>
 8005c48:	f807 6b01 	strb.w	r6, [r7], #1
 8005c4c:	9e08      	ldr	r6, [sp, #32]
 8005c4e:	9b02      	ldr	r3, [sp, #8]
 8005c50:	1bbe      	subs	r6, r7, r6
 8005c52:	42b3      	cmp	r3, r6
 8005c54:	d13a      	bne.n	8005ccc <_dtoa_r+0x70c>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	f7fa fb3b 	bl	80002d4 <__adddf3>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c6a:	f7fa ff79 	bl	8000b60 <__aeabi_dcmpgt>
 8005c6e:	bb58      	cbnz	r0, 8005cc8 <_dtoa_r+0x708>
 8005c70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c78:	f7fa ff4a 	bl	8000b10 <__aeabi_dcmpeq>
 8005c7c:	b108      	cbz	r0, 8005c82 <_dtoa_r+0x6c2>
 8005c7e:	07e1      	lsls	r1, r4, #31
 8005c80:	d422      	bmi.n	8005cc8 <_dtoa_r+0x708>
 8005c82:	4628      	mov	r0, r5
 8005c84:	4651      	mov	r1, sl
 8005c86:	f000 fe5b 	bl	8006940 <_Bfree>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	703b      	strb	r3, [r7, #0]
 8005c8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c90:	f109 0001 	add.w	r0, r9, #1
 8005c94:	6018      	str	r0, [r3, #0]
 8005c96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f43f acdf 	beq.w	800565c <_dtoa_r+0x9c>
 8005c9e:	601f      	str	r7, [r3, #0]
 8005ca0:	e4dc      	b.n	800565c <_dtoa_r+0x9c>
 8005ca2:	4627      	mov	r7, r4
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cac:	2a39      	cmp	r2, #57	; 0x39
 8005cae:	d107      	bne.n	8005cc0 <_dtoa_r+0x700>
 8005cb0:	9a08      	ldr	r2, [sp, #32]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1f7      	bne.n	8005ca6 <_dtoa_r+0x6e6>
 8005cb6:	2230      	movs	r2, #48	; 0x30
 8005cb8:	9908      	ldr	r1, [sp, #32]
 8005cba:	f108 0801 	add.w	r8, r8, #1
 8005cbe:	700a      	strb	r2, [r1, #0]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	3201      	adds	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e79f      	b.n	8005c08 <_dtoa_r+0x648>
 8005cc8:	46c8      	mov	r8, r9
 8005cca:	e7eb      	b.n	8005ca4 <_dtoa_r+0x6e4>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4b72      	ldr	r3, [pc, #456]	; (8005e98 <_dtoa_r+0x8d8>)
 8005cd0:	f7fa fcb6 	bl	8000640 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f7fa ff16 	bl	8000b10 <__aeabi_dcmpeq>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d098      	beq.n	8005c1a <_dtoa_r+0x65a>
 8005ce8:	e7cb      	b.n	8005c82 <_dtoa_r+0x6c2>
 8005cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	f000 80cd 	beq.w	8005e8c <_dtoa_r+0x8cc>
 8005cf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cf4:	2a01      	cmp	r2, #1
 8005cf6:	f300 80af 	bgt.w	8005e58 <_dtoa_r+0x898>
 8005cfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	f000 80a7 	beq.w	8005e50 <_dtoa_r+0x890>
 8005d02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d08:	9f06      	ldr	r7, [sp, #24]
 8005d0a:	9a06      	ldr	r2, [sp, #24]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	441a      	add	r2, r3
 8005d10:	9206      	str	r2, [sp, #24]
 8005d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d14:	4628      	mov	r0, r5
 8005d16:	441a      	add	r2, r3
 8005d18:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1a:	f000 ff15 	bl	8006b48 <__i2b>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	dd0c      	ble.n	8005d3e <_dtoa_r+0x77e>
 8005d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd09      	ble.n	8005d3e <_dtoa_r+0x77e>
 8005d2a:	42bb      	cmp	r3, r7
 8005d2c:	bfa8      	it	ge
 8005d2e:	463b      	movge	r3, r7
 8005d30:	9a06      	ldr	r2, [sp, #24]
 8005d32:	1aff      	subs	r7, r7, r3
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	9206      	str	r2, [sp, #24]
 8005d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d40:	b1f3      	cbz	r3, 8005d80 <_dtoa_r+0x7c0>
 8005d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a9 	beq.w	8005e9c <_dtoa_r+0x8dc>
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	dd10      	ble.n	8005d70 <_dtoa_r+0x7b0>
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4622      	mov	r2, r4
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 ffb2 	bl	8006cbc <__pow5mult>
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 ff08 	bl	8006b74 <__multiply>
 8005d64:	4680      	mov	r8, r0
 8005d66:	4651      	mov	r1, sl
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 fde9 	bl	8006940 <_Bfree>
 8005d6e:	46c2      	mov	sl, r8
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	1b1a      	subs	r2, r3, r4
 8005d74:	d004      	beq.n	8005d80 <_dtoa_r+0x7c0>
 8005d76:	4651      	mov	r1, sl
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f000 ff9f 	bl	8006cbc <__pow5mult>
 8005d7e:	4682      	mov	sl, r0
 8005d80:	2101      	movs	r1, #1
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 fee0 	bl	8006b48 <__i2b>
 8005d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f340 8087 	ble.w	8005ea0 <_dtoa_r+0x8e0>
 8005d92:	461a      	mov	r2, r3
 8005d94:	4601      	mov	r1, r0
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 ff90 	bl	8006cbc <__pow5mult>
 8005d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	f340 8080 	ble.w	8005ea6 <_dtoa_r+0x8e6>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005db0:	6918      	ldr	r0, [r3, #16]
 8005db2:	f000 fe7b 	bl	8006aac <__hi0bits>
 8005db6:	f1c0 0020 	rsb	r0, r0, #32
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	4418      	add	r0, r3
 8005dbe:	f010 001f 	ands.w	r0, r0, #31
 8005dc2:	f000 8092 	beq.w	8005eea <_dtoa_r+0x92a>
 8005dc6:	f1c0 0320 	rsb	r3, r0, #32
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	f340 808a 	ble.w	8005ee4 <_dtoa_r+0x924>
 8005dd0:	f1c0 001c 	rsb	r0, r0, #28
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	4407      	add	r7, r0
 8005dd8:	4403      	add	r3, r0
 8005dda:	9306      	str	r3, [sp, #24]
 8005ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dde:	4403      	add	r3, r0
 8005de0:	9309      	str	r3, [sp, #36]	; 0x24
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd05      	ble.n	8005df4 <_dtoa_r+0x834>
 8005de8:	4651      	mov	r1, sl
 8005dea:	461a      	mov	r2, r3
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 ffbf 	bl	8006d70 <__lshift>
 8005df2:	4682      	mov	sl, r0
 8005df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dd05      	ble.n	8005e06 <_dtoa_r+0x846>
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 ffb6 	bl	8006d70 <__lshift>
 8005e04:	4604      	mov	r4, r0
 8005e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d070      	beq.n	8005eee <_dtoa_r+0x92e>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4650      	mov	r0, sl
 8005e10:	f001 f81a 	bl	8006e48 <__mcmp>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	da6a      	bge.n	8005eee <_dtoa_r+0x92e>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	220a      	movs	r2, #10
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 fdb0 	bl	8006984 <__multadd>
 8005e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e26:	4682      	mov	sl, r0
 8005e28:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8193 	beq.w	8006158 <_dtoa_r+0xb98>
 8005e32:	4631      	mov	r1, r6
 8005e34:	2300      	movs	r3, #0
 8005e36:	220a      	movs	r2, #10
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 fda3 	bl	8006984 <__multadd>
 8005e3e:	f1bb 0f00 	cmp.w	fp, #0
 8005e42:	4606      	mov	r6, r0
 8005e44:	f300 8093 	bgt.w	8005f6e <_dtoa_r+0x9ae>
 8005e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	dc57      	bgt.n	8005efe <_dtoa_r+0x93e>
 8005e4e:	e08e      	b.n	8005f6e <_dtoa_r+0x9ae>
 8005e50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e56:	e756      	b.n	8005d06 <_dtoa_r+0x746>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	1e5c      	subs	r4, r3, #1
 8005e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	bfb7      	itett	lt
 8005e62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e64:	1b1c      	subge	r4, r3, r4
 8005e66:	1ae2      	sublt	r2, r4, r3
 8005e68:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e6a:	bfbe      	ittt	lt
 8005e6c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e6e:	189b      	addlt	r3, r3, r2
 8005e70:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	bfb8      	it	lt
 8005e76:	2400      	movlt	r4, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbb      	ittet	lt
 8005e7c:	9b06      	ldrlt	r3, [sp, #24]
 8005e7e:	9a02      	ldrlt	r2, [sp, #8]
 8005e80:	9f06      	ldrge	r7, [sp, #24]
 8005e82:	1a9f      	sublt	r7, r3, r2
 8005e84:	bfac      	ite	ge
 8005e86:	9b02      	ldrge	r3, [sp, #8]
 8005e88:	2300      	movlt	r3, #0
 8005e8a:	e73e      	b.n	8005d0a <_dtoa_r+0x74a>
 8005e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e8e:	9f06      	ldr	r7, [sp, #24]
 8005e90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e92:	e745      	b.n	8005d20 <_dtoa_r+0x760>
 8005e94:	3fe00000 	.word	0x3fe00000
 8005e98:	40240000 	.word	0x40240000
 8005e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9e:	e76a      	b.n	8005d76 <_dtoa_r+0x7b6>
 8005ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	dc19      	bgt.n	8005eda <_dtoa_r+0x91a>
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	b9bb      	cbnz	r3, 8005eda <_dtoa_r+0x91a>
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb0:	b99b      	cbnz	r3, 8005eda <_dtoa_r+0x91a>
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	0d1b      	lsrs	r3, r3, #20
 8005eba:	051b      	lsls	r3, r3, #20
 8005ebc:	b183      	cbz	r3, 8005ee0 <_dtoa_r+0x920>
 8005ebe:	f04f 0801 	mov.w	r8, #1
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	9306      	str	r3, [sp, #24]
 8005ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eca:	3301      	adds	r3, #1
 8005ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f af6a 	bne.w	8005daa <_dtoa_r+0x7ea>
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	e76f      	b.n	8005dba <_dtoa_r+0x7fa>
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	e7f6      	b.n	8005ece <_dtoa_r+0x90e>
 8005ee0:	4698      	mov	r8, r3
 8005ee2:	e7f4      	b.n	8005ece <_dtoa_r+0x90e>
 8005ee4:	f43f af7d 	beq.w	8005de2 <_dtoa_r+0x822>
 8005ee8:	4618      	mov	r0, r3
 8005eea:	301c      	adds	r0, #28
 8005eec:	e772      	b.n	8005dd4 <_dtoa_r+0x814>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dc36      	bgt.n	8005f62 <_dtoa_r+0x9a2>
 8005ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	dd33      	ble.n	8005f62 <_dtoa_r+0x9a2>
 8005efa:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005efe:	f1bb 0f00 	cmp.w	fp, #0
 8005f02:	d10d      	bne.n	8005f20 <_dtoa_r+0x960>
 8005f04:	4621      	mov	r1, r4
 8005f06:	465b      	mov	r3, fp
 8005f08:	2205      	movs	r2, #5
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 fd3a 	bl	8006984 <__multadd>
 8005f10:	4601      	mov	r1, r0
 8005f12:	4604      	mov	r4, r0
 8005f14:	4650      	mov	r0, sl
 8005f16:	f000 ff97 	bl	8006e48 <__mcmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f73f adb6 	bgt.w	8005a8c <_dtoa_r+0x4cc>
 8005f20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f22:	9f08      	ldr	r7, [sp, #32]
 8005f24:	ea6f 0903 	mvn.w	r9, r3
 8005f28:	f04f 0800 	mov.w	r8, #0
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 fd06 	bl	8006940 <_Bfree>
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	f43f aea4 	beq.w	8005c82 <_dtoa_r+0x6c2>
 8005f3a:	f1b8 0f00 	cmp.w	r8, #0
 8005f3e:	d005      	beq.n	8005f4c <_dtoa_r+0x98c>
 8005f40:	45b0      	cmp	r8, r6
 8005f42:	d003      	beq.n	8005f4c <_dtoa_r+0x98c>
 8005f44:	4641      	mov	r1, r8
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fcfa 	bl	8006940 <_Bfree>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 fcf6 	bl	8006940 <_Bfree>
 8005f54:	e695      	b.n	8005c82 <_dtoa_r+0x6c2>
 8005f56:	2400      	movs	r4, #0
 8005f58:	4626      	mov	r6, r4
 8005f5a:	e7e1      	b.n	8005f20 <_dtoa_r+0x960>
 8005f5c:	46c1      	mov	r9, r8
 8005f5e:	4626      	mov	r6, r4
 8005f60:	e594      	b.n	8005a8c <_dtoa_r+0x4cc>
 8005f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f64:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80fc 	beq.w	8006166 <_dtoa_r+0xba6>
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	dd05      	ble.n	8005f7e <_dtoa_r+0x9be>
 8005f72:	4631      	mov	r1, r6
 8005f74:	463a      	mov	r2, r7
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fefa 	bl	8006d70 <__lshift>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	f1b8 0f00 	cmp.w	r8, #0
 8005f82:	d05c      	beq.n	800603e <_dtoa_r+0xa7e>
 8005f84:	4628      	mov	r0, r5
 8005f86:	6871      	ldr	r1, [r6, #4]
 8005f88:	f000 fc9a 	bl	80068c0 <_Balloc>
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	b928      	cbnz	r0, 8005f9c <_dtoa_r+0x9dc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f96:	4b7e      	ldr	r3, [pc, #504]	; (8006190 <_dtoa_r+0xbd0>)
 8005f98:	f7ff bb26 	b.w	80055e8 <_dtoa_r+0x28>
 8005f9c:	6932      	ldr	r2, [r6, #16]
 8005f9e:	f106 010c 	add.w	r1, r6, #12
 8005fa2:	3202      	adds	r2, #2
 8005fa4:	0092      	lsls	r2, r2, #2
 8005fa6:	300c      	adds	r0, #12
 8005fa8:	f7fd fd2c 	bl	8003a04 <memcpy>
 8005fac:	2201      	movs	r2, #1
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 fedd 	bl	8006d70 <__lshift>
 8005fb6:	46b0      	mov	r8, r6
 8005fb8:	4606      	mov	r6, r0
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	9302      	str	r3, [sp, #8]
 8005fc0:	9b08      	ldr	r3, [sp, #32]
 8005fc2:	445b      	add	r3, fp
 8005fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005fd8:	f7ff fa64 	bl	80054a4 <quorem>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4641      	mov	r1, r8
 8005fe0:	3330      	adds	r3, #48	; 0x30
 8005fe2:	9004      	str	r0, [sp, #16]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe8:	f000 ff2e 	bl	8006e48 <__mcmp>
 8005fec:	4632      	mov	r2, r6
 8005fee:	9006      	str	r0, [sp, #24]
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 ff44 	bl	8006e80 <__mdiff>
 8005ff8:	68c2      	ldr	r2, [r0, #12]
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffe:	bb02      	cbnz	r2, 8006042 <_dtoa_r+0xa82>
 8006000:	4601      	mov	r1, r0
 8006002:	4650      	mov	r0, sl
 8006004:	f000 ff20 	bl	8006e48 <__mcmp>
 8006008:	4602      	mov	r2, r0
 800600a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600c:	4639      	mov	r1, r7
 800600e:	4628      	mov	r0, r5
 8006010:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006014:	f000 fc94 	bl	8006940 <_Bfree>
 8006018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800601a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800601c:	9f02      	ldr	r7, [sp, #8]
 800601e:	ea43 0102 	orr.w	r1, r3, r2
 8006022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006024:	430b      	orrs	r3, r1
 8006026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006028:	d10d      	bne.n	8006046 <_dtoa_r+0xa86>
 800602a:	2b39      	cmp	r3, #57	; 0x39
 800602c:	d027      	beq.n	800607e <_dtoa_r+0xabe>
 800602e:	9a06      	ldr	r2, [sp, #24]
 8006030:	2a00      	cmp	r2, #0
 8006032:	dd01      	ble.n	8006038 <_dtoa_r+0xa78>
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	3331      	adds	r3, #49	; 0x31
 8006038:	f88b 3000 	strb.w	r3, [fp]
 800603c:	e776      	b.n	8005f2c <_dtoa_r+0x96c>
 800603e:	4630      	mov	r0, r6
 8006040:	e7b9      	b.n	8005fb6 <_dtoa_r+0x9f6>
 8006042:	2201      	movs	r2, #1
 8006044:	e7e2      	b.n	800600c <_dtoa_r+0xa4c>
 8006046:	9906      	ldr	r1, [sp, #24]
 8006048:	2900      	cmp	r1, #0
 800604a:	db04      	blt.n	8006056 <_dtoa_r+0xa96>
 800604c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800604e:	4301      	orrs	r1, r0
 8006050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006052:	4301      	orrs	r1, r0
 8006054:	d120      	bne.n	8006098 <_dtoa_r+0xad8>
 8006056:	2a00      	cmp	r2, #0
 8006058:	ddee      	ble.n	8006038 <_dtoa_r+0xa78>
 800605a:	4651      	mov	r1, sl
 800605c:	2201      	movs	r2, #1
 800605e:	4628      	mov	r0, r5
 8006060:	9302      	str	r3, [sp, #8]
 8006062:	f000 fe85 	bl	8006d70 <__lshift>
 8006066:	4621      	mov	r1, r4
 8006068:	4682      	mov	sl, r0
 800606a:	f000 feed 	bl	8006e48 <__mcmp>
 800606e:	2800      	cmp	r0, #0
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	dc02      	bgt.n	800607a <_dtoa_r+0xaba>
 8006074:	d1e0      	bne.n	8006038 <_dtoa_r+0xa78>
 8006076:	07da      	lsls	r2, r3, #31
 8006078:	d5de      	bpl.n	8006038 <_dtoa_r+0xa78>
 800607a:	2b39      	cmp	r3, #57	; 0x39
 800607c:	d1da      	bne.n	8006034 <_dtoa_r+0xa74>
 800607e:	2339      	movs	r3, #57	; 0x39
 8006080:	f88b 3000 	strb.w	r3, [fp]
 8006084:	463b      	mov	r3, r7
 8006086:	461f      	mov	r7, r3
 8006088:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800608c:	3b01      	subs	r3, #1
 800608e:	2a39      	cmp	r2, #57	; 0x39
 8006090:	d050      	beq.n	8006134 <_dtoa_r+0xb74>
 8006092:	3201      	adds	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e749      	b.n	8005f2c <_dtoa_r+0x96c>
 8006098:	2a00      	cmp	r2, #0
 800609a:	dd03      	ble.n	80060a4 <_dtoa_r+0xae4>
 800609c:	2b39      	cmp	r3, #57	; 0x39
 800609e:	d0ee      	beq.n	800607e <_dtoa_r+0xabe>
 80060a0:	3301      	adds	r3, #1
 80060a2:	e7c9      	b.n	8006038 <_dtoa_r+0xa78>
 80060a4:	9a02      	ldr	r2, [sp, #8]
 80060a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060ac:	428a      	cmp	r2, r1
 80060ae:	d02a      	beq.n	8006106 <_dtoa_r+0xb46>
 80060b0:	4651      	mov	r1, sl
 80060b2:	2300      	movs	r3, #0
 80060b4:	220a      	movs	r2, #10
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 fc64 	bl	8006984 <__multadd>
 80060bc:	45b0      	cmp	r8, r6
 80060be:	4682      	mov	sl, r0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f04f 020a 	mov.w	r2, #10
 80060c8:	4641      	mov	r1, r8
 80060ca:	4628      	mov	r0, r5
 80060cc:	d107      	bne.n	80060de <_dtoa_r+0xb1e>
 80060ce:	f000 fc59 	bl	8006984 <__multadd>
 80060d2:	4680      	mov	r8, r0
 80060d4:	4606      	mov	r6, r0
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	3301      	adds	r3, #1
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	e777      	b.n	8005fce <_dtoa_r+0xa0e>
 80060de:	f000 fc51 	bl	8006984 <__multadd>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4680      	mov	r8, r0
 80060e6:	2300      	movs	r3, #0
 80060e8:	220a      	movs	r2, #10
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fc4a 	bl	8006984 <__multadd>
 80060f0:	4606      	mov	r6, r0
 80060f2:	e7f0      	b.n	80060d6 <_dtoa_r+0xb16>
 80060f4:	f1bb 0f00 	cmp.w	fp, #0
 80060f8:	bfcc      	ite	gt
 80060fa:	465f      	movgt	r7, fp
 80060fc:	2701      	movle	r7, #1
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	9a08      	ldr	r2, [sp, #32]
 8006104:	4417      	add	r7, r2
 8006106:	4651      	mov	r1, sl
 8006108:	2201      	movs	r2, #1
 800610a:	4628      	mov	r0, r5
 800610c:	9302      	str	r3, [sp, #8]
 800610e:	f000 fe2f 	bl	8006d70 <__lshift>
 8006112:	4621      	mov	r1, r4
 8006114:	4682      	mov	sl, r0
 8006116:	f000 fe97 	bl	8006e48 <__mcmp>
 800611a:	2800      	cmp	r0, #0
 800611c:	dcb2      	bgt.n	8006084 <_dtoa_r+0xac4>
 800611e:	d102      	bne.n	8006126 <_dtoa_r+0xb66>
 8006120:	9b02      	ldr	r3, [sp, #8]
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d4ae      	bmi.n	8006084 <_dtoa_r+0xac4>
 8006126:	463b      	mov	r3, r7
 8006128:	461f      	mov	r7, r3
 800612a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800612e:	2a30      	cmp	r2, #48	; 0x30
 8006130:	d0fa      	beq.n	8006128 <_dtoa_r+0xb68>
 8006132:	e6fb      	b.n	8005f2c <_dtoa_r+0x96c>
 8006134:	9a08      	ldr	r2, [sp, #32]
 8006136:	429a      	cmp	r2, r3
 8006138:	d1a5      	bne.n	8006086 <_dtoa_r+0xac6>
 800613a:	2331      	movs	r3, #49	; 0x31
 800613c:	f109 0901 	add.w	r9, r9, #1
 8006140:	7013      	strb	r3, [r2, #0]
 8006142:	e6f3      	b.n	8005f2c <_dtoa_r+0x96c>
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_dtoa_r+0xbd4>)
 8006146:	f7ff baa7 	b.w	8005698 <_dtoa_r+0xd8>
 800614a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800614c:	2b00      	cmp	r3, #0
 800614e:	f47f aa80 	bne.w	8005652 <_dtoa_r+0x92>
 8006152:	4b11      	ldr	r3, [pc, #68]	; (8006198 <_dtoa_r+0xbd8>)
 8006154:	f7ff baa0 	b.w	8005698 <_dtoa_r+0xd8>
 8006158:	f1bb 0f00 	cmp.w	fp, #0
 800615c:	dc03      	bgt.n	8006166 <_dtoa_r+0xba6>
 800615e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006160:	2b02      	cmp	r3, #2
 8006162:	f73f aecc 	bgt.w	8005efe <_dtoa_r+0x93e>
 8006166:	9f08      	ldr	r7, [sp, #32]
 8006168:	4621      	mov	r1, r4
 800616a:	4650      	mov	r0, sl
 800616c:	f7ff f99a 	bl	80054a4 <quorem>
 8006170:	9a08      	ldr	r2, [sp, #32]
 8006172:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006176:	f807 3b01 	strb.w	r3, [r7], #1
 800617a:	1aba      	subs	r2, r7, r2
 800617c:	4593      	cmp	fp, r2
 800617e:	ddb9      	ble.n	80060f4 <_dtoa_r+0xb34>
 8006180:	4651      	mov	r1, sl
 8006182:	2300      	movs	r3, #0
 8006184:	220a      	movs	r2, #10
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fbfc 	bl	8006984 <__multadd>
 800618c:	4682      	mov	sl, r0
 800618e:	e7eb      	b.n	8006168 <_dtoa_r+0xba8>
 8006190:	080084e4 	.word	0x080084e4
 8006194:	080082e4 	.word	0x080082e4
 8006198:	08008461 	.word	0x08008461

0800619c <rshift>:
 800619c:	6903      	ldr	r3, [r0, #16]
 800619e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80061a6:	f100 0414 	add.w	r4, r0, #20
 80061aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80061ae:	dd46      	ble.n	800623e <rshift+0xa2>
 80061b0:	f011 011f 	ands.w	r1, r1, #31
 80061b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80061b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80061bc:	d10c      	bne.n	80061d8 <rshift+0x3c>
 80061be:	4629      	mov	r1, r5
 80061c0:	f100 0710 	add.w	r7, r0, #16
 80061c4:	42b1      	cmp	r1, r6
 80061c6:	d335      	bcc.n	8006234 <rshift+0x98>
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	1eea      	subs	r2, r5, #3
 80061ce:	4296      	cmp	r6, r2
 80061d0:	bf38      	it	cc
 80061d2:	2300      	movcc	r3, #0
 80061d4:	4423      	add	r3, r4
 80061d6:	e015      	b.n	8006204 <rshift+0x68>
 80061d8:	46a1      	mov	r9, r4
 80061da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80061de:	f1c1 0820 	rsb	r8, r1, #32
 80061e2:	40cf      	lsrs	r7, r1
 80061e4:	f105 0e04 	add.w	lr, r5, #4
 80061e8:	4576      	cmp	r6, lr
 80061ea:	46f4      	mov	ip, lr
 80061ec:	d816      	bhi.n	800621c <rshift+0x80>
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009a      	lsls	r2, r3, #2
 80061f2:	3a04      	subs	r2, #4
 80061f4:	3501      	adds	r5, #1
 80061f6:	42ae      	cmp	r6, r5
 80061f8:	bf38      	it	cc
 80061fa:	2200      	movcc	r2, #0
 80061fc:	18a3      	adds	r3, r4, r2
 80061fe:	50a7      	str	r7, [r4, r2]
 8006200:	b107      	cbz	r7, 8006204 <rshift+0x68>
 8006202:	3304      	adds	r3, #4
 8006204:	42a3      	cmp	r3, r4
 8006206:	eba3 0204 	sub.w	r2, r3, r4
 800620a:	bf08      	it	eq
 800620c:	2300      	moveq	r3, #0
 800620e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006212:	6102      	str	r2, [r0, #16]
 8006214:	bf08      	it	eq
 8006216:	6143      	streq	r3, [r0, #20]
 8006218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800621c:	f8dc c000 	ldr.w	ip, [ip]
 8006220:	fa0c fc08 	lsl.w	ip, ip, r8
 8006224:	ea4c 0707 	orr.w	r7, ip, r7
 8006228:	f849 7b04 	str.w	r7, [r9], #4
 800622c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006230:	40cf      	lsrs	r7, r1
 8006232:	e7d9      	b.n	80061e8 <rshift+0x4c>
 8006234:	f851 cb04 	ldr.w	ip, [r1], #4
 8006238:	f847 cf04 	str.w	ip, [r7, #4]!
 800623c:	e7c2      	b.n	80061c4 <rshift+0x28>
 800623e:	4623      	mov	r3, r4
 8006240:	e7e0      	b.n	8006204 <rshift+0x68>

08006242 <__hexdig_fun>:
 8006242:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006246:	2b09      	cmp	r3, #9
 8006248:	d802      	bhi.n	8006250 <__hexdig_fun+0xe>
 800624a:	3820      	subs	r0, #32
 800624c:	b2c0      	uxtb	r0, r0
 800624e:	4770      	bx	lr
 8006250:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006254:	2b05      	cmp	r3, #5
 8006256:	d801      	bhi.n	800625c <__hexdig_fun+0x1a>
 8006258:	3847      	subs	r0, #71	; 0x47
 800625a:	e7f7      	b.n	800624c <__hexdig_fun+0xa>
 800625c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006260:	2b05      	cmp	r3, #5
 8006262:	d801      	bhi.n	8006268 <__hexdig_fun+0x26>
 8006264:	3827      	subs	r0, #39	; 0x27
 8006266:	e7f1      	b.n	800624c <__hexdig_fun+0xa>
 8006268:	2000      	movs	r0, #0
 800626a:	4770      	bx	lr

0800626c <__gethex>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	b08b      	sub	sp, #44	; 0x2c
 8006272:	9306      	str	r3, [sp, #24]
 8006274:	4bb9      	ldr	r3, [pc, #740]	; (800655c <__gethex+0x2f0>)
 8006276:	9002      	str	r0, [sp, #8]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	468b      	mov	fp, r1
 800627c:	4618      	mov	r0, r3
 800627e:	4690      	mov	r8, r2
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	f7f9 ff65 	bl	8000150 <strlen>
 8006286:	4682      	mov	sl, r0
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	f8db 2000 	ldr.w	r2, [fp]
 800628e:	4403      	add	r3, r0
 8006290:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006294:	9307      	str	r3, [sp, #28]
 8006296:	1c93      	adds	r3, r2, #2
 8006298:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800629c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80062a0:	32fe      	adds	r2, #254	; 0xfe
 80062a2:	18d1      	adds	r1, r2, r3
 80062a4:	461f      	mov	r7, r3
 80062a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80062aa:	9101      	str	r1, [sp, #4]
 80062ac:	2830      	cmp	r0, #48	; 0x30
 80062ae:	d0f8      	beq.n	80062a2 <__gethex+0x36>
 80062b0:	f7ff ffc7 	bl	8006242 <__hexdig_fun>
 80062b4:	4604      	mov	r4, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d13a      	bne.n	8006330 <__gethex+0xc4>
 80062ba:	4652      	mov	r2, sl
 80062bc:	4638      	mov	r0, r7
 80062be:	9903      	ldr	r1, [sp, #12]
 80062c0:	f001 f9dc 	bl	800767c <strncmp>
 80062c4:	4605      	mov	r5, r0
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d166      	bne.n	8006398 <__gethex+0x12c>
 80062ca:	f817 000a 	ldrb.w	r0, [r7, sl]
 80062ce:	eb07 060a 	add.w	r6, r7, sl
 80062d2:	f7ff ffb6 	bl	8006242 <__hexdig_fun>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d060      	beq.n	800639c <__gethex+0x130>
 80062da:	4633      	mov	r3, r6
 80062dc:	7818      	ldrb	r0, [r3, #0]
 80062de:	461f      	mov	r7, r3
 80062e0:	2830      	cmp	r0, #48	; 0x30
 80062e2:	f103 0301 	add.w	r3, r3, #1
 80062e6:	d0f9      	beq.n	80062dc <__gethex+0x70>
 80062e8:	f7ff ffab 	bl	8006242 <__hexdig_fun>
 80062ec:	2301      	movs	r3, #1
 80062ee:	fab0 f480 	clz	r4, r0
 80062f2:	4635      	mov	r5, r6
 80062f4:	0964      	lsrs	r4, r4, #5
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	463a      	mov	r2, r7
 80062fa:	4616      	mov	r6, r2
 80062fc:	7830      	ldrb	r0, [r6, #0]
 80062fe:	3201      	adds	r2, #1
 8006300:	f7ff ff9f 	bl	8006242 <__hexdig_fun>
 8006304:	2800      	cmp	r0, #0
 8006306:	d1f8      	bne.n	80062fa <__gethex+0x8e>
 8006308:	4652      	mov	r2, sl
 800630a:	4630      	mov	r0, r6
 800630c:	9903      	ldr	r1, [sp, #12]
 800630e:	f001 f9b5 	bl	800767c <strncmp>
 8006312:	b980      	cbnz	r0, 8006336 <__gethex+0xca>
 8006314:	b94d      	cbnz	r5, 800632a <__gethex+0xbe>
 8006316:	eb06 050a 	add.w	r5, r6, sl
 800631a:	462a      	mov	r2, r5
 800631c:	4616      	mov	r6, r2
 800631e:	7830      	ldrb	r0, [r6, #0]
 8006320:	3201      	adds	r2, #1
 8006322:	f7ff ff8e 	bl	8006242 <__hexdig_fun>
 8006326:	2800      	cmp	r0, #0
 8006328:	d1f8      	bne.n	800631c <__gethex+0xb0>
 800632a:	1bad      	subs	r5, r5, r6
 800632c:	00ad      	lsls	r5, r5, #2
 800632e:	e004      	b.n	800633a <__gethex+0xce>
 8006330:	2400      	movs	r4, #0
 8006332:	4625      	mov	r5, r4
 8006334:	e7e0      	b.n	80062f8 <__gethex+0x8c>
 8006336:	2d00      	cmp	r5, #0
 8006338:	d1f7      	bne.n	800632a <__gethex+0xbe>
 800633a:	7833      	ldrb	r3, [r6, #0]
 800633c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d139      	bne.n	80063b8 <__gethex+0x14c>
 8006344:	7873      	ldrb	r3, [r6, #1]
 8006346:	2b2b      	cmp	r3, #43	; 0x2b
 8006348:	d02a      	beq.n	80063a0 <__gethex+0x134>
 800634a:	2b2d      	cmp	r3, #45	; 0x2d
 800634c:	d02c      	beq.n	80063a8 <__gethex+0x13c>
 800634e:	f04f 0900 	mov.w	r9, #0
 8006352:	1c71      	adds	r1, r6, #1
 8006354:	7808      	ldrb	r0, [r1, #0]
 8006356:	f7ff ff74 	bl	8006242 <__hexdig_fun>
 800635a:	1e43      	subs	r3, r0, #1
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b18      	cmp	r3, #24
 8006360:	d82a      	bhi.n	80063b8 <__gethex+0x14c>
 8006362:	f1a0 0210 	sub.w	r2, r0, #16
 8006366:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800636a:	f7ff ff6a 	bl	8006242 <__hexdig_fun>
 800636e:	1e43      	subs	r3, r0, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b18      	cmp	r3, #24
 8006374:	d91b      	bls.n	80063ae <__gethex+0x142>
 8006376:	f1b9 0f00 	cmp.w	r9, #0
 800637a:	d000      	beq.n	800637e <__gethex+0x112>
 800637c:	4252      	negs	r2, r2
 800637e:	4415      	add	r5, r2
 8006380:	f8cb 1000 	str.w	r1, [fp]
 8006384:	b1d4      	cbz	r4, 80063bc <__gethex+0x150>
 8006386:	9b01      	ldr	r3, [sp, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf14      	ite	ne
 800638c:	2700      	movne	r7, #0
 800638e:	2706      	moveq	r7, #6
 8006390:	4638      	mov	r0, r7
 8006392:	b00b      	add	sp, #44	; 0x2c
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	463e      	mov	r6, r7
 800639a:	4625      	mov	r5, r4
 800639c:	2401      	movs	r4, #1
 800639e:	e7cc      	b.n	800633a <__gethex+0xce>
 80063a0:	f04f 0900 	mov.w	r9, #0
 80063a4:	1cb1      	adds	r1, r6, #2
 80063a6:	e7d5      	b.n	8006354 <__gethex+0xe8>
 80063a8:	f04f 0901 	mov.w	r9, #1
 80063ac:	e7fa      	b.n	80063a4 <__gethex+0x138>
 80063ae:	230a      	movs	r3, #10
 80063b0:	fb03 0202 	mla	r2, r3, r2, r0
 80063b4:	3a10      	subs	r2, #16
 80063b6:	e7d6      	b.n	8006366 <__gethex+0xfa>
 80063b8:	4631      	mov	r1, r6
 80063ba:	e7e1      	b.n	8006380 <__gethex+0x114>
 80063bc:	4621      	mov	r1, r4
 80063be:	1bf3      	subs	r3, r6, r7
 80063c0:	3b01      	subs	r3, #1
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	dc0a      	bgt.n	80063dc <__gethex+0x170>
 80063c6:	9802      	ldr	r0, [sp, #8]
 80063c8:	f000 fa7a 	bl	80068c0 <_Balloc>
 80063cc:	4604      	mov	r4, r0
 80063ce:	b940      	cbnz	r0, 80063e2 <__gethex+0x176>
 80063d0:	4602      	mov	r2, r0
 80063d2:	21de      	movs	r1, #222	; 0xde
 80063d4:	4b62      	ldr	r3, [pc, #392]	; (8006560 <__gethex+0x2f4>)
 80063d6:	4863      	ldr	r0, [pc, #396]	; (8006564 <__gethex+0x2f8>)
 80063d8:	f001 f970 	bl	80076bc <__assert_func>
 80063dc:	3101      	adds	r1, #1
 80063de:	105b      	asrs	r3, r3, #1
 80063e0:	e7ef      	b.n	80063c2 <__gethex+0x156>
 80063e2:	f04f 0b00 	mov.w	fp, #0
 80063e6:	f100 0914 	add.w	r9, r0, #20
 80063ea:	f1ca 0301 	rsb	r3, sl, #1
 80063ee:	f8cd 9010 	str.w	r9, [sp, #16]
 80063f2:	f8cd b004 	str.w	fp, [sp, #4]
 80063f6:	9308      	str	r3, [sp, #32]
 80063f8:	42b7      	cmp	r7, r6
 80063fa:	d33f      	bcc.n	800647c <__gethex+0x210>
 80063fc:	9f04      	ldr	r7, [sp, #16]
 80063fe:	9b01      	ldr	r3, [sp, #4]
 8006400:	f847 3b04 	str.w	r3, [r7], #4
 8006404:	eba7 0709 	sub.w	r7, r7, r9
 8006408:	10bf      	asrs	r7, r7, #2
 800640a:	6127      	str	r7, [r4, #16]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fb4d 	bl	8006aac <__hi0bits>
 8006412:	017f      	lsls	r7, r7, #5
 8006414:	f8d8 6000 	ldr.w	r6, [r8]
 8006418:	1a3f      	subs	r7, r7, r0
 800641a:	42b7      	cmp	r7, r6
 800641c:	dd62      	ble.n	80064e4 <__gethex+0x278>
 800641e:	1bbf      	subs	r7, r7, r6
 8006420:	4639      	mov	r1, r7
 8006422:	4620      	mov	r0, r4
 8006424:	f000 fee3 	bl	80071ee <__any_on>
 8006428:	4682      	mov	sl, r0
 800642a:	b1a8      	cbz	r0, 8006458 <__gethex+0x1ec>
 800642c:	f04f 0a01 	mov.w	sl, #1
 8006430:	1e7b      	subs	r3, r7, #1
 8006432:	1159      	asrs	r1, r3, #5
 8006434:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006438:	f003 021f 	and.w	r2, r3, #31
 800643c:	fa0a f202 	lsl.w	r2, sl, r2
 8006440:	420a      	tst	r2, r1
 8006442:	d009      	beq.n	8006458 <__gethex+0x1ec>
 8006444:	4553      	cmp	r3, sl
 8006446:	dd05      	ble.n	8006454 <__gethex+0x1e8>
 8006448:	4620      	mov	r0, r4
 800644a:	1eb9      	subs	r1, r7, #2
 800644c:	f000 fecf 	bl	80071ee <__any_on>
 8006450:	2800      	cmp	r0, #0
 8006452:	d144      	bne.n	80064de <__gethex+0x272>
 8006454:	f04f 0a02 	mov.w	sl, #2
 8006458:	4639      	mov	r1, r7
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff fe9e 	bl	800619c <rshift>
 8006460:	443d      	add	r5, r7
 8006462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006466:	42ab      	cmp	r3, r5
 8006468:	da4a      	bge.n	8006500 <__gethex+0x294>
 800646a:	4621      	mov	r1, r4
 800646c:	9802      	ldr	r0, [sp, #8]
 800646e:	f000 fa67 	bl	8006940 <_Bfree>
 8006472:	2300      	movs	r3, #0
 8006474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006476:	27a3      	movs	r7, #163	; 0xa3
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e789      	b.n	8006390 <__gethex+0x124>
 800647c:	1e73      	subs	r3, r6, #1
 800647e:	9a07      	ldr	r2, [sp, #28]
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006486:	4293      	cmp	r3, r2
 8006488:	d019      	beq.n	80064be <__gethex+0x252>
 800648a:	f1bb 0f20 	cmp.w	fp, #32
 800648e:	d107      	bne.n	80064a0 <__gethex+0x234>
 8006490:	9b04      	ldr	r3, [sp, #16]
 8006492:	9a01      	ldr	r2, [sp, #4]
 8006494:	f843 2b04 	str.w	r2, [r3], #4
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	469b      	mov	fp, r3
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80064a4:	f7ff fecd 	bl	8006242 <__hexdig_fun>
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	f000 000f 	and.w	r0, r0, #15
 80064ae:	fa00 f00b 	lsl.w	r0, r0, fp
 80064b2:	4303      	orrs	r3, r0
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	f10b 0b04 	add.w	fp, fp, #4
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	e00d      	b.n	80064da <__gethex+0x26e>
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	9a08      	ldr	r2, [sp, #32]
 80064c2:	4413      	add	r3, r2
 80064c4:	42bb      	cmp	r3, r7
 80064c6:	d3e0      	bcc.n	800648a <__gethex+0x21e>
 80064c8:	4618      	mov	r0, r3
 80064ca:	4652      	mov	r2, sl
 80064cc:	9903      	ldr	r1, [sp, #12]
 80064ce:	9309      	str	r3, [sp, #36]	; 0x24
 80064d0:	f001 f8d4 	bl	800767c <strncmp>
 80064d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1d7      	bne.n	800648a <__gethex+0x21e>
 80064da:	461e      	mov	r6, r3
 80064dc:	e78c      	b.n	80063f8 <__gethex+0x18c>
 80064de:	f04f 0a03 	mov.w	sl, #3
 80064e2:	e7b9      	b.n	8006458 <__gethex+0x1ec>
 80064e4:	da09      	bge.n	80064fa <__gethex+0x28e>
 80064e6:	1bf7      	subs	r7, r6, r7
 80064e8:	4621      	mov	r1, r4
 80064ea:	463a      	mov	r2, r7
 80064ec:	9802      	ldr	r0, [sp, #8]
 80064ee:	f000 fc3f 	bl	8006d70 <__lshift>
 80064f2:	4604      	mov	r4, r0
 80064f4:	1bed      	subs	r5, r5, r7
 80064f6:	f100 0914 	add.w	r9, r0, #20
 80064fa:	f04f 0a00 	mov.w	sl, #0
 80064fe:	e7b0      	b.n	8006462 <__gethex+0x1f6>
 8006500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006504:	42a8      	cmp	r0, r5
 8006506:	dd71      	ble.n	80065ec <__gethex+0x380>
 8006508:	1b45      	subs	r5, r0, r5
 800650a:	42ae      	cmp	r6, r5
 800650c:	dc34      	bgt.n	8006578 <__gethex+0x30c>
 800650e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d028      	beq.n	8006568 <__gethex+0x2fc>
 8006516:	2b03      	cmp	r3, #3
 8006518:	d02a      	beq.n	8006570 <__gethex+0x304>
 800651a:	2b01      	cmp	r3, #1
 800651c:	d115      	bne.n	800654a <__gethex+0x2de>
 800651e:	42ae      	cmp	r6, r5
 8006520:	d113      	bne.n	800654a <__gethex+0x2de>
 8006522:	2e01      	cmp	r6, #1
 8006524:	d10b      	bne.n	800653e <__gethex+0x2d2>
 8006526:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800652a:	9a06      	ldr	r2, [sp, #24]
 800652c:	2762      	movs	r7, #98	; 0x62
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	2301      	movs	r3, #1
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	f8c9 3000 	str.w	r3, [r9]
 8006538:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800653a:	601c      	str	r4, [r3, #0]
 800653c:	e728      	b.n	8006390 <__gethex+0x124>
 800653e:	4620      	mov	r0, r4
 8006540:	1e71      	subs	r1, r6, #1
 8006542:	f000 fe54 	bl	80071ee <__any_on>
 8006546:	2800      	cmp	r0, #0
 8006548:	d1ed      	bne.n	8006526 <__gethex+0x2ba>
 800654a:	4621      	mov	r1, r4
 800654c:	9802      	ldr	r0, [sp, #8]
 800654e:	f000 f9f7 	bl	8006940 <_Bfree>
 8006552:	2300      	movs	r3, #0
 8006554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006556:	2750      	movs	r7, #80	; 0x50
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e719      	b.n	8006390 <__gethex+0x124>
 800655c:	08008560 	.word	0x08008560
 8006560:	080084e4 	.word	0x080084e4
 8006564:	080084f5 	.word	0x080084f5
 8006568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1ed      	bne.n	800654a <__gethex+0x2de>
 800656e:	e7da      	b.n	8006526 <__gethex+0x2ba>
 8006570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d7      	bne.n	8006526 <__gethex+0x2ba>
 8006576:	e7e8      	b.n	800654a <__gethex+0x2de>
 8006578:	1e6f      	subs	r7, r5, #1
 800657a:	f1ba 0f00 	cmp.w	sl, #0
 800657e:	d132      	bne.n	80065e6 <__gethex+0x37a>
 8006580:	b127      	cbz	r7, 800658c <__gethex+0x320>
 8006582:	4639      	mov	r1, r7
 8006584:	4620      	mov	r0, r4
 8006586:	f000 fe32 	bl	80071ee <__any_on>
 800658a:	4682      	mov	sl, r0
 800658c:	2101      	movs	r1, #1
 800658e:	117b      	asrs	r3, r7, #5
 8006590:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006594:	f007 071f 	and.w	r7, r7, #31
 8006598:	fa01 f707 	lsl.w	r7, r1, r7
 800659c:	421f      	tst	r7, r3
 800659e:	f04f 0702 	mov.w	r7, #2
 80065a2:	4629      	mov	r1, r5
 80065a4:	4620      	mov	r0, r4
 80065a6:	bf18      	it	ne
 80065a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80065ac:	1b76      	subs	r6, r6, r5
 80065ae:	f7ff fdf5 	bl	800619c <rshift>
 80065b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80065b6:	f1ba 0f00 	cmp.w	sl, #0
 80065ba:	d048      	beq.n	800664e <__gethex+0x3e2>
 80065bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d015      	beq.n	80065f0 <__gethex+0x384>
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d017      	beq.n	80065f8 <__gethex+0x38c>
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d109      	bne.n	80065e0 <__gethex+0x374>
 80065cc:	f01a 0f02 	tst.w	sl, #2
 80065d0:	d006      	beq.n	80065e0 <__gethex+0x374>
 80065d2:	f8d9 0000 	ldr.w	r0, [r9]
 80065d6:	ea4a 0a00 	orr.w	sl, sl, r0
 80065da:	f01a 0f01 	tst.w	sl, #1
 80065de:	d10e      	bne.n	80065fe <__gethex+0x392>
 80065e0:	f047 0710 	orr.w	r7, r7, #16
 80065e4:	e033      	b.n	800664e <__gethex+0x3e2>
 80065e6:	f04f 0a01 	mov.w	sl, #1
 80065ea:	e7cf      	b.n	800658c <__gethex+0x320>
 80065ec:	2701      	movs	r7, #1
 80065ee:	e7e2      	b.n	80065b6 <__gethex+0x34a>
 80065f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065f2:	f1c3 0301 	rsb	r3, r3, #1
 80065f6:	9315      	str	r3, [sp, #84]	; 0x54
 80065f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <__gethex+0x374>
 80065fe:	f04f 0c00 	mov.w	ip, #0
 8006602:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006606:	f104 0314 	add.w	r3, r4, #20
 800660a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800660e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006612:	4618      	mov	r0, r3
 8006614:	f853 2b04 	ldr.w	r2, [r3], #4
 8006618:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800661c:	d01c      	beq.n	8006658 <__gethex+0x3ec>
 800661e:	3201      	adds	r2, #1
 8006620:	6002      	str	r2, [r0, #0]
 8006622:	2f02      	cmp	r7, #2
 8006624:	f104 0314 	add.w	r3, r4, #20
 8006628:	d13d      	bne.n	80066a6 <__gethex+0x43a>
 800662a:	f8d8 2000 	ldr.w	r2, [r8]
 800662e:	3a01      	subs	r2, #1
 8006630:	42b2      	cmp	r2, r6
 8006632:	d10a      	bne.n	800664a <__gethex+0x3de>
 8006634:	2201      	movs	r2, #1
 8006636:	1171      	asrs	r1, r6, #5
 8006638:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800663c:	f006 061f 	and.w	r6, r6, #31
 8006640:	fa02 f606 	lsl.w	r6, r2, r6
 8006644:	421e      	tst	r6, r3
 8006646:	bf18      	it	ne
 8006648:	4617      	movne	r7, r2
 800664a:	f047 0720 	orr.w	r7, r7, #32
 800664e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006650:	601c      	str	r4, [r3, #0]
 8006652:	9b06      	ldr	r3, [sp, #24]
 8006654:	601d      	str	r5, [r3, #0]
 8006656:	e69b      	b.n	8006390 <__gethex+0x124>
 8006658:	4299      	cmp	r1, r3
 800665a:	f843 cc04 	str.w	ip, [r3, #-4]
 800665e:	d8d8      	bhi.n	8006612 <__gethex+0x3a6>
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	459b      	cmp	fp, r3
 8006664:	db17      	blt.n	8006696 <__gethex+0x42a>
 8006666:	6861      	ldr	r1, [r4, #4]
 8006668:	9802      	ldr	r0, [sp, #8]
 800666a:	3101      	adds	r1, #1
 800666c:	f000 f928 	bl	80068c0 <_Balloc>
 8006670:	4681      	mov	r9, r0
 8006672:	b918      	cbnz	r0, 800667c <__gethex+0x410>
 8006674:	4602      	mov	r2, r0
 8006676:	2184      	movs	r1, #132	; 0x84
 8006678:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <__gethex+0x474>)
 800667a:	e6ac      	b.n	80063d6 <__gethex+0x16a>
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	f104 010c 	add.w	r1, r4, #12
 8006682:	3202      	adds	r2, #2
 8006684:	0092      	lsls	r2, r2, #2
 8006686:	300c      	adds	r0, #12
 8006688:	f7fd f9bc 	bl	8003a04 <memcpy>
 800668c:	4621      	mov	r1, r4
 800668e:	9802      	ldr	r0, [sp, #8]
 8006690:	f000 f956 	bl	8006940 <_Bfree>
 8006694:	464c      	mov	r4, r9
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6122      	str	r2, [r4, #16]
 800669c:	2201      	movs	r2, #1
 800669e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066a2:	615a      	str	r2, [r3, #20]
 80066a4:	e7bd      	b.n	8006622 <__gethex+0x3b6>
 80066a6:	6922      	ldr	r2, [r4, #16]
 80066a8:	455a      	cmp	r2, fp
 80066aa:	dd0b      	ble.n	80066c4 <__gethex+0x458>
 80066ac:	2101      	movs	r1, #1
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff fd74 	bl	800619c <rshift>
 80066b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066b8:	3501      	adds	r5, #1
 80066ba:	42ab      	cmp	r3, r5
 80066bc:	f6ff aed5 	blt.w	800646a <__gethex+0x1fe>
 80066c0:	2701      	movs	r7, #1
 80066c2:	e7c2      	b.n	800664a <__gethex+0x3de>
 80066c4:	f016 061f 	ands.w	r6, r6, #31
 80066c8:	d0fa      	beq.n	80066c0 <__gethex+0x454>
 80066ca:	449a      	add	sl, r3
 80066cc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80066d0:	f000 f9ec 	bl	8006aac <__hi0bits>
 80066d4:	f1c6 0620 	rsb	r6, r6, #32
 80066d8:	42b0      	cmp	r0, r6
 80066da:	dbe7      	blt.n	80066ac <__gethex+0x440>
 80066dc:	e7f0      	b.n	80066c0 <__gethex+0x454>
 80066de:	bf00      	nop
 80066e0:	080084e4 	.word	0x080084e4

080066e4 <L_shift>:
 80066e4:	f1c2 0208 	rsb	r2, r2, #8
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	f1c2 0620 	rsb	r6, r2, #32
 80066f0:	6843      	ldr	r3, [r0, #4]
 80066f2:	6804      	ldr	r4, [r0, #0]
 80066f4:	fa03 f506 	lsl.w	r5, r3, r6
 80066f8:	432c      	orrs	r4, r5
 80066fa:	40d3      	lsrs	r3, r2
 80066fc:	6004      	str	r4, [r0, #0]
 80066fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006702:	4288      	cmp	r0, r1
 8006704:	d3f4      	bcc.n	80066f0 <L_shift+0xc>
 8006706:	bd70      	pop	{r4, r5, r6, pc}

08006708 <__match>:
 8006708:	b530      	push	{r4, r5, lr}
 800670a:	6803      	ldr	r3, [r0, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006712:	b914      	cbnz	r4, 800671a <__match+0x12>
 8006714:	6003      	str	r3, [r0, #0]
 8006716:	2001      	movs	r0, #1
 8006718:	bd30      	pop	{r4, r5, pc}
 800671a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800671e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006722:	2d19      	cmp	r5, #25
 8006724:	bf98      	it	ls
 8006726:	3220      	addls	r2, #32
 8006728:	42a2      	cmp	r2, r4
 800672a:	d0f0      	beq.n	800670e <__match+0x6>
 800672c:	2000      	movs	r0, #0
 800672e:	e7f3      	b.n	8006718 <__match+0x10>

08006730 <__hexnan>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	2500      	movs	r5, #0
 8006736:	680b      	ldr	r3, [r1, #0]
 8006738:	4682      	mov	sl, r0
 800673a:	115e      	asrs	r6, r3, #5
 800673c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006740:	f013 031f 	ands.w	r3, r3, #31
 8006744:	bf18      	it	ne
 8006746:	3604      	addne	r6, #4
 8006748:	1f37      	subs	r7, r6, #4
 800674a:	4690      	mov	r8, r2
 800674c:	46b9      	mov	r9, r7
 800674e:	463c      	mov	r4, r7
 8006750:	46ab      	mov	fp, r5
 8006752:	b087      	sub	sp, #28
 8006754:	6801      	ldr	r1, [r0, #0]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	f846 5c04 	str.w	r5, [r6, #-4]
 800675c:	9502      	str	r5, [sp, #8]
 800675e:	784a      	ldrb	r2, [r1, #1]
 8006760:	1c4b      	adds	r3, r1, #1
 8006762:	9303      	str	r3, [sp, #12]
 8006764:	b342      	cbz	r2, 80067b8 <__hexnan+0x88>
 8006766:	4610      	mov	r0, r2
 8006768:	9105      	str	r1, [sp, #20]
 800676a:	9204      	str	r2, [sp, #16]
 800676c:	f7ff fd69 	bl	8006242 <__hexdig_fun>
 8006770:	2800      	cmp	r0, #0
 8006772:	d14f      	bne.n	8006814 <__hexnan+0xe4>
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	9905      	ldr	r1, [sp, #20]
 8006778:	2a20      	cmp	r2, #32
 800677a:	d818      	bhi.n	80067ae <__hexnan+0x7e>
 800677c:	9b02      	ldr	r3, [sp, #8]
 800677e:	459b      	cmp	fp, r3
 8006780:	dd13      	ble.n	80067aa <__hexnan+0x7a>
 8006782:	454c      	cmp	r4, r9
 8006784:	d206      	bcs.n	8006794 <__hexnan+0x64>
 8006786:	2d07      	cmp	r5, #7
 8006788:	dc04      	bgt.n	8006794 <__hexnan+0x64>
 800678a:	462a      	mov	r2, r5
 800678c:	4649      	mov	r1, r9
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ffa8 	bl	80066e4 <L_shift>
 8006794:	4544      	cmp	r4, r8
 8006796:	d950      	bls.n	800683a <__hexnan+0x10a>
 8006798:	2300      	movs	r3, #0
 800679a:	f1a4 0904 	sub.w	r9, r4, #4
 800679e:	f844 3c04 	str.w	r3, [r4, #-4]
 80067a2:	461d      	mov	r5, r3
 80067a4:	464c      	mov	r4, r9
 80067a6:	f8cd b008 	str.w	fp, [sp, #8]
 80067aa:	9903      	ldr	r1, [sp, #12]
 80067ac:	e7d7      	b.n	800675e <__hexnan+0x2e>
 80067ae:	2a29      	cmp	r2, #41	; 0x29
 80067b0:	d156      	bne.n	8006860 <__hexnan+0x130>
 80067b2:	3102      	adds	r1, #2
 80067b4:	f8ca 1000 	str.w	r1, [sl]
 80067b8:	f1bb 0f00 	cmp.w	fp, #0
 80067bc:	d050      	beq.n	8006860 <__hexnan+0x130>
 80067be:	454c      	cmp	r4, r9
 80067c0:	d206      	bcs.n	80067d0 <__hexnan+0xa0>
 80067c2:	2d07      	cmp	r5, #7
 80067c4:	dc04      	bgt.n	80067d0 <__hexnan+0xa0>
 80067c6:	462a      	mov	r2, r5
 80067c8:	4649      	mov	r1, r9
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff ff8a 	bl	80066e4 <L_shift>
 80067d0:	4544      	cmp	r4, r8
 80067d2:	d934      	bls.n	800683e <__hexnan+0x10e>
 80067d4:	4623      	mov	r3, r4
 80067d6:	f1a8 0204 	sub.w	r2, r8, #4
 80067da:	f853 1b04 	ldr.w	r1, [r3], #4
 80067de:	429f      	cmp	r7, r3
 80067e0:	f842 1f04 	str.w	r1, [r2, #4]!
 80067e4:	d2f9      	bcs.n	80067da <__hexnan+0xaa>
 80067e6:	1b3b      	subs	r3, r7, r4
 80067e8:	f023 0303 	bic.w	r3, r3, #3
 80067ec:	3304      	adds	r3, #4
 80067ee:	3401      	adds	r4, #1
 80067f0:	3e03      	subs	r6, #3
 80067f2:	42b4      	cmp	r4, r6
 80067f4:	bf88      	it	hi
 80067f6:	2304      	movhi	r3, #4
 80067f8:	2200      	movs	r2, #0
 80067fa:	4443      	add	r3, r8
 80067fc:	f843 2b04 	str.w	r2, [r3], #4
 8006800:	429f      	cmp	r7, r3
 8006802:	d2fb      	bcs.n	80067fc <__hexnan+0xcc>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	b91b      	cbnz	r3, 8006810 <__hexnan+0xe0>
 8006808:	4547      	cmp	r7, r8
 800680a:	d127      	bne.n	800685c <__hexnan+0x12c>
 800680c:	2301      	movs	r3, #1
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	2005      	movs	r0, #5
 8006812:	e026      	b.n	8006862 <__hexnan+0x132>
 8006814:	3501      	adds	r5, #1
 8006816:	2d08      	cmp	r5, #8
 8006818:	f10b 0b01 	add.w	fp, fp, #1
 800681c:	dd06      	ble.n	800682c <__hexnan+0xfc>
 800681e:	4544      	cmp	r4, r8
 8006820:	d9c3      	bls.n	80067aa <__hexnan+0x7a>
 8006822:	2300      	movs	r3, #0
 8006824:	2501      	movs	r5, #1
 8006826:	f844 3c04 	str.w	r3, [r4, #-4]
 800682a:	3c04      	subs	r4, #4
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	f000 000f 	and.w	r0, r0, #15
 8006832:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006836:	6022      	str	r2, [r4, #0]
 8006838:	e7b7      	b.n	80067aa <__hexnan+0x7a>
 800683a:	2508      	movs	r5, #8
 800683c:	e7b5      	b.n	80067aa <__hexnan+0x7a>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0df      	beq.n	8006804 <__hexnan+0xd4>
 8006844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006848:	f1c3 0320 	rsb	r3, r3, #32
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006854:	401a      	ands	r2, r3
 8006856:	f846 2c04 	str.w	r2, [r6, #-4]
 800685a:	e7d3      	b.n	8006804 <__hexnan+0xd4>
 800685c:	3f04      	subs	r7, #4
 800685e:	e7d1      	b.n	8006804 <__hexnan+0xd4>
 8006860:	2004      	movs	r0, #4
 8006862:	b007      	add	sp, #28
 8006864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006868 <_localeconv_r>:
 8006868:	4800      	ldr	r0, [pc, #0]	; (800686c <_localeconv_r+0x4>)
 800686a:	4770      	bx	lr
 800686c:	20000178 	.word	0x20000178

08006870 <malloc>:
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <malloc+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f000 bd35 	b.w	80072e4 <_malloc_r>
 800687a:	bf00      	nop
 800687c:	20000020 	.word	0x20000020

08006880 <__ascii_mbtowc>:
 8006880:	b082      	sub	sp, #8
 8006882:	b901      	cbnz	r1, 8006886 <__ascii_mbtowc+0x6>
 8006884:	a901      	add	r1, sp, #4
 8006886:	b142      	cbz	r2, 800689a <__ascii_mbtowc+0x1a>
 8006888:	b14b      	cbz	r3, 800689e <__ascii_mbtowc+0x1e>
 800688a:	7813      	ldrb	r3, [r2, #0]
 800688c:	600b      	str	r3, [r1, #0]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	1e10      	subs	r0, r2, #0
 8006892:	bf18      	it	ne
 8006894:	2001      	movne	r0, #1
 8006896:	b002      	add	sp, #8
 8006898:	4770      	bx	lr
 800689a:	4610      	mov	r0, r2
 800689c:	e7fb      	b.n	8006896 <__ascii_mbtowc+0x16>
 800689e:	f06f 0001 	mvn.w	r0, #1
 80068a2:	e7f8      	b.n	8006896 <__ascii_mbtowc+0x16>

080068a4 <memchr>:
 80068a4:	4603      	mov	r3, r0
 80068a6:	b510      	push	{r4, lr}
 80068a8:	b2c9      	uxtb	r1, r1
 80068aa:	4402      	add	r2, r0
 80068ac:	4293      	cmp	r3, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	d101      	bne.n	80068b6 <memchr+0x12>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e003      	b.n	80068be <memchr+0x1a>
 80068b6:	7804      	ldrb	r4, [r0, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	428c      	cmp	r4, r1
 80068bc:	d1f6      	bne.n	80068ac <memchr+0x8>
 80068be:	bd10      	pop	{r4, pc}

080068c0 <_Balloc>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068c4:	4604      	mov	r4, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	b976      	cbnz	r6, 80068e8 <_Balloc+0x28>
 80068ca:	2010      	movs	r0, #16
 80068cc:	f7ff ffd0 	bl	8006870 <malloc>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6260      	str	r0, [r4, #36]	; 0x24
 80068d4:	b920      	cbnz	r0, 80068e0 <_Balloc+0x20>
 80068d6:	2166      	movs	r1, #102	; 0x66
 80068d8:	4b17      	ldr	r3, [pc, #92]	; (8006938 <_Balloc+0x78>)
 80068da:	4818      	ldr	r0, [pc, #96]	; (800693c <_Balloc+0x7c>)
 80068dc:	f000 feee 	bl	80076bc <__assert_func>
 80068e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e4:	6006      	str	r6, [r0, #0]
 80068e6:	60c6      	str	r6, [r0, #12]
 80068e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068ea:	68f3      	ldr	r3, [r6, #12]
 80068ec:	b183      	cbz	r3, 8006910 <_Balloc+0x50>
 80068ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068f6:	b9b8      	cbnz	r0, 8006928 <_Balloc+0x68>
 80068f8:	2101      	movs	r1, #1
 80068fa:	fa01 f605 	lsl.w	r6, r1, r5
 80068fe:	1d72      	adds	r2, r6, #5
 8006900:	4620      	mov	r0, r4
 8006902:	0092      	lsls	r2, r2, #2
 8006904:	f000 fc94 	bl	8007230 <_calloc_r>
 8006908:	b160      	cbz	r0, 8006924 <_Balloc+0x64>
 800690a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800690e:	e00e      	b.n	800692e <_Balloc+0x6e>
 8006910:	2221      	movs	r2, #33	; 0x21
 8006912:	2104      	movs	r1, #4
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fc8b 	bl	8007230 <_calloc_r>
 800691a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691c:	60f0      	str	r0, [r6, #12]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e4      	bne.n	80068ee <_Balloc+0x2e>
 8006924:	2000      	movs	r0, #0
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	6802      	ldr	r2, [r0, #0]
 800692a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800692e:	2300      	movs	r3, #0
 8006930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006934:	e7f7      	b.n	8006926 <_Balloc+0x66>
 8006936:	bf00      	nop
 8006938:	0800846e 	.word	0x0800846e
 800693c:	08008574 	.word	0x08008574

08006940 <_Bfree>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006944:	4605      	mov	r5, r0
 8006946:	460c      	mov	r4, r1
 8006948:	b976      	cbnz	r6, 8006968 <_Bfree+0x28>
 800694a:	2010      	movs	r0, #16
 800694c:	f7ff ff90 	bl	8006870 <malloc>
 8006950:	4602      	mov	r2, r0
 8006952:	6268      	str	r0, [r5, #36]	; 0x24
 8006954:	b920      	cbnz	r0, 8006960 <_Bfree+0x20>
 8006956:	218a      	movs	r1, #138	; 0x8a
 8006958:	4b08      	ldr	r3, [pc, #32]	; (800697c <_Bfree+0x3c>)
 800695a:	4809      	ldr	r0, [pc, #36]	; (8006980 <_Bfree+0x40>)
 800695c:	f000 feae 	bl	80076bc <__assert_func>
 8006960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006964:	6006      	str	r6, [r0, #0]
 8006966:	60c6      	str	r6, [r0, #12]
 8006968:	b13c      	cbz	r4, 800697a <_Bfree+0x3a>
 800696a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006974:	6021      	str	r1, [r4, #0]
 8006976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	0800846e 	.word	0x0800846e
 8006980:	08008574 	.word	0x08008574

08006984 <__multadd>:
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	4698      	mov	r8, r3
 800698a:	460c      	mov	r4, r1
 800698c:	2300      	movs	r3, #0
 800698e:	690e      	ldr	r6, [r1, #16]
 8006990:	4607      	mov	r7, r0
 8006992:	f101 0014 	add.w	r0, r1, #20
 8006996:	6805      	ldr	r5, [r0, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	b2a9      	uxth	r1, r5
 800699c:	fb02 8101 	mla	r1, r2, r1, r8
 80069a0:	0c2d      	lsrs	r5, r5, #16
 80069a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069a6:	fb02 c505 	mla	r5, r2, r5, ip
 80069aa:	b289      	uxth	r1, r1
 80069ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069b0:	429e      	cmp	r6, r3
 80069b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069b6:	f840 1b04 	str.w	r1, [r0], #4
 80069ba:	dcec      	bgt.n	8006996 <__multadd+0x12>
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	d022      	beq.n	8006a08 <__multadd+0x84>
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	42b3      	cmp	r3, r6
 80069c6:	dc19      	bgt.n	80069fc <__multadd+0x78>
 80069c8:	6861      	ldr	r1, [r4, #4]
 80069ca:	4638      	mov	r0, r7
 80069cc:	3101      	adds	r1, #1
 80069ce:	f7ff ff77 	bl	80068c0 <_Balloc>
 80069d2:	4605      	mov	r5, r0
 80069d4:	b928      	cbnz	r0, 80069e2 <__multadd+0x5e>
 80069d6:	4602      	mov	r2, r0
 80069d8:	21b5      	movs	r1, #181	; 0xb5
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <__multadd+0x8c>)
 80069dc:	480d      	ldr	r0, [pc, #52]	; (8006a14 <__multadd+0x90>)
 80069de:	f000 fe6d 	bl	80076bc <__assert_func>
 80069e2:	6922      	ldr	r2, [r4, #16]
 80069e4:	f104 010c 	add.w	r1, r4, #12
 80069e8:	3202      	adds	r2, #2
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	300c      	adds	r0, #12
 80069ee:	f7fd f809 	bl	8003a04 <memcpy>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ffa3 	bl	8006940 <_Bfree>
 80069fa:	462c      	mov	r4, r5
 80069fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a00:	3601      	adds	r6, #1
 8006a02:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a06:	6126      	str	r6, [r4, #16]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0e:	bf00      	nop
 8006a10:	080084e4 	.word	0x080084e4
 8006a14:	08008574 	.word	0x08008574

08006a18 <__s2b>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	4615      	mov	r5, r2
 8006a1e:	2209      	movs	r2, #9
 8006a20:	461f      	mov	r7, r3
 8006a22:	3308      	adds	r3, #8
 8006a24:	460c      	mov	r4, r1
 8006a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	2100      	movs	r1, #0
 8006a30:	429a      	cmp	r2, r3
 8006a32:	db09      	blt.n	8006a48 <__s2b+0x30>
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7ff ff43 	bl	80068c0 <_Balloc>
 8006a3a:	b940      	cbnz	r0, 8006a4e <__s2b+0x36>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	21ce      	movs	r1, #206	; 0xce
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <__s2b+0x8c>)
 8006a42:	4819      	ldr	r0, [pc, #100]	; (8006aa8 <__s2b+0x90>)
 8006a44:	f000 fe3a 	bl	80076bc <__assert_func>
 8006a48:	0052      	lsls	r2, r2, #1
 8006a4a:	3101      	adds	r1, #1
 8006a4c:	e7f0      	b.n	8006a30 <__s2b+0x18>
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	2d09      	cmp	r5, #9
 8006a52:	6143      	str	r3, [r0, #20]
 8006a54:	f04f 0301 	mov.w	r3, #1
 8006a58:	6103      	str	r3, [r0, #16]
 8006a5a:	dd16      	ble.n	8006a8a <__s2b+0x72>
 8006a5c:	f104 0909 	add.w	r9, r4, #9
 8006a60:	46c8      	mov	r8, r9
 8006a62:	442c      	add	r4, r5
 8006a64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a68:	4601      	mov	r1, r0
 8006a6a:	220a      	movs	r2, #10
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	3b30      	subs	r3, #48	; 0x30
 8006a70:	f7ff ff88 	bl	8006984 <__multadd>
 8006a74:	45a0      	cmp	r8, r4
 8006a76:	d1f5      	bne.n	8006a64 <__s2b+0x4c>
 8006a78:	f1a5 0408 	sub.w	r4, r5, #8
 8006a7c:	444c      	add	r4, r9
 8006a7e:	1b2d      	subs	r5, r5, r4
 8006a80:	1963      	adds	r3, r4, r5
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	db04      	blt.n	8006a90 <__s2b+0x78>
 8006a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8a:	2509      	movs	r5, #9
 8006a8c:	340a      	adds	r4, #10
 8006a8e:	e7f6      	b.n	8006a7e <__s2b+0x66>
 8006a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a94:	4601      	mov	r1, r0
 8006a96:	220a      	movs	r2, #10
 8006a98:	4630      	mov	r0, r6
 8006a9a:	3b30      	subs	r3, #48	; 0x30
 8006a9c:	f7ff ff72 	bl	8006984 <__multadd>
 8006aa0:	e7ee      	b.n	8006a80 <__s2b+0x68>
 8006aa2:	bf00      	nop
 8006aa4:	080084e4 	.word	0x080084e4
 8006aa8:	08008574 	.word	0x08008574

08006aac <__hi0bits>:
 8006aac:	0c02      	lsrs	r2, r0, #16
 8006aae:	0412      	lsls	r2, r2, #16
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b9ca      	cbnz	r2, 8006ae8 <__hi0bits+0x3c>
 8006ab4:	0403      	lsls	r3, r0, #16
 8006ab6:	2010      	movs	r0, #16
 8006ab8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006abc:	bf04      	itt	eq
 8006abe:	021b      	lsleq	r3, r3, #8
 8006ac0:	3008      	addeq	r0, #8
 8006ac2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ac6:	bf04      	itt	eq
 8006ac8:	011b      	lsleq	r3, r3, #4
 8006aca:	3004      	addeq	r0, #4
 8006acc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ad0:	bf04      	itt	eq
 8006ad2:	009b      	lsleq	r3, r3, #2
 8006ad4:	3002      	addeq	r0, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	db05      	blt.n	8006ae6 <__hi0bits+0x3a>
 8006ada:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ade:	f100 0001 	add.w	r0, r0, #1
 8006ae2:	bf08      	it	eq
 8006ae4:	2020      	moveq	r0, #32
 8006ae6:	4770      	bx	lr
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7e5      	b.n	8006ab8 <__hi0bits+0xc>

08006aec <__lo0bits>:
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	4602      	mov	r2, r0
 8006af0:	f013 0007 	ands.w	r0, r3, #7
 8006af4:	d00b      	beq.n	8006b0e <__lo0bits+0x22>
 8006af6:	07d9      	lsls	r1, r3, #31
 8006af8:	d422      	bmi.n	8006b40 <__lo0bits+0x54>
 8006afa:	0798      	lsls	r0, r3, #30
 8006afc:	bf49      	itett	mi
 8006afe:	085b      	lsrmi	r3, r3, #1
 8006b00:	089b      	lsrpl	r3, r3, #2
 8006b02:	2001      	movmi	r0, #1
 8006b04:	6013      	strmi	r3, [r2, #0]
 8006b06:	bf5c      	itt	pl
 8006b08:	2002      	movpl	r0, #2
 8006b0a:	6013      	strpl	r3, [r2, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	b299      	uxth	r1, r3
 8006b10:	b909      	cbnz	r1, 8006b16 <__lo0bits+0x2a>
 8006b12:	2010      	movs	r0, #16
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b1a:	bf04      	itt	eq
 8006b1c:	0a1b      	lsreq	r3, r3, #8
 8006b1e:	3008      	addeq	r0, #8
 8006b20:	0719      	lsls	r1, r3, #28
 8006b22:	bf04      	itt	eq
 8006b24:	091b      	lsreq	r3, r3, #4
 8006b26:	3004      	addeq	r0, #4
 8006b28:	0799      	lsls	r1, r3, #30
 8006b2a:	bf04      	itt	eq
 8006b2c:	089b      	lsreq	r3, r3, #2
 8006b2e:	3002      	addeq	r0, #2
 8006b30:	07d9      	lsls	r1, r3, #31
 8006b32:	d403      	bmi.n	8006b3c <__lo0bits+0x50>
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	f100 0001 	add.w	r0, r0, #1
 8006b3a:	d003      	beq.n	8006b44 <__lo0bits+0x58>
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	4770      	bx	lr
 8006b40:	2000      	movs	r0, #0
 8006b42:	4770      	bx	lr
 8006b44:	2020      	movs	r0, #32
 8006b46:	4770      	bx	lr

08006b48 <__i2b>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	f7ff feb7 	bl	80068c0 <_Balloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <__i2b+0x1a>
 8006b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b5a:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <__i2b+0x24>)
 8006b5c:	4804      	ldr	r0, [pc, #16]	; (8006b70 <__i2b+0x28>)
 8006b5e:	f000 fdad 	bl	80076bc <__assert_func>
 8006b62:	2301      	movs	r3, #1
 8006b64:	6144      	str	r4, [r0, #20]
 8006b66:	6103      	str	r3, [r0, #16]
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	bf00      	nop
 8006b6c:	080084e4 	.word	0x080084e4
 8006b70:	08008574 	.word	0x08008574

08006b74 <__multiply>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4614      	mov	r4, r2
 8006b7a:	690a      	ldr	r2, [r1, #16]
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	460d      	mov	r5, r1
 8006b80:	429a      	cmp	r2, r3
 8006b82:	bfbe      	ittt	lt
 8006b84:	460b      	movlt	r3, r1
 8006b86:	4625      	movlt	r5, r4
 8006b88:	461c      	movlt	r4, r3
 8006b8a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b92:	68ab      	ldr	r3, [r5, #8]
 8006b94:	6869      	ldr	r1, [r5, #4]
 8006b96:	eb0a 0709 	add.w	r7, sl, r9
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	bfb8      	it	lt
 8006ba0:	3101      	addlt	r1, #1
 8006ba2:	f7ff fe8d 	bl	80068c0 <_Balloc>
 8006ba6:	b930      	cbnz	r0, 8006bb6 <__multiply+0x42>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f240 115d 	movw	r1, #349	; 0x15d
 8006bae:	4b41      	ldr	r3, [pc, #260]	; (8006cb4 <__multiply+0x140>)
 8006bb0:	4841      	ldr	r0, [pc, #260]	; (8006cb8 <__multiply+0x144>)
 8006bb2:	f000 fd83 	bl	80076bc <__assert_func>
 8006bb6:	f100 0614 	add.w	r6, r0, #20
 8006bba:	4633      	mov	r3, r6
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006bc2:	4543      	cmp	r3, r8
 8006bc4:	d31e      	bcc.n	8006c04 <__multiply+0x90>
 8006bc6:	f105 0c14 	add.w	ip, r5, #20
 8006bca:	f104 0314 	add.w	r3, r4, #20
 8006bce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006bd2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	ebac 0205 	sub.w	r2, ip, r5
 8006bdc:	3a15      	subs	r2, #21
 8006bde:	f022 0203 	bic.w	r2, r2, #3
 8006be2:	3204      	adds	r2, #4
 8006be4:	f105 0115 	add.w	r1, r5, #21
 8006be8:	458c      	cmp	ip, r1
 8006bea:	bf38      	it	cc
 8006bec:	2204      	movcc	r2, #4
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	9a02      	ldr	r2, [sp, #8]
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d808      	bhi.n	8006c0a <__multiply+0x96>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	dc55      	bgt.n	8006ca8 <__multiply+0x134>
 8006bfc:	6107      	str	r7, [r0, #16]
 8006bfe:	b005      	add	sp, #20
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	f843 2b04 	str.w	r2, [r3], #4
 8006c08:	e7db      	b.n	8006bc2 <__multiply+0x4e>
 8006c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c0e:	f1ba 0f00 	cmp.w	sl, #0
 8006c12:	d020      	beq.n	8006c56 <__multiply+0xe2>
 8006c14:	46b1      	mov	r9, r6
 8006c16:	2200      	movs	r2, #0
 8006c18:	f105 0e14 	add.w	lr, r5, #20
 8006c1c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c20:	f8d9 b000 	ldr.w	fp, [r9]
 8006c24:	b2a1      	uxth	r1, r4
 8006c26:	fa1f fb8b 	uxth.w	fp, fp
 8006c2a:	fb0a b101 	mla	r1, sl, r1, fp
 8006c2e:	4411      	add	r1, r2
 8006c30:	f8d9 2000 	ldr.w	r2, [r9]
 8006c34:	0c24      	lsrs	r4, r4, #16
 8006c36:	0c12      	lsrs	r2, r2, #16
 8006c38:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c3c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c40:	b289      	uxth	r1, r1
 8006c42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c46:	45f4      	cmp	ip, lr
 8006c48:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c4c:	f849 1b04 	str.w	r1, [r9], #4
 8006c50:	d8e4      	bhi.n	8006c1c <__multiply+0xa8>
 8006c52:	9901      	ldr	r1, [sp, #4]
 8006c54:	5072      	str	r2, [r6, r1]
 8006c56:	9a03      	ldr	r2, [sp, #12]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c5e:	f1b9 0f00 	cmp.w	r9, #0
 8006c62:	d01f      	beq.n	8006ca4 <__multiply+0x130>
 8006c64:	46b6      	mov	lr, r6
 8006c66:	f04f 0a00 	mov.w	sl, #0
 8006c6a:	6834      	ldr	r4, [r6, #0]
 8006c6c:	f105 0114 	add.w	r1, r5, #20
 8006c70:	880a      	ldrh	r2, [r1, #0]
 8006c72:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c76:	b2a4      	uxth	r4, r4
 8006c78:	fb09 b202 	mla	r2, r9, r2, fp
 8006c7c:	4492      	add	sl, r2
 8006c7e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c82:	f84e 4b04 	str.w	r4, [lr], #4
 8006c86:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c8a:	f8be 2000 	ldrh.w	r2, [lr]
 8006c8e:	0c24      	lsrs	r4, r4, #16
 8006c90:	fb09 2404 	mla	r4, r9, r4, r2
 8006c94:	458c      	cmp	ip, r1
 8006c96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c9a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c9e:	d8e7      	bhi.n	8006c70 <__multiply+0xfc>
 8006ca0:	9a01      	ldr	r2, [sp, #4]
 8006ca2:	50b4      	str	r4, [r6, r2]
 8006ca4:	3604      	adds	r6, #4
 8006ca6:	e7a3      	b.n	8006bf0 <__multiply+0x7c>
 8006ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1a5      	bne.n	8006bfc <__multiply+0x88>
 8006cb0:	3f01      	subs	r7, #1
 8006cb2:	e7a1      	b.n	8006bf8 <__multiply+0x84>
 8006cb4:	080084e4 	.word	0x080084e4
 8006cb8:	08008574 	.word	0x08008574

08006cbc <__pow5mult>:
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	4615      	mov	r5, r2
 8006cc2:	f012 0203 	ands.w	r2, r2, #3
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	460f      	mov	r7, r1
 8006cca:	d007      	beq.n	8006cdc <__pow5mult+0x20>
 8006ccc:	4c25      	ldr	r4, [pc, #148]	; (8006d64 <__pow5mult+0xa8>)
 8006cce:	3a01      	subs	r2, #1
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cd6:	f7ff fe55 	bl	8006984 <__multadd>
 8006cda:	4607      	mov	r7, r0
 8006cdc:	10ad      	asrs	r5, r5, #2
 8006cde:	d03d      	beq.n	8006d5c <__pow5mult+0xa0>
 8006ce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ce2:	b97c      	cbnz	r4, 8006d04 <__pow5mult+0x48>
 8006ce4:	2010      	movs	r0, #16
 8006ce6:	f7ff fdc3 	bl	8006870 <malloc>
 8006cea:	4602      	mov	r2, r0
 8006cec:	6270      	str	r0, [r6, #36]	; 0x24
 8006cee:	b928      	cbnz	r0, 8006cfc <__pow5mult+0x40>
 8006cf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cf4:	4b1c      	ldr	r3, [pc, #112]	; (8006d68 <__pow5mult+0xac>)
 8006cf6:	481d      	ldr	r0, [pc, #116]	; (8006d6c <__pow5mult+0xb0>)
 8006cf8:	f000 fce0 	bl	80076bc <__assert_func>
 8006cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d00:	6004      	str	r4, [r0, #0]
 8006d02:	60c4      	str	r4, [r0, #12]
 8006d04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d0c:	b94c      	cbnz	r4, 8006d22 <__pow5mult+0x66>
 8006d0e:	f240 2171 	movw	r1, #625	; 0x271
 8006d12:	4630      	mov	r0, r6
 8006d14:	f7ff ff18 	bl	8006b48 <__i2b>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d20:	6003      	str	r3, [r0, #0]
 8006d22:	f04f 0900 	mov.w	r9, #0
 8006d26:	07eb      	lsls	r3, r5, #31
 8006d28:	d50a      	bpl.n	8006d40 <__pow5mult+0x84>
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff ff20 	bl	8006b74 <__multiply>
 8006d34:	4680      	mov	r8, r0
 8006d36:	4639      	mov	r1, r7
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f7ff fe01 	bl	8006940 <_Bfree>
 8006d3e:	4647      	mov	r7, r8
 8006d40:	106d      	asrs	r5, r5, #1
 8006d42:	d00b      	beq.n	8006d5c <__pow5mult+0xa0>
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	b938      	cbnz	r0, 8006d58 <__pow5mult+0x9c>
 8006d48:	4622      	mov	r2, r4
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f7ff ff11 	bl	8006b74 <__multiply>
 8006d52:	6020      	str	r0, [r4, #0]
 8006d54:	f8c0 9000 	str.w	r9, [r0]
 8006d58:	4604      	mov	r4, r0
 8006d5a:	e7e4      	b.n	8006d26 <__pow5mult+0x6a>
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d62:	bf00      	nop
 8006d64:	080086c8 	.word	0x080086c8
 8006d68:	0800846e 	.word	0x0800846e
 8006d6c:	08008574 	.word	0x08008574

08006d70 <__lshift>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	460c      	mov	r4, r1
 8006d76:	4607      	mov	r7, r0
 8006d78:	4691      	mov	r9, r2
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6849      	ldr	r1, [r1, #4]
 8006d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d88:	f108 0601 	add.w	r6, r8, #1
 8006d8c:	42b3      	cmp	r3, r6
 8006d8e:	db0b      	blt.n	8006da8 <__lshift+0x38>
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff fd95 	bl	80068c0 <_Balloc>
 8006d96:	4605      	mov	r5, r0
 8006d98:	b948      	cbnz	r0, 8006dae <__lshift+0x3e>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <__lshift+0xd0>)
 8006da2:	4828      	ldr	r0, [pc, #160]	; (8006e44 <__lshift+0xd4>)
 8006da4:	f000 fc8a 	bl	80076bc <__assert_func>
 8006da8:	3101      	adds	r1, #1
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	e7ee      	b.n	8006d8c <__lshift+0x1c>
 8006dae:	2300      	movs	r3, #0
 8006db0:	f100 0114 	add.w	r1, r0, #20
 8006db4:	f100 0210 	add.w	r2, r0, #16
 8006db8:	4618      	mov	r0, r3
 8006dba:	4553      	cmp	r3, sl
 8006dbc:	db33      	blt.n	8006e26 <__lshift+0xb6>
 8006dbe:	6920      	ldr	r0, [r4, #16]
 8006dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dc4:	f104 0314 	add.w	r3, r4, #20
 8006dc8:	f019 091f 	ands.w	r9, r9, #31
 8006dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dd4:	d02b      	beq.n	8006e2e <__lshift+0xbe>
 8006dd6:	468a      	mov	sl, r1
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f1c9 0e20 	rsb	lr, r9, #32
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	fa00 f009 	lsl.w	r0, r0, r9
 8006de4:	4302      	orrs	r2, r0
 8006de6:	f84a 2b04 	str.w	r2, [sl], #4
 8006dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dee:	459c      	cmp	ip, r3
 8006df0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006df4:	d8f3      	bhi.n	8006dde <__lshift+0x6e>
 8006df6:	ebac 0304 	sub.w	r3, ip, r4
 8006dfa:	3b15      	subs	r3, #21
 8006dfc:	f023 0303 	bic.w	r3, r3, #3
 8006e00:	3304      	adds	r3, #4
 8006e02:	f104 0015 	add.w	r0, r4, #21
 8006e06:	4584      	cmp	ip, r0
 8006e08:	bf38      	it	cc
 8006e0a:	2304      	movcc	r3, #4
 8006e0c:	50ca      	str	r2, [r1, r3]
 8006e0e:	b10a      	cbz	r2, 8006e14 <__lshift+0xa4>
 8006e10:	f108 0602 	add.w	r6, r8, #2
 8006e14:	3e01      	subs	r6, #1
 8006e16:	4638      	mov	r0, r7
 8006e18:	4621      	mov	r1, r4
 8006e1a:	612e      	str	r6, [r5, #16]
 8006e1c:	f7ff fd90 	bl	8006940 <_Bfree>
 8006e20:	4628      	mov	r0, r5
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	e7c5      	b.n	8006dba <__lshift+0x4a>
 8006e2e:	3904      	subs	r1, #4
 8006e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e34:	459c      	cmp	ip, r3
 8006e36:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e3a:	d8f9      	bhi.n	8006e30 <__lshift+0xc0>
 8006e3c:	e7ea      	b.n	8006e14 <__lshift+0xa4>
 8006e3e:	bf00      	nop
 8006e40:	080084e4 	.word	0x080084e4
 8006e44:	08008574 	.word	0x08008574

08006e48 <__mcmp>:
 8006e48:	4603      	mov	r3, r0
 8006e4a:	690a      	ldr	r2, [r1, #16]
 8006e4c:	6900      	ldr	r0, [r0, #16]
 8006e4e:	b530      	push	{r4, r5, lr}
 8006e50:	1a80      	subs	r0, r0, r2
 8006e52:	d10d      	bne.n	8006e70 <__mcmp+0x28>
 8006e54:	3314      	adds	r3, #20
 8006e56:	3114      	adds	r1, #20
 8006e58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e68:	4295      	cmp	r5, r2
 8006e6a:	d002      	beq.n	8006e72 <__mcmp+0x2a>
 8006e6c:	d304      	bcc.n	8006e78 <__mcmp+0x30>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	bd30      	pop	{r4, r5, pc}
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	d3f4      	bcc.n	8006e60 <__mcmp+0x18>
 8006e76:	e7fb      	b.n	8006e70 <__mcmp+0x28>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e7c:	e7f8      	b.n	8006e70 <__mcmp+0x28>
	...

08006e80 <__mdiff>:
 8006e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	460c      	mov	r4, r1
 8006e86:	4606      	mov	r6, r0
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4692      	mov	sl, r2
 8006e8e:	f7ff ffdb 	bl	8006e48 <__mcmp>
 8006e92:	1e05      	subs	r5, r0, #0
 8006e94:	d111      	bne.n	8006eba <__mdiff+0x3a>
 8006e96:	4629      	mov	r1, r5
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f7ff fd11 	bl	80068c0 <_Balloc>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	b928      	cbnz	r0, 8006eae <__mdiff+0x2e>
 8006ea2:	f240 2132 	movw	r1, #562	; 0x232
 8006ea6:	4b3c      	ldr	r3, [pc, #240]	; (8006f98 <__mdiff+0x118>)
 8006ea8:	483c      	ldr	r0, [pc, #240]	; (8006f9c <__mdiff+0x11c>)
 8006eaa:	f000 fc07 	bl	80076bc <__assert_func>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	bfa4      	itt	ge
 8006ebc:	4653      	movge	r3, sl
 8006ebe:	46a2      	movge	sl, r4
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006ec6:	bfa6      	itte	ge
 8006ec8:	461c      	movge	r4, r3
 8006eca:	2500      	movge	r5, #0
 8006ecc:	2501      	movlt	r5, #1
 8006ece:	f7ff fcf7 	bl	80068c0 <_Balloc>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	b918      	cbnz	r0, 8006ede <__mdiff+0x5e>
 8006ed6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006eda:	4b2f      	ldr	r3, [pc, #188]	; (8006f98 <__mdiff+0x118>)
 8006edc:	e7e4      	b.n	8006ea8 <__mdiff+0x28>
 8006ede:	f100 0814 	add.w	r8, r0, #20
 8006ee2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006ee6:	60c5      	str	r5, [r0, #12]
 8006ee8:	f04f 0c00 	mov.w	ip, #0
 8006eec:	f10a 0514 	add.w	r5, sl, #20
 8006ef0:	f10a 0010 	add.w	r0, sl, #16
 8006ef4:	46c2      	mov	sl, r8
 8006ef6:	6926      	ldr	r6, [r4, #16]
 8006ef8:	f104 0914 	add.w	r9, r4, #20
 8006efc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f04:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006f08:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f0c:	fa1f f18b 	uxth.w	r1, fp
 8006f10:	4461      	add	r1, ip
 8006f12:	fa1f fc83 	uxth.w	ip, r3
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	eba1 010c 	sub.w	r1, r1, ip
 8006f1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f20:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f24:	b289      	uxth	r1, r1
 8006f26:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f2a:	454e      	cmp	r6, r9
 8006f2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f30:	f84a 3b04 	str.w	r3, [sl], #4
 8006f34:	d8e6      	bhi.n	8006f04 <__mdiff+0x84>
 8006f36:	1b33      	subs	r3, r6, r4
 8006f38:	3b15      	subs	r3, #21
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	3415      	adds	r4, #21
 8006f40:	3304      	adds	r3, #4
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	bf38      	it	cc
 8006f46:	2304      	movcc	r3, #4
 8006f48:	441d      	add	r5, r3
 8006f4a:	4443      	add	r3, r8
 8006f4c:	461e      	mov	r6, r3
 8006f4e:	462c      	mov	r4, r5
 8006f50:	4574      	cmp	r4, lr
 8006f52:	d30e      	bcc.n	8006f72 <__mdiff+0xf2>
 8006f54:	f10e 0103 	add.w	r1, lr, #3
 8006f58:	1b49      	subs	r1, r1, r5
 8006f5a:	f021 0103 	bic.w	r1, r1, #3
 8006f5e:	3d03      	subs	r5, #3
 8006f60:	45ae      	cmp	lr, r5
 8006f62:	bf38      	it	cc
 8006f64:	2100      	movcc	r1, #0
 8006f66:	4419      	add	r1, r3
 8006f68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f6c:	b18b      	cbz	r3, 8006f92 <__mdiff+0x112>
 8006f6e:	6117      	str	r7, [r2, #16]
 8006f70:	e7a0      	b.n	8006eb4 <__mdiff+0x34>
 8006f72:	f854 8b04 	ldr.w	r8, [r4], #4
 8006f76:	fa1f f188 	uxth.w	r1, r8
 8006f7a:	4461      	add	r1, ip
 8006f7c:	1408      	asrs	r0, r1, #16
 8006f7e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006f82:	b289      	uxth	r1, r1
 8006f84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f8c:	f846 1b04 	str.w	r1, [r6], #4
 8006f90:	e7de      	b.n	8006f50 <__mdiff+0xd0>
 8006f92:	3f01      	subs	r7, #1
 8006f94:	e7e8      	b.n	8006f68 <__mdiff+0xe8>
 8006f96:	bf00      	nop
 8006f98:	080084e4 	.word	0x080084e4
 8006f9c:	08008574 	.word	0x08008574

08006fa0 <__ulp>:
 8006fa0:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <__ulp+0x48>)
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dd02      	ble.n	8006fb2 <__ulp+0x12>
 8006fac:	2000      	movs	r0, #0
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4770      	bx	lr
 8006fb2:	425b      	negs	r3, r3
 8006fb4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006fb8:	f04f 0000 	mov.w	r0, #0
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006fc4:	da04      	bge.n	8006fd0 <__ulp+0x30>
 8006fc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fca:	fa43 f102 	asr.w	r1, r3, r2
 8006fce:	4770      	bx	lr
 8006fd0:	f1a2 0314 	sub.w	r3, r2, #20
 8006fd4:	2b1e      	cmp	r3, #30
 8006fd6:	bfd6      	itet	le
 8006fd8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006fdc:	2301      	movgt	r3, #1
 8006fde:	fa22 f303 	lsrle.w	r3, r2, r3
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	7ff00000 	.word	0x7ff00000

08006fec <__b2d>:
 8006fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff0:	6907      	ldr	r7, [r0, #16]
 8006ff2:	f100 0914 	add.w	r9, r0, #20
 8006ff6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006ffa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006ffe:	f1a7 0804 	sub.w	r8, r7, #4
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff fd52 	bl	8006aac <__hi0bits>
 8007008:	f1c0 0320 	rsb	r3, r0, #32
 800700c:	280a      	cmp	r0, #10
 800700e:	600b      	str	r3, [r1, #0]
 8007010:	491f      	ldr	r1, [pc, #124]	; (8007090 <__b2d+0xa4>)
 8007012:	dc17      	bgt.n	8007044 <__b2d+0x58>
 8007014:	45c1      	cmp	r9, r8
 8007016:	bf28      	it	cs
 8007018:	2200      	movcs	r2, #0
 800701a:	f1c0 0c0b 	rsb	ip, r0, #11
 800701e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007022:	bf38      	it	cc
 8007024:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007028:	ea43 0501 	orr.w	r5, r3, r1
 800702c:	f100 0315 	add.w	r3, r0, #21
 8007030:	fa06 f303 	lsl.w	r3, r6, r3
 8007034:	fa22 f20c 	lsr.w	r2, r2, ip
 8007038:	ea43 0402 	orr.w	r4, r3, r2
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007044:	45c1      	cmp	r9, r8
 8007046:	bf2e      	itee	cs
 8007048:	2200      	movcs	r2, #0
 800704a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800704e:	f1a7 0808 	subcc.w	r8, r7, #8
 8007052:	f1b0 030b 	subs.w	r3, r0, #11
 8007056:	d016      	beq.n	8007086 <__b2d+0x9a>
 8007058:	f1c3 0720 	rsb	r7, r3, #32
 800705c:	fa22 f107 	lsr.w	r1, r2, r7
 8007060:	45c8      	cmp	r8, r9
 8007062:	fa06 f603 	lsl.w	r6, r6, r3
 8007066:	ea46 0601 	orr.w	r6, r6, r1
 800706a:	bf94      	ite	ls
 800706c:	2100      	movls	r1, #0
 800706e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007072:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007076:	fa02 f003 	lsl.w	r0, r2, r3
 800707a:	40f9      	lsrs	r1, r7
 800707c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007080:	ea40 0401 	orr.w	r4, r0, r1
 8007084:	e7da      	b.n	800703c <__b2d+0x50>
 8007086:	4614      	mov	r4, r2
 8007088:	ea46 0501 	orr.w	r5, r6, r1
 800708c:	e7d6      	b.n	800703c <__b2d+0x50>
 800708e:	bf00      	nop
 8007090:	3ff00000 	.word	0x3ff00000

08007094 <__d2b>:
 8007094:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007098:	2101      	movs	r1, #1
 800709a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800709e:	4690      	mov	r8, r2
 80070a0:	461d      	mov	r5, r3
 80070a2:	f7ff fc0d 	bl	80068c0 <_Balloc>
 80070a6:	4604      	mov	r4, r0
 80070a8:	b930      	cbnz	r0, 80070b8 <__d2b+0x24>
 80070aa:	4602      	mov	r2, r0
 80070ac:	f240 310a 	movw	r1, #778	; 0x30a
 80070b0:	4b24      	ldr	r3, [pc, #144]	; (8007144 <__d2b+0xb0>)
 80070b2:	4825      	ldr	r0, [pc, #148]	; (8007148 <__d2b+0xb4>)
 80070b4:	f000 fb02 	bl	80076bc <__assert_func>
 80070b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80070bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80070c0:	bb2d      	cbnz	r5, 800710e <__d2b+0x7a>
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	f1b8 0300 	subs.w	r3, r8, #0
 80070c8:	d026      	beq.n	8007118 <__d2b+0x84>
 80070ca:	4668      	mov	r0, sp
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	f7ff fd0d 	bl	8006aec <__lo0bits>
 80070d2:	9900      	ldr	r1, [sp, #0]
 80070d4:	b1f0      	cbz	r0, 8007114 <__d2b+0x80>
 80070d6:	9a01      	ldr	r2, [sp, #4]
 80070d8:	f1c0 0320 	rsb	r3, r0, #32
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	430b      	orrs	r3, r1
 80070e2:	40c2      	lsrs	r2, r0
 80070e4:	6163      	str	r3, [r4, #20]
 80070e6:	9201      	str	r2, [sp, #4]
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf14      	ite	ne
 80070ee:	2102      	movne	r1, #2
 80070f0:	2101      	moveq	r1, #1
 80070f2:	61a3      	str	r3, [r4, #24]
 80070f4:	6121      	str	r1, [r4, #16]
 80070f6:	b1c5      	cbz	r5, 800712a <__d2b+0x96>
 80070f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070fc:	4405      	add	r5, r0
 80070fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007102:	603d      	str	r5, [r7, #0]
 8007104:	6030      	str	r0, [r6, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	b002      	add	sp, #8
 800710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007112:	e7d6      	b.n	80070c2 <__d2b+0x2e>
 8007114:	6161      	str	r1, [r4, #20]
 8007116:	e7e7      	b.n	80070e8 <__d2b+0x54>
 8007118:	a801      	add	r0, sp, #4
 800711a:	f7ff fce7 	bl	8006aec <__lo0bits>
 800711e:	2101      	movs	r1, #1
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	6121      	str	r1, [r4, #16]
 8007124:	6163      	str	r3, [r4, #20]
 8007126:	3020      	adds	r0, #32
 8007128:	e7e5      	b.n	80070f6 <__d2b+0x62>
 800712a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800712e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007132:	6038      	str	r0, [r7, #0]
 8007134:	6918      	ldr	r0, [r3, #16]
 8007136:	f7ff fcb9 	bl	8006aac <__hi0bits>
 800713a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800713e:	6031      	str	r1, [r6, #0]
 8007140:	e7e1      	b.n	8007106 <__d2b+0x72>
 8007142:	bf00      	nop
 8007144:	080084e4 	.word	0x080084e4
 8007148:	08008574 	.word	0x08008574

0800714c <__ratio>:
 800714c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4688      	mov	r8, r1
 8007152:	4669      	mov	r1, sp
 8007154:	4681      	mov	r9, r0
 8007156:	f7ff ff49 	bl	8006fec <__b2d>
 800715a:	460f      	mov	r7, r1
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
 8007160:	4640      	mov	r0, r8
 8007162:	a901      	add	r1, sp, #4
 8007164:	f7ff ff42 	bl	8006fec <__b2d>
 8007168:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800716c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007170:	468b      	mov	fp, r1
 8007172:	eba3 0c02 	sub.w	ip, r3, r2
 8007176:	e9dd 3200 	ldrd	r3, r2, [sp]
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007180:	2b00      	cmp	r3, #0
 8007182:	bfd5      	itete	le
 8007184:	460a      	movle	r2, r1
 8007186:	462a      	movgt	r2, r5
 8007188:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800718c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007190:	bfd8      	it	le
 8007192:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007196:	465b      	mov	r3, fp
 8007198:	4602      	mov	r2, r0
 800719a:	4639      	mov	r1, r7
 800719c:	4620      	mov	r0, r4
 800719e:	f7f9 fb79 	bl	8000894 <__aeabi_ddiv>
 80071a2:	b003      	add	sp, #12
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071a8 <__copybits>:
 80071a8:	3901      	subs	r1, #1
 80071aa:	b570      	push	{r4, r5, r6, lr}
 80071ac:	1149      	asrs	r1, r1, #5
 80071ae:	6914      	ldr	r4, [r2, #16]
 80071b0:	3101      	adds	r1, #1
 80071b2:	f102 0314 	add.w	r3, r2, #20
 80071b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071be:	1f05      	subs	r5, r0, #4
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	d30c      	bcc.n	80071de <__copybits+0x36>
 80071c4:	1aa3      	subs	r3, r4, r2
 80071c6:	3b11      	subs	r3, #17
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	3211      	adds	r2, #17
 80071ce:	42a2      	cmp	r2, r4
 80071d0:	bf88      	it	hi
 80071d2:	2300      	movhi	r3, #0
 80071d4:	4418      	add	r0, r3
 80071d6:	2300      	movs	r3, #0
 80071d8:	4288      	cmp	r0, r1
 80071da:	d305      	bcc.n	80071e8 <__copybits+0x40>
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	f853 6b04 	ldr.w	r6, [r3], #4
 80071e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80071e6:	e7eb      	b.n	80071c0 <__copybits+0x18>
 80071e8:	f840 3b04 	str.w	r3, [r0], #4
 80071ec:	e7f4      	b.n	80071d8 <__copybits+0x30>

080071ee <__any_on>:
 80071ee:	f100 0214 	add.w	r2, r0, #20
 80071f2:	6900      	ldr	r0, [r0, #16]
 80071f4:	114b      	asrs	r3, r1, #5
 80071f6:	4298      	cmp	r0, r3
 80071f8:	b510      	push	{r4, lr}
 80071fa:	db11      	blt.n	8007220 <__any_on+0x32>
 80071fc:	dd0a      	ble.n	8007214 <__any_on+0x26>
 80071fe:	f011 011f 	ands.w	r1, r1, #31
 8007202:	d007      	beq.n	8007214 <__any_on+0x26>
 8007204:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007208:	fa24 f001 	lsr.w	r0, r4, r1
 800720c:	fa00 f101 	lsl.w	r1, r0, r1
 8007210:	428c      	cmp	r4, r1
 8007212:	d10b      	bne.n	800722c <__any_on+0x3e>
 8007214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007218:	4293      	cmp	r3, r2
 800721a:	d803      	bhi.n	8007224 <__any_on+0x36>
 800721c:	2000      	movs	r0, #0
 800721e:	bd10      	pop	{r4, pc}
 8007220:	4603      	mov	r3, r0
 8007222:	e7f7      	b.n	8007214 <__any_on+0x26>
 8007224:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007228:	2900      	cmp	r1, #0
 800722a:	d0f5      	beq.n	8007218 <__any_on+0x2a>
 800722c:	2001      	movs	r0, #1
 800722e:	e7f6      	b.n	800721e <__any_on+0x30>

08007230 <_calloc_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	fb02 f501 	mul.w	r5, r2, r1
 8007236:	4629      	mov	r1, r5
 8007238:	f000 f854 	bl	80072e4 <_malloc_r>
 800723c:	4604      	mov	r4, r0
 800723e:	b118      	cbz	r0, 8007248 <_calloc_r+0x18>
 8007240:	462a      	mov	r2, r5
 8007242:	2100      	movs	r1, #0
 8007244:	f7fc fbec 	bl	8003a20 <memset>
 8007248:	4620      	mov	r0, r4
 800724a:	bd38      	pop	{r3, r4, r5, pc}

0800724c <_free_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4605      	mov	r5, r0
 8007250:	2900      	cmp	r1, #0
 8007252:	d043      	beq.n	80072dc <_free_r+0x90>
 8007254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007258:	1f0c      	subs	r4, r1, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfb8      	it	lt
 800725e:	18e4      	addlt	r4, r4, r3
 8007260:	f000 fa76 	bl	8007750 <__malloc_lock>
 8007264:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <_free_r+0x94>)
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	4610      	mov	r0, r2
 800726a:	b933      	cbnz	r3, 800727a <_free_r+0x2e>
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6014      	str	r4, [r2, #0]
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f000 ba71 	b.w	800775c <__malloc_unlock>
 800727a:	42a3      	cmp	r3, r4
 800727c:	d90a      	bls.n	8007294 <_free_r+0x48>
 800727e:	6821      	ldr	r1, [r4, #0]
 8007280:	1862      	adds	r2, r4, r1
 8007282:	4293      	cmp	r3, r2
 8007284:	bf01      	itttt	eq
 8007286:	681a      	ldreq	r2, [r3, #0]
 8007288:	685b      	ldreq	r3, [r3, #4]
 800728a:	1852      	addeq	r2, r2, r1
 800728c:	6022      	streq	r2, [r4, #0]
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6004      	str	r4, [r0, #0]
 8007292:	e7ed      	b.n	8007270 <_free_r+0x24>
 8007294:	461a      	mov	r2, r3
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	b10b      	cbz	r3, 800729e <_free_r+0x52>
 800729a:	42a3      	cmp	r3, r4
 800729c:	d9fa      	bls.n	8007294 <_free_r+0x48>
 800729e:	6811      	ldr	r1, [r2, #0]
 80072a0:	1850      	adds	r0, r2, r1
 80072a2:	42a0      	cmp	r0, r4
 80072a4:	d10b      	bne.n	80072be <_free_r+0x72>
 80072a6:	6820      	ldr	r0, [r4, #0]
 80072a8:	4401      	add	r1, r0
 80072aa:	1850      	adds	r0, r2, r1
 80072ac:	4283      	cmp	r3, r0
 80072ae:	6011      	str	r1, [r2, #0]
 80072b0:	d1de      	bne.n	8007270 <_free_r+0x24>
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4401      	add	r1, r0
 80072b8:	6011      	str	r1, [r2, #0]
 80072ba:	6053      	str	r3, [r2, #4]
 80072bc:	e7d8      	b.n	8007270 <_free_r+0x24>
 80072be:	d902      	bls.n	80072c6 <_free_r+0x7a>
 80072c0:	230c      	movs	r3, #12
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	e7d4      	b.n	8007270 <_free_r+0x24>
 80072c6:	6820      	ldr	r0, [r4, #0]
 80072c8:	1821      	adds	r1, r4, r0
 80072ca:	428b      	cmp	r3, r1
 80072cc:	bf01      	itttt	eq
 80072ce:	6819      	ldreq	r1, [r3, #0]
 80072d0:	685b      	ldreq	r3, [r3, #4]
 80072d2:	1809      	addeq	r1, r1, r0
 80072d4:	6021      	streq	r1, [r4, #0]
 80072d6:	6063      	str	r3, [r4, #4]
 80072d8:	6054      	str	r4, [r2, #4]
 80072da:	e7c9      	b.n	8007270 <_free_r+0x24>
 80072dc:	bd38      	pop	{r3, r4, r5, pc}
 80072de:	bf00      	nop
 80072e0:	20003404 	.word	0x20003404

080072e4 <_malloc_r>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	1ccd      	adds	r5, r1, #3
 80072e8:	f025 0503 	bic.w	r5, r5, #3
 80072ec:	3508      	adds	r5, #8
 80072ee:	2d0c      	cmp	r5, #12
 80072f0:	bf38      	it	cc
 80072f2:	250c      	movcc	r5, #12
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	4606      	mov	r6, r0
 80072f8:	db01      	blt.n	80072fe <_malloc_r+0x1a>
 80072fa:	42a9      	cmp	r1, r5
 80072fc:	d903      	bls.n	8007306 <_malloc_r+0x22>
 80072fe:	230c      	movs	r3, #12
 8007300:	6033      	str	r3, [r6, #0]
 8007302:	2000      	movs	r0, #0
 8007304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007306:	f000 fa23 	bl	8007750 <__malloc_lock>
 800730a:	4921      	ldr	r1, [pc, #132]	; (8007390 <_malloc_r+0xac>)
 800730c:	680a      	ldr	r2, [r1, #0]
 800730e:	4614      	mov	r4, r2
 8007310:	b99c      	cbnz	r4, 800733a <_malloc_r+0x56>
 8007312:	4f20      	ldr	r7, [pc, #128]	; (8007394 <_malloc_r+0xb0>)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	b923      	cbnz	r3, 8007322 <_malloc_r+0x3e>
 8007318:	4621      	mov	r1, r4
 800731a:	4630      	mov	r0, r6
 800731c:	f000 f99e 	bl	800765c <_sbrk_r>
 8007320:	6038      	str	r0, [r7, #0]
 8007322:	4629      	mov	r1, r5
 8007324:	4630      	mov	r0, r6
 8007326:	f000 f999 	bl	800765c <_sbrk_r>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d123      	bne.n	8007376 <_malloc_r+0x92>
 800732e:	230c      	movs	r3, #12
 8007330:	4630      	mov	r0, r6
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f000 fa12 	bl	800775c <__malloc_unlock>
 8007338:	e7e3      	b.n	8007302 <_malloc_r+0x1e>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	1b5b      	subs	r3, r3, r5
 800733e:	d417      	bmi.n	8007370 <_malloc_r+0x8c>
 8007340:	2b0b      	cmp	r3, #11
 8007342:	d903      	bls.n	800734c <_malloc_r+0x68>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	441c      	add	r4, r3
 8007348:	6025      	str	r5, [r4, #0]
 800734a:	e004      	b.n	8007356 <_malloc_r+0x72>
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	42a2      	cmp	r2, r4
 8007350:	bf0c      	ite	eq
 8007352:	600b      	streq	r3, [r1, #0]
 8007354:	6053      	strne	r3, [r2, #4]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 fa00 	bl	800775c <__malloc_unlock>
 800735c:	f104 000b 	add.w	r0, r4, #11
 8007360:	1d23      	adds	r3, r4, #4
 8007362:	f020 0007 	bic.w	r0, r0, #7
 8007366:	1ac2      	subs	r2, r0, r3
 8007368:	d0cc      	beq.n	8007304 <_malloc_r+0x20>
 800736a:	1a1b      	subs	r3, r3, r0
 800736c:	50a3      	str	r3, [r4, r2]
 800736e:	e7c9      	b.n	8007304 <_malloc_r+0x20>
 8007370:	4622      	mov	r2, r4
 8007372:	6864      	ldr	r4, [r4, #4]
 8007374:	e7cc      	b.n	8007310 <_malloc_r+0x2c>
 8007376:	1cc4      	adds	r4, r0, #3
 8007378:	f024 0403 	bic.w	r4, r4, #3
 800737c:	42a0      	cmp	r0, r4
 800737e:	d0e3      	beq.n	8007348 <_malloc_r+0x64>
 8007380:	1a21      	subs	r1, r4, r0
 8007382:	4630      	mov	r0, r6
 8007384:	f000 f96a 	bl	800765c <_sbrk_r>
 8007388:	3001      	adds	r0, #1
 800738a:	d1dd      	bne.n	8007348 <_malloc_r+0x64>
 800738c:	e7cf      	b.n	800732e <_malloc_r+0x4a>
 800738e:	bf00      	nop
 8007390:	20003404 	.word	0x20003404
 8007394:	20003408 	.word	0x20003408

08007398 <__ssputs_r>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	688e      	ldr	r6, [r1, #8]
 800739e:	4682      	mov	sl, r0
 80073a0:	429e      	cmp	r6, r3
 80073a2:	460c      	mov	r4, r1
 80073a4:	4690      	mov	r8, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	d838      	bhi.n	800741c <__ssputs_r+0x84>
 80073aa:	898a      	ldrh	r2, [r1, #12]
 80073ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073b0:	d032      	beq.n	8007418 <__ssputs_r+0x80>
 80073b2:	6825      	ldr	r5, [r4, #0]
 80073b4:	6909      	ldr	r1, [r1, #16]
 80073b6:	3301      	adds	r3, #1
 80073b8:	eba5 0901 	sub.w	r9, r5, r1
 80073bc:	6965      	ldr	r5, [r4, #20]
 80073be:	444b      	add	r3, r9
 80073c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073c8:	106d      	asrs	r5, r5, #1
 80073ca:	429d      	cmp	r5, r3
 80073cc:	bf38      	it	cc
 80073ce:	461d      	movcc	r5, r3
 80073d0:	0553      	lsls	r3, r2, #21
 80073d2:	d531      	bpl.n	8007438 <__ssputs_r+0xa0>
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7ff ff85 	bl	80072e4 <_malloc_r>
 80073da:	4606      	mov	r6, r0
 80073dc:	b950      	cbnz	r0, 80073f4 <__ssputs_r+0x5c>
 80073de:	230c      	movs	r3, #12
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073e4:	f8ca 3000 	str.w	r3, [sl]
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ee:	81a3      	strh	r3, [r4, #12]
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	464a      	mov	r2, r9
 80073f6:	6921      	ldr	r1, [r4, #16]
 80073f8:	f7fc fb04 	bl	8003a04 <memcpy>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	6126      	str	r6, [r4, #16]
 800740a:	444e      	add	r6, r9
 800740c:	6026      	str	r6, [r4, #0]
 800740e:	463e      	mov	r6, r7
 8007410:	6165      	str	r5, [r4, #20]
 8007412:	eba5 0509 	sub.w	r5, r5, r9
 8007416:	60a5      	str	r5, [r4, #8]
 8007418:	42be      	cmp	r6, r7
 800741a:	d900      	bls.n	800741e <__ssputs_r+0x86>
 800741c:	463e      	mov	r6, r7
 800741e:	4632      	mov	r2, r6
 8007420:	4641      	mov	r1, r8
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	f000 f97a 	bl	800771c <memmove>
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	1b9b      	subs	r3, r3, r6
 800742e:	4432      	add	r2, r6
 8007430:	2000      	movs	r0, #0
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	6022      	str	r2, [r4, #0]
 8007436:	e7db      	b.n	80073f0 <__ssputs_r+0x58>
 8007438:	462a      	mov	r2, r5
 800743a:	f000 f995 	bl	8007768 <_realloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	2800      	cmp	r0, #0
 8007442:	d1e1      	bne.n	8007408 <__ssputs_r+0x70>
 8007444:	4650      	mov	r0, sl
 8007446:	6921      	ldr	r1, [r4, #16]
 8007448:	f7ff ff00 	bl	800724c <_free_r>
 800744c:	e7c7      	b.n	80073de <__ssputs_r+0x46>
	...

08007450 <_svfiprintf_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	4698      	mov	r8, r3
 8007456:	898b      	ldrh	r3, [r1, #12]
 8007458:	4607      	mov	r7, r0
 800745a:	061b      	lsls	r3, r3, #24
 800745c:	460d      	mov	r5, r1
 800745e:	4614      	mov	r4, r2
 8007460:	b09d      	sub	sp, #116	; 0x74
 8007462:	d50e      	bpl.n	8007482 <_svfiprintf_r+0x32>
 8007464:	690b      	ldr	r3, [r1, #16]
 8007466:	b963      	cbnz	r3, 8007482 <_svfiprintf_r+0x32>
 8007468:	2140      	movs	r1, #64	; 0x40
 800746a:	f7ff ff3b 	bl	80072e4 <_malloc_r>
 800746e:	6028      	str	r0, [r5, #0]
 8007470:	6128      	str	r0, [r5, #16]
 8007472:	b920      	cbnz	r0, 800747e <_svfiprintf_r+0x2e>
 8007474:	230c      	movs	r3, #12
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800747c:	e0d1      	b.n	8007622 <_svfiprintf_r+0x1d2>
 800747e:	2340      	movs	r3, #64	; 0x40
 8007480:	616b      	str	r3, [r5, #20]
 8007482:	2300      	movs	r3, #0
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	2320      	movs	r3, #32
 8007488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800748c:	2330      	movs	r3, #48	; 0x30
 800748e:	f04f 0901 	mov.w	r9, #1
 8007492:	f8cd 800c 	str.w	r8, [sp, #12]
 8007496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800763c <_svfiprintf_r+0x1ec>
 800749a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800749e:	4623      	mov	r3, r4
 80074a0:	469a      	mov	sl, r3
 80074a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a6:	b10a      	cbz	r2, 80074ac <_svfiprintf_r+0x5c>
 80074a8:	2a25      	cmp	r2, #37	; 0x25
 80074aa:	d1f9      	bne.n	80074a0 <_svfiprintf_r+0x50>
 80074ac:	ebba 0b04 	subs.w	fp, sl, r4
 80074b0:	d00b      	beq.n	80074ca <_svfiprintf_r+0x7a>
 80074b2:	465b      	mov	r3, fp
 80074b4:	4622      	mov	r2, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff ff6d 	bl	8007398 <__ssputs_r>
 80074be:	3001      	adds	r0, #1
 80074c0:	f000 80aa 	beq.w	8007618 <_svfiprintf_r+0x1c8>
 80074c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074c6:	445a      	add	r2, fp
 80074c8:	9209      	str	r2, [sp, #36]	; 0x24
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80a2 	beq.w	8007618 <_svfiprintf_r+0x1c8>
 80074d4:	2300      	movs	r3, #0
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074de:	f10a 0a01 	add.w	sl, sl, #1
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ea:	931a      	str	r3, [sp, #104]	; 0x68
 80074ec:	4654      	mov	r4, sl
 80074ee:	2205      	movs	r2, #5
 80074f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f4:	4851      	ldr	r0, [pc, #324]	; (800763c <_svfiprintf_r+0x1ec>)
 80074f6:	f7ff f9d5 	bl	80068a4 <memchr>
 80074fa:	9a04      	ldr	r2, [sp, #16]
 80074fc:	b9d8      	cbnz	r0, 8007536 <_svfiprintf_r+0xe6>
 80074fe:	06d0      	lsls	r0, r2, #27
 8007500:	bf44      	itt	mi
 8007502:	2320      	movmi	r3, #32
 8007504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007508:	0711      	lsls	r1, r2, #28
 800750a:	bf44      	itt	mi
 800750c:	232b      	movmi	r3, #43	; 0x2b
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007512:	f89a 3000 	ldrb.w	r3, [sl]
 8007516:	2b2a      	cmp	r3, #42	; 0x2a
 8007518:	d015      	beq.n	8007546 <_svfiprintf_r+0xf6>
 800751a:	4654      	mov	r4, sl
 800751c:	2000      	movs	r0, #0
 800751e:	f04f 0c0a 	mov.w	ip, #10
 8007522:	9a07      	ldr	r2, [sp, #28]
 8007524:	4621      	mov	r1, r4
 8007526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800752a:	3b30      	subs	r3, #48	; 0x30
 800752c:	2b09      	cmp	r3, #9
 800752e:	d94e      	bls.n	80075ce <_svfiprintf_r+0x17e>
 8007530:	b1b0      	cbz	r0, 8007560 <_svfiprintf_r+0x110>
 8007532:	9207      	str	r2, [sp, #28]
 8007534:	e014      	b.n	8007560 <_svfiprintf_r+0x110>
 8007536:	eba0 0308 	sub.w	r3, r0, r8
 800753a:	fa09 f303 	lsl.w	r3, r9, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	46a2      	mov	sl, r4
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	e7d2      	b.n	80074ec <_svfiprintf_r+0x9c>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	1d19      	adds	r1, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9103      	str	r1, [sp, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfbb      	ittet	lt
 8007552:	425b      	neglt	r3, r3
 8007554:	f042 0202 	orrlt.w	r2, r2, #2
 8007558:	9307      	strge	r3, [sp, #28]
 800755a:	9307      	strlt	r3, [sp, #28]
 800755c:	bfb8      	it	lt
 800755e:	9204      	strlt	r2, [sp, #16]
 8007560:	7823      	ldrb	r3, [r4, #0]
 8007562:	2b2e      	cmp	r3, #46	; 0x2e
 8007564:	d10c      	bne.n	8007580 <_svfiprintf_r+0x130>
 8007566:	7863      	ldrb	r3, [r4, #1]
 8007568:	2b2a      	cmp	r3, #42	; 0x2a
 800756a:	d135      	bne.n	80075d8 <_svfiprintf_r+0x188>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	3402      	adds	r4, #2
 8007570:	1d1a      	adds	r2, r3, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	9203      	str	r2, [sp, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfb8      	it	lt
 800757a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800757e:	9305      	str	r3, [sp, #20]
 8007580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800764c <_svfiprintf_r+0x1fc>
 8007584:	2203      	movs	r2, #3
 8007586:	4650      	mov	r0, sl
 8007588:	7821      	ldrb	r1, [r4, #0]
 800758a:	f7ff f98b 	bl	80068a4 <memchr>
 800758e:	b140      	cbz	r0, 80075a2 <_svfiprintf_r+0x152>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	eba0 000a 	sub.w	r0, r0, sl
 8007596:	fa03 f000 	lsl.w	r0, r3, r0
 800759a:	9b04      	ldr	r3, [sp, #16]
 800759c:	3401      	adds	r4, #1
 800759e:	4303      	orrs	r3, r0
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	2206      	movs	r2, #6
 80075a8:	4825      	ldr	r0, [pc, #148]	; (8007640 <_svfiprintf_r+0x1f0>)
 80075aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ae:	f7ff f979 	bl	80068a4 <memchr>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d038      	beq.n	8007628 <_svfiprintf_r+0x1d8>
 80075b6:	4b23      	ldr	r3, [pc, #140]	; (8007644 <_svfiprintf_r+0x1f4>)
 80075b8:	bb1b      	cbnz	r3, 8007602 <_svfiprintf_r+0x1b2>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	3307      	adds	r3, #7
 80075be:	f023 0307 	bic.w	r3, r3, #7
 80075c2:	3308      	adds	r3, #8
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	4433      	add	r3, r6
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	e767      	b.n	800749e <_svfiprintf_r+0x4e>
 80075ce:	460c      	mov	r4, r1
 80075d0:	2001      	movs	r0, #1
 80075d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d6:	e7a5      	b.n	8007524 <_svfiprintf_r+0xd4>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4619      	mov	r1, r3
 80075e0:	3401      	adds	r4, #1
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	4620      	mov	r0, r4
 80075e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ea:	3a30      	subs	r2, #48	; 0x30
 80075ec:	2a09      	cmp	r2, #9
 80075ee:	d903      	bls.n	80075f8 <_svfiprintf_r+0x1a8>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0c5      	beq.n	8007580 <_svfiprintf_r+0x130>
 80075f4:	9105      	str	r1, [sp, #20]
 80075f6:	e7c3      	b.n	8007580 <_svfiprintf_r+0x130>
 80075f8:	4604      	mov	r4, r0
 80075fa:	2301      	movs	r3, #1
 80075fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007600:	e7f0      	b.n	80075e4 <_svfiprintf_r+0x194>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4638      	mov	r0, r7
 800760a:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_svfiprintf_r+0x1f8>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	f7fc faad 	bl	8003b6c <_printf_float>
 8007612:	1c42      	adds	r2, r0, #1
 8007614:	4606      	mov	r6, r0
 8007616:	d1d6      	bne.n	80075c6 <_svfiprintf_r+0x176>
 8007618:	89ab      	ldrh	r3, [r5, #12]
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f53f af2c 	bmi.w	8007478 <_svfiprintf_r+0x28>
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	b01d      	add	sp, #116	; 0x74
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462a      	mov	r2, r5
 800762e:	4638      	mov	r0, r7
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_svfiprintf_r+0x1f8>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	f7fc fd36 	bl	80040a4 <_printf_i>
 8007638:	e7eb      	b.n	8007612 <_svfiprintf_r+0x1c2>
 800763a:	bf00      	nop
 800763c:	080086d4 	.word	0x080086d4
 8007640:	080086de 	.word	0x080086de
 8007644:	08003b6d 	.word	0x08003b6d
 8007648:	08007399 	.word	0x08007399
 800764c:	080086da 	.word	0x080086da

08007650 <nan>:
 8007650:	2000      	movs	r0, #0
 8007652:	4901      	ldr	r1, [pc, #4]	; (8007658 <nan+0x8>)
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	7ff80000 	.word	0x7ff80000

0800765c <_sbrk_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	2300      	movs	r3, #0
 8007660:	4d05      	ldr	r5, [pc, #20]	; (8007678 <_sbrk_r+0x1c>)
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fc f958 	bl	800391c <_sbrk>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_sbrk_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_sbrk_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20003440 	.word	0x20003440

0800767c <strncmp>:
 800767c:	b510      	push	{r4, lr}
 800767e:	b16a      	cbz	r2, 800769c <strncmp+0x20>
 8007680:	3901      	subs	r1, #1
 8007682:	1884      	adds	r4, r0, r2
 8007684:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007688:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <strncmp+0x1c>
 8007690:	42a0      	cmp	r0, r4
 8007692:	d001      	beq.n	8007698 <strncmp+0x1c>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f5      	bne.n	8007684 <strncmp+0x8>
 8007698:	1a98      	subs	r0, r3, r2
 800769a:	bd10      	pop	{r4, pc}
 800769c:	4610      	mov	r0, r2
 800769e:	e7fc      	b.n	800769a <strncmp+0x1e>

080076a0 <__ascii_wctomb>:
 80076a0:	4603      	mov	r3, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	b141      	cbz	r1, 80076b8 <__ascii_wctomb+0x18>
 80076a6:	2aff      	cmp	r2, #255	; 0xff
 80076a8:	d904      	bls.n	80076b4 <__ascii_wctomb+0x14>
 80076aa:	228a      	movs	r2, #138	; 0x8a
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	4770      	bx	lr
 80076b4:	2001      	movs	r0, #1
 80076b6:	700a      	strb	r2, [r1, #0]
 80076b8:	4770      	bx	lr
	...

080076bc <__assert_func>:
 80076bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076be:	4614      	mov	r4, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <__assert_func+0x2c>)
 80076c4:	4605      	mov	r5, r0
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68d8      	ldr	r0, [r3, #12]
 80076ca:	b14c      	cbz	r4, 80076e0 <__assert_func+0x24>
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <__assert_func+0x30>)
 80076ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d2:	9100      	str	r1, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	4906      	ldr	r1, [pc, #24]	; (80076f0 <__assert_func+0x34>)
 80076d8:	f000 f80e 	bl	80076f8 <fiprintf>
 80076dc:	f000 fa82 	bl	8007be4 <abort>
 80076e0:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <__assert_func+0x38>)
 80076e2:	461c      	mov	r4, r3
 80076e4:	e7f3      	b.n	80076ce <__assert_func+0x12>
 80076e6:	bf00      	nop
 80076e8:	20000020 	.word	0x20000020
 80076ec:	080086e5 	.word	0x080086e5
 80076f0:	080086f2 	.word	0x080086f2
 80076f4:	0800824b 	.word	0x0800824b

080076f8 <fiprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b503      	push	{r0, r1, lr}
 80076fc:	4601      	mov	r1, r0
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <fiprintf+0x20>)
 8007702:	f853 2b04 	ldr.w	r2, [r3], #4
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	f000 f87b 	bl	8007804 <_vfiprintf_r>
 800770e:	b002      	add	sp, #8
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
 8007714:	b003      	add	sp, #12
 8007716:	4770      	bx	lr
 8007718:	20000020 	.word	0x20000020

0800771c <memmove>:
 800771c:	4288      	cmp	r0, r1
 800771e:	b510      	push	{r4, lr}
 8007720:	eb01 0402 	add.w	r4, r1, r2
 8007724:	d902      	bls.n	800772c <memmove+0x10>
 8007726:	4284      	cmp	r4, r0
 8007728:	4623      	mov	r3, r4
 800772a:	d807      	bhi.n	800773c <memmove+0x20>
 800772c:	1e43      	subs	r3, r0, #1
 800772e:	42a1      	cmp	r1, r4
 8007730:	d008      	beq.n	8007744 <memmove+0x28>
 8007732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800773a:	e7f8      	b.n	800772e <memmove+0x12>
 800773c:	4601      	mov	r1, r0
 800773e:	4402      	add	r2, r0
 8007740:	428a      	cmp	r2, r1
 8007742:	d100      	bne.n	8007746 <memmove+0x2a>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800774e:	e7f7      	b.n	8007740 <memmove+0x24>

08007750 <__malloc_lock>:
 8007750:	4801      	ldr	r0, [pc, #4]	; (8007758 <__malloc_lock+0x8>)
 8007752:	f000 bc07 	b.w	8007f64 <__retarget_lock_acquire_recursive>
 8007756:	bf00      	nop
 8007758:	20003448 	.word	0x20003448

0800775c <__malloc_unlock>:
 800775c:	4801      	ldr	r0, [pc, #4]	; (8007764 <__malloc_unlock+0x8>)
 800775e:	f000 bc02 	b.w	8007f66 <__retarget_lock_release_recursive>
 8007762:	bf00      	nop
 8007764:	20003448 	.word	0x20003448

08007768 <_realloc_r>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	4607      	mov	r7, r0
 800776c:	4614      	mov	r4, r2
 800776e:	460e      	mov	r6, r1
 8007770:	b921      	cbnz	r1, 800777c <_realloc_r+0x14>
 8007772:	4611      	mov	r1, r2
 8007774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007778:	f7ff bdb4 	b.w	80072e4 <_malloc_r>
 800777c:	b922      	cbnz	r2, 8007788 <_realloc_r+0x20>
 800777e:	f7ff fd65 	bl	800724c <_free_r>
 8007782:	4625      	mov	r5, r4
 8007784:	4628      	mov	r0, r5
 8007786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007788:	f000 fc52 	bl	8008030 <_malloc_usable_size_r>
 800778c:	42a0      	cmp	r0, r4
 800778e:	d20f      	bcs.n	80077b0 <_realloc_r+0x48>
 8007790:	4621      	mov	r1, r4
 8007792:	4638      	mov	r0, r7
 8007794:	f7ff fda6 	bl	80072e4 <_malloc_r>
 8007798:	4605      	mov	r5, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	d0f2      	beq.n	8007784 <_realloc_r+0x1c>
 800779e:	4631      	mov	r1, r6
 80077a0:	4622      	mov	r2, r4
 80077a2:	f7fc f92f 	bl	8003a04 <memcpy>
 80077a6:	4631      	mov	r1, r6
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff fd4f 	bl	800724c <_free_r>
 80077ae:	e7e9      	b.n	8007784 <_realloc_r+0x1c>
 80077b0:	4635      	mov	r5, r6
 80077b2:	e7e7      	b.n	8007784 <_realloc_r+0x1c>

080077b4 <__sfputc_r>:
 80077b4:	6893      	ldr	r3, [r2, #8]
 80077b6:	b410      	push	{r4}
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	6093      	str	r3, [r2, #8]
 80077be:	da07      	bge.n	80077d0 <__sfputc_r+0x1c>
 80077c0:	6994      	ldr	r4, [r2, #24]
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	db01      	blt.n	80077ca <__sfputc_r+0x16>
 80077c6:	290a      	cmp	r1, #10
 80077c8:	d102      	bne.n	80077d0 <__sfputc_r+0x1c>
 80077ca:	bc10      	pop	{r4}
 80077cc:	f000 b94a 	b.w	8007a64 <__swbuf_r>
 80077d0:	6813      	ldr	r3, [r2, #0]
 80077d2:	1c58      	adds	r0, r3, #1
 80077d4:	6010      	str	r0, [r2, #0]
 80077d6:	7019      	strb	r1, [r3, #0]
 80077d8:	4608      	mov	r0, r1
 80077da:	bc10      	pop	{r4}
 80077dc:	4770      	bx	lr

080077de <__sfputs_r>:
 80077de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e0:	4606      	mov	r6, r0
 80077e2:	460f      	mov	r7, r1
 80077e4:	4614      	mov	r4, r2
 80077e6:	18d5      	adds	r5, r2, r3
 80077e8:	42ac      	cmp	r4, r5
 80077ea:	d101      	bne.n	80077f0 <__sfputs_r+0x12>
 80077ec:	2000      	movs	r0, #0
 80077ee:	e007      	b.n	8007800 <__sfputs_r+0x22>
 80077f0:	463a      	mov	r2, r7
 80077f2:	4630      	mov	r0, r6
 80077f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f8:	f7ff ffdc 	bl	80077b4 <__sfputc_r>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d1f3      	bne.n	80077e8 <__sfputs_r+0xa>
 8007800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007804 <_vfiprintf_r>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	460d      	mov	r5, r1
 800780a:	4614      	mov	r4, r2
 800780c:	4698      	mov	r8, r3
 800780e:	4606      	mov	r6, r0
 8007810:	b09d      	sub	sp, #116	; 0x74
 8007812:	b118      	cbz	r0, 800781c <_vfiprintf_r+0x18>
 8007814:	6983      	ldr	r3, [r0, #24]
 8007816:	b90b      	cbnz	r3, 800781c <_vfiprintf_r+0x18>
 8007818:	f000 fb06 	bl	8007e28 <__sinit>
 800781c:	4b89      	ldr	r3, [pc, #548]	; (8007a44 <_vfiprintf_r+0x240>)
 800781e:	429d      	cmp	r5, r3
 8007820:	d11b      	bne.n	800785a <_vfiprintf_r+0x56>
 8007822:	6875      	ldr	r5, [r6, #4]
 8007824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007826:	07d9      	lsls	r1, r3, #31
 8007828:	d405      	bmi.n	8007836 <_vfiprintf_r+0x32>
 800782a:	89ab      	ldrh	r3, [r5, #12]
 800782c:	059a      	lsls	r2, r3, #22
 800782e:	d402      	bmi.n	8007836 <_vfiprintf_r+0x32>
 8007830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007832:	f000 fb97 	bl	8007f64 <__retarget_lock_acquire_recursive>
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	071b      	lsls	r3, r3, #28
 800783a:	d501      	bpl.n	8007840 <_vfiprintf_r+0x3c>
 800783c:	692b      	ldr	r3, [r5, #16]
 800783e:	b9eb      	cbnz	r3, 800787c <_vfiprintf_r+0x78>
 8007840:	4629      	mov	r1, r5
 8007842:	4630      	mov	r0, r6
 8007844:	f000 f960 	bl	8007b08 <__swsetup_r>
 8007848:	b1c0      	cbz	r0, 800787c <_vfiprintf_r+0x78>
 800784a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784c:	07dc      	lsls	r4, r3, #31
 800784e:	d50e      	bpl.n	800786e <_vfiprintf_r+0x6a>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007854:	b01d      	add	sp, #116	; 0x74
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	4b7b      	ldr	r3, [pc, #492]	; (8007a48 <_vfiprintf_r+0x244>)
 800785c:	429d      	cmp	r5, r3
 800785e:	d101      	bne.n	8007864 <_vfiprintf_r+0x60>
 8007860:	68b5      	ldr	r5, [r6, #8]
 8007862:	e7df      	b.n	8007824 <_vfiprintf_r+0x20>
 8007864:	4b79      	ldr	r3, [pc, #484]	; (8007a4c <_vfiprintf_r+0x248>)
 8007866:	429d      	cmp	r5, r3
 8007868:	bf08      	it	eq
 800786a:	68f5      	ldreq	r5, [r6, #12]
 800786c:	e7da      	b.n	8007824 <_vfiprintf_r+0x20>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	0598      	lsls	r0, r3, #22
 8007872:	d4ed      	bmi.n	8007850 <_vfiprintf_r+0x4c>
 8007874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007876:	f000 fb76 	bl	8007f66 <__retarget_lock_release_recursive>
 800787a:	e7e9      	b.n	8007850 <_vfiprintf_r+0x4c>
 800787c:	2300      	movs	r3, #0
 800787e:	9309      	str	r3, [sp, #36]	; 0x24
 8007880:	2320      	movs	r3, #32
 8007882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007886:	2330      	movs	r3, #48	; 0x30
 8007888:	f04f 0901 	mov.w	r9, #1
 800788c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007890:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007a50 <_vfiprintf_r+0x24c>
 8007894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007898:	4623      	mov	r3, r4
 800789a:	469a      	mov	sl, r3
 800789c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078a0:	b10a      	cbz	r2, 80078a6 <_vfiprintf_r+0xa2>
 80078a2:	2a25      	cmp	r2, #37	; 0x25
 80078a4:	d1f9      	bne.n	800789a <_vfiprintf_r+0x96>
 80078a6:	ebba 0b04 	subs.w	fp, sl, r4
 80078aa:	d00b      	beq.n	80078c4 <_vfiprintf_r+0xc0>
 80078ac:	465b      	mov	r3, fp
 80078ae:	4622      	mov	r2, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff ff93 	bl	80077de <__sfputs_r>
 80078b8:	3001      	adds	r0, #1
 80078ba:	f000 80aa 	beq.w	8007a12 <_vfiprintf_r+0x20e>
 80078be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c0:	445a      	add	r2, fp
 80078c2:	9209      	str	r2, [sp, #36]	; 0x24
 80078c4:	f89a 3000 	ldrb.w	r3, [sl]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80a2 	beq.w	8007a12 <_vfiprintf_r+0x20e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d8:	f10a 0a01 	add.w	sl, sl, #1
 80078dc:	9304      	str	r3, [sp, #16]
 80078de:	9307      	str	r3, [sp, #28]
 80078e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e4:	931a      	str	r3, [sp, #104]	; 0x68
 80078e6:	4654      	mov	r4, sl
 80078e8:	2205      	movs	r2, #5
 80078ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ee:	4858      	ldr	r0, [pc, #352]	; (8007a50 <_vfiprintf_r+0x24c>)
 80078f0:	f7fe ffd8 	bl	80068a4 <memchr>
 80078f4:	9a04      	ldr	r2, [sp, #16]
 80078f6:	b9d8      	cbnz	r0, 8007930 <_vfiprintf_r+0x12c>
 80078f8:	06d1      	lsls	r1, r2, #27
 80078fa:	bf44      	itt	mi
 80078fc:	2320      	movmi	r3, #32
 80078fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007902:	0713      	lsls	r3, r2, #28
 8007904:	bf44      	itt	mi
 8007906:	232b      	movmi	r3, #43	; 0x2b
 8007908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b2a      	cmp	r3, #42	; 0x2a
 8007912:	d015      	beq.n	8007940 <_vfiprintf_r+0x13c>
 8007914:	4654      	mov	r4, sl
 8007916:	2000      	movs	r0, #0
 8007918:	f04f 0c0a 	mov.w	ip, #10
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	4621      	mov	r1, r4
 8007920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007924:	3b30      	subs	r3, #48	; 0x30
 8007926:	2b09      	cmp	r3, #9
 8007928:	d94e      	bls.n	80079c8 <_vfiprintf_r+0x1c4>
 800792a:	b1b0      	cbz	r0, 800795a <_vfiprintf_r+0x156>
 800792c:	9207      	str	r2, [sp, #28]
 800792e:	e014      	b.n	800795a <_vfiprintf_r+0x156>
 8007930:	eba0 0308 	sub.w	r3, r0, r8
 8007934:	fa09 f303 	lsl.w	r3, r9, r3
 8007938:	4313      	orrs	r3, r2
 800793a:	46a2      	mov	sl, r4
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	e7d2      	b.n	80078e6 <_vfiprintf_r+0xe2>
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	1d19      	adds	r1, r3, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	9103      	str	r1, [sp, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfbb      	ittet	lt
 800794c:	425b      	neglt	r3, r3
 800794e:	f042 0202 	orrlt.w	r2, r2, #2
 8007952:	9307      	strge	r3, [sp, #28]
 8007954:	9307      	strlt	r3, [sp, #28]
 8007956:	bfb8      	it	lt
 8007958:	9204      	strlt	r2, [sp, #16]
 800795a:	7823      	ldrb	r3, [r4, #0]
 800795c:	2b2e      	cmp	r3, #46	; 0x2e
 800795e:	d10c      	bne.n	800797a <_vfiprintf_r+0x176>
 8007960:	7863      	ldrb	r3, [r4, #1]
 8007962:	2b2a      	cmp	r3, #42	; 0x2a
 8007964:	d135      	bne.n	80079d2 <_vfiprintf_r+0x1ce>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	3402      	adds	r4, #2
 800796a:	1d1a      	adds	r2, r3, #4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9203      	str	r2, [sp, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfb8      	it	lt
 8007974:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007978:	9305      	str	r3, [sp, #20]
 800797a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a60 <_vfiprintf_r+0x25c>
 800797e:	2203      	movs	r2, #3
 8007980:	4650      	mov	r0, sl
 8007982:	7821      	ldrb	r1, [r4, #0]
 8007984:	f7fe ff8e 	bl	80068a4 <memchr>
 8007988:	b140      	cbz	r0, 800799c <_vfiprintf_r+0x198>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	eba0 000a 	sub.w	r0, r0, sl
 8007990:	fa03 f000 	lsl.w	r0, r3, r0
 8007994:	9b04      	ldr	r3, [sp, #16]
 8007996:	3401      	adds	r4, #1
 8007998:	4303      	orrs	r3, r0
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079a0:	2206      	movs	r2, #6
 80079a2:	482c      	ldr	r0, [pc, #176]	; (8007a54 <_vfiprintf_r+0x250>)
 80079a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a8:	f7fe ff7c 	bl	80068a4 <memchr>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d03f      	beq.n	8007a30 <_vfiprintf_r+0x22c>
 80079b0:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <_vfiprintf_r+0x254>)
 80079b2:	bb1b      	cbnz	r3, 80079fc <_vfiprintf_r+0x1f8>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	3307      	adds	r3, #7
 80079b8:	f023 0307 	bic.w	r3, r3, #7
 80079bc:	3308      	adds	r3, #8
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	443b      	add	r3, r7
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	e767      	b.n	8007898 <_vfiprintf_r+0x94>
 80079c8:	460c      	mov	r4, r1
 80079ca:	2001      	movs	r0, #1
 80079cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d0:	e7a5      	b.n	800791e <_vfiprintf_r+0x11a>
 80079d2:	2300      	movs	r3, #0
 80079d4:	f04f 0c0a 	mov.w	ip, #10
 80079d8:	4619      	mov	r1, r3
 80079da:	3401      	adds	r4, #1
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	4620      	mov	r0, r4
 80079e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e4:	3a30      	subs	r2, #48	; 0x30
 80079e6:	2a09      	cmp	r2, #9
 80079e8:	d903      	bls.n	80079f2 <_vfiprintf_r+0x1ee>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0c5      	beq.n	800797a <_vfiprintf_r+0x176>
 80079ee:	9105      	str	r1, [sp, #20]
 80079f0:	e7c3      	b.n	800797a <_vfiprintf_r+0x176>
 80079f2:	4604      	mov	r4, r0
 80079f4:	2301      	movs	r3, #1
 80079f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079fa:	e7f0      	b.n	80079de <_vfiprintf_r+0x1da>
 80079fc:	ab03      	add	r3, sp, #12
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	462a      	mov	r2, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <_vfiprintf_r+0x258>)
 8007a06:	a904      	add	r1, sp, #16
 8007a08:	f7fc f8b0 	bl	8003b6c <_printf_float>
 8007a0c:	4607      	mov	r7, r0
 8007a0e:	1c78      	adds	r0, r7, #1
 8007a10:	d1d6      	bne.n	80079c0 <_vfiprintf_r+0x1bc>
 8007a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a14:	07d9      	lsls	r1, r3, #31
 8007a16:	d405      	bmi.n	8007a24 <_vfiprintf_r+0x220>
 8007a18:	89ab      	ldrh	r3, [r5, #12]
 8007a1a:	059a      	lsls	r2, r3, #22
 8007a1c:	d402      	bmi.n	8007a24 <_vfiprintf_r+0x220>
 8007a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a20:	f000 faa1 	bl	8007f66 <__retarget_lock_release_recursive>
 8007a24:	89ab      	ldrh	r3, [r5, #12]
 8007a26:	065b      	lsls	r3, r3, #25
 8007a28:	f53f af12 	bmi.w	8007850 <_vfiprintf_r+0x4c>
 8007a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a2e:	e711      	b.n	8007854 <_vfiprintf_r+0x50>
 8007a30:	ab03      	add	r3, sp, #12
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	462a      	mov	r2, r5
 8007a36:	4630      	mov	r0, r6
 8007a38:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <_vfiprintf_r+0x258>)
 8007a3a:	a904      	add	r1, sp, #16
 8007a3c:	f7fc fb32 	bl	80040a4 <_printf_i>
 8007a40:	e7e4      	b.n	8007a0c <_vfiprintf_r+0x208>
 8007a42:	bf00      	nop
 8007a44:	08008744 	.word	0x08008744
 8007a48:	08008764 	.word	0x08008764
 8007a4c:	08008724 	.word	0x08008724
 8007a50:	080086d4 	.word	0x080086d4
 8007a54:	080086de 	.word	0x080086de
 8007a58:	08003b6d 	.word	0x08003b6d
 8007a5c:	080077df 	.word	0x080077df
 8007a60:	080086da 	.word	0x080086da

08007a64 <__swbuf_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	460e      	mov	r6, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	b118      	cbz	r0, 8007a76 <__swbuf_r+0x12>
 8007a6e:	6983      	ldr	r3, [r0, #24]
 8007a70:	b90b      	cbnz	r3, 8007a76 <__swbuf_r+0x12>
 8007a72:	f000 f9d9 	bl	8007e28 <__sinit>
 8007a76:	4b21      	ldr	r3, [pc, #132]	; (8007afc <__swbuf_r+0x98>)
 8007a78:	429c      	cmp	r4, r3
 8007a7a:	d12b      	bne.n	8007ad4 <__swbuf_r+0x70>
 8007a7c:	686c      	ldr	r4, [r5, #4]
 8007a7e:	69a3      	ldr	r3, [r4, #24]
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	071a      	lsls	r2, r3, #28
 8007a86:	d52f      	bpl.n	8007ae8 <__swbuf_r+0x84>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	b36b      	cbz	r3, 8007ae8 <__swbuf_r+0x84>
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	b2f6      	uxtb	r6, r6
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	6963      	ldr	r3, [r4, #20]
 8007a96:	4637      	mov	r7, r6
 8007a98:	4283      	cmp	r3, r0
 8007a9a:	dc04      	bgt.n	8007aa6 <__swbuf_r+0x42>
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f92e 	bl	8007d00 <_fflush_r>
 8007aa4:	bb30      	cbnz	r0, 8007af4 <__swbuf_r+0x90>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	701e      	strb	r6, [r3, #0]
 8007ab6:	6963      	ldr	r3, [r4, #20]
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x62>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d506      	bpl.n	8007ad0 <__swbuf_r+0x6c>
 8007ac2:	2e0a      	cmp	r6, #10
 8007ac4:	d104      	bne.n	8007ad0 <__swbuf_r+0x6c>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f919 	bl	8007d00 <_fflush_r>
 8007ace:	b988      	cbnz	r0, 8007af4 <__swbuf_r+0x90>
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <__swbuf_r+0x9c>)
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d101      	bne.n	8007ade <__swbuf_r+0x7a>
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	e7cf      	b.n	8007a7e <__swbuf_r+0x1a>
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <__swbuf_r+0xa0>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	bf08      	it	eq
 8007ae4:	68ec      	ldreq	r4, [r5, #12]
 8007ae6:	e7ca      	b.n	8007a7e <__swbuf_r+0x1a>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 f80c 	bl	8007b08 <__swsetup_r>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0cb      	beq.n	8007a8c <__swbuf_r+0x28>
 8007af4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007af8:	e7ea      	b.n	8007ad0 <__swbuf_r+0x6c>
 8007afa:	bf00      	nop
 8007afc:	08008744 	.word	0x08008744
 8007b00:	08008764 	.word	0x08008764
 8007b04:	08008724 	.word	0x08008724

08007b08 <__swsetup_r>:
 8007b08:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <__swsetup_r+0xcc>)
 8007b0a:	b570      	push	{r4, r5, r6, lr}
 8007b0c:	681d      	ldr	r5, [r3, #0]
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	b125      	cbz	r5, 8007b1e <__swsetup_r+0x16>
 8007b14:	69ab      	ldr	r3, [r5, #24]
 8007b16:	b913      	cbnz	r3, 8007b1e <__swsetup_r+0x16>
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 f985 	bl	8007e28 <__sinit>
 8007b1e:	4b2e      	ldr	r3, [pc, #184]	; (8007bd8 <__swsetup_r+0xd0>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	d10f      	bne.n	8007b44 <__swsetup_r+0x3c>
 8007b24:	686c      	ldr	r4, [r5, #4]
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b2c:	0719      	lsls	r1, r3, #28
 8007b2e:	d42c      	bmi.n	8007b8a <__swsetup_r+0x82>
 8007b30:	06dd      	lsls	r5, r3, #27
 8007b32:	d411      	bmi.n	8007b58 <__swsetup_r+0x50>
 8007b34:	2309      	movs	r3, #9
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e03e      	b.n	8007bc2 <__swsetup_r+0xba>
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <__swsetup_r+0xd4>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <__swsetup_r+0x46>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7eb      	b.n	8007b26 <__swsetup_r+0x1e>
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <__swsetup_r+0xd8>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7e6      	b.n	8007b26 <__swsetup_r+0x1e>
 8007b58:	0758      	lsls	r0, r3, #29
 8007b5a:	d512      	bpl.n	8007b82 <__swsetup_r+0x7a>
 8007b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b5e:	b141      	cbz	r1, 8007b72 <__swsetup_r+0x6a>
 8007b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b64:	4299      	cmp	r1, r3
 8007b66:	d002      	beq.n	8007b6e <__swsetup_r+0x66>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff fb6f 	bl	800724c <_free_r>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6363      	str	r3, [r4, #52]	; 0x34
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f043 0308 	orr.w	r3, r3, #8
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	b94b      	cbnz	r3, 8007ba2 <__swsetup_r+0x9a>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d003      	beq.n	8007ba2 <__swsetup_r+0x9a>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 fa07 	bl	8007fb0 <__smakebuf_r>
 8007ba2:	89a0      	ldrh	r0, [r4, #12]
 8007ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba8:	f010 0301 	ands.w	r3, r0, #1
 8007bac:	d00a      	beq.n	8007bc4 <__swsetup_r+0xbc>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	61a3      	str	r3, [r4, #24]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b943      	cbnz	r3, 8007bce <__swsetup_r+0xc6>
 8007bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc0:	d1ba      	bne.n	8007b38 <__swsetup_r+0x30>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	0781      	lsls	r1, r0, #30
 8007bc6:	bf58      	it	pl
 8007bc8:	6963      	ldrpl	r3, [r4, #20]
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	e7f4      	b.n	8007bb8 <__swsetup_r+0xb0>
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e7f7      	b.n	8007bc2 <__swsetup_r+0xba>
 8007bd2:	bf00      	nop
 8007bd4:	20000020 	.word	0x20000020
 8007bd8:	08008744 	.word	0x08008744
 8007bdc:	08008764 	.word	0x08008764
 8007be0:	08008724 	.word	0x08008724

08007be4 <abort>:
 8007be4:	2006      	movs	r0, #6
 8007be6:	b508      	push	{r3, lr}
 8007be8:	f000 fa52 	bl	8008090 <raise>
 8007bec:	2001      	movs	r0, #1
 8007bee:	f7fb fe75 	bl	80038dc <_exit>
	...

08007bf4 <__sflush_r>:
 8007bf4:	898a      	ldrh	r2, [r1, #12]
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	0710      	lsls	r0, r2, #28
 8007bfe:	460c      	mov	r4, r1
 8007c00:	d458      	bmi.n	8007cb4 <__sflush_r+0xc0>
 8007c02:	684b      	ldr	r3, [r1, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc05      	bgt.n	8007c14 <__sflush_r+0x20>
 8007c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dc02      	bgt.n	8007c14 <__sflush_r+0x20>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d0f9      	beq.n	8007c0e <__sflush_r+0x1a>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c20:	682f      	ldr	r7, [r5, #0]
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	d032      	beq.n	8007c8c <__sflush_r+0x98>
 8007c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	075a      	lsls	r2, r3, #29
 8007c2c:	d505      	bpl.n	8007c3a <__sflush_r+0x46>
 8007c2e:	6863      	ldr	r3, [r4, #4]
 8007c30:	1ac0      	subs	r0, r0, r3
 8007c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c34:	b10b      	cbz	r3, 8007c3a <__sflush_r+0x46>
 8007c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c38:	1ac0      	subs	r0, r0, r3
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c40:	4628      	mov	r0, r5
 8007c42:	6a21      	ldr	r1, [r4, #32]
 8007c44:	47b0      	blx	r6
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	d106      	bne.n	8007c5a <__sflush_r+0x66>
 8007c4c:	6829      	ldr	r1, [r5, #0]
 8007c4e:	291d      	cmp	r1, #29
 8007c50:	d82c      	bhi.n	8007cac <__sflush_r+0xb8>
 8007c52:	4a2a      	ldr	r2, [pc, #168]	; (8007cfc <__sflush_r+0x108>)
 8007c54:	40ca      	lsrs	r2, r1
 8007c56:	07d6      	lsls	r6, r2, #31
 8007c58:	d528      	bpl.n	8007cac <__sflush_r+0xb8>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	6062      	str	r2, [r4, #4]
 8007c5e:	6922      	ldr	r2, [r4, #16]
 8007c60:	04d9      	lsls	r1, r3, #19
 8007c62:	6022      	str	r2, [r4, #0]
 8007c64:	d504      	bpl.n	8007c70 <__sflush_r+0x7c>
 8007c66:	1c42      	adds	r2, r0, #1
 8007c68:	d101      	bne.n	8007c6e <__sflush_r+0x7a>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	b903      	cbnz	r3, 8007c70 <__sflush_r+0x7c>
 8007c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c72:	602f      	str	r7, [r5, #0]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d0ca      	beq.n	8007c0e <__sflush_r+0x1a>
 8007c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7c:	4299      	cmp	r1, r3
 8007c7e:	d002      	beq.n	8007c86 <__sflush_r+0x92>
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7ff fae3 	bl	800724c <_free_r>
 8007c86:	2000      	movs	r0, #0
 8007c88:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8a:	e7c1      	b.n	8007c10 <__sflush_r+0x1c>
 8007c8c:	6a21      	ldr	r1, [r4, #32]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b0      	blx	r6
 8007c94:	1c41      	adds	r1, r0, #1
 8007c96:	d1c7      	bne.n	8007c28 <__sflush_r+0x34>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0c4      	beq.n	8007c28 <__sflush_r+0x34>
 8007c9e:	2b1d      	cmp	r3, #29
 8007ca0:	d001      	beq.n	8007ca6 <__sflush_r+0xb2>
 8007ca2:	2b16      	cmp	r3, #22
 8007ca4:	d101      	bne.n	8007caa <__sflush_r+0xb6>
 8007ca6:	602f      	str	r7, [r5, #0]
 8007ca8:	e7b1      	b.n	8007c0e <__sflush_r+0x1a>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	e7ad      	b.n	8007c10 <__sflush_r+0x1c>
 8007cb4:	690f      	ldr	r7, [r1, #16]
 8007cb6:	2f00      	cmp	r7, #0
 8007cb8:	d0a9      	beq.n	8007c0e <__sflush_r+0x1a>
 8007cba:	0793      	lsls	r3, r2, #30
 8007cbc:	bf18      	it	ne
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	bf08      	it	eq
 8007cc4:	694b      	ldreq	r3, [r1, #20]
 8007cc6:	eba6 0807 	sub.w	r8, r6, r7
 8007cca:	600f      	str	r7, [r1, #0]
 8007ccc:	608b      	str	r3, [r1, #8]
 8007cce:	f1b8 0f00 	cmp.w	r8, #0
 8007cd2:	dd9c      	ble.n	8007c0e <__sflush_r+0x1a>
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	463a      	mov	r2, r7
 8007cd8:	4628      	mov	r0, r5
 8007cda:	6a21      	ldr	r1, [r4, #32]
 8007cdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cde:	47b0      	blx	r6
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dc06      	bgt.n	8007cf2 <__sflush_r+0xfe>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	e78e      	b.n	8007c10 <__sflush_r+0x1c>
 8007cf2:	4407      	add	r7, r0
 8007cf4:	eba8 0800 	sub.w	r8, r8, r0
 8007cf8:	e7e9      	b.n	8007cce <__sflush_r+0xda>
 8007cfa:	bf00      	nop
 8007cfc:	20400001 	.word	0x20400001

08007d00 <_fflush_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	690b      	ldr	r3, [r1, #16]
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b913      	cbnz	r3, 8007d10 <_fflush_r+0x10>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	b118      	cbz	r0, 8007d1a <_fflush_r+0x1a>
 8007d12:	6983      	ldr	r3, [r0, #24]
 8007d14:	b90b      	cbnz	r3, 8007d1a <_fflush_r+0x1a>
 8007d16:	f000 f887 	bl	8007e28 <__sinit>
 8007d1a:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <_fflush_r+0x6c>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	d11b      	bne.n	8007d58 <_fflush_r+0x58>
 8007d20:	686c      	ldr	r4, [r5, #4]
 8007d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0ef      	beq.n	8007d0a <_fflush_r+0xa>
 8007d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d2c:	07d0      	lsls	r0, r2, #31
 8007d2e:	d404      	bmi.n	8007d3a <_fflush_r+0x3a>
 8007d30:	0599      	lsls	r1, r3, #22
 8007d32:	d402      	bmi.n	8007d3a <_fflush_r+0x3a>
 8007d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d36:	f000 f915 	bl	8007f64 <__retarget_lock_acquire_recursive>
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	f7ff ff59 	bl	8007bf4 <__sflush_r>
 8007d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d44:	4605      	mov	r5, r0
 8007d46:	07da      	lsls	r2, r3, #31
 8007d48:	d4e0      	bmi.n	8007d0c <_fflush_r+0xc>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	059b      	lsls	r3, r3, #22
 8007d4e:	d4dd      	bmi.n	8007d0c <_fflush_r+0xc>
 8007d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d52:	f000 f908 	bl	8007f66 <__retarget_lock_release_recursive>
 8007d56:	e7d9      	b.n	8007d0c <_fflush_r+0xc>
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <_fflush_r+0x70>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d101      	bne.n	8007d62 <_fflush_r+0x62>
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	e7df      	b.n	8007d22 <_fflush_r+0x22>
 8007d62:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <_fflush_r+0x74>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	bf08      	it	eq
 8007d68:	68ec      	ldreq	r4, [r5, #12]
 8007d6a:	e7da      	b.n	8007d22 <_fflush_r+0x22>
 8007d6c:	08008744 	.word	0x08008744
 8007d70:	08008764 	.word	0x08008764
 8007d74:	08008724 	.word	0x08008724

08007d78 <std>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d86:	6083      	str	r3, [r0, #8]
 8007d88:	8181      	strh	r1, [r0, #12]
 8007d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d8c:	81c2      	strh	r2, [r0, #14]
 8007d8e:	6183      	str	r3, [r0, #24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2208      	movs	r2, #8
 8007d94:	305c      	adds	r0, #92	; 0x5c
 8007d96:	f7fb fe43 	bl	8003a20 <memset>
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x38>)
 8007d9c:	6224      	str	r4, [r4, #32]
 8007d9e:	6263      	str	r3, [r4, #36]	; 0x24
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <std+0x3c>)
 8007da2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <std+0x40>)
 8007da6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <std+0x44>)
 8007daa:	6323      	str	r3, [r4, #48]	; 0x30
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	bf00      	nop
 8007db0:	080080c9 	.word	0x080080c9
 8007db4:	080080eb 	.word	0x080080eb
 8007db8:	08008123 	.word	0x08008123
 8007dbc:	08008147 	.word	0x08008147

08007dc0 <_cleanup_r>:
 8007dc0:	4901      	ldr	r1, [pc, #4]	; (8007dc8 <_cleanup_r+0x8>)
 8007dc2:	f000 b8af 	b.w	8007f24 <_fwalk_reent>
 8007dc6:	bf00      	nop
 8007dc8:	08007d01 	.word	0x08007d01

08007dcc <__sfmoreglue>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	2568      	movs	r5, #104	; 0x68
 8007dd0:	1e4a      	subs	r2, r1, #1
 8007dd2:	4355      	muls	r5, r2
 8007dd4:	460e      	mov	r6, r1
 8007dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dda:	f7ff fa83 	bl	80072e4 <_malloc_r>
 8007dde:	4604      	mov	r4, r0
 8007de0:	b140      	cbz	r0, 8007df4 <__sfmoreglue+0x28>
 8007de2:	2100      	movs	r1, #0
 8007de4:	e9c0 1600 	strd	r1, r6, [r0]
 8007de8:	300c      	adds	r0, #12
 8007dea:	60a0      	str	r0, [r4, #8]
 8007dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007df0:	f7fb fe16 	bl	8003a20 <memset>
 8007df4:	4620      	mov	r0, r4
 8007df6:	bd70      	pop	{r4, r5, r6, pc}

08007df8 <__sfp_lock_acquire>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sfp_lock_acquire+0x8>)
 8007dfa:	f000 b8b3 	b.w	8007f64 <__retarget_lock_acquire_recursive>
 8007dfe:	bf00      	nop
 8007e00:	2000344c 	.word	0x2000344c

08007e04 <__sfp_lock_release>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sfp_lock_release+0x8>)
 8007e06:	f000 b8ae 	b.w	8007f66 <__retarget_lock_release_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	2000344c 	.word	0x2000344c

08007e10 <__sinit_lock_acquire>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__sinit_lock_acquire+0x8>)
 8007e12:	f000 b8a7 	b.w	8007f64 <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	20003447 	.word	0x20003447

08007e1c <__sinit_lock_release>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__sinit_lock_release+0x8>)
 8007e1e:	f000 b8a2 	b.w	8007f66 <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	20003447 	.word	0x20003447

08007e28 <__sinit>:
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	f7ff fff0 	bl	8007e10 <__sinit_lock_acquire>
 8007e30:	69a3      	ldr	r3, [r4, #24]
 8007e32:	b11b      	cbz	r3, 8007e3c <__sinit+0x14>
 8007e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e38:	f7ff bff0 	b.w	8007e1c <__sinit_lock_release>
 8007e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e40:	6523      	str	r3, [r4, #80]	; 0x50
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <__sinit+0x68>)
 8007e44:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <__sinit+0x6c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	bf08      	it	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	4620      	mov	r0, r4
 8007e52:	bf08      	it	eq
 8007e54:	61a3      	streq	r3, [r4, #24]
 8007e56:	f000 f81f 	bl	8007e98 <__sfp>
 8007e5a:	6060      	str	r0, [r4, #4]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f81b 	bl	8007e98 <__sfp>
 8007e62:	60a0      	str	r0, [r4, #8]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f817 	bl	8007e98 <__sfp>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2104      	movs	r1, #4
 8007e6e:	60e0      	str	r0, [r4, #12]
 8007e70:	6860      	ldr	r0, [r4, #4]
 8007e72:	f7ff ff81 	bl	8007d78 <std>
 8007e76:	2201      	movs	r2, #1
 8007e78:	2109      	movs	r1, #9
 8007e7a:	68a0      	ldr	r0, [r4, #8]
 8007e7c:	f7ff ff7c 	bl	8007d78 <std>
 8007e80:	2202      	movs	r2, #2
 8007e82:	2112      	movs	r1, #18
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	f7ff ff77 	bl	8007d78 <std>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61a3      	str	r3, [r4, #24]
 8007e8e:	e7d1      	b.n	8007e34 <__sinit+0xc>
 8007e90:	080082d0 	.word	0x080082d0
 8007e94:	08007dc1 	.word	0x08007dc1

08007e98 <__sfp>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	f7ff ffac 	bl	8007df8 <__sfp_lock_acquire>
 8007ea0:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <__sfp+0x84>)
 8007ea2:	681e      	ldr	r6, [r3, #0]
 8007ea4:	69b3      	ldr	r3, [r6, #24]
 8007ea6:	b913      	cbnz	r3, 8007eae <__sfp+0x16>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ffbd 	bl	8007e28 <__sinit>
 8007eae:	3648      	adds	r6, #72	; 0x48
 8007eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	d503      	bpl.n	8007ec0 <__sfp+0x28>
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	b30b      	cbz	r3, 8007f00 <__sfp+0x68>
 8007ebc:	6836      	ldr	r6, [r6, #0]
 8007ebe:	e7f7      	b.n	8007eb0 <__sfp+0x18>
 8007ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec4:	b9d5      	cbnz	r5, 8007efc <__sfp+0x64>
 8007ec6:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <__sfp+0x88>)
 8007ec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ecc:	60e3      	str	r3, [r4, #12]
 8007ece:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed0:	f000 f847 	bl	8007f62 <__retarget_lock_init_recursive>
 8007ed4:	f7ff ff96 	bl	8007e04 <__sfp_lock_release>
 8007ed8:	2208      	movs	r2, #8
 8007eda:	4629      	mov	r1, r5
 8007edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ee4:	6025      	str	r5, [r4, #0]
 8007ee6:	61a5      	str	r5, [r4, #24]
 8007ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eec:	f7fb fd98 	bl	8003a20 <memset>
 8007ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efc:	3468      	adds	r4, #104	; 0x68
 8007efe:	e7d9      	b.n	8007eb4 <__sfp+0x1c>
 8007f00:	2104      	movs	r1, #4
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ff62 	bl	8007dcc <__sfmoreglue>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	6030      	str	r0, [r6, #0]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d1d5      	bne.n	8007ebc <__sfp+0x24>
 8007f10:	f7ff ff78 	bl	8007e04 <__sfp_lock_release>
 8007f14:	230c      	movs	r3, #12
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	e7ee      	b.n	8007ef8 <__sfp+0x60>
 8007f1a:	bf00      	nop
 8007f1c:	080082d0 	.word	0x080082d0
 8007f20:	ffff0001 	.word	0xffff0001

08007f24 <_fwalk_reent>:
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f28:	4606      	mov	r6, r0
 8007f2a:	4688      	mov	r8, r1
 8007f2c:	2700      	movs	r7, #0
 8007f2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f36:	f1b9 0901 	subs.w	r9, r9, #1
 8007f3a:	d505      	bpl.n	8007f48 <_fwalk_reent+0x24>
 8007f3c:	6824      	ldr	r4, [r4, #0]
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	d1f7      	bne.n	8007f32 <_fwalk_reent+0xe>
 8007f42:	4638      	mov	r0, r7
 8007f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f48:	89ab      	ldrh	r3, [r5, #12]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d907      	bls.n	8007f5e <_fwalk_reent+0x3a>
 8007f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f52:	3301      	adds	r3, #1
 8007f54:	d003      	beq.n	8007f5e <_fwalk_reent+0x3a>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	47c0      	blx	r8
 8007f5c:	4307      	orrs	r7, r0
 8007f5e:	3568      	adds	r5, #104	; 0x68
 8007f60:	e7e9      	b.n	8007f36 <_fwalk_reent+0x12>

08007f62 <__retarget_lock_init_recursive>:
 8007f62:	4770      	bx	lr

08007f64 <__retarget_lock_acquire_recursive>:
 8007f64:	4770      	bx	lr

08007f66 <__retarget_lock_release_recursive>:
 8007f66:	4770      	bx	lr

08007f68 <__swhatbuf_r>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	460e      	mov	r6, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	4614      	mov	r4, r2
 8007f72:	2900      	cmp	r1, #0
 8007f74:	461d      	mov	r5, r3
 8007f76:	b096      	sub	sp, #88	; 0x58
 8007f78:	da07      	bge.n	8007f8a <__swhatbuf_r+0x22>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	89b3      	ldrh	r3, [r6, #12]
 8007f80:	061a      	lsls	r2, r3, #24
 8007f82:	d410      	bmi.n	8007fa6 <__swhatbuf_r+0x3e>
 8007f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f88:	e00e      	b.n	8007fa8 <__swhatbuf_r+0x40>
 8007f8a:	466a      	mov	r2, sp
 8007f8c:	f000 f902 	bl	8008194 <_fstat_r>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	dbf2      	blt.n	8007f7a <__swhatbuf_r+0x12>
 8007f94:	9a01      	ldr	r2, [sp, #4]
 8007f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f9e:	425a      	negs	r2, r3
 8007fa0:	415a      	adcs	r2, r3
 8007fa2:	602a      	str	r2, [r5, #0]
 8007fa4:	e7ee      	b.n	8007f84 <__swhatbuf_r+0x1c>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	2000      	movs	r0, #0
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	b016      	add	sp, #88	; 0x58
 8007fae:	bd70      	pop	{r4, r5, r6, pc}

08007fb0 <__smakebuf_r>:
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb4:	079d      	lsls	r5, r3, #30
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	d507      	bpl.n	8007fcc <__smakebuf_r+0x1c>
 8007fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	466a      	mov	r2, sp
 8007fce:	ab01      	add	r3, sp, #4
 8007fd0:	f7ff ffca 	bl	8007f68 <__swhatbuf_r>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7ff f983 	bl	80072e4 <_malloc_r>
 8007fde:	b948      	cbnz	r0, 8007ff4 <__smakebuf_r+0x44>
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d4ef      	bmi.n	8007fc8 <__smakebuf_r+0x18>
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	f043 0302 	orr.w	r3, r3, #2
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	e7e3      	b.n	8007fbc <__smakebuf_r+0xc>
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <__smakebuf_r+0x7c>)
 8007ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	6120      	str	r0, [r4, #16]
 8008006:	6163      	str	r3, [r4, #20]
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x74>
 800800c:	4630      	mov	r0, r6
 800800e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008012:	f000 f8d1 	bl	80081b8 <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x74>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a0      	ldrh	r0, [r4, #12]
 8008026:	4305      	orrs	r5, r0
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cd      	b.n	8007fc8 <__smakebuf_r+0x18>
 800802c:	08007dc1 	.word	0x08007dc1

08008030 <_malloc_usable_size_r>:
 8008030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008034:	1f18      	subs	r0, r3, #4
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfbc      	itt	lt
 800803a:	580b      	ldrlt	r3, [r1, r0]
 800803c:	18c0      	addlt	r0, r0, r3
 800803e:	4770      	bx	lr

08008040 <_raise_r>:
 8008040:	291f      	cmp	r1, #31
 8008042:	b538      	push	{r3, r4, r5, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	d904      	bls.n	8008054 <_raise_r+0x14>
 800804a:	2316      	movs	r3, #22
 800804c:	6003      	str	r3, [r0, #0]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008056:	b112      	cbz	r2, 800805e <_raise_r+0x1e>
 8008058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800805c:	b94b      	cbnz	r3, 8008072 <_raise_r+0x32>
 800805e:	4620      	mov	r0, r4
 8008060:	f000 f830 	bl	80080c4 <_getpid_r>
 8008064:	462a      	mov	r2, r5
 8008066:	4601      	mov	r1, r0
 8008068:	4620      	mov	r0, r4
 800806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800806e:	f000 b817 	b.w	80080a0 <_kill_r>
 8008072:	2b01      	cmp	r3, #1
 8008074:	d00a      	beq.n	800808c <_raise_r+0x4c>
 8008076:	1c59      	adds	r1, r3, #1
 8008078:	d103      	bne.n	8008082 <_raise_r+0x42>
 800807a:	2316      	movs	r3, #22
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	2001      	movs	r0, #1
 8008080:	e7e7      	b.n	8008052 <_raise_r+0x12>
 8008082:	2400      	movs	r4, #0
 8008084:	4628      	mov	r0, r5
 8008086:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800808a:	4798      	blx	r3
 800808c:	2000      	movs	r0, #0
 800808e:	e7e0      	b.n	8008052 <_raise_r+0x12>

08008090 <raise>:
 8008090:	4b02      	ldr	r3, [pc, #8]	; (800809c <raise+0xc>)
 8008092:	4601      	mov	r1, r0
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f7ff bfd3 	b.w	8008040 <_raise_r>
 800809a:	bf00      	nop
 800809c:	20000020 	.word	0x20000020

080080a0 <_kill_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	2300      	movs	r3, #0
 80080a4:	4d06      	ldr	r5, [pc, #24]	; (80080c0 <_kill_r+0x20>)
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	4611      	mov	r1, r2
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	f7fb fc0d 	bl	80038cc <_kill>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d102      	bne.n	80080bc <_kill_r+0x1c>
 80080b6:	682b      	ldr	r3, [r5, #0]
 80080b8:	b103      	cbz	r3, 80080bc <_kill_r+0x1c>
 80080ba:	6023      	str	r3, [r4, #0]
 80080bc:	bd38      	pop	{r3, r4, r5, pc}
 80080be:	bf00      	nop
 80080c0:	20003440 	.word	0x20003440

080080c4 <_getpid_r>:
 80080c4:	f7fb bc00 	b.w	80038c8 <_getpid>

080080c8 <__sread>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	f000 f894 	bl	80081fc <_read_r>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	bfab      	itete	ge
 80080d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080da:	89a3      	ldrhlt	r3, [r4, #12]
 80080dc:	181b      	addge	r3, r3, r0
 80080de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080e2:	bfac      	ite	ge
 80080e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080e6:	81a3      	strhlt	r3, [r4, #12]
 80080e8:	bd10      	pop	{r4, pc}

080080ea <__swrite>:
 80080ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	461f      	mov	r7, r3
 80080f0:	898b      	ldrh	r3, [r1, #12]
 80080f2:	4605      	mov	r5, r0
 80080f4:	05db      	lsls	r3, r3, #23
 80080f6:	460c      	mov	r4, r1
 80080f8:	4616      	mov	r6, r2
 80080fa:	d505      	bpl.n	8008108 <__swrite+0x1e>
 80080fc:	2302      	movs	r3, #2
 80080fe:	2200      	movs	r2, #0
 8008100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008104:	f000 f868 	bl	80081d8 <_lseek_r>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	4632      	mov	r2, r6
 800810c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008110:	81a3      	strh	r3, [r4, #12]
 8008112:	4628      	mov	r0, r5
 8008114:	463b      	mov	r3, r7
 8008116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	f000 b817 	b.w	8008150 <_write_r>

08008122 <__sseek>:
 8008122:	b510      	push	{r4, lr}
 8008124:	460c      	mov	r4, r1
 8008126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812a:	f000 f855 	bl	80081d8 <_lseek_r>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	bf15      	itete	ne
 8008134:	6560      	strne	r0, [r4, #84]	; 0x54
 8008136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800813a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800813e:	81a3      	strheq	r3, [r4, #12]
 8008140:	bf18      	it	ne
 8008142:	81a3      	strhne	r3, [r4, #12]
 8008144:	bd10      	pop	{r4, pc}

08008146 <__sclose>:
 8008146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814a:	f000 b813 	b.w	8008174 <_close_r>
	...

08008150 <_write_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
 8008158:	2200      	movs	r2, #0
 800815a:	4d05      	ldr	r5, [pc, #20]	; (8008170 <_write_r+0x20>)
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7fb fbcf 	bl	8003902 <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_write_r+0x1e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_write_r+0x1e>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20003440 	.word	0x20003440

08008174 <_close_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4d05      	ldr	r5, [pc, #20]	; (8008190 <_close_r+0x1c>)
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7fb fbe6 	bl	8003950 <_close>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_close_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_close_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20003440 	.word	0x20003440

08008194 <_fstat_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	2300      	movs	r3, #0
 8008198:	4d06      	ldr	r5, [pc, #24]	; (80081b4 <_fstat_r+0x20>)
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	f7fb fbd8 	bl	8003956 <_fstat>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d102      	bne.n	80081b0 <_fstat_r+0x1c>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	b103      	cbz	r3, 80081b0 <_fstat_r+0x1c>
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	20003440 	.word	0x20003440

080081b8 <_isatty_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	2300      	movs	r3, #0
 80081bc:	4d05      	ldr	r5, [pc, #20]	; (80081d4 <_isatty_r+0x1c>)
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7fb fbcc 	bl	8003960 <_isatty>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_isatty_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_isatty_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20003440 	.word	0x20003440

080081d8 <_lseek_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	4d05      	ldr	r5, [pc, #20]	; (80081f8 <_lseek_r+0x20>)
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7fb fbbc 	bl	8003964 <_lseek>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_lseek_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_lseek_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20003440 	.word	0x20003440

080081fc <_read_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	2200      	movs	r2, #0
 8008206:	4d05      	ldr	r5, [pc, #20]	; (800821c <_read_r+0x20>)
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f7fb fb6c 	bl	80038e8 <_read>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_read_r+0x1e>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_read_r+0x1e>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20003440 	.word	0x20003440

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	bf00      	nop
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	bf00      	nop
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
