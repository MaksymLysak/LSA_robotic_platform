
LASET_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000939c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  080094b0  080094b0  000194b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb8  08009bb8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009bb8  08009bb8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bb8  08009bb8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003258  200001f4  08009db4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000344c  08009db4  0002344c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124a5  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1a  00000000  00000000  000326c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000822c  00000000  00000000  000353dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0003d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001120  00000000  00000000  0003e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053ec  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f120  00000000  00000000  0004474c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f8ce  00000000  00000000  0005386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b313a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a0  00000000  00000000  000b3190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009494 	.word	0x08009494

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08009494 	.word	0x08009494

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	460c      	mov	r4, r1
 80011a0:	4605      	mov	r5, r0
 80011a2:	4621      	mov	r1, r4
 80011a4:	4628      	mov	r0, r5
 80011a6:	2200      	movs	r2, #0
 80011a8:	2300      	movs	r3, #0
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001210:	f000 fe12 	bl	8001e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <pvPortMalloc+0x9c>)
 8001216:	6898      	ldr	r0, [r3, #8]
 8001218:	b970      	cbnz	r0, 8001238 <pvPortMalloc+0x2c>
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
	xEnd.pxNextFreeBlock = NULL;
 800121a:	4619      	mov	r1, r3
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800121c:	f642 75f8 	movw	r5, #12280	; 0x2ff8
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <pvPortMalloc+0xa0>)
	xEnd.pxNextFreeBlock = NULL;
 8001222:	f841 0f0c 	str.w	r0, [r1, #12]!
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001226:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800122a:	e9c3 2000 	strd	r2, r0, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800122e:	e9c2 1500 	strd	r1, r5, [r2]
			xHeapHasBeenInitialised = pdTRUE;
 8001232:	2201      	movs	r2, #1
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001234:	611d      	str	r5, [r3, #16]
			xHeapHasBeenInitialised = pdTRUE;
 8001236:	609a      	str	r2, [r3, #8]
		if( xWantedSize > 0 )
 8001238:	b12c      	cbz	r4, 8001246 <pvPortMalloc+0x3a>
			xWantedSize += heapSTRUCT_SIZE;
 800123a:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800123c:	0762      	lsls	r2, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800123e:	bf1c      	itt	ne
 8001240:	f024 0407 	bicne.w	r4, r4, #7
 8001244:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8001246:	f642 72f6 	movw	r2, #12278	; 0x2ff6
 800124a:	1e61      	subs	r1, r4, #1
 800124c:	4291      	cmp	r1, r2
 800124e:	d829      	bhi.n	80012a4 <pvPortMalloc+0x98>
			pxBlock = xStart.pxNextFreeBlock;
 8001250:	681b      	ldr	r3, [r3, #0]
			pxPreviousBlock = &xStart;
 8001252:	4815      	ldr	r0, [pc, #84]	; (80012a8 <pvPortMalloc+0x9c>)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	42a1      	cmp	r1, r4
 8001258:	d201      	bcs.n	800125e <pvPortMalloc+0x52>
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	b9fa      	cbnz	r2, 800129e <pvPortMalloc+0x92>
			if( pxBlock != &xEnd )
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <pvPortMalloc+0xa4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d01f      	beq.n	80012a4 <pvPortMalloc+0x98>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8001264:	6805      	ldr	r5, [r0, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001266:	681e      	ldr	r6, [r3, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001268:	1b09      	subs	r1, r1, r4
 800126a:	2910      	cmp	r1, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800126c:	f105 0508 	add.w	r5, r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001270:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001272:	d90b      	bls.n	800128c <pvPortMalloc+0x80>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001274:	1918      	adds	r0, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001276:	6041      	str	r1, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001278:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800127a:	6844      	ldr	r4, [r0, #4]
 800127c:	3a0c      	subs	r2, #12
 800127e:	4611      	mov	r1, r2
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	6856      	ldr	r6, [r2, #4]
 8001284:	42a6      	cmp	r6, r4
 8001286:	d3fa      	bcc.n	800127e <pvPortMalloc+0x72>
 8001288:	6002      	str	r2, [r0, #0]
 800128a:	6008      	str	r0, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800128c:	4909      	ldr	r1, [pc, #36]	; (80012b4 <pvPortMalloc+0xa8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	680a      	ldr	r2, [r1, #0]
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
 8001296:	f000 fe6b 	bl	8001f70 <xTaskResumeAll>
}
 800129a:	4628      	mov	r0, r5
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	4618      	mov	r0, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	e7d7      	b.n	8001254 <pvPortMalloc+0x48>
void *pvReturn = NULL;
 80012a4:	2500      	movs	r5, #0
 80012a6:	e7f6      	b.n	8001296 <pvPortMalloc+0x8a>
 80012a8:	20000210 	.word	0x20000210
 80012ac:	2000022c 	.word	0x2000022c
 80012b0:	2000021c 	.word	0x2000021c
 80012b4:	20000000 	.word	0x20000000

080012b8 <vPortFree>:
{
 80012b8:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80012ba:	4604      	mov	r4, r0
 80012bc:	b1b0      	cbz	r0, 80012ec <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
 80012be:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
 80012c2:	f000 fdb9 	bl	8001e38 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <vPortFree+0x38>)
 80012cc:	461a      	mov	r2, r3
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6858      	ldr	r0, [r3, #4]
 80012d2:	4288      	cmp	r0, r1
 80012d4:	d3fa      	bcc.n	80012cc <vPortFree+0x14>
 80012d6:	f844 3c08 	str.w	r3, [r4, #-8]
 80012da:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <vPortFree+0x3c>)
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
 80012e8:	f000 be42 	b.w	8001f70 <xTaskResumeAll>
}
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	bf00      	nop
 80012f0:	20000210 	.word	0x20000210
 80012f4:	20000000 	.word	0x20000000

080012f8 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012fc:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001300:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001304:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001306:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800130c:	4770      	bx	lr

0800130e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800130e:	2300      	movs	r3, #0
 8001310:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001312:	4770      	bx	lr

08001314 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001314:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001316:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001318:	1c63      	adds	r3, r4, #1
 800131a:	d10a      	bne.n	8001332 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800131c:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001322:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001324:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8001326:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8001328:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 800132a:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 800132c:	3301      	adds	r3, #1
 800132e:	6003      	str	r3, [r0, #0]
}
 8001330:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001332:	f100 0208 	add.w	r2, r0, #8
 8001336:	4613      	mov	r3, r2
 8001338:	6852      	ldr	r2, [r2, #4]
 800133a:	6815      	ldr	r5, [r2, #0]
 800133c:	42a5      	cmp	r5, r4
 800133e:	d9fa      	bls.n	8001336 <vListInsert+0x22>
 8001340:	e7ed      	b.n	800131e <vListInsert+0xa>

08001342 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001342:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001344:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8001348:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800134a:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800134c:	6859      	ldr	r1, [r3, #4]
 800134e:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001350:	bf08      	it	eq
 8001352:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001354:	2200      	movs	r2, #0
 8001356:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	3a01      	subs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800135e:	6818      	ldr	r0, [r3, #0]
}
 8001360:	4770      	bx	lr

08001362 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8001362:	2300      	movs	r3, #0
{
 8001364:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8001366:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001368:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0fc      	beq.n	8001378 <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800137e:	b002      	add	sp, #8
 8001380:	4770      	bx	lr
	...

08001384 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <prvPortStartFirstTask+0x1c>)
 8001386:	6800      	ldr	r0, [r0, #0]
 8001388:	6800      	ldr	r0, [r0, #0]
 800138a:	f380 8808 	msr	MSP, r0
 800138e:	b662      	cpsie	i
 8001390:	b661      	cpsie	f
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	df00      	svc	0
 800139c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800139e:	0000      	.short	0x0000
 80013a0:	e000ed08 	.word	0xe000ed08

080013a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80013a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013ae:	f021 0101 	bic.w	r1, r1, #1
 80013b2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013b6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80013ba:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80013be:	3840      	subs	r0, #64	; 0x40
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	08001363 	.word	0x08001363
	...

080013d0 <SVC_Handler>:
	__asm volatile (
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <pxCurrentTCBConst2>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	6808      	ldr	r0, [r1, #0]
 80013d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013da:	f380 8809 	msr	PSP, r0
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	f380 8811 	msr	BASEPRI, r0
 80013ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80013ee:	4770      	bx	lr

080013f0 <pxCurrentTCBConst2>:
 80013f0:	20003228 	.word	0x20003228

080013f4 <vPortEnterCritical>:
 80013f4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80013f8:	f383 8811 	msr	BASEPRI, r3
 80013fc:	f3bf 8f6f 	isb	sy
 8001400:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001404:	4a02      	ldr	r2, [pc, #8]	; (8001410 <vPortEnterCritical+0x1c>)
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000004 	.word	0x20000004

08001414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <vPortExitCritical+0x10>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	3b01      	subs	r3, #1
 800141a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800141c:	b90b      	cbnz	r3, 8001422 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800141e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001422:	4770      	bx	lr
 8001424:	20000004 	.word	0x20000004
	...

08001430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001430:	f3ef 8009 	mrs	r0, PSP
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <pxCurrentTCBConst>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001440:	6010      	str	r0, [r2, #0]
 8001442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001446:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800144a:	f380 8811 	msr	BASEPRI, r0
 800144e:	f000 fe2b 	bl	80020a8 <vTaskSwitchContext>
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f380 8811 	msr	BASEPRI, r0
 800145a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800145e:	6819      	ldr	r1, [r3, #0]
 8001460:	6808      	ldr	r0, [r1, #0]
 8001462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001466:	f380 8809 	msr	PSP, r0
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	4770      	bx	lr

08001470 <pxCurrentTCBConst>:
 8001470:	20003228 	.word	0x20003228

08001474 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001474:	b508      	push	{r3, lr}
	__asm volatile
 8001476:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001486:	f000 fce1 	bl	8001e4c <xTaskIncrementTick>
 800148a:	b118      	cbz	r0, 8001494 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800148c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <SysTick_Handler+0x28>)
 8001492:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001494:	2300      	movs	r3, #0
 8001496:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800149a:	bd08      	pop	{r3, pc}
 800149c:	e000ed04 	.word	0xe000ed04

080014a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014a0:	2200      	movs	r2, #0
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014a4:	4905      	ldr	r1, [pc, #20]	; (80014bc <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014a6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014a8:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <vPortSetupTimerInterrupt+0x20>)
 80014ac:	4905      	ldr	r1, [pc, #20]	; (80014c4 <vPortSetupTimerInterrupt+0x24>)
 80014ae:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010
 80014bc:	e000e018 	.word	0xe000e018
 80014c0:	e000e014 	.word	0xe000e014
 80014c4:	0001193f 	.word	0x0001193f

080014c8 <xPortStartScheduler>:
{
 80014c8:	b510      	push	{r4, lr}
	uxCriticalNesting = 0;
 80014ca:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <xPortStartScheduler+0x30>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 80014d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80014dc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80014de:	f7ff ffdf 	bl	80014a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <xPortStartScheduler+0x34>)
 80014e4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80014e6:	f7ff ff4d 	bl	8001384 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80014ea:	f000 fddd 	bl	80020a8 <vTaskSwitchContext>
	prvTaskExitError();
 80014ee:	f7ff ff38 	bl	8001362 <prvTaskExitError>
}
 80014f2:	4620      	mov	r0, r4
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	bf00      	nop
 80014f8:	e000ed20 	.word	0xe000ed20
 80014fc:	20000004 	.word	0x20000004

08001500 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001500:	b510      	push	{r4, lr}
 8001502:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001504:	f7ff ff76 	bl	80013f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001508:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800150a:	f7ff ff83 	bl	8001414 <vPortExitCritical>

    return xReturn;
}
 800150e:	fab4 f084 	clz	r0, r4
 8001512:	0940      	lsrs	r0, r0, #5
 8001514:	bd10      	pop	{r4, pc}

08001516 <prvCopyDataToQueue>:
{
 8001516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001518:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800151a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800151c:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800151e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001520:	b952      	cbnz	r2, 8001538 <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001522:	6807      	ldr	r7, [r0, #0]
 8001524:	bb47      	cbnz	r7, 8001578 <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001526:	6880      	ldr	r0, [r0, #8]
 8001528:	f000 fed8 	bl	80022dc <xTaskPriorityDisinherit>
 800152c:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800152e:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001530:	3601      	adds	r6, #1
}
 8001532:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001534:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8001538:	b965      	cbnz	r5, 8001554 <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800153a:	6840      	ldr	r0, [r0, #4]
 800153c:	f002 fb5a 	bl	8003bf4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001540:	6863      	ldr	r3, [r4, #4]
 8001542:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001544:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001546:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001548:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800154a:	4293      	cmp	r3, r2
 800154c:	d3f0      	bcc.n	8001530 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	6063      	str	r3, [r4, #4]
 8001552:	e7ed      	b.n	8001530 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001554:	68c0      	ldr	r0, [r0, #12]
 8001556:	f002 fb4d 	bl	8003bf4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800155a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800155c:	68e3      	ldr	r3, [r4, #12]
 800155e:	4251      	negs	r1, r2
 8001560:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001562:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001564:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001566:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001568:	bf3e      	ittt	cc
 800156a:	68a3      	ldrcc	r3, [r4, #8]
 800156c:	185b      	addcc	r3, r3, r1
 800156e:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8001570:	2d02      	cmp	r5, #2
 8001572:	d101      	bne.n	8001578 <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001574:	b116      	cbz	r6, 800157c <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 8001576:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8001578:	2500      	movs	r5, #0
 800157a:	e7d9      	b.n	8001530 <prvCopyDataToQueue+0x1a>
 800157c:	4635      	mov	r5, r6
 800157e:	e7d7      	b.n	8001530 <prvCopyDataToQueue+0x1a>

08001580 <prvCopyDataFromQueue>:
{
 8001580:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001584:	4608      	mov	r0, r1
 8001586:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001588:	b162      	cbz	r2, 80015a4 <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800158a:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800158c:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800158e:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001590:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001592:	bf28      	it	cs
 8001594:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001596:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001598:	bf28      	it	cs
 800159a:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800159c:	68d9      	ldr	r1, [r3, #12]
}
 800159e:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015a0:	f002 bb28 	b.w	8003bf4 <memcpy>
}
 80015a4:	bc10      	pop	{r4}
 80015a6:	4770      	bx	lr

080015a8 <prvUnlockQueue>:
{
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80015ac:	f7ff ff22 	bl	80013f4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80015b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015b4:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 80015b8:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80015ba:	2d00      	cmp	r5, #0
 80015bc:	dc14      	bgt.n	80015e8 <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 80015c4:	f7ff ff26 	bl	8001414 <vPortExitCritical>
    taskENTER_CRITICAL();
 80015c8:	f7ff ff14 	bl	80013f4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80015cc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015d0:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 80015d4:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80015d6:	2d00      	cmp	r5, #0
 80015d8:	dc12      	bgt.n	8001600 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 80015da:	23ff      	movs	r3, #255	; 0xff
 80015dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80015e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80015e4:	f7ff bf16 	b.w	8001414 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0e7      	beq.n	80015be <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015ee:	4630      	mov	r0, r6
 80015f0:	f000 fd92 	bl	8002118 <xTaskRemoveFromEventList>
 80015f4:	b108      	cbz	r0, 80015fa <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 80015f6:	f000 fe19 	bl	800222c <vTaskMissedYield>
            --cTxLock;
 80015fa:	3d01      	subs	r5, #1
 80015fc:	b26d      	sxtb	r5, r5
 80015fe:	e7dc      	b.n	80015ba <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001600:	6923      	ldr	r3, [r4, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0e9      	beq.n	80015da <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001606:	4630      	mov	r0, r6
 8001608:	f000 fd86 	bl	8002118 <xTaskRemoveFromEventList>
 800160c:	b108      	cbz	r0, 8001612 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 800160e:	f000 fe0d 	bl	800222c <vTaskMissedYield>
                --cRxLock;
 8001612:	3d01      	subs	r5, #1
 8001614:	b26d      	sxtb	r5, r5
 8001616:	e7de      	b.n	80015d6 <prvUnlockQueue+0x2e>

08001618 <xQueueGenericReset>:
{
 8001618:	b570      	push	{r4, r5, r6, lr}
 800161a:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 800161c:	4604      	mov	r4, r0
 800161e:	b310      	cbz	r0, 8001666 <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 8001620:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001622:	b300      	cbz	r0, 8001666 <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001624:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001626:	fba5 3500 	umull	r3, r5, r5, r0
 800162a:	b9dd      	cbnz	r5, 8001664 <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 800162c:	f7ff fee2 	bl	80013f4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001630:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8001634:	434b      	muls	r3, r1
 8001636:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001638:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800163a:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800163c:	1a5b      	subs	r3, r3, r1
 800163e:	4413      	add	r3, r2
 8001640:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001642:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001644:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8001646:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800164a:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 800164c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8001650:	b156      	cbz	r6, 8001668 <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001652:	f104 0010 	add.w	r0, r4, #16
 8001656:	f7ff fe4f 	bl	80012f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800165a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800165e:	f7ff fe4b 	bl	80012f8 <vListInitialise>
 8001662:	e010      	b.n	8001686 <xQueueGenericReset+0x6e>
        xReturn = pdFAIL;
 8001664:	2000      	movs	r0, #0
}
 8001666:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001668:	6923      	ldr	r3, [r4, #16]
 800166a:	b163      	cbz	r3, 8001686 <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800166c:	f104 0010 	add.w	r0, r4, #16
 8001670:	f000 fd52 	bl	8002118 <xTaskRemoveFromEventList>
 8001674:	b138      	cbz	r0, 8001686 <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 8001676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <xQueueGenericReset+0x78>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f3bf 8f4f 	dsb	sy
 8001682:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8001686:	f7ff fec5 	bl	8001414 <vPortExitCritical>
 800168a:	2001      	movs	r0, #1
 800168c:	e7eb      	b.n	8001666 <xQueueGenericReset+0x4e>
 800168e:	bf00      	nop
 8001690:	e000ed04 	.word	0xe000ed04

08001694 <xQueueGenericCreate>:
    {
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	460d      	mov	r5, r1
 8001698:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800169a:	4606      	mov	r6, r0
 800169c:	b910      	cbnz	r0, 80016a4 <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 800169e:	2400      	movs	r4, #0
    }
 80016a0:	4620      	mov	r0, r4
 80016a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80016a4:	fba0 2301 	umull	r2, r3, r0, r1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f8      	bne.n	800169e <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80016ac:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80016ae:	f110 0f51 	cmn.w	r0, #81	; 0x51
 80016b2:	d8f4      	bhi.n	800169e <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80016b4:	3050      	adds	r0, #80	; 0x50
 80016b6:	f7ff fda9 	bl	800120c <pvPortMalloc>
            if( pxNewQueue != NULL )
 80016ba:	4604      	mov	r4, r0
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0ee      	beq.n	800169e <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 80016c0:	b15d      	cbz	r5, 80016da <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016c6:	2101      	movs	r1, #1
 80016c8:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 80016ca:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 80016ce:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016d0:	f7ff ffa2 	bl	8001618 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80016d4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 80016d8:	e7e2      	b.n	80016a0 <xQueueGenericCreate+0xc>
 80016da:	4603      	mov	r3, r0
 80016dc:	e7f3      	b.n	80016c6 <xQueueGenericCreate+0x32>
	...

080016e0 <xQueueGenericSend>:
{
 80016e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80016e4:	f04f 0800 	mov.w	r8, #0
{
 80016e8:	4604      	mov	r4, r0
 80016ea:	460f      	mov	r7, r1
 80016ec:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 80016ee:	46c1      	mov	r9, r8
                    portYIELD_WITHIN_API();
 80016f0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80017e0 <xQueueGenericSend+0x100>
{
 80016f4:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 80016f6:	f7ff fe7d 	bl	80013f4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80016fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016fe:	429a      	cmp	r2, r3
 8001700:	d301      	bcc.n	8001706 <xQueueGenericSend+0x26>
 8001702:	2e02      	cmp	r6, #2
 8001704:	d119      	bne.n	800173a <xQueueGenericSend+0x5a>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001706:	4632      	mov	r2, r6
 8001708:	4639      	mov	r1, r7
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff03 	bl	8001516 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001712:	b11b      	cbz	r3, 800171c <xQueueGenericSend+0x3c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001714:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001718:	f000 fcfe 	bl	8002118 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 800171c:	b138      	cbz	r0, 800172e <xQueueGenericSend+0x4e>
                            queueYIELD_IF_USING_PREEMPTION();
 800171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <xQueueGenericSend+0x100>)
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 800172e:	f7ff fe71 	bl	8001414 <vPortExitCritical>
                return pdPASS;
 8001732:	2001      	movs	r0, #1
}
 8001734:	b004      	add	sp, #16
 8001736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 800173a:	9d01      	ldr	r5, [sp, #4]
 800173c:	b91d      	cbnz	r5, 8001746 <xQueueGenericSend+0x66>
                    taskEXIT_CRITICAL();
 800173e:	f7ff fe69 	bl	8001414 <vPortExitCritical>
            return errQUEUE_FULL;
 8001742:	2000      	movs	r0, #0
 8001744:	e7f6      	b.n	8001734 <xQueueGenericSend+0x54>
                else if( xEntryTimeSet == pdFALSE )
 8001746:	f1b8 0f00 	cmp.w	r8, #0
 800174a:	d102      	bne.n	8001752 <xQueueGenericSend+0x72>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800174c:	a802      	add	r0, sp, #8
 800174e:	f000 fd3d 	bl	80021cc <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001752:	f7ff fe5f 	bl	8001414 <vPortExitCritical>
        vTaskSuspendAll();
 8001756:	f000 fb6f 	bl	8001e38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800175a:	f7ff fe4b 	bl	80013f4 <vPortEnterCritical>
 800175e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	bf08      	it	eq
 8001766:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800176a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	bf08      	it	eq
 8001772:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8001776:	f7ff fe4d 	bl	8001414 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800177a:	a901      	add	r1, sp, #4
 800177c:	a802      	add	r0, sp, #8
 800177e:	f000 fd2f 	bl	80021e0 <xTaskCheckForTimeOut>
 8001782:	bb30      	cbnz	r0, 80017d2 <xQueueGenericSend+0xf2>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001784:	f7ff fe36 	bl	80013f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001788:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800178a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800178c:	429a      	cmp	r2, r3
 800178e:	d10f      	bne.n	80017b0 <xQueueGenericSend+0xd0>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8001790:	f7ff fe40 	bl	8001414 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001794:	9901      	ldr	r1, [sp, #4]
 8001796:	f104 0010 	add.w	r0, r4, #16
 800179a:	f000 fcad 	bl	80020f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ff02 	bl	80015a8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80017a4:	f000 fbe4 	bl	8001f70 <xTaskResumeAll>
 80017a8:	b150      	cbz	r0, 80017c0 <xQueueGenericSend+0xe0>
{
 80017aa:	f04f 0801 	mov.w	r8, #1
 80017ae:	e7a2      	b.n	80016f6 <xQueueGenericSend+0x16>
    taskEXIT_CRITICAL();
 80017b0:	f7ff fe30 	bl	8001414 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fef7 	bl	80015a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80017ba:	f000 fbd9 	bl	8001f70 <xTaskResumeAll>
 80017be:	e7f4      	b.n	80017aa <xQueueGenericSend+0xca>
                    portYIELD_WITHIN_API();
 80017c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017c4:	f8ca 3000 	str.w	r3, [sl]
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	f3bf 8f6f 	isb	sy
 80017d0:	e7eb      	b.n	80017aa <xQueueGenericSend+0xca>
            prvUnlockQueue( pxQueue );
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fee8 	bl	80015a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80017d8:	f000 fbca 	bl	8001f70 <xTaskResumeAll>
 80017dc:	e7b1      	b.n	8001742 <xQueueGenericSend+0x62>
 80017de:	bf00      	nop
 80017e0:	e000ed04 	.word	0xe000ed04

080017e4 <xQueueGenericSendFromISR>:
{
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	4617      	mov	r7, r2
 80017e8:	4604      	mov	r4, r0
 80017ea:	461a      	mov	r2, r3
	__asm volatile
 80017ec:	f3ef 8611 	mrs	r6, BASEPRI
 80017f0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001800:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001804:	4298      	cmp	r0, r3
 8001806:	d301      	bcc.n	800180c <xQueueGenericSendFromISR+0x28>
 8001808:	2a02      	cmp	r2, #2
 800180a:	d11e      	bne.n	800184a <xQueueGenericSendFromISR+0x66>
            const int8_t cTxLock = pxQueue->cTxLock;
 800180c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001810:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8001812:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001816:	f7ff fe7e 	bl	8001516 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 800181a:	1c6b      	adds	r3, r5, #1
 800181c:	d110      	bne.n	8001840 <xQueueGenericSendFromISR+0x5c>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800181e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001820:	b90b      	cbnz	r3, 8001826 <xQueueGenericSendFromISR+0x42>
            xReturn = pdPASS;
 8001822:	2001      	movs	r0, #1
 8001824:	e009      	b.n	800183a <xQueueGenericSendFromISR+0x56>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001826:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800182a:	f000 fc75 	bl	8002118 <xTaskRemoveFromEventList>
 800182e:	2800      	cmp	r0, #0
 8001830:	d0f7      	beq.n	8001822 <xQueueGenericSendFromISR+0x3e>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001832:	2f00      	cmp	r7, #0
 8001834:	d0f5      	beq.n	8001822 <xQueueGenericSendFromISR+0x3e>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001836:	2001      	movs	r0, #1
 8001838:	6038      	str	r0, [r7, #0]
	__asm volatile
 800183a:	f386 8811 	msr	BASEPRI, r6
}
 800183e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001840:	3501      	adds	r5, #1
 8001842:	b26d      	sxtb	r5, r5
 8001844:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001848:	e7eb      	b.n	8001822 <xQueueGenericSendFromISR+0x3e>
            xReturn = errQUEUE_FULL;
 800184a:	2000      	movs	r0, #0
 800184c:	e7f5      	b.n	800183a <xQueueGenericSendFromISR+0x56>
	...

08001850 <xQueueReceive>:
{
 8001850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8001854:	2700      	movs	r7, #0
{
 8001856:	4604      	mov	r4, r0
 8001858:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 800185a:	46b8      	mov	r8, r7
{
 800185c:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 800185e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800193c <xQueueReceive+0xec>
{
 8001862:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8001864:	f7ff fdc6 	bl	80013f4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001868:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800186a:	b1d5      	cbz	r5, 80018a2 <xQueueReceive+0x52>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800186c:	4631      	mov	r1, r6
 800186e:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001870:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001872:	f7ff fe85 	bl	8001580 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001876:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001878:	6923      	ldr	r3, [r4, #16]
 800187a:	b163      	cbz	r3, 8001896 <xQueueReceive+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800187c:	f104 0010 	add.w	r0, r4, #16
 8001880:	f000 fc4a 	bl	8002118 <xTaskRemoveFromEventList>
 8001884:	b138      	cbz	r0, 8001896 <xQueueReceive+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8001886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <xQueueReceive+0xec>)
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001896:	f7ff fdbd 	bl	8001414 <vPortExitCritical>
                return pdPASS;
 800189a:	2001      	movs	r0, #1
}
 800189c:	b005      	add	sp, #20
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 80018a2:	9d01      	ldr	r5, [sp, #4]
 80018a4:	b91d      	cbnz	r5, 80018ae <xQueueReceive+0x5e>
                    taskEXIT_CRITICAL();
 80018a6:	f7ff fdb5 	bl	8001414 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80018aa:	2000      	movs	r0, #0
 80018ac:	e7f6      	b.n	800189c <xQueueReceive+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 80018ae:	b917      	cbnz	r7, 80018b6 <xQueueReceive+0x66>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018b0:	a802      	add	r0, sp, #8
 80018b2:	f000 fc8b 	bl	80021cc <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 80018b6:	f7ff fdad 	bl	8001414 <vPortExitCritical>
        vTaskSuspendAll();
 80018ba:	f000 fabd 	bl	8001e38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018be:	f7ff fd99 	bl	80013f4 <vPortEnterCritical>
 80018c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80018c6:	2bff      	cmp	r3, #255	; 0xff
 80018c8:	bf08      	it	eq
 80018ca:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80018ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018d2:	2bff      	cmp	r3, #255	; 0xff
 80018d4:	bf08      	it	eq
 80018d6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80018da:	f7ff fd9b 	bl	8001414 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018de:	a901      	add	r1, sp, #4
 80018e0:	a802      	add	r0, sp, #8
 80018e2:	f000 fc7d 	bl	80021e0 <xTaskCheckForTimeOut>
 80018e6:	b9f0      	cbnz	r0, 8001926 <xQueueReceive+0xd6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff fe09 	bl	8001500 <prvIsQueueEmpty>
 80018ee:	b1a0      	cbz	r0, 800191a <xQueueReceive+0xca>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018f0:	9901      	ldr	r1, [sp, #4]
 80018f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018f6:	f000 fbff 	bl	80020f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff fe54 	bl	80015a8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001900:	f000 fb36 	bl	8001f70 <xTaskResumeAll>
 8001904:	b938      	cbnz	r0, 8001916 <xQueueReceive+0xc6>
                    portYIELD_WITHIN_API();
 8001906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800190a:	f8c9 3000 	str.w	r3, [r9]
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	f3bf 8f6f 	isb	sy
{
 8001916:	2701      	movs	r7, #1
 8001918:	e7a4      	b.n	8001864 <xQueueReceive+0x14>
                prvUnlockQueue( pxQueue );
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff fe44 	bl	80015a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001920:	f000 fb26 	bl	8001f70 <xTaskResumeAll>
 8001924:	e7f7      	b.n	8001916 <xQueueReceive+0xc6>
            prvUnlockQueue( pxQueue );
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff fe3e 	bl	80015a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800192c:	f000 fb20 	bl	8001f70 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff fde5 	bl	8001500 <prvIsQueueEmpty>
 8001936:	2800      	cmp	r0, #0
 8001938:	d0ed      	beq.n	8001916 <xQueueReceive+0xc6>
 800193a:	e7b6      	b.n	80018aa <xQueueReceive+0x5a>
 800193c:	e000ed04 	.word	0xe000ed04

08001940 <xQueueSemaphoreTake>:
{
 8001940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001944:	2500      	movs	r5, #0
{
 8001946:	4604      	mov	r4, r0
    BaseType_t xEntryTimeSet = pdFALSE;
 8001948:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 800194a:	462e      	mov	r6, r5
{
 800194c:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 800194e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001a64 <xQueueSemaphoreTake+0x124>
{
 8001952:	9101      	str	r1, [sp, #4]
        taskENTER_CRITICAL();
 8001954:	f7ff fd4e 	bl	80013f4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800195a:	b1e3      	cbz	r3, 8001996 <xQueueSemaphoreTake+0x56>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800195c:	3b01      	subs	r3, #1
 800195e:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	b913      	cbnz	r3, 800196a <xQueueSemaphoreTake+0x2a>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001964:	f000 fd38 	bl	80023d8 <pvTaskIncrementMutexHeldCount>
 8001968:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800196a:	6923      	ldr	r3, [r4, #16]
 800196c:	b163      	cbz	r3, 8001988 <xQueueSemaphoreTake+0x48>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800196e:	f104 0010 	add.w	r0, r4, #16
 8001972:	f000 fbd1 	bl	8002118 <xTaskRemoveFromEventList>
 8001976:	b138      	cbz	r0, 8001988 <xQueueSemaphoreTake+0x48>
                        queueYIELD_IF_USING_PREEMPTION();
 8001978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <xQueueSemaphoreTake+0x124>)
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001988:	f7ff fd44 	bl	8001414 <vPortExitCritical>
                return pdPASS;
 800198c:	2501      	movs	r5, #1
}
 800198e:	4628      	mov	r0, r5
 8001990:	b005      	add	sp, #20
 8001992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8001996:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800199a:	f1b8 0f00 	cmp.w	r8, #0
 800199e:	d103      	bne.n	80019a8 <xQueueSemaphoreTake+0x68>
                            taskEXIT_CRITICAL();
 80019a0:	f7ff fd38 	bl	8001414 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80019a4:	2500      	movs	r5, #0
 80019a6:	e7f2      	b.n	800198e <xQueueSemaphoreTake+0x4e>
                else if( xEntryTimeSet == pdFALSE )
 80019a8:	b917      	cbnz	r7, 80019b0 <xQueueSemaphoreTake+0x70>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80019aa:	a802      	add	r0, sp, #8
 80019ac:	f000 fc0e 	bl	80021cc <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 80019b0:	f7ff fd30 	bl	8001414 <vPortExitCritical>
        vTaskSuspendAll();
 80019b4:	f000 fa40 	bl	8001e38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80019b8:	f7ff fd1c 	bl	80013f4 <vPortEnterCritical>
 80019bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80019c0:	2bff      	cmp	r3, #255	; 0xff
 80019c2:	bf08      	it	eq
 80019c4:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 80019c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	bf08      	it	eq
 80019d0:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 80019d4:	f7ff fd1e 	bl	8001414 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019d8:	a901      	add	r1, sp, #4
 80019da:	a802      	add	r0, sp, #8
 80019dc:	f000 fc00 	bl	80021e0 <xTaskCheckForTimeOut>
 80019e0:	bb40      	cbnz	r0, 8001a34 <xQueueSemaphoreTake+0xf4>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff fd8c 	bl	8001500 <prvIsQueueEmpty>
 80019e8:	b1f0      	cbz	r0, 8001a28 <xQueueSemaphoreTake+0xe8>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	b93b      	cbnz	r3, 80019fe <xQueueSemaphoreTake+0xbe>
                            taskENTER_CRITICAL();
 80019ee:	f7ff fd01 	bl	80013f4 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80019f2:	68a0      	ldr	r0, [r4, #8]
 80019f4:	f000 fc22 	bl	800223c <xTaskPriorityInherit>
 80019f8:	4605      	mov	r5, r0
                            taskEXIT_CRITICAL();
 80019fa:	f7ff fd0b 	bl	8001414 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019fe:	9901      	ldr	r1, [sp, #4]
 8001a00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a04:	f000 fb78 	bl	80020f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fdcd 	bl	80015a8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001a0e:	f000 faaf 	bl	8001f70 <xTaskResumeAll>
 8001a12:	b938      	cbnz	r0, 8001a24 <xQueueSemaphoreTake+0xe4>
                    portYIELD_WITHIN_API();
 8001a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a18:	f8c9 3000 	str.w	r3, [r9]
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	f3bf 8f6f 	isb	sy
{
 8001a24:	2701      	movs	r7, #1
 8001a26:	e795      	b.n	8001954 <xQueueSemaphoreTake+0x14>
                prvUnlockQueue( pxQueue );
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff fdbd 	bl	80015a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001a2e:	f000 fa9f 	bl	8001f70 <xTaskResumeAll>
 8001a32:	e7f7      	b.n	8001a24 <xQueueSemaphoreTake+0xe4>
            prvUnlockQueue( pxQueue );
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fdb7 	bl	80015a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001a3a:	f000 fa99 	bl	8001f70 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff fd5e 	bl	8001500 <prvIsQueueEmpty>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d0ed      	beq.n	8001a24 <xQueueSemaphoreTake+0xe4>
                        if( xInheritanceOccurred != pdFALSE )
 8001a48:	2d00      	cmp	r5, #0
 8001a4a:	d0a0      	beq.n	800198e <xQueueSemaphoreTake+0x4e>
                            taskENTER_CRITICAL();
 8001a4c:	f7ff fcd2 	bl	80013f4 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a52:	b119      	cbz	r1, 8001a5c <xQueueSemaphoreTake+0x11c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	f1c1 010f 	rsb	r1, r1, #15
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001a5c:	68a0      	ldr	r0, [r4, #8]
 8001a5e:	f000 fc79 	bl	8002354 <vTaskPriorityDisinheritAfterTimeout>
 8001a62:	e79d      	b.n	80019a0 <xQueueSemaphoreTake+0x60>
 8001a64:	e000ed04 	.word	0xe000ed04

08001a68 <xQueuePeek>:
{
 8001a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8001a6c:	2700      	movs	r7, #0
{
 8001a6e:	4604      	mov	r4, r0
 8001a70:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 8001a72:	46b8      	mov	r8, r7
{
 8001a74:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 8001a76:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001b54 <xQueuePeek+0xec>
{
 8001a7a:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8001a7c:	f7ff fcba 	bl	80013f4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a82:	b1d3      	cbz	r3, 8001aba <xQueuePeek+0x52>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a84:	4631      	mov	r1, r6
 8001a86:	4620      	mov	r0, r4
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001a88:	68e5      	ldr	r5, [r4, #12]
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a8a:	f7ff fd79 	bl	8001580 <prvCopyDataFromQueue>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001a90:	60e5      	str	r5, [r4, #12]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a92:	b163      	cbz	r3, 8001aae <xQueuePeek+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a98:	f000 fb3e 	bl	8002118 <xTaskRemoveFromEventList>
 8001a9c:	b138      	cbz	r0, 8001aae <xQueuePeek+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <xQueuePeek+0xec>)
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f3bf 8f4f 	dsb	sy
 8001aaa:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8001aae:	f7ff fcb1 	bl	8001414 <vPortExitCritical>
                return pdPASS;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	b005      	add	sp, #20
 8001ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8001aba:	9d01      	ldr	r5, [sp, #4]
 8001abc:	b91d      	cbnz	r5, 8001ac6 <xQueuePeek+0x5e>
                    taskEXIT_CRITICAL();
 8001abe:	f7ff fca9 	bl	8001414 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e7f6      	b.n	8001ab4 <xQueuePeek+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 8001ac6:	b917      	cbnz	r7, 8001ace <xQueuePeek+0x66>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ac8:	a802      	add	r0, sp, #8
 8001aca:	f000 fb7f 	bl	80021cc <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8001ace:	f7ff fca1 	bl	8001414 <vPortExitCritical>
        vTaskSuspendAll();
 8001ad2:	f000 f9b1 	bl	8001e38 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001ad6:	f7ff fc8d 	bl	80013f4 <vPortEnterCritical>
 8001ada:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	bf08      	it	eq
 8001ae2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001ae6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	bf08      	it	eq
 8001aee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001af2:	f7ff fc8f 	bl	8001414 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001af6:	a901      	add	r1, sp, #4
 8001af8:	a802      	add	r0, sp, #8
 8001afa:	f000 fb71 	bl	80021e0 <xTaskCheckForTimeOut>
 8001afe:	b9f0      	cbnz	r0, 8001b3e <xQueuePeek+0xd6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff fcfd 	bl	8001500 <prvIsQueueEmpty>
 8001b06:	b1a0      	cbz	r0, 8001b32 <xQueuePeek+0xca>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b08:	9901      	ldr	r1, [sp, #4]
 8001b0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b0e:	f000 faf3 	bl	80020f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff fd48 	bl	80015a8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8001b18:	f000 fa2a 	bl	8001f70 <xTaskResumeAll>
 8001b1c:	b938      	cbnz	r0, 8001b2e <xQueuePeek+0xc6>
                    portYIELD_WITHIN_API();
 8001b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b22:	f8c9 3000 	str.w	r3, [r9]
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	f3bf 8f6f 	isb	sy
{
 8001b2e:	2701      	movs	r7, #1
 8001b30:	e7a4      	b.n	8001a7c <xQueuePeek+0x14>
                prvUnlockQueue( pxQueue );
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fd38 	bl	80015a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b38:	f000 fa1a 	bl	8001f70 <xTaskResumeAll>
 8001b3c:	e7f7      	b.n	8001b2e <xQueuePeek+0xc6>
            prvUnlockQueue( pxQueue );
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff fd32 	bl	80015a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001b44:	f000 fa14 	bl	8001f70 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fcd9 	bl	8001500 <prvIsQueueEmpty>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d0ed      	beq.n	8001b2e <xQueuePeek+0xc6>
 8001b52:	e7b6      	b.n	8001ac2 <xQueuePeek+0x5a>
 8001b54:	e000ed04 	.word	0xe000ed04

08001b58 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b5a:	4c1e      	ldr	r4, [pc, #120]	; (8001bd4 <prvAddCurrentTaskToDelayedList+0x7c>)
{
 8001b5c:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 8001b5e:	6825      	ldr	r5, [r4, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b60:	6860      	ldr	r0, [r4, #4]
{
 8001b62:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b64:	3004      	adds	r0, #4
 8001b66:	f7ff fbec 	bl	8001342 <uxListRemove>
 8001b6a:	b938      	cbnz	r0, 8001b7c <prvAddCurrentTaskToDelayedList+0x24>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b6c:	6862      	ldr	r2, [r4, #4]
 8001b6e:	68a3      	ldr	r3, [r4, #8]
 8001b70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b72:	2201      	movs	r2, #1
 8001b74:	408a      	lsls	r2, r1
 8001b76:	ea23 0302 	bic.w	r3, r3, r2
 8001b7a:	60a3      	str	r3, [r4, #8]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b7c:	1c73      	adds	r3, r6, #1
 8001b7e:	d114      	bne.n	8001baa <prvAddCurrentTaskToDelayedList+0x52>
 8001b80:	b19f      	cbz	r7, 8001baa <prvAddCurrentTaskToDelayedList+0x52>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b82:	6862      	ldr	r2, [r4, #4]
 8001b84:	6923      	ldr	r3, [r4, #16]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	6093      	str	r3, [r2, #8]
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	60d1      	str	r1, [r2, #12]
 8001b8e:	6862      	ldr	r2, [r4, #4]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	3204      	adds	r2, #4
 8001b94:	604a      	str	r2, [r1, #4]
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	3204      	adds	r2, #4
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	6863      	ldr	r3, [r4, #4]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <prvAddCurrentTaskToDelayedList+0x80>)
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	68e3      	ldr	r3, [r4, #12]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60e3      	str	r3, [r4, #12]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	19ad      	adds	r5, r5, r6
 8001bae:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001bb0:	d306      	bcc.n	8001bc0 <prvAddCurrentTaskToDelayedList+0x68>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb2:	6a20      	ldr	r0, [r4, #32]
 8001bb4:	6861      	ldr	r1, [r4, #4]
}
 8001bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bba:	3104      	adds	r1, #4
 8001bbc:	f7ff bbaa 	b.w	8001314 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bc2:	6861      	ldr	r1, [r4, #4]
 8001bc4:	3104      	adds	r1, #4
 8001bc6:	f7ff fba5 	bl	8001314 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001bca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bcc:	42ab      	cmp	r3, r5
                        xNextTaskUnblockTime = xTimeToWake;
 8001bce:	bf88      	it	hi
 8001bd0:	62a5      	strhi	r5, [r4, #40]	; 0x28
}
 8001bd2:	e7e9      	b.n	8001ba8 <prvAddCurrentTaskToDelayedList+0x50>
 8001bd4:	20003224 	.word	0x20003224
 8001bd8:	20003230 	.word	0x20003230

08001bdc <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <prvResetNextTaskUnblockTime+0x18>)
 8001bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	b91a      	cbnz	r2, 8001bec <prvResetNextTaskUnblockTime+0x10>
        xNextTaskUnblockTime = portMAX_DELAY;
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bea:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bee:	68d2      	ldr	r2, [r2, #12]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	e7f9      	b.n	8001be8 <prvResetNextTaskUnblockTime+0xc>
 8001bf4:	20003224 	.word	0x20003224

08001bf8 <prvIdleTask>:
{
 8001bf8:	b580      	push	{r7, lr}
                    taskYIELD();
 8001bfa:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bfe:	4c11      	ldr	r4, [pc, #68]	; (8001c44 <prvIdleTask+0x4c>)
                    taskYIELD();
 8001c00:	4e11      	ldr	r6, [pc, #68]	; (8001c48 <prvIdleTask+0x50>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c04:	b943      	cbnz	r3, 8001c18 <prvIdleTask+0x20>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d9fa      	bls.n	8001c02 <prvIdleTask+0xa>
                    taskYIELD();
 8001c0c:	6037      	str	r7, [r6, #0]
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	f3bf 8f6f 	isb	sy
 8001c16:	e7f4      	b.n	8001c02 <prvIdleTask+0xa>
                taskENTER_CRITICAL();
 8001c18:	f7ff fbec 	bl	80013f4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c1e:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c20:	1d28      	adds	r0, r5, #4
 8001c22:	f7ff fb8e 	bl	8001342 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	6423      	str	r3, [r4, #64]	; 0x40
                    --uxDeletedTasksWaitingCleanUp;
 8001c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6463      	str	r3, [r4, #68]	; 0x44
                taskEXIT_CRITICAL();
 8001c32:	f7ff fbef 	bl	8001414 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 8001c36:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c38:	f7ff fb3e 	bl	80012b8 <vPortFree>
                vPortFree( pxTCB );
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f7ff fb3b 	bl	80012b8 <vPortFree>
    }
 8001c42:	e7de      	b.n	8001c02 <prvIdleTask+0xa>
 8001c44:	20003224 	.word	0x20003224
 8001c48:	e000ed04 	.word	0xe000ed04

08001c4c <xTaskCreate>:
    {
 8001c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c50:	0096      	lsls	r6, r2, #2
    {
 8001c52:	4680      	mov	r8, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c54:	4630      	mov	r0, r6
    {
 8001c56:	460d      	mov	r5, r1
 8001c58:	4699      	mov	r9, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c5a:	f7ff fad7 	bl	800120c <pvPortMalloc>
                if( pxStack != NULL )
 8001c5e:	4607      	mov	r7, r0
 8001c60:	b198      	cbz	r0, 8001c8a <xTaskCreate+0x3e>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c62:	205c      	movs	r0, #92	; 0x5c
 8001c64:	f7ff fad2 	bl	800120c <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8001c68:	4604      	mov	r4, r0
 8001c6a:	b158      	cbz	r0, 8001c84 <xTaskCreate+0x38>
                        pxNewTCB->pxStack = pxStack;
 8001c6c:	6307      	str	r7, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c6e:	4632      	mov	r2, r6
 8001c70:	21a5      	movs	r1, #165	; 0xa5
 8001c72:	4638      	mov	r0, r7
 8001c74:	f001 ffcc 	bl	8003c10 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c78:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8001c7c:	b945      	cbnz	r5, 8001c90 <xTaskCreate+0x44>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c7e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8001c82:	e014      	b.n	8001cae <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 8001c84:	4638      	mov	r0, r7
 8001c86:	f7ff fb17 	bl	80012b8 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001c8e:	e093      	b.n	8001db8 <xTaskCreate+0x16c>
 8001c90:	1e6b      	subs	r3, r5, #1
 8001c92:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001c96:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001c9c:	f802 1b01 	strb.w	r1, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	b109      	cbz	r1, 8001ca8 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ca4:	42ab      	cmp	r3, r5
 8001ca6:	d1f7      	bne.n	8001c98 <xTaskCreate+0x4c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001cae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8001cb0:	f04f 0a00 	mov.w	sl, #0
 8001cb4:	2d0e      	cmp	r5, #14
 8001cb6:	bf28      	it	cs
 8001cb8:	250e      	movcs	r5, #14
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cba:	1d27      	adds	r7, r4, #4
 8001cbc:	4638      	mov	r0, r7
    pxNewTCB->uxPriority = uxPriority;
 8001cbe:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8001cc0:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8001cc2:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cc6:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cc8:	f7ff fb21 	bl	800130e <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ccc:	f1c5 050f 	rsb	r5, r5, #15
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cd0:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cd4:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cd6:	f7ff fb1a 	bl	800130e <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cda:	464a      	mov	r2, r9
 8001cdc:	4641      	mov	r1, r8
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cde:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce0:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ce2:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001ce4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001ce8:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cec:	f026 0007 	bic.w	r0, r6, #7
 8001cf0:	f7ff fb58 	bl	80013a4 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8001cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cf6:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8001cf8:	b103      	cbz	r3, 8001cfc <xTaskCreate+0xb0>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cfa:	601c      	str	r4, [r3, #0]
        uxCurrentNumberOfTasks++;
 8001cfc:	4d35      	ldr	r5, [pc, #212]	; (8001dd4 <xTaskCreate+0x188>)
    taskENTER_CRITICAL();
 8001cfe:	f7ff fb79 	bl	80013f4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8001d02:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001d04:	f105 0848 	add.w	r8, r5, #72	; 0x48
 8001d08:	3301      	adds	r3, #1
 8001d0a:	642b      	str	r3, [r5, #64]	; 0x40
        if( pxCurrentTCB == NULL )
 8001d0c:	686e      	ldr	r6, [r5, #4]
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d155      	bne.n	8001dbe <xTaskCreate+0x172>
            pxCurrentTCB = pxNewTCB;
 8001d12:	606c      	str	r4, [r5, #4]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d14:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d120      	bne.n	8001d5c <xTaskCreate+0x110>
 8001d1a:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d1c:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d1e:	3601      	adds	r6, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d20:	f7ff faea 	bl	80012f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d24:	2e0f      	cmp	r6, #15
 8001d26:	f109 0914 	add.w	r9, r9, #20
 8001d2a:	d1f7      	bne.n	8001d1c <xTaskCreate+0xd0>
    vListInitialise( &xDelayedTaskList1 );
 8001d2c:	4e2a      	ldr	r6, [pc, #168]	; (8001dd8 <xTaskCreate+0x18c>)
 8001d2e:	4630      	mov	r0, r6
    vListInitialise( &xDelayedTaskList2 );
 8001d30:	f106 0914 	add.w	r9, r6, #20
    vListInitialise( &xDelayedTaskList1 );
 8001d34:	f7ff fae0 	bl	80012f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f7ff fadd 	bl	80012f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d3e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8001d42:	f7ff fad9 	bl	80012f8 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8001d46:	f5a6 70a4 	sub.w	r0, r6, #328	; 0x148
 8001d4a:	f7ff fad5 	bl	80012f8 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8001d4e:	f5a6 70b4 	sub.w	r0, r6, #360	; 0x168
 8001d52:	f7ff fad1 	bl	80012f8 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d56:	626e      	str	r6, [r5, #36]	; 0x24
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d58:	f8c5 9020 	str.w	r9, [r5, #32]
        prvAddTaskToReadyList( pxNewTCB );
 8001d5c:	2601      	movs	r6, #1
        uxTaskNumber++;
 8001d5e:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 8001d62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        uxTaskNumber++;
 8001d64:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001d66:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8001d68:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
        prvAddTaskToReadyList( pxNewTCB );
 8001d6c:	68ab      	ldr	r3, [r5, #8]
 8001d6e:	fa06 f201 	lsl.w	r2, r6, r1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	2314      	movs	r3, #20
 8001d76:	434b      	muls	r3, r1
 8001d78:	18e8      	adds	r0, r5, r3
 8001d7a:	60aa      	str	r2, [r5, #8]
 8001d7c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001d7e:	4443      	add	r3, r8
 8001d80:	6891      	ldr	r1, [r2, #8]
 8001d82:	60a2      	str	r2, [r4, #8]
 8001d84:	60e1      	str	r1, [r4, #12]
 8001d86:	6891      	ldr	r1, [r2, #8]
 8001d88:	604f      	str	r7, [r1, #4]
 8001d8a:	6097      	str	r7, [r2, #8]
 8001d8c:	6163      	str	r3, [r4, #20]
 8001d8e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001d90:	4433      	add	r3, r6
 8001d92:	6483      	str	r3, [r0, #72]	; 0x48
    taskEXIT_CRITICAL();
 8001d94:	f7ff fb3e 	bl	8001414 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8001d98:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 8001d9c:	b163      	cbz	r3, 8001db8 <xTaskCreate+0x16c>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d9e:	686b      	ldr	r3, [r5, #4]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <xTaskCreate+0x16c>
            taskYIELD_IF_USING_PREEMPTION();
 8001da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <xTaskCreate+0x190>)
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	f3bf 8f6f 	isb	sy
    }
 8001db8:	4630      	mov	r0, r6
 8001dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8001dbe:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ca      	bne.n	8001d5c <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dc6:	686b      	ldr	r3, [r5, #4]
 8001dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8001dce:	bf28      	it	cs
 8001dd0:	606c      	strcs	r4, [r5, #4]
 8001dd2:	e7c3      	b.n	8001d5c <xTaskCreate+0x110>
 8001dd4:	20003224 	.word	0x20003224
 8001dd8:	20003398 	.word	0x20003398
 8001ddc:	e000ed04 	.word	0xe000ed04

08001de0 <vTaskStartScheduler>:
{
 8001de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
            xReturn = xTaskCreate( prvIdleTask,
 8001de2:	2500      	movs	r5, #0
 8001de4:	4c10      	ldr	r4, [pc, #64]	; (8001e28 <vTaskStartScheduler+0x48>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	490f      	ldr	r1, [pc, #60]	; (8001e2c <vTaskStartScheduler+0x4c>)
 8001df0:	462b      	mov	r3, r5
 8001df2:	480f      	ldr	r0, [pc, #60]	; (8001e30 <vTaskStartScheduler+0x50>)
 8001df4:	9500      	str	r5, [sp, #0]
 8001df6:	f7ff ff29 	bl	8001c4c <xTaskCreate>
    if( xReturn == pdPASS )
 8001dfa:	2801      	cmp	r0, #1
 8001dfc:	d10f      	bne.n	8001e1e <vTaskStartScheduler+0x3e>
	__asm volatile
 8001dfe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e12:	62a3      	str	r3, [r4, #40]	; 0x28
        xSchedulerRunning = pdTRUE;
 8001e14:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e18:	6025      	str	r5, [r4, #0]
        if( xPortStartScheduler() != pdFALSE )
 8001e1a:	f7ff fb55 	bl	80014c8 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <vTaskStartScheduler+0x54>)
 8001e20:	681b      	ldr	r3, [r3, #0]
}
 8001e22:	b003      	add	sp, #12
 8001e24:	bd30      	pop	{r4, r5, pc}
 8001e26:	bf00      	nop
 8001e28:	20003224 	.word	0x20003224
 8001e2c:	080094b0 	.word	0x080094b0
 8001e30:	08001bf9 	.word	0x08001bf9
 8001e34:	20000008 	.word	0x20000008

08001e38 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8001e38:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <vTaskSuspendAll+0x10>)
 8001e3a:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20003224 	.word	0x20003224

08001e4c <xTaskIncrementTick>:
{
 8001e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <xTaskIncrementTick+0x11c>)
 8001e52:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8001e56:	4619      	mov	r1, r3
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	d17e      	bne.n	8001f5a <xTaskIncrementTick+0x10e>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e5c:	681c      	ldr	r4, [r3, #0]
 8001e5e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8001e60:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e62:	b954      	cbnz	r4, 8001e7a <xTaskIncrementTick+0x2e>
            taskSWITCH_DELAYED_LISTS();
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	6a0a      	ldr	r2, [r1, #32]
 8001e68:	624a      	str	r2, [r1, #36]	; 0x24
 8001e6a:	620b      	str	r3, [r1, #32]
 8001e6c:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001e70:	3301      	adds	r3, #1
 8001e72:	f8c1 31c4 	str.w	r3, [r1, #452]	; 0x1c4
 8001e76:	f7ff feb1 	bl	8001bdc <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e7a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    BaseType_t xSwitchRequired = pdFALSE;
 8001e7c:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e7e:	429c      	cmp	r4, r3
 8001e80:	d20f      	bcs.n	8001ea2 <xTaskIncrementTick+0x56>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e82:	2214      	movs	r2, #20
 8001e84:	684b      	ldr	r3, [r1, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	fb02 1303 	mla	r3, r2, r3, r1
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    xSwitchRequired = pdTRUE;
 8001e8e:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 8001e90:	f8d1 31bc 	ldr.w	r3, [r1, #444]	; 0x1bc
                    xSwitchRequired = pdTRUE;
 8001e94:	bf28      	it	cs
 8001e96:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf18      	it	ne
 8001e9c:	2001      	movne	r0, #1
}
 8001e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    prvAddTaskToReadyList( pxTCB );
 8001ea2:	f04f 0801 	mov.w	r8, #1
 8001ea6:	f04f 0e14 	mov.w	lr, #20
 8001eaa:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001f6c <xTaskIncrementTick+0x120>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b91b      	cbnz	r3, 8001ebc <xTaskIncrementTick+0x70>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb8:	628b      	str	r3, [r1, #40]	; 0x28
                    break;
 8001eba:	e7e2      	b.n	8001e82 <xTaskIncrementTick+0x36>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ebc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ec2:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8001ec4:	4294      	cmp	r4, r2
 8001ec6:	d201      	bcs.n	8001ecc <xTaskIncrementTick+0x80>
                        xNextTaskUnblockTime = xItemValue;
 8001ec8:	628a      	str	r2, [r1, #40]	; 0x28
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001eca:	e7da      	b.n	8001e82 <xTaskIncrementTick+0x36>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ecc:	695f      	ldr	r7, [r3, #20]
 8001ece:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 8001ed2:	f8c2 9008 	str.w	r9, [r2, #8]
 8001ed6:	f8c9 2004 	str.w	r2, [r9, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	1d1d      	adds	r5, r3, #4
 8001ede:	42aa      	cmp	r2, r5
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	bf08      	it	eq
 8001ee6:	f8c7 9004 	streq.w	r9, [r7, #4]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	603a      	str	r2, [r7, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ef2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8001ef4:	b18f      	cbz	r7, 8001f1a <xTaskIncrementTick+0xce>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ef6:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 8001efa:	f8c9 2008 	str.w	r2, [r9, #8]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	687e      	ldr	r6, [r7, #4]
 8001f02:	f8c2 9004 	str.w	r9, [r2, #4]
 8001f06:	f103 0918 	add.w	r9, r3, #24
 8001f0a:	454e      	cmp	r6, r9
 8001f0c:	bf08      	it	eq
 8001f0e:	607a      	streq	r2, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	3a01      	subs	r2, #1
 8001f18:	603a      	str	r2, [r7, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001f1a:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
 8001f1e:	688f      	ldr	r7, [r1, #8]
 8001f20:	fa08 f20a 	lsl.w	r2, r8, sl
 8001f24:	433a      	orrs	r2, r7
 8001f26:	608a      	str	r2, [r1, #8]
 8001f28:	fb0e f20a 	mul.w	r2, lr, sl
 8001f2c:	eb01 0b02 	add.w	fp, r1, r2
 8001f30:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 8001f34:	4462      	add	r2, ip
 8001f36:	68be      	ldr	r6, [r7, #8]
 8001f38:	609f      	str	r7, [r3, #8]
 8001f3a:	60de      	str	r6, [r3, #12]
 8001f3c:	68be      	ldr	r6, [r7, #8]
 8001f3e:	6075      	str	r5, [r6, #4]
 8001f40:	60bd      	str	r5, [r7, #8]
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f4e:	684b      	ldr	r3, [r1, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8001f52:	459a      	cmp	sl, r3
 8001f54:	bf28      	it	cs
 8001f56:	2001      	movcs	r0, #1
 8001f58:	e7a9      	b.n	8001eae <xTaskIncrementTick+0x62>
        ++xPendedTicks;
 8001f5a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
    BaseType_t xSwitchRequired = pdFALSE;
 8001f5e:	2000      	movs	r0, #0
        ++xPendedTicks;
 8001f60:	3201      	adds	r2, #1
 8001f62:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    return xSwitchRequired;
 8001f66:	e79a      	b.n	8001e9e <xTaskIncrementTick+0x52>
 8001f68:	20003224 	.word	0x20003224
 8001f6c:	2000326c 	.word	0x2000326c

08001f70 <xTaskResumeAll>:
{
 8001f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        --uxSchedulerSuspended;
 8001f74:	4c3e      	ldr	r4, [pc, #248]	; (8002070 <xTaskResumeAll+0x100>)
    taskENTER_CRITICAL();
 8001f76:	f7ff fa3d 	bl	80013f4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8001f7a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f84:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8001f88:	b12b      	cbz	r3, 8001f96 <xTaskResumeAll+0x26>
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f8a:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001f8c:	f7ff fa42 	bl	8001414 <vPortExitCritical>
}
 8001f90:	4620      	mov	r0, r4
 8001f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d0f6      	beq.n	8001f8a <xTaskResumeAll+0x1a>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f9c:	469c      	mov	ip, r3
                    prvAddTaskToReadyList( pxTCB );
 8001f9e:	f04f 0a01 	mov.w	sl, #1
 8001fa2:	f04f 0e14 	mov.w	lr, #20
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fa6:	f8d4 61a8 	ldr.w	r6, [r4, #424]	; 0x1a8
                    prvAddTaskToReadyList( pxTCB );
 8001faa:	f104 0848 	add.w	r8, r4, #72	; 0x48
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fae:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8001fb2:	b9ea      	cbnz	r2, 8001ff0 <xTaskResumeAll+0x80>
                if( pxTCB != NULL )
 8001fb4:	b10b      	cbz	r3, 8001fba <xTaskResumeAll+0x4a>
                    prvResetNextTaskUnblockTime();
 8001fb6:	f7ff fe11 	bl	8001bdc <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fba:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001fbe:	b14d      	cbz	r5, 8001fd4 <xTaskResumeAll+0x64>
                                xYieldPending = pdTRUE;
 8001fc0:	2601      	movs	r6, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8001fc2:	f7ff ff43 	bl	8001e4c <xTaskIncrementTick>
 8001fc6:	b108      	cbz	r0, 8001fcc <xTaskResumeAll+0x5c>
                                xYieldPending = pdTRUE;
 8001fc8:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001fcc:	3d01      	subs	r5, #1
 8001fce:	d1f8      	bne.n	8001fc2 <xTaskResumeAll+0x52>
                        xPendedTicks = 0;
 8001fd0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
                if( xYieldPending != pdFALSE )
 8001fd4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0d6      	beq.n	8001f8a <xTaskResumeAll+0x1a>
                    taskYIELD_IF_USING_PREEMPTION();
 8001fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <xTaskResumeAll+0x104>)
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8001fec:	2401      	movs	r4, #1
 8001fee:	e7cd      	b.n	8001f8c <xTaskResumeAll+0x1c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff0:	68f3      	ldr	r3, [r6, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ff2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ff4:	e9d3 7007 	ldrd	r7, r0, [r3, #28]
 8001ff8:	60b8      	str	r0, [r7, #8]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ffc:	f103 0904 	add.w	r9, r3, #4
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002000:	6057      	str	r7, [r2, #4]
 8002002:	684a      	ldr	r2, [r1, #4]
 8002004:	f103 0718 	add.w	r7, r3, #24
 8002008:	42ba      	cmp	r2, r7
 800200a:	680a      	ldr	r2, [r1, #0]
 800200c:	bf08      	it	eq
 800200e:	6048      	streq	r0, [r1, #4]
 8002010:	3a01      	subs	r2, #1
 8002012:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8002016:	600a      	str	r2, [r1, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002018:	6959      	ldr	r1, [r3, #20]
 800201a:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	684a      	ldr	r2, [r1, #4]
 8002022:	68d8      	ldr	r0, [r3, #12]
 8002024:	454a      	cmp	r2, r9
 8002026:	680a      	ldr	r2, [r1, #0]
 8002028:	6047      	str	r7, [r0, #4]
 800202a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800202e:	bf08      	it	eq
 8002030:	6048      	streq	r0, [r1, #4]
 8002032:	600a      	str	r2, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002036:	68a0      	ldr	r0, [r4, #8]
 8002038:	fa0a f201 	lsl.w	r2, sl, r1
 800203c:	4302      	orrs	r2, r0
 800203e:	60a2      	str	r2, [r4, #8]
 8002040:	fb0e f201 	mul.w	r2, lr, r1
 8002044:	18a0      	adds	r0, r4, r2
 8002046:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8002048:	4442      	add	r2, r8
 800204a:	68bd      	ldr	r5, [r7, #8]
 800204c:	609f      	str	r7, [r3, #8]
 800204e:	60dd      	str	r5, [r3, #12]
 8002050:	68bd      	ldr	r5, [r7, #8]
 8002052:	f8c5 9004 	str.w	r9, [r5, #4]
 8002056:	f8c7 9008 	str.w	r9, [r7, #8]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800205e:	3201      	adds	r2, #1
 8002060:	6482      	str	r2, [r0, #72]	; 0x48
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002062:	6862      	ldr	r2, [r4, #4]
 8002064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002066:	4291      	cmp	r1, r2
                        xYieldPending = pdTRUE;
 8002068:	bf28      	it	cs
 800206a:	f8c4 a1bc 	strcs.w	sl, [r4, #444]	; 0x1bc
 800206e:	e79e      	b.n	8001fae <xTaskResumeAll+0x3e>
 8002070:	20003224 	.word	0x20003224
 8002074:	e000ed04 	.word	0xe000ed04

08002078 <vTaskDelay>:
    {
 8002078:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 800207a:	b940      	cbnz	r0, 800208e <vTaskDelay+0x16>
            portYIELD_WITHIN_API();
 800207c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <vTaskDelay+0x2c>)
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	f3bf 8f6f 	isb	sy
    }
 800208c:	bd08      	pop	{r3, pc}
            vTaskSuspendAll();
 800208e:	f7ff fed3 	bl	8001e38 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002092:	2100      	movs	r1, #0
 8002094:	f7ff fd60 	bl	8001b58 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8002098:	f7ff ff6a 	bl	8001f70 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 800209c:	2800      	cmp	r0, #0
 800209e:	d0ed      	beq.n	800207c <vTaskDelay+0x4>
 80020a0:	e7f4      	b.n	800208c <vTaskDelay+0x14>
 80020a2:	bf00      	nop
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <vTaskSwitchContext+0x4c>)
{
 80020aa:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020ac:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 80020b0:	461a      	mov	r2, r3
 80020b2:	b119      	cbz	r1, 80020bc <vTaskSwitchContext+0x14>
        xYieldPending = pdTRUE;
 80020b4:	2201      	movs	r2, #1
 80020b6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 80020ba:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 80020bc:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020c0:	689b      	ldr	r3, [r3, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	2014      	movs	r0, #20
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f1c3 031f 	rsb	r3, r3, #31
 80020ce:	fb00 f103 	mul.w	r1, r0, r3
 80020d2:	1854      	adds	r4, r2, r1
 80020d4:	4621      	mov	r1, r4
 80020d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80020d8:	3150      	adds	r1, #80	; 0x50
 80020da:	686d      	ldr	r5, [r5, #4]
 80020dc:	fb00 2303 	mla	r3, r0, r3, r2
 80020e0:	428d      	cmp	r5, r1
 80020e2:	bf08      	it	eq
 80020e4:	6869      	ldreq	r1, [r5, #4]
 80020e6:	64e5      	str	r5, [r4, #76]	; 0x4c
 80020e8:	bf08      	it	eq
 80020ea:	64e1      	streq	r1, [r4, #76]	; 0x4c
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	6053      	str	r3, [r2, #4]
}
 80020f2:	e7e2      	b.n	80020ba <vTaskSwitchContext+0x12>
 80020f4:	20003224 	.word	0x20003224

080020f8 <vTaskPlaceOnEventList>:
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <vTaskPlaceOnEventList+0x1c>)
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	3118      	adds	r1, #24
 8002102:	f7ff f907 	bl	8001314 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002106:	4620      	mov	r0, r4
}
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800210c:	2101      	movs	r1, #1
 800210e:	f7ff bd23 	b.w	8001b58 <prvAddCurrentTaskToDelayedList>
 8002112:	bf00      	nop
 8002114:	20003224 	.word	0x20003224

08002118 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002118:	68c3      	ldr	r3, [r0, #12]
{
 800211a:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800211c:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800211e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002120:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8002124:	6854      	ldr	r4, [r2, #4]
 8002126:	6081      	str	r1, [r0, #8]
 8002128:	6048      	str	r0, [r1, #4]
 800212a:	f103 0018 	add.w	r0, r3, #24
 800212e:	4284      	cmp	r4, r0
 8002130:	bf08      	it	eq
 8002132:	6051      	streq	r1, [r2, #4]
 8002134:	2100      	movs	r1, #0
 8002136:	6299      	str	r1, [r3, #40]	; 0x28
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800213c:	3901      	subs	r1, #1
 800213e:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <xTaskRemoveFromEventList+0xac>)
 8002142:	f8d2 11b8 	ldr.w	r1, [r2, #440]	; 0x1b8
 8002146:	2900      	cmp	r1, #0
 8002148:	d12b      	bne.n	80021a2 <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800214a:	e9d3 5002 	ldrd	r5, r0, [r3, #8]
 800214e:	6959      	ldr	r1, [r3, #20]
 8002150:	60a8      	str	r0, [r5, #8]
 8002152:	68d8      	ldr	r0, [r3, #12]
 8002154:	1d1e      	adds	r6, r3, #4
 8002156:	6045      	str	r5, [r0, #4]
 8002158:	684d      	ldr	r5, [r1, #4]
 800215a:	42b5      	cmp	r5, r6
 800215c:	bf08      	it	eq
 800215e:	6048      	streq	r0, [r1, #4]
 8002160:	6808      	ldr	r0, [r1, #0]
 8002162:	3801      	subs	r0, #1
 8002164:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002166:	2101      	movs	r1, #1
 8002168:	6890      	ldr	r0, [r2, #8]
 800216a:	40a1      	lsls	r1, r4
 800216c:	4301      	orrs	r1, r0
 800216e:	6091      	str	r1, [r2, #8]
 8002170:	2114      	movs	r1, #20
 8002172:	4361      	muls	r1, r4
 8002174:	1855      	adds	r5, r2, r1
 8002176:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8002178:	6887      	ldr	r7, [r0, #8]
 800217a:	6098      	str	r0, [r3, #8]
 800217c:	60df      	str	r7, [r3, #12]
 800217e:	6887      	ldr	r7, [r0, #8]
 8002180:	607e      	str	r6, [r7, #4]
 8002182:	6086      	str	r6, [r0, #8]
 8002184:	4810      	ldr	r0, [pc, #64]	; (80021c8 <xTaskRemoveFromEventList+0xb0>)
 8002186:	4401      	add	r1, r0
 8002188:	6159      	str	r1, [r3, #20]
 800218a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800218c:	3301      	adds	r3, #1
 800218e:	64ab      	str	r3, [r5, #72]	; 0x48
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002190:	6853      	ldr	r3, [r2, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	429c      	cmp	r4, r3
        xYieldPending = pdTRUE;
 8002196:	bf8a      	itet	hi
 8002198:	2001      	movhi	r0, #1
        xReturn = pdFALSE;
 800219a:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 800219c:	f8c2 01bc 	strhi.w	r0, [r2, #444]	; 0x1bc
}
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80021a2:	f8d2 11a0 	ldr.w	r1, [r2, #416]	; 0x1a0
 80021a6:	688d      	ldr	r5, [r1, #8]
 80021a8:	61d9      	str	r1, [r3, #28]
 80021aa:	621d      	str	r5, [r3, #32]
 80021ac:	688d      	ldr	r5, [r1, #8]
 80021ae:	6068      	str	r0, [r5, #4]
 80021b0:	6088      	str	r0, [r1, #8]
 80021b2:	f502 71ce 	add.w	r1, r2, #412	; 0x19c
 80021b6:	6299      	str	r1, [r3, #40]	; 0x28
 80021b8:	f8d2 319c 	ldr.w	r3, [r2, #412]	; 0x19c
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 80021c2:	e7e5      	b.n	8002190 <xTaskRemoveFromEventList+0x78>
 80021c4:	20003224 	.word	0x20003224
 80021c8:	2000326c 	.word	0x2000326c

080021cc <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <vTaskInternalSetTimeOutState+0x10>)
 80021ce:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
    pxTimeOut->xTimeOnEntering = xTickCount;
 80021d2:	681b      	ldr	r3, [r3, #0]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80021d4:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80021d6:	6043      	str	r3, [r0, #4]
}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20003224 	.word	0x20003224

080021e0 <xTaskCheckForTimeOut>:
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	460d      	mov	r5, r1
 80021e4:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80021e6:	f7ff f905 	bl	80013f4 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 80021ea:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <xTaskCheckForTimeOut+0x48>)
            if( *pxTicksToWait == portMAX_DELAY )
 80021ee:	1c5a      	adds	r2, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 80021f0:	6801      	ldr	r1, [r0, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80021f2:	d017      	beq.n	8002224 <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021f4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
 80021f8:	6826      	ldr	r6, [r4, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80021fa:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80021fc:	4286      	cmp	r6, r0
 80021fe:	d008      	beq.n	8002212 <xTaskCheckForTimeOut+0x32>
 8002200:	428a      	cmp	r2, r1
 8002202:	d806      	bhi.n	8002212 <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 8002204:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 8002206:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8002208:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 800220a:	f7ff f903 	bl	8001414 <vPortExitCritical>
}
 800220e:	4620      	mov	r0, r4
 8002210:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002212:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002214:	4283      	cmp	r3, r0
 8002216:	d9f5      	bls.n	8002204 <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 800221c:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 800221e:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002220:	f7ff ffd4 	bl	80021cc <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8002224:	2400      	movs	r4, #0
 8002226:	e7f0      	b.n	800220a <xTaskCheckForTimeOut+0x2a>
 8002228:	20003224 	.word	0x20003224

0800222c <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 800222c:	2201      	movs	r2, #1
 800222e:	4b02      	ldr	r3, [pc, #8]	; (8002238 <vTaskMissedYield+0xc>)
 8002230:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20003224 	.word	0x20003224

0800223c <xTaskPriorityInherit>:
    {
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800223e:	4604      	mov	r4, r0
 8002240:	2800      	cmp	r0, #0
 8002242:	d039      	beq.n	80022b8 <xTaskPriorityInherit+0x7c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <xTaskPriorityInherit+0x98>)
 8002246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002248:	6851      	ldr	r1, [r2, #4]
 800224a:	4615      	mov	r5, r2
 800224c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800224e:	428b      	cmp	r3, r1
 8002250:	d238      	bcs.n	80022c4 <xTaskPriorityInherit+0x88>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002252:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002254:	4e20      	ldr	r6, [pc, #128]	; (80022d8 <xTaskPriorityInherit+0x9c>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002256:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002258:	bfa1      	itttt	ge
 800225a:	686a      	ldrge	r2, [r5, #4]
 800225c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800225e:	f1c2 020f 	rsbge	r2, r2, #15
 8002262:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002264:	2214      	movs	r2, #20
 8002266:	fb02 6303 	mla	r3, r2, r3, r6
 800226a:	6942      	ldr	r2, [r0, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d124      	bne.n	80022ba <xTaskPriorityInherit+0x7e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002270:	1d07      	adds	r7, r0, #4
 8002272:	4638      	mov	r0, r7
 8002274:	f7ff f865 	bl	8001342 <uxListRemove>
 8002278:	b930      	cbnz	r0, 8002288 <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800227a:	2201      	movs	r2, #1
 800227c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800227e:	68ab      	ldr	r3, [r5, #8]
 8002280:	408a      	lsls	r2, r1
 8002282:	ea23 0302 	bic.w	r3, r3, r2
 8002286:	60ab      	str	r3, [r5, #8]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002288:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800228a:	686b      	ldr	r3, [r5, #4]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800228c:	68a9      	ldr	r1, [r5, #8]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002290:	fa00 f302 	lsl.w	r3, r0, r2
 8002294:	430b      	orrs	r3, r1
 8002296:	60ab      	str	r3, [r5, #8]
 8002298:	2314      	movs	r3, #20
 800229a:	4353      	muls	r3, r2
 800229c:	441d      	add	r5, r3
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800229e:	62e2      	str	r2, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80022a0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80022a2:	441e      	add	r6, r3
 80022a4:	6891      	ldr	r1, [r2, #8]
 80022a6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80022a8:	60e1      	str	r1, [r4, #12]
 80022aa:	6891      	ldr	r1, [r2, #8]
 80022ac:	4403      	add	r3, r0
 80022ae:	60a2      	str	r2, [r4, #8]
 80022b0:	604f      	str	r7, [r1, #4]
 80022b2:	6097      	str	r7, [r2, #8]
 80022b4:	6166      	str	r6, [r4, #20]
 80022b6:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 80022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80022ba:	686b      	ldr	r3, [r5, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	62c3      	str	r3, [r0, #44]	; 0x2c
                xReturn = pdTRUE;
 80022c0:	2001      	movs	r0, #1
 80022c2:	e7f9      	b.n	80022b8 <xTaskPriorityInherit+0x7c>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80022c4:	6853      	ldr	r3, [r2, #4]
 80022c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80022c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80022ca:	42a0      	cmp	r0, r4
 80022cc:	bf2c      	ite	cs
 80022ce:	2000      	movcs	r0, #0
 80022d0:	2001      	movcc	r0, #1
 80022d2:	e7f1      	b.n	80022b8 <xTaskPriorityInherit+0x7c>
 80022d4:	20003224 	.word	0x20003224
 80022d8:	2000326c 	.word	0x2000326c

080022dc <xTaskPriorityDisinherit>:
    {
 80022dc:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 80022de:	4604      	mov	r4, r0
 80022e0:	b908      	cbnz	r0, 80022e6 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 80022e2:	2000      	movs	r0, #0
    }
 80022e4:	bd70      	pop	{r4, r5, r6, pc}
            ( pxTCB->uxMutexesHeld )--;
 80022e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80022ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 80022ec:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022ee:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 80022f0:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022f2:	d0f6      	beq.n	80022e2 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f4      	bne.n	80022e2 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022f8:	1d05      	adds	r5, r0, #4
 80022fa:	4628      	mov	r0, r5
 80022fc:	f7ff f821 	bl	8001342 <uxListRemove>
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <xTaskPriorityDisinherit+0x70>)
 8002302:	b930      	cbnz	r0, 8002312 <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002304:	2101      	movs	r1, #1
 8002306:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	4081      	lsls	r1, r0
 800230c:	ea22 0201 	bic.w	r2, r2, r1
 8002310:	609a      	str	r2, [r3, #8]
                    prvAddTaskToReadyList( pxTCB );
 8002312:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002314:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8002316:	689e      	ldr	r6, [r3, #8]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002318:	f1c1 020f 	rsb	r2, r1, #15
 800231c:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800231e:	fa00 f201 	lsl.w	r2, r0, r1
 8002322:	4332      	orrs	r2, r6
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	2214      	movs	r2, #20
 8002328:	434a      	muls	r2, r1
 800232a:	4413      	add	r3, r2
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800232c:	62e1      	str	r1, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 800232e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002330:	688e      	ldr	r6, [r1, #8]
 8002332:	60a1      	str	r1, [r4, #8]
 8002334:	60e6      	str	r6, [r4, #12]
 8002336:	688e      	ldr	r6, [r1, #8]
 8002338:	6075      	str	r5, [r6, #4]
 800233a:	608d      	str	r5, [r1, #8]
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <xTaskPriorityDisinherit+0x74>)
 800233e:	440a      	add	r2, r1
 8002340:	6162      	str	r2, [r4, #20]
 8002342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002344:	4402      	add	r2, r0
 8002346:	649a      	str	r2, [r3, #72]	; 0x48
        return xReturn;
 8002348:	e7cc      	b.n	80022e4 <xTaskPriorityDisinherit+0x8>
 800234a:	bf00      	nop
 800234c:	20003224 	.word	0x20003224
 8002350:	2000326c 	.word	0x2000326c

08002354 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8002356:	4604      	mov	r4, r0
 8002358:	2800      	cmp	r0, #0
 800235a:	d03a      	beq.n	80023d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800235c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800235e:	4299      	cmp	r1, r3
 8002360:	bf38      	it	cc
 8002362:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002364:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002366:	428b      	cmp	r3, r1
 8002368:	d033      	beq.n	80023d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800236a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800236c:	2a01      	cmp	r2, #1
 800236e:	d130      	bne.n	80023d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002370:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002372:	4d18      	ldr	r5, [pc, #96]	; (80023d4 <vTaskPriorityDisinheritAfterTimeout+0x80>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002374:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002376:	f04f 0214 	mov.w	r2, #20
 800237a:	f105 0648 	add.w	r6, r5, #72	; 0x48
 800237e:	fb02 6303 	mla	r3, r2, r3, r6
 8002382:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002384:	62c1      	str	r1, [r0, #44]	; 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002386:	bfa4      	itt	ge
 8002388:	f1c1 010f 	rsbge	r1, r1, #15
 800238c:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800238e:	429a      	cmp	r2, r3
 8002390:	d11f      	bne.n	80023d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002392:	1d07      	adds	r7, r0, #4
 8002394:	4638      	mov	r0, r7
 8002396:	f7fe ffd4 	bl	8001342 <uxListRemove>
 800239a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800239c:	b928      	cbnz	r0, 80023aa <vTaskPriorityDisinheritAfterTimeout+0x56>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800239e:	2101      	movs	r1, #1
 80023a0:	68ab      	ldr	r3, [r5, #8]
 80023a2:	4091      	lsls	r1, r2
 80023a4:	ea23 0301 	bic.w	r3, r3, r1
 80023a8:	60ab      	str	r3, [r5, #8]
                        prvAddTaskToReadyList( pxTCB );
 80023aa:	2301      	movs	r3, #1
 80023ac:	68a9      	ldr	r1, [r5, #8]
 80023ae:	4093      	lsls	r3, r2
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60ab      	str	r3, [r5, #8]
 80023b4:	2314      	movs	r3, #20
 80023b6:	4353      	muls	r3, r2
 80023b8:	441d      	add	r5, r3
 80023ba:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80023bc:	441e      	add	r6, r3
 80023be:	6891      	ldr	r1, [r2, #8]
 80023c0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80023c2:	60e1      	str	r1, [r4, #12]
 80023c4:	6891      	ldr	r1, [r2, #8]
 80023c6:	3301      	adds	r3, #1
 80023c8:	60a2      	str	r2, [r4, #8]
 80023ca:	604f      	str	r7, [r1, #4]
 80023cc:	6097      	str	r7, [r2, #8]
 80023ce:	6166      	str	r6, [r4, #20]
 80023d0:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d4:	20003224 	.word	0x20003224

080023d8 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <pvTaskIncrementMutexHeldCount+0x14>)
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	b11a      	cbz	r2, 80023e6 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80023e2:	3201      	adds	r2, #1
 80023e4:	650a      	str	r2, [r1, #80]	; 0x50
        return pxCurrentTCB;
 80023e6:	6858      	ldr	r0, [r3, #4]
    }
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20003224 	.word	0x20003224

080023f0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <NVIC_PriorityGroupConfig+0x10>)
 80023f2:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80023f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80023fa:	60d8      	str	r0, [r3, #12]
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	2501      	movs	r5, #1
 8002408:	7801      	ldrb	r1, [r0, #0]
 800240a:	f001 031f 	and.w	r3, r1, #31
 800240e:	409d      	lsls	r5, r3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002410:	78c3      	ldrb	r3, [r0, #3]
 8002412:	094c      	lsrs	r4, r1, #5
 8002414:	b1c3      	cbz	r3, 8002448 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <NVIC_Init+0x50>)
 8002418:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800241a:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800241c:	43d2      	mvns	r2, r2
 800241e:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8002422:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002426:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800242a:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 800242c:	200f      	movs	r0, #15
 800242e:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8002432:	4013      	ands	r3, r2
 8002434:	4333      	orrs	r3, r6
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 8002438:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4411      	add	r1, r2
 800243e:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002442:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002446:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <NVIC_Init+0x54>)
 800244a:	3420      	adds	r4, #32
 800244c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 8002450:	e7f9      	b.n	8002446 <NVIC_Init+0x42>
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00
 8002458:	e000e100 	.word	0xe000e100

0800245c <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <FLASH_SetLatency+0x10>)
 800245e:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8002460:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8002464:	4303      	orrs	r3, r0
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000

08002470 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <FLASH_PrefetchBufferCmd+0x14>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	f021 0110 	bic.w	r1, r1, #16
 8002478:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4302      	orrs	r2, r0
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000

08002488 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800248c:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800248e:	880e      	ldrh	r6, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002490:	06da      	lsls	r2, r3, #27
 8002492:	bf48      	it	mi
 8002494:	788a      	ldrbmi	r2, [r1, #2]
 8002496:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800249a:	bf48      	it	mi
 800249c:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800249e:	780a      	ldrb	r2, [r1, #0]
 80024a0:	b1d2      	cbz	r2, 80024d8 <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80024a2:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 80024a4:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80024a8:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 80024ac:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 80024ae:	fa0c f701 	lsl.w	r7, ip, r1
      if (currentpin == pos)
 80024b2:	ea37 0406 	bics.w	r4, r7, r6
 80024b6:	d10b      	bne.n	80024d0 <GPIO_Init+0x48>
        pos = pinpos << 2;
 80024b8:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 80024ba:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 80024be:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80024c2:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80024c6:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 80024c8:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80024cc:	d124      	bne.n	8002518 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80024ce:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80024d0:	3101      	adds	r1, #1
 80024d2:	2908      	cmp	r1, #8
 80024d4:	d1eb      	bne.n	80024ae <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80024d6:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80024d8:	2eff      	cmp	r6, #255	; 0xff
 80024da:	d91b      	bls.n	8002514 <GPIO_Init+0x8c>
  {
    tmpreg = GPIOx->CRH;
 80024dc:	2408      	movs	r4, #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80024de:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80024e2:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 80024e6:	6841      	ldr	r1, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80024e8:	fa0c f704 	lsl.w	r7, ip, r4
      if (currentpin == pos)
 80024ec:	ea37 0206 	bics.w	r2, r7, r6
 80024f0:	d10c      	bne.n	800250c <GPIO_Init+0x84>
        pos = pinpos << 2;
 80024f2:	00a2      	lsls	r2, r4, #2
 80024f4:	3a20      	subs	r2, #32
        pinmask = ((uint32_t)0x0F) << pos;
 80024f6:	fa0e f802 	lsl.w	r8, lr, r2
        tmpreg &= ~pinmask;
 80024fa:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80024fe:	fa05 f202 	lsl.w	r2, r5, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002502:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8002504:	ea41 0102 	orr.w	r1, r1, r2
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002508:	d10a      	bne.n	8002520 <GPIO_Init+0x98>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800250a:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800250c:	3401      	adds	r4, #1
 800250e:	2c10      	cmp	r4, #16
 8002510:	d1ea      	bne.n	80024e8 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002512:	6041      	str	r1, [r0, #4]
  }
}
 8002514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002518:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800251a:	bf08      	it	eq
 800251c:	6107      	streq	r7, [r0, #16]
 800251e:	e7d7      	b.n	80024d0 <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002520:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002522:	bf08      	it	eq
 8002524:	6107      	streq	r7, [r0, #16]
 8002526:	e7f1      	b.n	800250c <GPIO_Init+0x84>

08002528 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <RCC_DeInit+0x38>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <RCC_DeInit+0x3c>)
 8002536:	400a      	ands	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002544:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800254c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002554:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002556:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800255a:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	f8ff0000 	.word	0xf8ff0000

08002568 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800256a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002574:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257c:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 800257e:	d003      	beq.n	8002588 <RCC_HSEConfig+0x20>
 8002580:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002584:	d005      	beq.n	8002592 <RCC_HSEConfig+0x2a>
 8002586:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800258e:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 8002590:	4770      	bx	lr
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8002598:	e7f9      	b.n	800258e <RCC_HSEConfig+0x26>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80025a0:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <RCC_PLLConfig+0x10>)
 80025a2:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80025a4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025a8:	430b      	orrs	r3, r1
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80025aa:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80025ac:	6053      	str	r3, [r2, #4]
}
 80025ae:	4770      	bx	lr
 80025b0:	40021000 	.word	0x40021000

080025b4 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80025b4:	4b01      	ldr	r3, [pc, #4]	; (80025bc <RCC_PLLCmd+0x8>)
 80025b6:	6018      	str	r0, [r3, #0]
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	42420060 	.word	0x42420060

080025c0 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <RCC_SYSCLKConfig+0x10>)
 80025c2:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80025c4:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80025c8:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80025ca:	6053      	str	r3, [r2, #4]
}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <RCC_GetSYSCLKSource+0xc>)
 80025d6:	6858      	ldr	r0, [r3, #4]
}
 80025d8:	f000 000c 	and.w	r0, r0, #12
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <RCC_HCLKConfig+0x10>)
 80025e6:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80025e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80025ec:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80025ee:	6053      	str	r3, [r2, #4]
}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <RCC_PCLK1Config+0x10>)
 80025fa:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80025fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002600:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002602:	6053      	str	r3, [r2, #4]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <RCC_PCLK2Config+0x10>)
 800260e:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002610:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002614:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002618:	6053      	str	r3, [r2, #4]
}
 800261a:	4770      	bx	lr
 800261c:	40021000 	.word	0x40021000

08002620 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <RCC_GetClocksFreq+0x78>)
{
 8002622:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002624:	6853      	ldr	r3, [r2, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800262a:	2b04      	cmp	r3, #4
 800262c:	d021      	beq.n	8002672 <RCC_GetClocksFreq+0x52>
 800262e:	2b08      	cmp	r3, #8
 8002630:	d021      	beq.n	8002676 <RCC_GetClocksFreq+0x56>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <RCC_GetClocksFreq+0x7c>)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002634:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8002636:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8002638:	4919      	ldr	r1, [pc, #100]	; (80026a0 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 800263a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800263e:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002640:	6803      	ldr	r3, [r0, #0]
 8002642:	40e3      	lsrs	r3, r4
 8002644:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002646:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8002648:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 800264c:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800264e:	fa23 f404 	lsr.w	r4, r3, r4
 8002652:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002654:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8002656:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 800265a:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800265c:	40e3      	lsrs	r3, r4
 800265e:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002660:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8002662:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002666:	4411      	add	r1, r2
 8002668:	7c0a      	ldrb	r2, [r1, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800266a:	fbb3 f3f2 	udiv	r3, r3, r2
 800266e:	6103      	str	r3, [r0, #16]
}
 8002670:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <RCC_GetClocksFreq+0x84>)
 8002674:	e7de      	b.n	8002634 <RCC_GetClocksFreq+0x14>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8002676:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8002678:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 800267a:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 800267e:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8002680:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8002684:	d402      	bmi.n	800268c <RCC_GetClocksFreq+0x6c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <RCC_GetClocksFreq+0x88>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002688:	434b      	muls	r3, r1
 800268a:	e7d3      	b.n	8002634 <RCC_GetClocksFreq+0x14>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800268c:	6851      	ldr	r1, [r2, #4]
 800268e:	0389      	lsls	r1, r1, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8002690:	bf4c      	ite	mi
 8002692:	4906      	ldrmi	r1, [pc, #24]	; (80026ac <RCC_GetClocksFreq+0x8c>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002694:	4903      	ldrpl	r1, [pc, #12]	; (80026a4 <RCC_GetClocksFreq+0x84>)
 8002696:	e7f7      	b.n	8002688 <RCC_GetClocksFreq+0x68>
 8002698:	40021000 	.word	0x40021000
 800269c:	007a1200 	.word	0x007a1200
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	00b71b00 	.word	0x00b71b00
 80026a8:	003d0900 	.word	0x003d0900
 80026ac:	005b8d80 	.word	0x005b8d80

080026b0 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80026b2:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 80026b4:	b111      	cbz	r1, 80026bc <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80026b6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80026b8:	6198      	str	r0, [r3, #24]
  }
}
 80026ba:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80026bc:	ea22 0000 	bic.w	r0, r2, r0
 80026c0:	e7fa      	b.n	80026b8 <RCC_APB2PeriphClockCmd+0x8>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000

080026c8 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80026ca:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 80026cc:	b111      	cbz	r1, 80026d4 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80026ce:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80026d0:	61d8      	str	r0, [r3, #28]
  }
}
 80026d2:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80026d4:	ea22 0000 	bic.w	r0, r2, r0
 80026d8:	e7fa      	b.n	80026d0 <RCC_APB1PeriphClockCmd+0x8>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <RCC_APB2PeriphResetCmd+0x14>)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80026e2:	68da      	ldr	r2, [r3, #12]
  if (NewState != DISABLE)
 80026e4:	b111      	cbz	r1, 80026ec <RCC_APB2PeriphResetCmd+0xc>
    RCC->APB2RSTR |= RCC_APB2Periph;
 80026e6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80026e8:	60d8      	str	r0, [r3, #12]
  }
}
 80026ea:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80026ec:	ea22 0000 	bic.w	r0, r2, r0
 80026f0:	e7fa      	b.n	80026e8 <RCC_APB2PeriphResetCmd+0x8>
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <RCC_APB1PeriphResetCmd+0x14>)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80026fa:	691a      	ldr	r2, [r3, #16]
  if (NewState != DISABLE)
 80026fc:	b111      	cbz	r1, 8002704 <RCC_APB1PeriphResetCmd+0xc>
    RCC->APB1RSTR |= RCC_APB1Periph;
 80026fe:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002700:	6118      	str	r0, [r3, #16]
  }
}
 8002702:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002704:	ea22 0000 	bic.w	r0, r2, r0
 8002708:	e7fa      	b.n	8002700 <RCC_APB1PeriphResetCmd+0x8>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002710:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002712:	2a01      	cmp	r2, #1
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <RCC_GetFlagStatus+0x24>)
 8002716:	d107      	bne.n	8002728 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8002718:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800271a:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800271e:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8002722:	f000 0001 	and.w	r0, r0, #1
 8002726:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002728:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 800272a:	bf0c      	ite	eq
 800272c:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 800272e:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8002730:	e7f3      	b.n	800271a <RCC_GetFlagStatus+0xa>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <RCC_WaitForHSEStartUp>:
  __IO uint32_t StartUpCounter = 0;
 8002738:	2300      	movs	r3, #0
{
 800273a:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 800273c:	9301      	str	r3, [sp, #4]
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800273e:	2031      	movs	r0, #49	; 0x31
 8002740:	f7ff ffe6 	bl	8002710 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800274a:	9b01      	ldr	r3, [sp, #4]
 800274c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002750:	d001      	beq.n	8002756 <RCC_WaitForHSEStartUp+0x1e>
 8002752:	2800      	cmp	r0, #0
 8002754:	d0f3      	beq.n	800273e <RCC_WaitForHSEStartUp+0x6>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002756:	2031      	movs	r0, #49	; 0x31
 8002758:	f7ff ffda 	bl	8002710 <RCC_GetFlagStatus>
}
 800275c:	3800      	subs	r0, #0
 800275e:	bf18      	it	ne
 8002760:	2001      	movne	r0, #1
 8002762:	b003      	add	sp, #12
 8002764:	f85d fb04 	ldr.w	pc, [sp], #4

08002768 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002768:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800276a:	8c06      	ldrh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800276c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002770:	f026 0601 	bic.w	r6, r6, #1
 8002774:	0436      	lsls	r6, r6, #16
 8002776:	0c36      	lsrs	r6, r6, #16
 8002778:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	8b04      	ldrh	r4, [r0, #24]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <TI1_Config+0x6c>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800277e:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8002782:	0424      	lsls	r4, r4, #16
  tmpccer = TIMx->CCER;
 8002784:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002786:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002788:	4314      	orrs	r4, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800278a:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 800278c:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800278e:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002790:	d012      	beq.n	80027b8 <TI1_Config+0x50>
 8002792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002796:	4298      	cmp	r0, r3
 8002798:	d00e      	beq.n	80027b8 <TI1_Config+0x50>
 800279a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800279e:	d00b      	beq.n	80027b8 <TI1_Config+0x50>
 80027a0:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80027a4:	4298      	cmp	r0, r3
 80027a6:	d007      	beq.n	80027b8 <TI1_Config+0x50>
 80027a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ac:	4298      	cmp	r0, r3
 80027ae:	d003      	beq.n	80027b8 <TI1_Config+0x50>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80027b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b4:	4298      	cmp	r0, r3
 80027b6:	d108      	bne.n	80027ca <TI1_Config+0x62>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 80027b8:	f025 0302 	bic.w	r3, r5, #2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80027bc:	ea41 0503 	orr.w	r5, r1, r3
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80027c0:	f045 0501 	orr.w	r5, r5, #1
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c4:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80027c6:	8405      	strh	r5, [r0, #32]
}
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027ca:	f025 050a 	bic.w	r5, r5, #10
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80027ce:	430d      	orrs	r5, r1
 80027d0:	e7f6      	b.n	80027c0 <TI1_Config+0x58>
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80027da:	8c04      	ldrh	r4, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80027dc:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80027de:	f024 0410 	bic.w	r4, r4, #16
 80027e2:	0424      	lsls	r4, r4, #16
 80027e4:	0c24      	lsrs	r4, r4, #16
 80027e6:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e8:	8b05      	ldrh	r5, [r0, #24]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80027ea:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80027ee:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <TI2_Config+0x70>)
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80027f4:	052d      	lsls	r5, r5, #20
  tmpccer = TIMx->CCER;
 80027f6:	8c04      	ldrh	r4, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80027f8:	0d2d      	lsrs	r5, r5, #20
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80027fa:	010e      	lsls	r6, r1, #4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80027fc:	4315      	orrs	r5, r2
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80027fe:	4298      	cmp	r0, r3
  tmpccer = TIMx->CCER;
 8002800:	b2a4      	uxth	r4, r4
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002802:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002804:	b2ad      	uxth	r5, r5
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002806:	d012      	beq.n	800282e <TI2_Config+0x56>
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	4298      	cmp	r0, r3
 800280e:	d00e      	beq.n	800282e <TI2_Config+0x56>
 8002810:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002814:	d00b      	beq.n	800282e <TI2_Config+0x56>
 8002816:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800281a:	4298      	cmp	r0, r3
 800281c:	d007      	beq.n	800282e <TI2_Config+0x56>
 800281e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002822:	4298      	cmp	r0, r3
 8002824:	d003      	beq.n	800282e <TI2_Config+0x56>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282a:	4298      	cmp	r0, r3
 800282c:	d108      	bne.n	8002840 <TI2_Config+0x68>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 800282e:	f024 0420 	bic.w	r4, r4, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002832:	ea46 0104 	orr.w	r1, r6, r4
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8002836:	f041 0110 	orr.w	r1, r1, #16
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800283a:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800283c:	8401      	strh	r1, [r0, #32]
}
 800283e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002840:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8002844:	4321      	orrs	r1, r4
 8002846:	e7f6      	b.n	8002836 <TI2_Config+0x5e>
 8002848:	40012c00 	.word	0x40012c00

0800284c <TIM_DeInit>:
{
 800284c:	b508      	push	{r3, lr}
  if (TIMx == TIM1)
 800284e:	4b61      	ldr	r3, [pc, #388]	; (80029d4 <TIM_DeInit+0x188>)
 8002850:	4298      	cmp	r0, r3
 8002852:	d10b      	bne.n	800286c <TIM_DeInit+0x20>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002854:	2101      	movs	r1, #1
 8002856:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800285a:	f7ff ff41 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800285e:	2100      	movs	r1, #0
 8002860:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8002864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002868:	f7ff bf3a 	b.w	80026e0 <RCC_APB2PeriphResetCmd>
  else if (TIMx == TIM2)
 800286c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002870:	d109      	bne.n	8002886 <TIM_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002872:	2101      	movs	r1, #1
 8002874:	4608      	mov	r0, r1
 8002876:	f7ff ff3f 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800287a:	2100      	movs	r1, #0
 800287c:	2001      	movs	r0, #1
}
 800287e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002882:	f7ff bf39 	b.w	80026f8 <RCC_APB1PeriphResetCmd>
  else if (TIMx == TIM3)
 8002886:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <TIM_DeInit+0x18c>)
 8002888:	4298      	cmp	r0, r3
 800288a:	d106      	bne.n	800289a <TIM_DeInit+0x4e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800288c:	2101      	movs	r1, #1
 800288e:	2002      	movs	r0, #2
 8002890:	f7ff ff32 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002894:	2100      	movs	r1, #0
 8002896:	2002      	movs	r0, #2
 8002898:	e7f1      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM4)
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <TIM_DeInit+0x190>)
 800289c:	4298      	cmp	r0, r3
 800289e:	d106      	bne.n	80028ae <TIM_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80028a0:	2101      	movs	r1, #1
 80028a2:	2004      	movs	r0, #4
 80028a4:	f7ff ff28 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80028a8:	2100      	movs	r1, #0
 80028aa:	2004      	movs	r0, #4
 80028ac:	e7e7      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM5)
 80028ae:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <TIM_DeInit+0x194>)
 80028b0:	4298      	cmp	r0, r3
 80028b2:	d106      	bne.n	80028c2 <TIM_DeInit+0x76>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80028b4:	2101      	movs	r1, #1
 80028b6:	2008      	movs	r0, #8
 80028b8:	f7ff ff1e 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80028bc:	2100      	movs	r1, #0
 80028be:	2008      	movs	r0, #8
 80028c0:	e7dd      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM6)
 80028c2:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <TIM_DeInit+0x198>)
 80028c4:	4298      	cmp	r0, r3
 80028c6:	d106      	bne.n	80028d6 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80028c8:	2101      	movs	r1, #1
 80028ca:	2010      	movs	r0, #16
 80028cc:	f7ff ff14 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80028d0:	2100      	movs	r1, #0
 80028d2:	2010      	movs	r0, #16
 80028d4:	e7d3      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM7)
 80028d6:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <TIM_DeInit+0x19c>)
 80028d8:	4298      	cmp	r0, r3
 80028da:	d106      	bne.n	80028ea <TIM_DeInit+0x9e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80028dc:	2101      	movs	r1, #1
 80028de:	2020      	movs	r0, #32
 80028e0:	f7ff ff0a 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80028e4:	2100      	movs	r1, #0
 80028e6:	2020      	movs	r0, #32
 80028e8:	e7c9      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM8)
 80028ea:	4b40      	ldr	r3, [pc, #256]	; (80029ec <TIM_DeInit+0x1a0>)
 80028ec:	4298      	cmp	r0, r3
 80028ee:	d108      	bne.n	8002902 <TIM_DeInit+0xb6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80028f0:	2101      	movs	r1, #1
 80028f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028f6:	f7ff fef3 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80028fa:	2100      	movs	r1, #0
 80028fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002900:	e7b0      	b.n	8002864 <TIM_DeInit+0x18>
  else if (TIMx == TIM9)
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <TIM_DeInit+0x1a4>)
 8002904:	4298      	cmp	r0, r3
 8002906:	d108      	bne.n	800291a <TIM_DeInit+0xce>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002908:	2101      	movs	r1, #1
 800290a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800290e:	f7ff fee7 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002912:	2100      	movs	r1, #0
 8002914:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002918:	e7a4      	b.n	8002864 <TIM_DeInit+0x18>
  else if (TIMx == TIM10)
 800291a:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <TIM_DeInit+0x1a8>)
 800291c:	4298      	cmp	r0, r3
 800291e:	d108      	bne.n	8002932 <TIM_DeInit+0xe6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002920:	2101      	movs	r1, #1
 8002922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002926:	f7ff fedb 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800292a:	2100      	movs	r1, #0
 800292c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002930:	e798      	b.n	8002864 <TIM_DeInit+0x18>
  else if (TIMx == TIM11) 
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <TIM_DeInit+0x1ac>)
 8002934:	4298      	cmp	r0, r3
 8002936:	d108      	bne.n	800294a <TIM_DeInit+0xfe>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002938:	2101      	movs	r1, #1
 800293a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800293e:	f7ff fecf 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002942:	2100      	movs	r1, #0
 8002944:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002948:	e78c      	b.n	8002864 <TIM_DeInit+0x18>
  else if (TIMx == TIM12)
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <TIM_DeInit+0x1b0>)
 800294c:	4298      	cmp	r0, r3
 800294e:	d106      	bne.n	800295e <TIM_DeInit+0x112>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002950:	2101      	movs	r1, #1
 8002952:	2040      	movs	r0, #64	; 0x40
 8002954:	f7ff fed0 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002958:	2100      	movs	r1, #0
 800295a:	2040      	movs	r0, #64	; 0x40
 800295c:	e78f      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM13) 
 800295e:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <TIM_DeInit+0x1b4>)
 8002960:	4298      	cmp	r0, r3
 8002962:	d106      	bne.n	8002972 <TIM_DeInit+0x126>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002964:	2101      	movs	r1, #1
 8002966:	2080      	movs	r0, #128	; 0x80
 8002968:	f7ff fec6 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800296c:	2100      	movs	r1, #0
 800296e:	2080      	movs	r0, #128	; 0x80
 8002970:	e785      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM14) 
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <TIM_DeInit+0x1b8>)
 8002974:	4298      	cmp	r0, r3
 8002976:	d108      	bne.n	800298a <TIM_DeInit+0x13e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002978:	2101      	movs	r1, #1
 800297a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800297e:	f7ff febb 	bl	80026f8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002982:	2100      	movs	r1, #0
 8002984:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002988:	e779      	b.n	800287e <TIM_DeInit+0x32>
  else if (TIMx == TIM15)
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <TIM_DeInit+0x1bc>)
 800298c:	4298      	cmp	r0, r3
 800298e:	d108      	bne.n	80029a2 <TIM_DeInit+0x156>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8002990:	2101      	movs	r1, #1
 8002992:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002996:	f7ff fea3 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800299a:	2100      	movs	r1, #0
 800299c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80029a0:	e760      	b.n	8002864 <TIM_DeInit+0x18>
  else if (TIMx == TIM16)
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <TIM_DeInit+0x1c0>)
 80029a4:	4298      	cmp	r0, r3
 80029a6:	d108      	bne.n	80029ba <TIM_DeInit+0x16e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80029a8:	2101      	movs	r1, #1
 80029aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029ae:	f7ff fe97 	bl	80026e0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80029b2:	2100      	movs	r1, #0
 80029b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029b8:	e754      	b.n	8002864 <TIM_DeInit+0x18>
    if (TIMx == TIM17)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <TIM_DeInit+0x1c4>)
 80029bc:	4298      	cmp	r0, r3
 80029be:	d108      	bne.n	80029d2 <TIM_DeInit+0x186>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80029c0:	2101      	movs	r1, #1
 80029c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029c6:	f7ff fe8b 	bl	80026e0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80029ca:	2100      	movs	r1, #0
 80029cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80029d0:	e748      	b.n	8002864 <TIM_DeInit+0x18>
}
 80029d2:	bd08      	pop	{r3, pc}
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40001000 	.word	0x40001000
 80029e8:	40001400 	.word	0x40001400
 80029ec:	40013400 	.word	0x40013400
 80029f0:	40014c00 	.word	0x40014c00
 80029f4:	40015000 	.word	0x40015000
 80029f8:	40015400 	.word	0x40015400
 80029fc:	40001800 	.word	0x40001800
 8002a00:	40001c00 	.word	0x40001c00
 8002a04:	40002000 	.word	0x40002000
 8002a08:	40014000 	.word	0x40014000
 8002a0c:	40014400 	.word	0x40014400
 8002a10:	40014800 	.word	0x40014800

08002a14 <TIM_TimeBaseInit>:
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <TIM_TimeBaseInit+0x8c>)
  tmpcr1 = TIMx->CR1;  
 8002a16:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002a18:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 8002a1a:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002a1c:	d012      	beq.n	8002a44 <TIM_TimeBaseInit+0x30>
 8002a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d00e      	beq.n	8002a44 <TIM_TimeBaseInit+0x30>
 8002a26:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a2a:	d00b      	beq.n	8002a44 <TIM_TimeBaseInit+0x30>
 8002a2c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a30:	4290      	cmp	r0, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_TimeBaseInit+0x30>
 8002a34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a38:	4290      	cmp	r0, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002a3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a40:	4290      	cmp	r0, r2
 8002a42:	d103      	bne.n	8002a4c <TIM_TimeBaseInit+0x38>
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002a44:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002a4a:	4313      	orrs	r3, r2
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <TIM_TimeBaseInit+0x90>)
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d008      	beq.n	8002a64 <TIM_TimeBaseInit+0x50>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a56:	4290      	cmp	r0, r2
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002a58:	bf1f      	itttt	ne
 8002a5a:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002a5e:	88ca      	ldrhne	r2, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002a60:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002a62:	4313      	orrne	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a64:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002a66:	888b      	ldrh	r3, [r1, #4]
 8002a68:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002a6a:	880b      	ldrh	r3, [r1, #0]
 8002a6c:	8503      	strh	r3, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <TIM_TimeBaseInit+0x8c>)
 8002a70:	4298      	cmp	r0, r3
 8002a72:	d00f      	beq.n	8002a94 <TIM_TimeBaseInit+0x80>
 8002a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	d00b      	beq.n	8002a94 <TIM_TimeBaseInit+0x80>
 8002a7c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002a80:	4298      	cmp	r0, r3
 8002a82:	d007      	beq.n	8002a94 <TIM_TimeBaseInit+0x80>
 8002a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a88:	4298      	cmp	r0, r3
 8002a8a:	d003      	beq.n	8002a94 <TIM_TimeBaseInit+0x80>
 8002a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a90:	4298      	cmp	r0, r3
 8002a92:	d101      	bne.n	8002a98 <TIM_TimeBaseInit+0x84>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002a94:	7a0b      	ldrb	r3, [r1, #8]
 8002a96:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002a98:	2301      	movs	r3, #1
 8002a9a:	8283      	strh	r3, [r0, #20]
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40001000 	.word	0x40001000

08002aa8 <TIM_OC1Init>:
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002aa8:	8c03      	ldrh	r3, [r0, #32]
{
 8002aaa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	0c1b      	lsrs	r3, r3, #16
 8002ab4:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002ab6:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002ab8:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002aba:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002abc:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002abe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002ac2:	0412      	lsls	r2, r2, #16
 8002ac4:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ac6:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002ac8:	432a      	orrs	r2, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002aca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ace:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002ad0:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ad2:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002ad4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ad6:	432b      	orrs	r3, r5
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002ad8:	4d14      	ldr	r5, [pc, #80]	; (8002b2c <TIM_OC1Init+0x84>)
  tmpcr2 =  TIMx->CR2;
 8002ada:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002adc:	42a8      	cmp	r0, r5
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002ade:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002ae0:	d00f      	beq.n	8002b02 <TIM_OC1Init+0x5a>
 8002ae2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	d00b      	beq.n	8002b02 <TIM_OC1Init+0x5a>
 8002aea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002aee:	42a8      	cmp	r0, r5
 8002af0:	d007      	beq.n	8002b02 <TIM_OC1Init+0x5a>
 8002af2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002af6:	42a8      	cmp	r0, r5
 8002af8:	d003      	beq.n	8002b02 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8002afa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002afe:	42a8      	cmp	r0, r5
 8002b00:	d10e      	bne.n	8002b20 <TIM_OC1Init+0x78>
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002b02:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002b04:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002b08:	432b      	orrs	r3, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002b0a:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002b10:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002b12:	432b      	orrs	r3, r5
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002b14:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8002b16:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002b1a:	4335      	orrs	r5, r6
 8002b1c:	432c      	orrs	r4, r5
 8002b1e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002b20:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b22:	8302      	strh	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002b24:	88ca      	ldrh	r2, [r1, #6]
 8002b26:	8682      	strh	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002b28:	8403      	strh	r3, [r0, #32]
}
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	40012c00 	.word	0x40012c00

08002b30 <TIM_OC2Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002b30:	8c03      	ldrh	r3, [r0, #32]
{
 8002b32:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002b34:	f023 0310 	bic.w	r3, r3, #16
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b3e:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b40:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b42:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b44:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8002b46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002b4a:	0412      	lsls	r2, r2, #16
 8002b4c:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002b52:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002b54:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002b56:	f023 0320 	bic.w	r3, r3, #32
 8002b5a:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002b5c:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002b5e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002b60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b64:	4d11      	ldr	r5, [pc, #68]	; (8002bac <TIM_OC2Init+0x7c>)
  tmpcr2 =  TIMx->CR2;
 8002b66:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b68:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002b6a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002b6c:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002b6e:	d003      	beq.n	8002b78 <TIM_OC2Init+0x48>
 8002b70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b74:	42a8      	cmp	r0, r5
 8002b76:	d113      	bne.n	8002ba0 <TIM_OC2Init+0x70>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002b78:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8002b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002b7e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002b82:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8002b86:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002b88:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002b8a:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002b8c:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002b90:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002b92:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002b96:	4335      	orrs	r5, r6
 8002b98:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002b9c:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002b9e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002ba0:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002ba2:	8302      	strh	r2, [r0, #24]
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002ba4:	88ca      	ldrh	r2, [r1, #6]
 8002ba6:	8702      	strh	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002ba8:	8403      	strh	r3, [r0, #32]
}
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <TIM_OC3Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002bb0:	8c03      	ldrh	r3, [r0, #32]
{
 8002bb2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002bbe:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002bc0:	8882      	ldrh	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	8b84      	ldrh	r4, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002bc4:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002bc6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002bca:	0424      	lsls	r4, r4, #16
 8002bcc:	0c24      	lsrs	r4, r4, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002bce:	884e      	ldrh	r6, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002bd0:	432c      	orrs	r4, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002bd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002bd6:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002bd8:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002bda:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002bdc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002bde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002be2:	4d11      	ldr	r5, [pc, #68]	; (8002c28 <TIM_OC3Init+0x78>)
  tmpcr2 =  TIMx->CR2;
 8002be4:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002be6:	42a8      	cmp	r0, r5
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002be8:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002bea:	d003      	beq.n	8002bf4 <TIM_OC3Init+0x44>
 8002bec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002bf0:	42a8      	cmp	r0, r5
 8002bf2:	d113      	bne.n	8002c1c <TIM_OC3Init+0x6c>
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002bf4:	894d      	ldrh	r5, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002bfe:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 8002c02:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002c04:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002c06:	89ce      	ldrh	r6, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002c08:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002c0c:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002c0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002c12:	4335      	orrs	r5, r6
 8002c14:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002c18:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002c1a:	b292      	uxth	r2, r2
  TIMx->CR2 = tmpcr2;
 8002c1c:	8082      	strh	r2, [r0, #4]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002c1e:	88ca      	ldrh	r2, [r1, #6]
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	8384      	strh	r4, [r0, #28]
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002c22:	8782      	strh	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002c24:	8403      	strh	r3, [r0, #32]
}
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	40012c00 	.word	0x40012c00

08002c2c <TIM_OC4Init>:
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002c2c:	8c03      	ldrh	r3, [r0, #32]
{
 8002c2e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002c3a:	8c03      	ldrh	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002c3c:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002c3e:	8b82      	ldrh	r2, [r0, #28]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002c40:	880d      	ldrh	r5, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002c42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002c46:	0412      	lsls	r2, r2, #16
 8002c48:	0c12      	lsrs	r2, r2, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002c4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002c4e:	884e      	ldrh	r6, [r1, #2]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002c50:	890d      	ldrh	r5, [r1, #8]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c56:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002c58:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002c5a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002c5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002c60:	4d0b      	ldr	r5, [pc, #44]	; (8002c90 <TIM_OC4Init+0x64>)
  tmpcr2 =  TIMx->CR2;
 8002c62:	b2a4      	uxth	r4, r4
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002c64:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002c66:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002c68:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC4Init+0x48>
 8002c6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002c70:	42a8      	cmp	r0, r5
 8002c72:	d105      	bne.n	8002c80 <TIM_OC4Init+0x54>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002c74:	898d      	ldrh	r5, [r1, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8002c76:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002c7a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002c7e:	b2a4      	uxth	r4, r4
  TIMx->CR2 = tmpcr2;
 8002c80:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002c82:	8382      	strh	r2, [r0, #28]
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002c84:	88ca      	ldrh	r2, [r1, #6]
 8002c86:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002c8a:	8403      	strh	r3, [r0, #32]
}
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	bf00      	nop
 8002c90:	40012c00 	.word	0x40012c00

08002c94 <TIM_ICStructInit>:
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002c94:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002c96:	2201      	movs	r2, #1
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002c98:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002c9a:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002c9c:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002c9e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002ca0:	8103      	strh	r3, [r0, #8]
}
 8002ca2:	4770      	bx	lr

08002ca4 <TIM_Cmd>:
    TIMx->CR1 |= TIM_CR1_CEN;
 8002ca4:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8002ca6:	b121      	cbz	r1, 8002cb2 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002cae:	8003      	strh	r3, [r0, #0]
}
 8002cb0:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	e7f8      	b.n	8002cae <TIM_Cmd+0xa>

08002cbc <TIM_ITConfig>:
    TIMx->DIER |= TIM_IT;
 8002cbc:	8983      	ldrh	r3, [r0, #12]
 8002cbe:	b29b      	uxth	r3, r3
  if (NewState != DISABLE)
 8002cc0:	b112      	cbz	r2, 8002cc8 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
 8002cc2:	4319      	orrs	r1, r3
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002cc4:	8181      	strh	r1, [r0, #12]
}
 8002cc6:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002cc8:	ea23 0101 	bic.w	r1, r3, r1
 8002ccc:	e7fa      	b.n	8002cc4 <TIM_ITConfig+0x8>

08002cce <TIM_EncoderInterfaceConfig>:
{
 8002cce:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = TIMx->SMCR;
 8002cd0:	8906      	ldrh	r6, [r0, #8]
  tmpccmr1 = TIMx->CCMR1;
 8002cd2:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002cd4:	8c05      	ldrh	r5, [r0, #32]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002cd6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002cda:	f024 0403 	bic.w	r4, r4, #3
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002cde:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002ce2:	f026 0607 	bic.w	r6, r6, #7
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002ce6:	0424      	lsls	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002ce8:	042d      	lsls	r5, r5, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002cea:	0436      	lsls	r6, r6, #16
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002cec:	0c24      	lsrs	r4, r4, #16
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002cee:	0c2d      	lsrs	r5, r5, #16
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002cf0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002cf4:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002cf6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002cfa:	4315      	orrs	r5, r2
  tmpsmcr |= TIM_EncoderMode;
 8002cfc:	430e      	orrs	r6, r1
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002cfe:	f044 0401 	orr.w	r4, r4, #1
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002d02:	b2ad      	uxth	r5, r5
  TIMx->SMCR = tmpsmcr;
 8002d04:	8106      	strh	r6, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 8002d06:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d08:	8405      	strh	r5, [r0, #32]
}
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}

08002d0c <TIM_SetCounter>:
  TIMx->CNT = Counter;
 8002d0c:	8481      	strh	r1, [r0, #36]	; 0x24
}
 8002d0e:	4770      	bx	lr

08002d10 <TIM_SetCompare1>:
  TIMx->CCR1 = Compare1;
 8002d10:	8681      	strh	r1, [r0, #52]	; 0x34
}
 8002d12:	4770      	bx	lr

08002d14 <TIM_SetCompare2>:
  TIMx->CCR2 = Compare2;
 8002d14:	8701      	strh	r1, [r0, #56]	; 0x38
}
 8002d16:	4770      	bx	lr

08002d18 <TIM_SetIC1Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002d18:	8b03      	ldrh	r3, [r0, #24]
 8002d1a:	f023 030c 	bic.w	r3, r3, #12
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	8303      	strh	r3, [r0, #24]
  TIMx->CCMR1 |= TIM_ICPSC;
 8002d24:	8b03      	ldrh	r3, [r0, #24]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	8303      	strh	r3, [r0, #24]
}
 8002d2c:	4770      	bx	lr

08002d2e <TIM_SetIC2Prescaler>:
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002d2e:	8b02      	ldrh	r2, [r0, #24]
 8002d30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d34:	0412      	lsls	r2, r2, #16
 8002d36:	0c12      	lsrs	r2, r2, #16
 8002d38:	8302      	strh	r2, [r0, #24]
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002d3a:	8b03      	ldrh	r3, [r0, #24]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8303      	strh	r3, [r0, #24]
}
 8002d46:	4770      	bx	lr

08002d48 <TIM_SetIC3Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002d48:	8b83      	ldrh	r3, [r0, #28]
 8002d4a:	f023 030c 	bic.w	r3, r3, #12
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	8383      	strh	r3, [r0, #28]
  TIMx->CCMR2 |= TIM_ICPSC;
 8002d54:	8b83      	ldrh	r3, [r0, #28]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	8383      	strh	r3, [r0, #28]
}
 8002d5c:	4770      	bx	lr

08002d5e <TIM_SetIC4Prescaler>:
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002d5e:	8b82      	ldrh	r2, [r0, #28]
 8002d60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d64:	0412      	lsls	r2, r2, #16
 8002d66:	0c12      	lsrs	r2, r2, #16
 8002d68:	8382      	strh	r2, [r0, #28]
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002d6a:	8b83      	ldrh	r3, [r0, #28]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	8383      	strh	r3, [r0, #28]
}
 8002d76:	4770      	bx	lr

08002d78 <TIM_ICInit>:
{
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	460f      	mov	r7, r1
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d7c:	8809      	ldrh	r1, [r1, #0]
{
 8002d7e:	4604      	mov	r4, r0
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002d80:	887d      	ldrh	r5, [r7, #2]
 8002d82:	88ba      	ldrh	r2, [r7, #4]
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	b939      	cbnz	r1, 8002d98 <TIM_ICInit+0x20>
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d88:	4629      	mov	r1, r5
 8002d8a:	f7ff fced 	bl	8002768 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d8e:	88f9      	ldrh	r1, [r7, #6]
}
 8002d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002d94:	f7ff bfc0 	b.w	8002d18 <TIM_SetIC1Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002d98:	2904      	cmp	r1, #4
 8002d9a:	d107      	bne.n	8002dac <TIM_ICInit+0x34>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f7ff fd1b 	bl	80027d8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002da2:	88f9      	ldrh	r1, [r7, #6]
}
 8002da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002da8:	f7ff bfc1 	b.w	8002d2e <TIM_SetIC2Prescaler>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002dac:	2908      	cmp	r1, #8
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002dae:	8c00      	ldrh	r0, [r0, #32]
 8002db0:	88f9      	ldrh	r1, [r7, #6]
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002db2:	d136      	bne.n	8002e22 <TIM_ICInit+0xaa>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002db4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002db8:	0400      	lsls	r0, r0, #16
 8002dba:	0c00      	lsrs	r0, r0, #16
 8002dbc:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dbe:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8002dc0:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dc2:	b2b6      	uxth	r6, r6
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002dc4:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8002dc8:	4316      	orrs	r6, r2
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dca:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <TIM_ICInit+0x124>)
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002dd0:	022f      	lsls	r7, r5, #8
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002dd2:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002dd4:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002dd6:	b2bf      	uxth	r7, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002dd8:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002dda:	d012      	beq.n	8002e02 <TIM_ICInit+0x8a>
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d00e      	beq.n	8002e02 <TIM_ICInit+0x8a>
 8002de4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002de8:	d00b      	beq.n	8002e02 <TIM_ICInit+0x8a>
 8002dea:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d007      	beq.n	8002e02 <TIM_ICInit+0x8a>
 8002df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df6:	429c      	cmp	r4, r3
 8002df8:	d003      	beq.n	8002e02 <TIM_ICInit+0x8a>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d10b      	bne.n	8002e1a <TIM_ICInit+0xa2>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002e02:	f420 7000 	bic.w	r0, r0, #512	; 0x200
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002e06:	4338      	orrs	r0, r7
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002e08:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e0c:	83a6      	strh	r6, [r4, #28]
  TIMx->CCER = tmpccer;
 8002e0e:	8420      	strh	r0, [r4, #32]
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e10:	4620      	mov	r0, r4
}
 8002e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e16:	f7ff bf97 	b.w	8002d48 <TIM_SetIC3Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e1a:	f420 6020 	bic.w	r0, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002e1e:	4328      	orrs	r0, r5
 8002e20:	e7f2      	b.n	8002e08 <TIM_ICInit+0x90>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002e22:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002e26:	0400      	lsls	r0, r0, #16
 8002e28:	0c00      	lsrs	r0, r0, #16
 8002e2a:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e2c:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002e2e:	031e      	lsls	r6, r3, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002e30:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <TIM_ICInit+0x124>)
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002e36:	053f      	lsls	r7, r7, #20
  tmpccer = TIMx->CCER;
 8002e38:	8c20      	ldrh	r0, [r4, #32]
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002e3a:	0d3f      	lsrs	r7, r7, #20
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002e3c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002e40:	ea4f 3c05 	mov.w	ip, r5, lsl #12
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002e44:	433e      	orrs	r6, r7
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002e46:	429c      	cmp	r4, r3
  tmpccer = TIMx->CCER;
 8002e48:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002e4a:	fa1f fc8c 	uxth.w	ip, ip
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002e4e:	b2b6      	uxth	r6, r6
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002e50:	d012      	beq.n	8002e78 <TIM_ICInit+0x100>
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	429c      	cmp	r4, r3
 8002e58:	d00e      	beq.n	8002e78 <TIM_ICInit+0x100>
 8002e5a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8002e5e:	d00b      	beq.n	8002e78 <TIM_ICInit+0x100>
 8002e60:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8002e64:	429c      	cmp	r4, r3
 8002e66:	d007      	beq.n	8002e78 <TIM_ICInit+0x100>
 8002e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e6c:	429c      	cmp	r4, r3
 8002e6e:	d003      	beq.n	8002e78 <TIM_ICInit+0x100>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d10c      	bne.n	8002e92 <TIM_ICInit+0x11a>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002e78:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002e7c:	ea4c 0300 	orr.w	r3, ip, r0
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e84:	83a6      	strh	r6, [r4, #28]
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e86:	4620      	mov	r0, r4
  TIMx->CCER = tmpccer;
 8002e88:	8423      	strh	r3, [r4, #32]
}
 8002e8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002e8e:	f7ff bf66 	b.w	8002d5e <TIM_SetIC4Prescaler>
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002e92:	f647 53ff 	movw	r3, #32255	; 0x7dff
 8002e96:	4003      	ands	r3, r0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002e98:	432b      	orrs	r3, r5
 8002e9a:	e7f1      	b.n	8002e80 <TIM_ICInit+0x108>
 8002e9c:	40012c00 	.word	0x40012c00

08002ea0 <TIM_ClearFlag>:
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002ea0:	43c9      	mvns	r1, r1
 8002ea2:	b289      	uxth	r1, r1
 8002ea4:	8201      	strh	r1, [r0, #16]
}
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_ClearITPendingBit>:
 8002ea8:	43c9      	mvns	r1, r1
 8002eaa:	b289      	uxth	r1, r1
 8002eac:	8201      	strh	r1, [r0, #16]
 8002eae:	4770      	bx	lr

08002eb0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002eb0:	b530      	push	{r4, r5, lr}
 8002eb2:	460d      	mov	r5, r1
 8002eb4:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002eb6:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8002eb8:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 8002eba:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002ebc:	88c9      	ldrh	r1, [r1, #6]
 8002ebe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec2:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002ec4:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002ec6:	8983      	ldrh	r3, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002ec8:	88a9      	ldrh	r1, [r5, #4]
 8002eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ece:	f023 030c 	bic.w	r3, r3, #12
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	8929      	ldrh	r1, [r5, #8]
{
 8002eda:	b087      	sub	sp, #28
 8002edc:	430b      	orrs	r3, r1
 8002ede:	8969      	ldrh	r1, [r5, #10]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002ee4:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002ee6:	8a83      	ldrh	r3, [r0, #20]
 8002ee8:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eee:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002ef0:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002ef2:	a801      	add	r0, sp, #4
 8002ef4:	f7ff fb94 	bl	8002620 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002ef8:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002efc:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <USART_Init+0xa4>)
 8002efe:	4294      	cmp	r4, r2
 8002f00:	bf08      	it	eq
 8002f02:	4619      	moveq	r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f04:	2319      	movs	r3, #25
 8002f06:	89a2      	ldrh	r2, [r4, #12]
 8002f08:	434b      	muls	r3, r1
 8002f0a:	6829      	ldr	r1, [r5, #0]
 8002f0c:	0410      	lsls	r0, r2, #16
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002f0e:	bf4c      	ite	mi
 8002f10:	0049      	lslmi	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002f12:	0089      	lslpl	r1, r1, #2
 8002f14:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f18:	2564      	movs	r5, #100	; 0x64
 8002f1a:	fbb1 f3f5 	udiv	r3, r1, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f1e:	89a2      	ldrh	r2, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8002f20:	0118      	lsls	r0, r3, #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f22:	0412      	lsls	r2, r2, #16
 8002f24:	fb05 1313 	mls	r3, r5, r3, r1
 8002f28:	d50b      	bpl.n	8002f42 <USART_Init+0x92>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002f2a:	00da      	lsls	r2, r3, #3
 8002f2c:	3232      	adds	r2, #50	; 0x32
 8002f2e:	fbb2 f2f5 	udiv	r2, r2, r5
 8002f32:	f002 0207 	and.w	r2, r2, #7
 8002f36:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	8123      	strh	r3, [r4, #8]
}
 8002f3e:	b007      	add	sp, #28
 8002f40:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	fbb3 f3f5 	udiv	r3, r3, r5
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	4303      	orrs	r3, r0
 8002f50:	e7f3      	b.n	8002f3a <USART_Init+0x8a>
 8002f52:	bf00      	nop
 8002f54:	40013800 	.word	0x40013800

08002f58 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002f58:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8002f5a:	b121      	cbz	r1, 8002f66 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002f62:	8183      	strh	r3, [r0, #12]
  }
}
 8002f64:	4770      	bx	lr
    USARTx->CR1 &= CR1_UE_Reset;
 8002f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	e7f8      	b.n	8002f62 <USART_Cmd+0xa>

08002f70 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002f70:	2301      	movs	r3, #1
{
 8002f72:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002f74:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002f78:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_Mask;
 8002f7a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002f7e:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002f82:	d105      	bne.n	8002f90 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 8002f84:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002f86:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8002f88:	b13a      	cbz	r2, 8002f9a <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002f8a:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002f8c:	6001      	str	r1, [r0, #0]
  }
}
 8002f8e:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002f90:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 8002f92:	bf0c      	ite	eq
 8002f94:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 8002f96:	3014      	addne	r0, #20
 8002f98:	e7f5      	b.n	8002f86 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002f9a:	ea23 0101 	bic.w	r1, r3, r1
 8002f9e:	e7f5      	b.n	8002f8c <USART_ITConfig+0x1c>

08002fa0 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002fa0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002fa4:	8081      	strh	r1, [r0, #4]
}
 8002fa6:	4770      	bx	lr

08002fa8 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002fa8:	8880      	ldrh	r0, [r0, #4]
}
 8002faa:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002fae:	4770      	bx	lr

08002fb0 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002fb0:	8803      	ldrh	r3, [r0, #0]
 8002fb2:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002fb4:	bf14      	ite	ne
 8002fb6:	2001      	movne	r0, #1
 8002fb8:	2000      	moveq	r0, #0
 8002fba:	4770      	bx	lr

08002fbc <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	0a09      	lsrs	r1, r1, #8
 8002fc0:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	8003      	strh	r3, [r0, #0]
}
 8002fc8:	4770      	bx	lr
	...

08002fcc <prvSendMessageUSART2>:
#include <string.h>
#include "stm32f10x_it.h"


 void prvSendMessageUSART2(char *message)
{
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	4604      	mov	r4, r0
uint16_t cont_aux=0;

    while(cont_aux != strlen(message))
 8002fd0:	2500      	movs	r5, #0
    {
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 8002fd2:	4f0a      	ldr	r7, [pc, #40]	; (8002ffc <prvSendMessageUSART2+0x30>)
    while(cont_aux != strlen(message))
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7fd f8bb 	bl	8000150 <strlen>
 8002fda:	b2ae      	uxth	r6, r5
 8002fdc:	42b0      	cmp	r0, r6
 8002fde:	d100      	bne.n	8002fe2 <prvSendMessageUSART2+0x16>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
        {
        }
        cont_aux++;
    }
}
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        USART_SendData(USART2, (uint8_t) message[cont_aux]);
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	5da1      	ldrb	r1, [r4, r6]
 8002fe6:	f7ff ffdb 	bl	8002fa0 <USART_SendData>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	4638      	mov	r0, r7
 8002fee:	f7ff ffdf 	bl	8002fb0 <USART_GetFlagStatus>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d0f9      	beq.n	8002fea <prvSendMessageUSART2+0x1e>
        cont_aux++;
 8002ff6:	3501      	adds	r5, #1
 8002ff8:	e7ec      	b.n	8002fd4 <prvSendMessageUSART2+0x8>
 8002ffa:	bf00      	nop
 8002ffc:	40004400 	.word	0x40004400

08003000 <Float2String>:

 void Float2String(float num, char* str)
{
 8003000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003002:	460d      	mov	r5, r1
	char *tmpSign = (num < 0) ? "-" : "";
 8003004:	2100      	movs	r1, #0
{
 8003006:	4604      	mov	r4, r0
	char *tmpSign = (num < 0) ? "-" : "";
 8003008:	f7fe f85a 	bl	80010c0 <__aeabi_fcmplt>
 800300c:	b1d0      	cbz	r0, 8003044 <Float2String+0x44>
 800300e:	4f0e      	ldr	r7, [pc, #56]	; (8003048 <Float2String+0x48>)
	float tmpVal = (num < 0) ? -num : num;
 8003010:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000

	int tmpInt1 = tmpVal;                  // Get the integer (678).
 8003014:	4620      	mov	r0, r4
 8003016:	f7fe f87b 	bl	8001110 <__aeabi_f2iz>
 800301a:	4606      	mov	r6, r0
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 800301c:	f7fd fe5e 	bl	8000cdc <__aeabi_i2f>
 8003020:	4601      	mov	r1, r0
 8003022:	4620      	mov	r0, r4
 8003024:	f7fd fda4 	bl	8000b70 <__aeabi_fsub>
	int tmpInt2 = tmpFrac * 10000;  	   // Turn into integer (123).
 8003028:	4908      	ldr	r1, [pc, #32]	; (800304c <Float2String+0x4c>)
 800302a:	f7fd feab 	bl	8000d84 <__aeabi_fmul>
 800302e:	f7fe f86f 	bl	8001110 <__aeabi_f2iz>

	// Print as parts, note that you need 0-padding for fractional bit.
	sprintf (str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
 8003032:	4633      	mov	r3, r6
 8003034:	9000      	str	r0, [sp, #0]
 8003036:	463a      	mov	r2, r7
 8003038:	4628      	mov	r0, r5
 800303a:	4905      	ldr	r1, [pc, #20]	; (8003050 <Float2String+0x50>)
 800303c:	f001 fc66 	bl	800490c <siprintf>

}
 8003040:	b003      	add	sp, #12
 8003042:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char *tmpSign = (num < 0) ? "-" : "";
 8003044:	4f03      	ldr	r7, [pc, #12]	; (8003054 <Float2String+0x54>)
 8003046:	e7e5      	b.n	8003014 <Float2String+0x14>
 8003048:	080094c4 	.word	0x080094c4
 800304c:	461c4000 	.word	0x461c4000
 8003050:	080094c6 	.word	0x080094c6
 8003054:	080094c3 	.word	0x080094c3

08003058 <prvSetupRCC>:
	pvrIntrp();
}


 void prvSetupRCC( void )
{
 8003058:	b510      	push	{r4, lr}
    /* RCC configuration - 72 MHz */
    ErrorStatus HSEStartUpStatus;

   RCC_DeInit();
 800305a:	f7ff fa65 	bl	8002528 <RCC_DeInit>
    /*Enable the HSE*/
    RCC_HSEConfig(RCC_HSE_ON);
 800305e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003062:	f7ff fa81 	bl	8002568 <RCC_HSEConfig>
    /* Wait untill HSE is ready or time out */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003066:	f7ff fb67 	bl	8002738 <RCC_WaitForHSEStartUp>
    if(HSEStartUpStatus == SUCCESS)
 800306a:	2801      	cmp	r0, #1
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800306c:	4604      	mov	r4, r0
    if(HSEStartUpStatus == SUCCESS)
 800306e:	d125      	bne.n	80030bc <prvSetupRCC+0x64>
    {
        /* Enable The Prefetch Buffer */
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003070:	2010      	movs	r0, #16
 8003072:	f7ff f9fd 	bl	8002470 <FLASH_PrefetchBufferCmd>
        /* 72 MHZ - 2 wait states */
        FLASH_SetLatency(FLASH_Latency_2);
 8003076:	2002      	movs	r0, #2
 8003078:	f7ff f9f0 	bl	800245c <FLASH_SetLatency>

        /* No division HCLK = SYSCLK */
        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 800307c:	2000      	movs	r0, #0
 800307e:	f7ff fab1 	bl	80025e4 <RCC_HCLKConfig>
        /* PCLK1 = HCLK/2 (36MHz) */
        RCC_PCLK1Config(RCC_HCLK_Div2);
 8003082:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003086:	f7ff fab7 	bl	80025f8 <RCC_PCLK1Config>
        /* PCLK2 = HCLK (72MHz)*/
        RCC_PCLK2Config(RCC_HCLK_Div1);
 800308a:	2000      	movs	r0, #0
 800308c:	f7ff fabe 	bl	800260c <RCC_PCLK2Config>

        /* Use PLL with HSE=12MHz */
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
 8003090:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003094:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003098:	f7ff fa82 	bl	80025a0 <RCC_PLLConfig>
        /* Enable the PLL */
        RCC_PLLCmd(ENABLE);
 800309c:	4620      	mov	r0, r4
 800309e:	f7ff fa89 	bl	80025b4 <RCC_PLLCmd>
        /* Wait for PLL ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET );
 80030a2:	2039      	movs	r0, #57	; 0x39
 80030a4:	f7ff fb34 	bl	8002710 <RCC_GetFlagStatus>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d0fa      	beq.n	80030a2 <prvSetupRCC+0x4a>

        /* Select the PLL as system clock source */
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7ff fa87 	bl	80025c0 <RCC_SYSCLKConfig>
        /* Wait until PLL is used as system clock */
        while( RCC_GetSYSCLKSource() != 0x08 );
 80030b2:	f7ff fa8f 	bl	80025d4 <RCC_GetSYSCLKSource>
 80030b6:	2808      	cmp	r0, #8
 80030b8:	d1fb      	bne.n	80030b2 <prvSetupRCC+0x5a>
    }
    else
    {
        while(1);
    }
}
 80030ba:	bd10      	pop	{r4, pc}
        while(1);
 80030bc:	e7fe      	b.n	80030bc <prvSetupRCC+0x64>
	...

080030c0 <prvSetupGPIO>:
/*-----------------------------------------------------------*/

 void prvSetupGPIO( void )
{
 80030c0:	b513      	push	{r0, r1, r4, lr}
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030c2:	4c12      	ldr	r4, [pc, #72]	; (800310c <prvSetupGPIO+0x4c>)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );
 80030c4:	2101      	movs	r1, #1
 80030c6:	2004      	movs	r0, #4
 80030c8:	f7ff faf2 	bl	80026b0 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <prvSetupGPIO+0x50>)
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030ce:	4620      	mov	r0, r4
 80030d0:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 |GPIO_Pin_1;
 80030d2:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030d4:	f7ff f9d8 	bl	8002488 <GPIO_Init>

	// Pinos Motor (A) IN1A | IN2A
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <prvSetupGPIO+0x54>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030da:	4620      	mov	r0, r4
 80030dc:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 |GPIO_Pin_7;
 80030de:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030e0:	f7ff f9d2 	bl	8002488 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );
 80030e4:	2101      	movs	r1, #1
 80030e6:	2008      	movs	r0, #8
 80030e8:	f7ff fae2 	bl	80026b0 <RCC_APB2PeriphClockCmd>

	// GPIO Encoder (A)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <prvSetupGPIO+0x58>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030f2:	4620      	mov	r0, r4
 80030f4:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80030f6:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030f8:	f7ff f9c6 	bl	8002488 <GPIO_Init>

	// GPIO Motor (B) IN1B | IN2B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <prvSetupGPIO+0x5c>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030fe:	4620      	mov	r0, r4
 8003100:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 |GPIO_Pin_1;
 8003102:	9301      	str	r3, [sp, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003104:	f7ff f9c0 	bl	8002488 <GPIO_Init>

}
 8003108:	b002      	add	sp, #8
 800310a:	bd10      	pop	{r4, pc}
 800310c:	40010800 	.word	0x40010800
 8003110:	04030003 	.word	0x04030003
 8003114:	180300c0 	.word	0x180300c0
 8003118:	040300c0 	.word	0x040300c0
 800311c:	18030003 	.word	0x18030003

08003120 <prvTIMERs>:

/*-----------------------------------------------------------*/

 void prvTIMERs( void )
{
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Configuração TIM4 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_DeInit(TIM4);

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8003124:	2400      	movs	r4, #0
 8003126:	f44f 4675 	mov.w	r6, #62720	; 0xf500
    TIM_DeInit(TIM4);
 800312a:	4d58      	ldr	r5, [pc, #352]	; (800328c <prvTIMERs+0x16c>)
{
 800312c:	b08a      	sub	sp, #40	; 0x28
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800312e:	2101      	movs	r1, #1
 8003130:	2004      	movs	r0, #4
 8003132:	f7ff fac9 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    TIM_DeInit(TIM4);
 8003136:	4628      	mov	r0, r5
 8003138:	f7ff fb88 	bl	800284c <TIM_DeInit>
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800313c:	4669      	mov	r1, sp
 800313e:	4628      	mov	r0, r5
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 8003140:	e9cd 4600 	strd	r4, r6, [sp]
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8003144:	f7ff fc66 	bl	8002a14 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8003148:	4623      	mov	r3, r4
 800314a:	4622      	mov	r2, r4
 800314c:	2103      	movs	r1, #3
 800314e:	4628      	mov	r0, r5
 8003150:	f7ff fdbd 	bl	8002cce <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 8003154:	a803      	add	r0, sp, #12
 8003156:	f7ff fd9d 	bl	8002c94 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 800315a:	4628      	mov	r0, r5
 800315c:	a903      	add	r1, sp, #12
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 800315e:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_ICInit(TIM4, &TIM_ICInitStruct); /* Input channel initialization */
 8003162:	f7ff fe09 	bl	8002d78 <TIM_ICInit>
	TIM_SetCounter(TIM4, CNT1_INIT);      /*CNT Set initial value */
 8003166:	4621      	mov	r1, r4
 8003168:	4628      	mov	r0, r5
 800316a:	f7ff fdcf 	bl	8002d0c <TIM_SetCounter>
	TIM_ClearFlag(TIM4,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 800316e:	4628      	mov	r0, r5
 8003170:	2101      	movs	r1, #1
 8003172:	f7ff fe95 	bl	8002ea0 <TIM_ClearFlag>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE); /* Interrupt enable */
 8003176:	2201      	movs	r2, #1
 8003178:	4628      	mov	r0, r5
 800317a:	4611      	mov	r1, r2
 800317c:	f7ff fd9e 	bl	8002cbc <TIM_ITConfig>
	TIM_Cmd(TIM4,ENABLE);                /* Can make CR register */
 8003180:	4628      	mov	r0, r5
 8003182:	2101      	movs	r1, #1
 8003184:	f7ff fd8e 	bl	8002ca4 <TIM_Cmd>

	// Configuração TIM2 Enconders
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003188:	2101      	movs	r1, #1
 800318a:	4608      	mov	r0, r1
 800318c:	f7ff fa9c 	bl	80026c8 <RCC_APB1PeriphClockCmd>
	TIM_DeInit(TIM2);
 8003190:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003194:	f7ff fb5a 	bl	800284c <TIM_DeInit>

    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Prescaler = 0; //prescaler de 0 até 65535
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003198:	4669      	mov	r1, sp
 800319a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    TIM_TimeBaseStructure.TIM_Period = 62720; //auto-reload 0 até 65535
 800319e:	e9cd 4600 	strd	r4, r6, [sp]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80031a2:	f7ff fc37 	bl	8002a14 <TIM_TimeBaseInit>

	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12,TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 80031a6:	4623      	mov	r3, r4
 80031a8:	4622      	mov	r2, r4
 80031aa:	2103      	movs	r1, #3
 80031ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031b0:	f7ff fd8d 	bl	8002cce <TIM_EncoderInterfaceConfig>
	TIM_ICStructInit(&TIM_ICInitStruct);
 80031b4:	a803      	add	r0, sp, #12
 80031b6:	f7ff fd6d 	bl	8002c94 <TIM_ICStructInit>
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 80031ba:	a903      	add	r1, sp, #12
 80031bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_ICInitStruct.TIM_ICFilter = 0;   /* Filter parameters of input channel */
 80031c0:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_ICInit(TIM2, &TIM_ICInitStruct); /* Input channel initialization */
 80031c4:	f7ff fdd8 	bl	8002d78 <TIM_ICInit>
	TIM_SetCounter(TIM2, CNT2_INIT);      /*CNT Set initial value */
 80031c8:	4621      	mov	r1, r4
 80031ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031ce:	f7ff fd9d 	bl	8002d0c <TIM_SetCounter>
	TIM_ClearFlag(TIM2,TIM_IT_Update);   /* The interrupt sign is clear 0*/
 80031d2:	2101      	movs	r1, #1
 80031d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031d8:	f7ff fe62 	bl	8002ea0 <TIM_ClearFlag>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); /* Interrupt enable */
 80031dc:	2201      	movs	r2, #1
 80031de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031e2:	4611      	mov	r1, r2
 80031e4:	f7ff fd6a 	bl	8002cbc <TIM_ITConfig>
	TIM_Cmd(TIM2,ENABLE);                /* Can make CR register */
 80031e8:	2101      	movs	r1, #1
 80031ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

	// Configuração TIM3 PWM Motores
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_DeInit(TIM3);
 80031ee:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
	TIM_Cmd(TIM2,ENABLE);                /* Can make CR register */
 80031f2:	f7ff fd57 	bl	8002ca4 <TIM_Cmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80031f6:	2101      	movs	r1, #1
 80031f8:	2002      	movs	r0, #2
 80031fa:	f7ff fa65 	bl	80026c8 <RCC_APB1PeriphClockCmd>
	TIM_DeInit(TIM3);
 80031fe:	4628      	mov	r0, r5
 8003200:	f7ff fb24 	bl	800284c <TIM_DeInit>

	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 8003204:	2364      	movs	r3, #100	; 0x64

	// IN1B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003206:	f04f 0802 	mov.w	r8, #2
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <prvTIMERs+0x170>)
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 800320c:	4e21      	ldr	r6, [pc, #132]	; (8003294 <prvTIMERs+0x174>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 800320e:	4669      	mov	r1, sp
 8003210:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = 100; //auto-reload 0 até 65535
 8003212:	e9cd 2300 	strd	r2, r3, [sp]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003216:	4f20      	ldr	r7, [pc, #128]	; (8003298 <prvTIMERs+0x178>)
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8003218:	f7ff fbfc 	bl	8002a14 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 800321c:	8833      	ldrh	r3, [r6, #0]
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 800321e:	4628      	mov	r0, r5
 8003220:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN1A; //0 at´e 65535
 8003222:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003226:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003228:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 800322c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8003230:	f7ff fc3a 	bl	8002aa8 <TIM_OC1Init>
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 8003234:	8873      	ldrh	r3, [r6, #2]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 8003236:	4628      	mov	r0, r5
 8003238:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN2A; //0 at´e 65535
 800323a:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800323e:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003240:	f8ad 4020 	strh.w	r4, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8003244:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);
 8003248:	f7ff fc72 	bl	8002b30 <TIM_OC2Init>
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 800324c:	88b3      	ldrh	r3, [r6, #4]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 800324e:	4628      	mov	r0, r5
 8003250:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN1B; //0 at´e 65535
 8003252:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003256:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003258:	f8ad 8020 	strh.w	r8, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 800325c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC3Init(TIM3, &TIM_OCInitStructure);
 8003260:	f7ff fca6 	bl	8002bb0 <TIM_OC3Init>

	// IN2B
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 8003264:	88f3      	ldrh	r3, [r6, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8003266:	4628      	mov	r0, r5
 8003268:	a906      	add	r1, sp, #24
	TIM_OCInitStructure.TIM_Pulse = IN2B; //0 at´e 65535
 800326a:	f8ad 301e 	strh.w	r3, [sp, #30]
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800326e:	9706      	str	r7, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003270:	f8ad 8020 	strh.w	r8, [sp, #32]
	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
 8003274:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8003278:	f7ff fcd8 	bl	8002c2c <TIM_OC4Init>
	TIM_Cmd(TIM3, ENABLE);
 800327c:	2101      	movs	r1, #1
 800327e:	4628      	mov	r0, r5
 8003280:	f7ff fd10 	bl	8002ca4 <TIM_Cmd>
}
 8003284:	b00a      	add	sp, #40	; 0x28
 8003286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800328a:	bf00      	nop
 800328c:	40000800 	.word	0x40000800
 8003290:	001002c7 	.word	0x001002c7
 8003294:	200033f0 	.word	0x200033f0
 8003298:	00010060 	.word	0x00010060

0800329c <pvrIntrp>:



 void pvrIntrp(void)
{
 800329c:	b507      	push	{r0, r1, r2, lr}
	NVIC_InitTypeDef NVIC_InitStructure;
	/* Configura o Priority Group com 1 bit */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800329e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80032a2:	f7ff f8a5 	bl	80023f0 <NVIC_PriorityGroupConfig>

	/* Interrupção global do TIM com prioridade 0 sub-prioridade */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <pvrIntrp+0x64>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80032a8:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80032aa:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 80032ac:	f7ff f8aa 	bl	8002404 <NVIC_Init>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80032b0:	2201      	movs	r2, #1
 80032b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032b6:	4611      	mov	r1, r2
 80032b8:	f7ff fd00 	bl	8002cbc <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <pvrIntrp+0x68>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80032be:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 80032c0:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 80032c2:	f7ff f89f 	bl	8002404 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80032c6:	2201      	movs	r2, #1
 80032c8:	480f      	ldr	r0, [pc, #60]	; (8003308 <pvrIntrp+0x6c>)
 80032ca:	4611      	mov	r1, r2
 80032cc:	f7ff fcf6 	bl	8002cbc <TIM_ITConfig>

	// TIM3 Int
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <pvrIntrp+0x70>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80032d2:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80032d4:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 80032d6:	f7ff f895 	bl	8002404 <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80032da:	2201      	movs	r2, #1
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <pvrIntrp+0x74>)
 80032de:	4611      	mov	r1, r2
 80032e0:	f7ff fcec 	bl	8002cbc <TIM_ITConfig>

	// Interrupt USART
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <pvrIntrp+0x78>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80032e6:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80032e8:	9301      	str	r3, [sp, #4]
	NVIC_Init(&NVIC_InitStructure);
 80032ea:	f7ff f88b 	bl	8002404 <NVIC_Init>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80032ee:	2201      	movs	r2, #1
 80032f0:	f240 5125 	movw	r1, #1317	; 0x525
 80032f4:	4808      	ldr	r0, [pc, #32]	; (8003318 <pvrIntrp+0x7c>)
 80032f6:	f7ff fe3b 	bl	8002f70 <USART_ITConfig>

}
 80032fa:	b003      	add	sp, #12
 80032fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003300:	0100001c 	.word	0x0100001c
 8003304:	0100001e 	.word	0x0100001e
 8003308:	40000800 	.word	0x40000800
 800330c:	0100001d 	.word	0x0100001d
 8003310:	40000400 	.word	0x40000400
 8003314:	01000026 	.word	0x01000026
 8003318:	40004400 	.word	0x40004400

0800331c <prvSetupUSART2>:

void prvSetupUSART2( void )
{
 800331c:	b510      	push	{r4, lr}
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled */

    /* Enable GPIOA clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 800331e:	2101      	movs	r1, #1
{
 8003320:	b086      	sub	sp, #24
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 8003322:	2004      	movs	r0, #4
 8003324:	f7ff f9c4 	bl	80026b0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003328:	4c13      	ldr	r4, [pc, #76]	; (8003378 <prvSetupUSART2+0x5c>)
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800332a:	2101      	movs	r1, #1
 800332c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003330:	f7ff f9ca 	bl	80026c8 <RCC_APB1PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <prvSetupUSART2+0x60>)
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003336:	4620      	mov	r0, r4
 8003338:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 800333a:	9301      	str	r3, [sp, #4]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800333c:	f7ff f8a4 	bl	8002488 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <prvSetupUSART2+0x64>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003342:	4620      	mov	r0, r4
 8003344:	a901      	add	r1, sp, #4
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8003346:	9301      	str	r3, [sp, #4]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003348:	f7ff f89e 	bl	8002488 <GPIO_Init>

    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800334c:	2300      	movs	r3, #0
 800334e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003352:	e9cd 2302 	strd	r2, r3, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003356:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;

    /* Configure the USART2 */
    USART_Init(USART2, &USART_InitStructure);
 800335a:	f5a4 4444 	sub.w	r4, r4, #50176	; 0xc400
 800335e:	4620      	mov	r0, r4
 8003360:	a902      	add	r1, sp, #8
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003362:	9204      	str	r2, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003364:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_Init(USART2, &USART_InitStructure);
 8003368:	f7ff fda2 	bl	8002eb0 <USART_Init>
    /* Enable the USART2 */
    USART_Cmd(USART2, ENABLE);
 800336c:	2101      	movs	r1, #1
 800336e:	4620      	mov	r0, r4
 8003370:	f7ff fdf2 	bl	8002f58 <USART_Cmd>
 }
 8003374:	b006      	add	sp, #24
 8003376:	bd10      	pop	{r4, pc}
 8003378:	40010800 	.word	0x40010800
 800337c:	18030004 	.word	0x18030004
 8003380:	04030008 	.word	0x04030008

08003384 <prvInitial_configuration>:
void prvInitial_configuration(void){
 8003384:	b508      	push	{r3, lr}
	prvSetupRCC();
 8003386:	f7ff fe67 	bl	8003058 <prvSetupRCC>
	prvSetupGPIO();
 800338a:	f7ff fe99 	bl	80030c0 <prvSetupGPIO>
	prvTIMERs();
 800338e:	f7ff fec7 	bl	8003120 <prvTIMERs>
	prvSetupUSART2();
 8003392:	f7ff ffc3 	bl	800331c <prvSetupUSART2>
}
 8003396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pvrIntrp();
 800339a:	f7ff bf7f 	b.w	800329c <pvrIntrp>

0800339e <init_odom_var>:
	odom.pose.orientation.w=0;
	odom.pose.position.x=0;
	odom.pose.position.y=0;
	odom.twist.linear.x=0;
	odom.twist.angular.z=0;
	return odom;
 800339e:	2200      	movs	r2, #0
 80033a0:	6002      	str	r2, [r0, #0]
 80033a2:	6042      	str	r2, [r0, #4]
 80033a4:	6082      	str	r2, [r0, #8]
 80033a6:	60c2      	str	r2, [r0, #12]
 80033a8:	6102      	str	r2, [r0, #16]
 80033aa:	6142      	str	r2, [r0, #20]
}
 80033ac:	4770      	bx	lr
	...

080033b0 <prvOdometryTrack>:
	}
}

/*-----------------------------------------------------------*/

static void prvOdometryTrack(void *pvParameters){
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	Odometry odom=init_odom_var();
	Var_ticks v_ticks;
	float d_ticks, d_theta_i, theta=0, d_x=0, d_y=0, x=0, y=0;
 80033b4:	2400      	movs	r4, #0
static void prvOdometryTrack(void *pvParameters){
 80033b6:	b0a1      	sub	sp, #132	; 0x84
	Odometry odom=init_odom_var();
 80033b8:	a812      	add	r0, sp, #72	; 0x48
 80033ba:	f7ff fff0 	bl	800339e <init_odom_var>
	float d_ticks, d_theta_i, theta=0, d_x=0, d_y=0, x=0, y=0;
 80033be:	4626      	mov	r6, r4
 80033c0:	4625      	mov	r5, r4
	char buf_x[15],buf_y[15],buf_th[15],buf[msg_length];


	for(;;){
		xQueuePeek( xQueueTicks, &v_ticks , ( TickType_t ) portMAX_DELAY );
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <prvOdometryTrack+0x168>)
 80033c4:	a905      	add	r1, sp, #20
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	f7fe fb4c 	bl	8001a68 <xQueuePeek>
		xSemaphoreGive( xSemaphore_Ticks );
 80033d0:	2300      	movs	r3, #0
 80033d2:	4852      	ldr	r0, [pc, #328]	; (800351c <prvOdometryTrack+0x16c>)
 80033d4:	4619      	mov	r1, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6800      	ldr	r0, [r0, #0]
 80033da:	f7fe f981 	bl	80016e0 <xQueueGenericSend>

		/* encoder variation */
		d_ticks = ticks2m(	((float)v_ticks.esq + (float)v_ticks.dir)/2	);
 80033de:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80033e2:	f7fd fc7b 	bl	8000cdc <__aeabi_i2f>
 80033e6:	4607      	mov	r7, r0
 80033e8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80033ec:	f7fd fc76 	bl	8000cdc <__aeabi_i2f>

		d_theta_i = ticks2m(((float)v_ticks.dir - (float)v_ticks.esq)/baseDist);
 80033f0:	4639      	mov	r1, r7
		d_ticks = ticks2m(	((float)v_ticks.esq + (float)v_ticks.dir)/2	);
 80033f2:	4680      	mov	r8, r0
		d_theta_i = ticks2m(((float)v_ticks.dir - (float)v_ticks.esq)/baseDist);
 80033f4:	f7fd fbbc 	bl	8000b70 <__aeabi_fsub>
 80033f8:	f7fd f816 	bl	8000428 <__aeabi_f2d>
 80033fc:	a340      	add	r3, pc, #256	; (adr r3, 8003500 <prvOdometryTrack+0x150>)
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f7fd f993 	bl	800072c <__aeabi_ddiv>
 8003406:	a340      	add	r3, pc, #256	; (adr r3, 8003508 <prvOdometryTrack+0x158>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd f864 	bl	80004d8 <__aeabi_dmul>
 8003410:	a33f      	add	r3, pc, #252	; (adr r3, 8003510 <prvOdometryTrack+0x160>)
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f7fd f85f 	bl	80004d8 <__aeabi_dmul>
 800341a:	2200      	movs	r2, #0
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <prvOdometryTrack+0x170>)
 800341e:	f7fd f985 	bl	800072c <__aeabi_ddiv>
 8003422:	f7fd fb51 	bl	8000ac8 <__aeabi_d2f>
 8003426:	4601      	mov	r1, r0

		theta += d_theta_i;
 8003428:	4628      	mov	r0, r5
 800342a:	f7fd fba3 	bl	8000b74 <__addsf3>
		d_ticks = ticks2m(	((float)v_ticks.esq + (float)v_ticks.dir)/2	);
 800342e:	4641      	mov	r1, r8
		theta += d_theta_i;
 8003430:	4605      	mov	r5, r0
		d_ticks = ticks2m(	((float)v_ticks.esq + (float)v_ticks.dir)/2	);
 8003432:	4638      	mov	r0, r7
 8003434:	f7fd fb9e 	bl	8000b74 <__addsf3>
 8003438:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800343c:	f7fd fca2 	bl	8000d84 <__aeabi_fmul>
 8003440:	f7fc fff2 	bl	8000428 <__aeabi_f2d>
 8003444:	a330      	add	r3, pc, #192	; (adr r3, 8003508 <prvOdometryTrack+0x158>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f845 	bl	80004d8 <__aeabi_dmul>
 800344e:	a330      	add	r3, pc, #192	; (adr r3, 8003510 <prvOdometryTrack+0x160>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f7fd f840 	bl	80004d8 <__aeabi_dmul>
 8003458:	2200      	movs	r2, #0
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <prvOdometryTrack+0x170>)
 800345c:	f7fd f966 	bl	800072c <__aeabi_ddiv>
 8003460:	f7fd fb32 	bl	8000ac8 <__aeabi_d2f>


		d_x = d_ticks*cos(theta);
 8003464:	f7fc ffe0 	bl	8000428 <__aeabi_f2d>
 8003468:	4682      	mov	sl, r0
 800346a:	4628      	mov	r0, r5
 800346c:	468b      	mov	fp, r1
 800346e:	f7fc ffdb 	bl	8000428 <__aeabi_f2d>
 8003472:	4680      	mov	r8, r0
 8003474:	4689      	mov	r9, r1
 8003476:	f004 ffcb 	bl	8008410 <cos>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
		d_y = d_ticks*sin(theta);
 800347e:	4640      	mov	r0, r8
 8003480:	4649      	mov	r1, r9
		d_x = d_ticks*cos(theta);
 8003482:	e9cd 2302 	strd	r2, r3, [sp, #8]
		d_y = d_ticks*sin(theta);
 8003486:	f005 f805 	bl	8008494 <sin>
		d_x = d_ticks*cos(theta);
 800348a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		d_y = d_ticks*sin(theta);
 800348e:	4680      	mov	r8, r0
 8003490:	4689      	mov	r9, r1
		d_x = d_ticks*cos(theta);
 8003492:	4650      	mov	r0, sl
 8003494:	4659      	mov	r1, fp
 8003496:	f7fd f81f 	bl	80004d8 <__aeabi_dmul>
 800349a:	f7fd fb15 	bl	8000ac8 <__aeabi_d2f>
 800349e:	4601      	mov	r1, r0

		x+=d_x;
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7fd fb67 	bl	8000b74 <__addsf3>
		d_y = d_ticks*sin(theta);
 80034a6:	4642      	mov	r2, r8
 80034a8:	464b      	mov	r3, r9
		x+=d_x;
 80034aa:	4606      	mov	r6, r0
		d_y = d_ticks*sin(theta);
 80034ac:	4659      	mov	r1, fp
 80034ae:	4650      	mov	r0, sl
 80034b0:	f7fd f812 	bl	80004d8 <__aeabi_dmul>
 80034b4:	f7fd fb08 	bl	8000ac8 <__aeabi_d2f>
 80034b8:	4601      	mov	r1, r0
		y+=d_y;
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7fd fb5a 	bl	8000b74 <__addsf3>
 80034c0:	4604      	mov	r4, r0

		Float2String(x, buf_x);
 80034c2:	a906      	add	r1, sp, #24
 80034c4:	4630      	mov	r0, r6
 80034c6:	f7ff fd9b 	bl	8003000 <Float2String>
		Float2String(y, buf_y);
		Float2String(theta, buf_th);
 80034ca:	af0e      	add	r7, sp, #56	; 0x38
		Float2String(y, buf_y);
 80034cc:	4620      	mov	r0, r4
 80034ce:	a90a      	add	r1, sp, #40	; 0x28
 80034d0:	f7ff fd96 	bl	8003000 <Float2String>
		Float2String(theta, buf_th);
 80034d4:	4639      	mov	r1, r7
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7ff fd92 	bl	8003000 <Float2String>
		sprintf(buf,"X:%s Y:%s th:%s\n",buf_x,buf_y,buf_th);
 80034dc:	ab0a      	add	r3, sp, #40	; 0x28
 80034de:	aa06      	add	r2, sp, #24
 80034e0:	4910      	ldr	r1, [pc, #64]	; (8003524 <prvOdometryTrack+0x174>)
 80034e2:	9700      	str	r7, [sp, #0]
 80034e4:	a818      	add	r0, sp, #96	; 0x60
 80034e6:	f001 fa11 	bl	800490c <siprintf>
		xQueueSendToBack(xQueueMessageOut,&buf,(TickType_t)1);
 80034ea:	480f      	ldr	r0, [pc, #60]	; (8003528 <prvOdometryTrack+0x178>)
 80034ec:	2300      	movs	r3, #0
 80034ee:	2201      	movs	r2, #1
 80034f0:	a918      	add	r1, sp, #96	; 0x60
 80034f2:	6800      	ldr	r0, [r0, #0]
 80034f4:	f7fe f8f4 	bl	80016e0 <xQueueGenericSend>
	for(;;){
 80034f8:	e763      	b.n	80033c2 <prvOdometryTrack+0x12>
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	e978d4fe 	.word	0xe978d4fe
 8003504:	3fc83126 	.word	0x3fc83126
 8003508:	1eb851ec 	.word	0x1eb851ec
 800350c:	3fb1eb85 	.word	0x3fb1eb85
 8003510:	54442d18 	.word	0x54442d18
 8003514:	400921fb 	.word	0x400921fb
 8003518:	20003410 	.word	0x20003410
 800351c:	20003434 	.word	0x20003434
 8003520:	40b18000 	.word	0x40b18000
 8003524:	080094d0 	.word	0x080094d0
 8003528:	20003438 	.word	0x20003438

0800352c <prvReadUsart>:
}

static void prvReadUsart(void *pvParameters)
{
	char buf[30];
	uint8_t command=0;
 800352c:	2300      	movs	r3, #0
{
 800352e:	b507      	push	{r0, r1, r2, lr}

	uint16_t rx;
	for(;;){
//		xQueueReceive(xQueueUsart, &message,(TickType_t)portMAX_DELAY);
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 8003530:	4d39      	ldr	r5, [pc, #228]	; (8003618 <prvReadUsart+0xec>)
		{/* process receive message */

			if(rx ==42317){	command=100;xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 8003532:	4c3a      	ldr	r4, [pc, #232]	; (800361c <prvReadUsart+0xf0>)
	uint8_t command=0;
 8003534:	f88d 3005 	strb.w	r3, [sp, #5]
		if( xQueueReceive( xQueueUsart, &rx,( TickType_t ) portMAX_DELAY ) == pdPASS )
 8003538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800353c:	6828      	ldr	r0, [r5, #0]
 800353e:	f10d 0106 	add.w	r1, sp, #6
 8003542:	f7fe f985 	bl	8001850 <xQueueReceive>
 8003546:	2801      	cmp	r0, #1
 8003548:	d1f6      	bne.n	8003538 <prvReadUsart+0xc>
			if(rx ==42317){	command=100;xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 800354a:	f24a 534d 	movw	r3, #42317	; 0xa54d
 800354e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003552:	429a      	cmp	r2, r3
 8003554:	d10a      	bne.n	800356c <prvReadUsart+0x40>
 8003556:	2364      	movs	r3, #100	; 0x64
 8003558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800355c:	f88d 3005 	strb.w	r3, [sp, #5]
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	f10d 0105 	add.w	r1, sp, #5
 8003568:	f7fe f8ba 	bl	80016e0 <xQueueGenericSend>
			if(rx ==42323){	command=0;  xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 800356c:	f24a 5353 	movw	r3, #42323	; 0xa553
 8003570:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003574:	429a      	cmp	r2, r3
 8003576:	d109      	bne.n	800358c <prvReadUsart+0x60>
 8003578:	2300      	movs	r3, #0
 800357a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f10d 0105 	add.w	r1, sp, #5
 8003584:	f88d 3005 	strb.w	r3, [sp, #5]
 8003588:	f7fe f8aa 	bl	80016e0 <xQueueGenericSend>
			if(rx ==42321){	command=20; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 800358c:	f24a 5351 	movw	r3, #42321	; 0xa551
 8003590:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003594:	429a      	cmp	r2, r3
 8003596:	d10a      	bne.n	80035ae <prvReadUsart+0x82>
 8003598:	2314      	movs	r3, #20
 800359a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800359e:	f88d 3005 	strb.w	r3, [sp, #5]
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	f10d 0105 	add.w	r1, sp, #5
 80035aa:	f7fe f899 	bl	80016e0 <xQueueGenericSend>
			if(rx ==42327){	command=40; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80035ae:	f24a 5357 	movw	r3, #42327	; 0xa557
 80035b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10a      	bne.n	80035d0 <prvReadUsart+0xa4>
 80035ba:	2328      	movs	r3, #40	; 0x28
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c0:	f88d 3005 	strb.w	r3, [sp, #5]
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	f10d 0105 	add.w	r1, sp, #5
 80035cc:	f7fe f888 	bl	80016e0 <xQueueGenericSend>
			if(rx ==42309){	command=60; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80035d0:	f24a 5345 	movw	r3, #42309	; 0xa545
 80035d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d10a      	bne.n	80035f2 <prvReadUsart+0xc6>
 80035dc:	233c      	movs	r3, #60	; 0x3c
 80035de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035e2:	f88d 3005 	strb.w	r3, [sp, #5]
 80035e6:	6820      	ldr	r0, [r4, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	f10d 0105 	add.w	r1, sp, #5
 80035ee:	f7fe f877 	bl	80016e0 <xQueueGenericSend>
			if(rx ==42322){	command=80; xQueueSendToBack(xQueueVelCommand,&command,(TickType_t)portMAX_DELAY);}
 80035f2:	f24a 5352 	movw	r3, #42322	; 0xa552
 80035f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d19c      	bne.n	8003538 <prvReadUsart+0xc>
 80035fe:	2350      	movs	r3, #80	; 0x50
 8003600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003604:	f88d 3005 	strb.w	r3, [sp, #5]
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	f10d 0105 	add.w	r1, sp, #5
 8003610:	f7fe f866 	bl	80016e0 <xQueueGenericSend>
 8003614:	e790      	b.n	8003538 <prvReadUsart+0xc>
 8003616:	bf00      	nop
 8003618:	20003420 	.word	0x20003420
 800361c:	2000341c 	.word	0x2000341c

08003620 <prvSendMessage>:
		}
	}
}

static void prvSendMessage(void *pvParameters){
 8003620:	b500      	push	{lr}
	char mes[msg_length];

	for(;;){
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 8003622:	4c06      	ldr	r4, [pc, #24]	; (800363c <prvSendMessage+0x1c>)
static void prvSendMessage(void *pvParameters){
 8003624:	b089      	sub	sp, #36	; 0x24
		xQueueReceive( xQueueMessageOut, &mes,( TickType_t ) portMAX_DELAY );
 8003626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362a:	4669      	mov	r1, sp
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	f7fe f90f 	bl	8001850 <xQueueReceive>
		prvSendMessageUSART2(mes);
 8003632:	4668      	mov	r0, sp
 8003634:	f7ff fcca 	bl	8002fcc <prvSendMessageUSART2>
	for(;;){
 8003638:	e7f5      	b.n	8003626 <prvSendMessage+0x6>
 800363a:	bf00      	nop
 800363c:	20003438 	.word	0x20003438

08003640 <prvMotorDrive>:
	pwm.esq=0; pwm.dir=0;
 8003640:	2300      	movs	r3, #0
static void prvMotorDrive(void *pvParameters){
 8003642:	b507      	push	{r0, r1, r2, lr}
		xQueueReceive( xQueuePWM, &pwm,( TickType_t ) portMAX_DELAY );
 8003644:	4d0a      	ldr	r5, [pc, #40]	; (8003670 <prvMotorDrive+0x30>)
		TIM_SetCompare2(TIM3,pwm.dir); // laranja perto do cabo
 8003646:	4c0b      	ldr	r4, [pc, #44]	; (8003674 <prvMotorDrive+0x34>)
	pwm.esq=0; pwm.dir=0;
 8003648:	f8ad 3004 	strh.w	r3, [sp, #4]
		xQueueReceive( xQueuePWM, &pwm,( TickType_t ) portMAX_DELAY );
 800364c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003650:	a901      	add	r1, sp, #4
 8003652:	6828      	ldr	r0, [r5, #0]
 8003654:	f7fe f8fc 	bl	8001850 <xQueueReceive>
		TIM_SetCompare2(TIM3,pwm.dir); // laranja perto do cabo
 8003658:	4620      	mov	r0, r4
 800365a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800365e:	f7ff fb59 	bl	8002d14 <TIM_SetCompare2>
		TIM_SetCompare1(TIM3,pwm.esq); // azul  mais longe do cabo
 8003662:	4620      	mov	r0, r4
 8003664:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003668:	f7ff fb52 	bl	8002d10 <TIM_SetCompare1>
	for(;;){
 800366c:	e7ee      	b.n	800364c <prvMotorDrive+0xc>
 800366e:	bf00      	nop
 8003670:	20003418 	.word	0x20003418
 8003674:	40000400 	.word	0x40000400

08003678 <prvControlador>:
{
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float erro=0, pwm=0,P=0;
 800367c:	2400      	movs	r4, #0
	uint8_t command=0;
 800367e:	2700      	movs	r7, #0
		if (erro!=0){
 8003680:	46a0      	mov	r8, r4
{
 8003682:	b091      	sub	sp, #68	; 0x44
			if		(abs_erro>30)	{P=7;}
 8003684:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80037e4 <prvControlador+0x16c>
			pwm=MAX(0,MIN(100,pwm+P));
 8003688:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80037e8 <prvControlador+0x170>
	uint8_t command=0;
 800368c:	f88d 7007 	strb.w	r7, [sp, #7]
	pwm_real.esq=0;
 8003690:	f88d 7008 	strb.w	r7, [sp, #8]
		xSemaphoreTake( xSemaphore_Ticks, ( TickType_t ) portMAX_DELAY );
 8003694:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <prvControlador+0x140>)
 8003696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	f7fe f950 	bl	8001940 <xQueueSemaphoreTake>
		xQueueReceive(xQueueTicks,(void*)&delta_ticks_real,(TickType_t)portMAX_DELAY); /*Receive ticks from encoders*/
 80036a0:	4b46      	ldr	r3, [pc, #280]	; (80037bc <prvControlador+0x144>)
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	a903      	add	r1, sp, #12
 80036aa:	f7fe f8d1 	bl	8001850 <xQueueReceive>
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)1)== pdPASS ){
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <prvControlador+0x148>)
 80036b0:	f10d 0107 	add.w	r1, sp, #7
 80036b4:	2201      	movs	r2, #1
 80036b6:	6818      	ldr	r0, [r3, #0]
		veloc=delta_ticks_real.esq;
 80036b8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
		if(xQueueReceive(xQueueVelCommand,&command,(TickType_t)1)== pdPASS ){
 80036bc:	f7fe f8c8 	bl	8001850 <xQueueReceive>
 80036c0:	2801      	cmp	r0, #1
			vel_final=command;
 80036c2:	bf08      	it	eq
 80036c4:	f89d 7007 	ldrbeq.w	r7, [sp, #7]
		erro = (float)(vel_final-veloc);
 80036c8:	1b78      	subs	r0, r7, r5
 80036ca:	f7fd fb07 	bl	8000cdc <__aeabi_i2f>
		if (erro!=0){
 80036ce:	4641      	mov	r1, r8
		erro = (float)(vel_final-veloc);
 80036d0:	4683      	mov	fp, r0
		if (erro!=0){
 80036d2:	f7fd fceb 	bl	80010ac <__aeabi_fcmpeq>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d141      	bne.n	800375e <prvControlador+0xe6>
			float abs_erro=abs(erro);
 80036da:	4658      	mov	r0, fp
 80036dc:	f7fd fd18 	bl	8001110 <__aeabi_f2iz>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	bfb8      	it	lt
 80036e4:	4240      	neglt	r0, r0
 80036e6:	f7fd faf9 	bl	8000cdc <__aeabi_i2f>
			if		(abs_erro>30)	{P=7;}
 80036ea:	4651      	mov	r1, sl
			float abs_erro=abs(erro);
 80036ec:	4605      	mov	r5, r0
			if		(abs_erro>30)	{P=7;}
 80036ee:	f7fd fd05 	bl	80010fc <__aeabi_fcmpgt>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d14d      	bne.n	8003792 <prvControlador+0x11a>
			else if	(abs_erro>20)	{P=5;}
 80036f6:	4628      	mov	r0, r5
 80036f8:	4932      	ldr	r1, [pc, #200]	; (80037c4 <prvControlador+0x14c>)
 80036fa:	f7fd fcff 	bl	80010fc <__aeabi_fcmpgt>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d149      	bne.n	8003796 <prvControlador+0x11e>
			else if	(abs_erro>15)	{P=2;}
 8003702:	4628      	mov	r0, r5
 8003704:	4930      	ldr	r1, [pc, #192]	; (80037c8 <prvControlador+0x150>)
 8003706:	f7fd fcf9 	bl	80010fc <__aeabi_fcmpgt>
 800370a:	2800      	cmp	r0, #0
 800370c:	d145      	bne.n	800379a <prvControlador+0x122>
			else if	(abs_erro>10)	{P=1;}
 800370e:	4628      	mov	r0, r5
 8003710:	492e      	ldr	r1, [pc, #184]	; (80037cc <prvControlador+0x154>)
 8003712:	f7fd fcf3 	bl	80010fc <__aeabi_fcmpgt>
 8003716:	2800      	cmp	r0, #0
 8003718:	d142      	bne.n	80037a0 <prvControlador+0x128>
			else if	(abs_erro>5)	{P=0.5;}
 800371a:	4628      	mov	r0, r5
 800371c:	492c      	ldr	r1, [pc, #176]	; (80037d0 <prvControlador+0x158>)
 800371e:	f7fd fced 	bl	80010fc <__aeabi_fcmpgt>
 8003722:	2800      	cmp	r0, #0
 8003724:	d13f      	bne.n	80037a6 <prvControlador+0x12e>
			else if	(abs_erro>0)	{P=0.1;}
 8003726:	4641      	mov	r1, r8
 8003728:	4628      	mov	r0, r5
 800372a:	f7fd fce7 	bl	80010fc <__aeabi_fcmpgt>
 800372e:	2800      	cmp	r0, #0
 8003730:	d13c      	bne.n	80037ac <prvControlador+0x134>
			else 					{P=0;}
 8003732:	4646      	mov	r6, r8
			P=P*(erro/abs_erro);
 8003734:	4629      	mov	r1, r5
 8003736:	4658      	mov	r0, fp
 8003738:	f7fd fbd8 	bl	8000eec <__aeabi_fdiv>
 800373c:	4631      	mov	r1, r6
 800373e:	f7fd fb21 	bl	8000d84 <__aeabi_fmul>
 8003742:	4601      	mov	r1, r0
			pwm=MAX(0,MIN(100,pwm+P));
 8003744:	4620      	mov	r0, r4
 8003746:	f7fd fa15 	bl	8000b74 <__addsf3>
 800374a:	4649      	mov	r1, r9
 800374c:	4604      	mov	r4, r0
 800374e:	f7fd fcd5 	bl	80010fc <__aeabi_fcmpgt>
 8003752:	bb68      	cbnz	r0, 80037b0 <prvControlador+0x138>
 8003754:	4641      	mov	r1, r8
 8003756:	4620      	mov	r0, r4
 8003758:	f7fd fcb2 	bl	80010c0 <__aeabi_fcmplt>
 800375c:	bb50      	cbnz	r0, 80037b4 <prvControlador+0x13c>
		pwm_real.esq=pwm;
 800375e:	4620      	mov	r0, r4
 8003760:	f7fd fcfc 	bl	800115c <__aeabi_f2uiz>
 8003764:	b2c0      	uxtb	r0, r0
 8003766:	f88d 0008 	strb.w	r0, [sp, #8]
		pwm_real.dir=pwm;
 800376a:	f88d 0009 	strb.w	r0, [sp, #9]
		Float2String(pwm, buf_v);
 800376e:	a904      	add	r1, sp, #16
 8003770:	4620      	mov	r0, r4
 8003772:	f7ff fc45 	bl	8003000 <Float2String>
		sprintf(buf,"%s\n",buf_v);
 8003776:	aa04      	add	r2, sp, #16
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <prvControlador+0x15c>)
 800377a:	a808      	add	r0, sp, #32
 800377c:	f001 f8c6 	bl	800490c <siprintf>
		xQueueSendToBack(xQueuePWM,&pwm_real,(TickType_t)portMAX_DELAY);
 8003780:	4815      	ldr	r0, [pc, #84]	; (80037d8 <prvControlador+0x160>)
 8003782:	2300      	movs	r3, #0
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003788:	a902      	add	r1, sp, #8
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	f7fd ffa8 	bl	80016e0 <xQueueGenericSend>
		ticks_old.esq = ticks_new.esq; /* safe previous ticks*/
 8003790:	e780      	b.n	8003694 <prvControlador+0x1c>
			if		(abs_erro>30)	{P=7;}
 8003792:	4e12      	ldr	r6, [pc, #72]	; (80037dc <prvControlador+0x164>)
 8003794:	e7ce      	b.n	8003734 <prvControlador+0xbc>
			else if	(abs_erro>20)	{P=5;}
 8003796:	4e0e      	ldr	r6, [pc, #56]	; (80037d0 <prvControlador+0x158>)
 8003798:	e7cc      	b.n	8003734 <prvControlador+0xbc>
			else if	(abs_erro>15)	{P=2;}
 800379a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800379e:	e7c9      	b.n	8003734 <prvControlador+0xbc>
			else if	(abs_erro>10)	{P=1;}
 80037a0:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80037a4:	e7c6      	b.n	8003734 <prvControlador+0xbc>
			else if	(abs_erro>5)	{P=0.5;}
 80037a6:	f04f 567c 	mov.w	r6, #1056964608	; 0x3f000000
 80037aa:	e7c3      	b.n	8003734 <prvControlador+0xbc>
			else if	(abs_erro>0)	{P=0.1;}
 80037ac:	4e0c      	ldr	r6, [pc, #48]	; (80037e0 <prvControlador+0x168>)
 80037ae:	e7c1      	b.n	8003734 <prvControlador+0xbc>
			pwm=MAX(0,MIN(100,pwm+P));
 80037b0:	464c      	mov	r4, r9
 80037b2:	e7d4      	b.n	800375e <prvControlador+0xe6>
 80037b4:	4644      	mov	r4, r8
 80037b6:	e7d2      	b.n	800375e <prvControlador+0xe6>
 80037b8:	20003434 	.word	0x20003434
 80037bc:	20003410 	.word	0x20003410
 80037c0:	2000341c 	.word	0x2000341c
 80037c4:	41a00000 	.word	0x41a00000
 80037c8:	41700000 	.word	0x41700000
 80037cc:	41200000 	.word	0x41200000
 80037d0:	40a00000 	.word	0x40a00000
 80037d4:	080094dd 	.word	0x080094dd
 80037d8:	20003418 	.word	0x20003418
 80037dc:	40e00000 	.word	0x40e00000
 80037e0:	3dcccccd 	.word	0x3dcccccd
 80037e4:	41f00000 	.word	0x41f00000
 80037e8:	42c80000 	.word	0x42c80000

080037ec <prvReadEncoders>:
{
 80037ec:	b583      	push	{r0, r1, r7, lr}
	Num_ticks ticks, ticksOld; ticksOld.dir=0; ticksOld.esq=0;
 80037ee:	2100      	movs	r1, #0
		if(d_ticks.esq/2000){
 80037f0:	f640 769e 	movw	r6, #3998	; 0xf9e
	Num_ticks ticks, ticksOld; ticksOld.dir=0; ticksOld.esq=0;
 80037f4:	468c      	mov	ip, r1
		ticks.dir =TIM4->CNT;	//Guardar os valores dos Ticks encoderA
 80037f6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80038a4 <prvReadEncoders+0xb8>
		xQueueSendToBack(xQueueTicks,&d_ticks,(TickType_t)portMAX_DELAY);
 80037fa:	4f29      	ldr	r7, [pc, #164]	; (80038a0 <prvReadEncoders+0xb4>)
		ticks.esq =TIM2->CNT;	//Guardar os valores dos Ticks encoderB
 80037fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		ticks.dir =TIM4->CNT;	//Guardar os valores dos Ticks encoderA
 8003800:	f8b8 5024 	ldrh.w	r5, [r8, #36]	; 0x24
		ticks.esq =TIM2->CNT;	//Guardar os valores dos Ticks encoderB
 8003804:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
		ticks.dir =TIM4->CNT;	//Guardar os valores dos Ticks encoderA
 8003806:	b2ad      	uxth	r5, r5
		ticks.esq =TIM2->CNT;	//Guardar os valores dos Ticks encoderB
 8003808:	b2a4      	uxth	r4, r4
		d_ticks.esq = ticks.esq - ticksOld.esq;
 800380a:	eba4 030c 	sub.w	r3, r4, ip
 800380e:	b218      	sxth	r0, r3
		if(d_ticks.esq/2000){
 8003810:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8003814:	b29b      	uxth	r3, r3
 8003816:	42b3      	cmp	r3, r6
 8003818:	d817      	bhi.n	800384a <prvReadEncoders+0x5e>
		d_ticks.esq = ticks.esq - ticksOld.esq;
 800381a:	f8ad 0004 	strh.w	r0, [sp, #4]
		d_ticks.dir = ticks.dir - ticksOld.dir;
 800381e:	1a6a      	subs	r2, r5, r1
 8003820:	b210      	sxth	r0, r2
		if(d_ticks.dir/2000){
 8003822:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
 8003826:	b292      	uxth	r2, r2
 8003828:	42b2      	cmp	r2, r6
 800382a:	d823      	bhi.n	8003874 <prvReadEncoders+0x88>
		d_ticks.dir = ticks.dir - ticksOld.dir;
 800382c:	f8ad 0006 	strh.w	r0, [sp, #6]
		xQueueSendToBack(xQueueTicks,&d_ticks,(TickType_t)portMAX_DELAY);
 8003830:	a901      	add	r1, sp, #4
 8003832:	2300      	movs	r3, #0
 8003834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f7fd ff51 	bl	80016e0 <xQueueGenericSend>
		vTaskDelay( ( TickType_t ) 10 / portTICK_PERIOD_MS  );
 800383e:	200a      	movs	r0, #10
 8003840:	f7fe fc1a 	bl	8002078 <vTaskDelay>
		ticksOld.dir=ticks.dir;
 8003844:	4629      	mov	r1, r5
		ticksOld.esq=ticks.esq;
 8003846:	46a4      	mov	ip, r4
		ticks.dir =TIM4->CNT;	//Guardar os valores dos Ticks encoderA
 8003848:	e7d8      	b.n	80037fc <prvReadEncoders+0x10>
			d_ticks.esq=d_ticks.esq/abs(d_ticks.esq)*(62720-MAX(ticks.esq,ticksOld.esq)+MIN(ticks.esq,ticksOld.esq));
 800384a:	45a4      	cmp	ip, r4
 800384c:	4662      	mov	r2, ip
 800384e:	bf38      	it	cc
 8003850:	4622      	movcc	r2, r4
 8003852:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8003856:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800385a:	f5c2 4275 	rsb	r2, r2, #62720	; 0xf500
 800385e:	b29b      	uxth	r3, r3
 8003860:	45a4      	cmp	ip, r4
 8003862:	bf94      	ite	ls
 8003864:	4462      	addls	r2, ip
 8003866:	1912      	addhi	r2, r2, r4
 8003868:	fb90 f0f3 	sdiv	r0, r0, r3
 800386c:	4342      	muls	r2, r0
 800386e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8003872:	e7d4      	b.n	800381e <prvReadEncoders+0x32>
			d_ticks.dir=d_ticks.dir/abs(d_ticks.dir)*(62720-MAX(ticks.esq,ticksOld.dir)+MIN(ticks.esq,ticksOld.dir));
 8003874:	42a1      	cmp	r1, r4
 8003876:	460b      	mov	r3, r1
 8003878:	bf38      	it	cc
 800387a:	4623      	movcc	r3, r4
 800387c:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8003880:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8003884:	f5c3 4375 	rsb	r3, r3, #62720	; 0xf500
 8003888:	b292      	uxth	r2, r2
 800388a:	42a1      	cmp	r1, r4
 800388c:	bf94      	ite	ls
 800388e:	185b      	addls	r3, r3, r1
 8003890:	191b      	addhi	r3, r3, r4
 8003892:	fb90 f0f2 	sdiv	r0, r0, r2
 8003896:	4343      	muls	r3, r0
 8003898:	f8ad 3006 	strh.w	r3, [sp, #6]
 800389c:	e7c8      	b.n	8003830 <prvReadEncoders+0x44>
 800389e:	bf00      	nop
 80038a0:	20003410 	.word	0x20003410
 80038a4:	40000800 	.word	0x40000800

080038a8 <main>:
{
 80038a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	prvInitial_configuration();
 80038aa:	f7ff fd6b 	bl	8003384 <prvInitial_configuration>
	xQueueTicks 	 = xQueueCreate( 5, 		sizeof( Var_ticks )		  ); /* Queue to send Encoder's ticks */
 80038ae:	2200      	movs	r2, #0
 80038b0:	2104      	movs	r1, #4
 80038b2:	2005      	movs	r0, #5
 80038b4:	f7fd feee 	bl	8001694 <xQueueGenericCreate>
 80038b8:	4f37      	ldr	r7, [pc, #220]	; (8003998 <main+0xf0>)
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80038ba:	2200      	movs	r2, #0
 80038bc:	2101      	movs	r1, #1
	xQueueTicks 	 = xQueueCreate( 5, 		sizeof( Var_ticks )		  ); /* Queue to send Encoder's ticks */
 80038be:	6038      	str	r0, [r7, #0]
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80038c0:	201e      	movs	r0, #30
 80038c2:	f7fd fee7 	bl	8001694 <xQueueGenericCreate>
 80038c6:	4e35      	ldr	r6, [pc, #212]	; (800399c <main+0xf4>)
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80038c8:	2200      	movs	r2, #0
 80038ca:	2103      	movs	r1, #3
	xQueueUsart 	 = xQueueCreate( msg_length,sizeof( char ) 			  ); /* Queue to send received character from ISR */
 80038cc:	6030      	str	r0, [r6, #0]
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80038ce:	2002      	movs	r0, #2
 80038d0:	f7fd fee0 	bl	8001694 <xQueueGenericCreate>
 80038d4:	4d32      	ldr	r5, [pc, #200]	; (80039a0 <main+0xf8>)
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*60 ); /* Queue to send PWM*/
 80038d6:	2200      	movs	r2, #0
 80038d8:	213c      	movs	r1, #60	; 0x3c
	xQueuePWM 		 = xQueueCreate( 2,  		sizeof( My_PWM ) 		  ); /* Queue to send PWM*/
 80038da:	6028      	str	r0, [r5, #0]
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*60 ); /* Queue to send PWM*/
 80038dc:	200a      	movs	r0, #10
 80038de:	f7fd fed9 	bl	8001694 <xQueueGenericCreate>
 80038e2:	4c30      	ldr	r4, [pc, #192]	; (80039a4 <main+0xfc>)
	xQueueVelCommand = xQueueCreate( 5, 		sizeof( uint8_t )      	  ); /* Queue to send velocity command to controller*/
 80038e4:	2200      	movs	r2, #0
	xQueueMessageOut = xQueueCreate( 10, 		sizeof( char )*60 ); /* Queue to send PWM*/
 80038e6:	6020      	str	r0, [r4, #0]
	xQueueVelCommand = xQueueCreate( 5, 		sizeof( uint8_t )      	  ); /* Queue to send velocity command to controller*/
 80038e8:	2101      	movs	r1, #1
 80038ea:	2005      	movs	r0, #5
 80038ec:	f7fd fed2 	bl	8001694 <xQueueGenericCreate>
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <main+0x100>)
 80038f2:	6018      	str	r0, [r3, #0]
	if(( xQueueTicks == NULL )&&( xQueueUsart == NULL )&&( xQueuePWM == NULL )&&( xQueueMessageOut == NULL )&&( xQueueVelCommand == NULL ))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b93b      	cbnz	r3, 8003908 <main+0x60>
 80038f8:	6833      	ldr	r3, [r6, #0]
 80038fa:	b92b      	cbnz	r3, 8003908 <main+0x60>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	b91b      	cbnz	r3, 8003908 <main+0x60>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	b90b      	cbnz	r3, 8003908 <main+0x60>
 8003904:	2800      	cmp	r0, #0
 8003906:	d044      	beq.n	8003992 <main+0xea>
	xSemaphore_Ticks = xSemaphoreCreateBinary();
 8003908:	2203      	movs	r2, #3
 800390a:	2100      	movs	r1, #0
 800390c:	2001      	movs	r0, #1
 800390e:	f7fd fec1 	bl	8001694 <xQueueGenericCreate>
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <main+0x104>)
 8003914:	6018      	str	r0, [r3, #0]
	if( xSemaphore_Ticks == NULL )/* There was insufficient FreeRTOS heap available for the semaphore to*/
 8003916:	2800      	cmp	r0, #0
 8003918:	d03b      	beq.n	8003992 <main+0xea>
    xTaskCreate(prvReadEncoders, "EncoderReads", configMINIMAL_STACK_SIZE, NULL, mainEncoder_TASK_PRIORITY, &HandleTask1);
 800391a:	2401      	movs	r4, #1
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <main+0x108>)
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	4924      	ldr	r1, [pc, #144]	; (80039b4 <main+0x10c>)
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	4824      	ldr	r0, [pc, #144]	; (80039b8 <main+0x110>)
 8003926:	2300      	movs	r3, #0
 8003928:	9400      	str	r4, [sp, #0]
 800392a:	f7fe f98f 	bl	8001c4c <xTaskCreate>
    xTaskCreate(prvControlador, "Controlador", configMINIMAL_STACK_SIZE+300, NULL, mainEncoder_TASK_PRIORITY,&HandleTask2);
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <main+0x114>)
 8003930:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003934:	e9cd 4300 	strd	r4, r3, [sp]
 8003938:	4921      	ldr	r1, [pc, #132]	; (80039c0 <main+0x118>)
 800393a:	2300      	movs	r3, #0
 800393c:	4821      	ldr	r0, [pc, #132]	; (80039c4 <main+0x11c>)
 800393e:	f7fe f985 	bl	8001c4c <xTaskCreate>
    xTaskCreate(prvReadUsart, "ReadUsart", configMINIMAL_STACK_SIZE+200, NULL, mainDistance_TASK_PRIORITY, &HandleTask3);
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <main+0x120>)
 8003944:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003948:	e9cd 4300 	strd	r4, r3, [sp]
 800394c:	491f      	ldr	r1, [pc, #124]	; (80039cc <main+0x124>)
 800394e:	2300      	movs	r3, #0
 8003950:	481f      	ldr	r0, [pc, #124]	; (80039d0 <main+0x128>)
 8003952:	f7fe f97b 	bl	8001c4c <xTaskCreate>
	xTaskCreate(prvMotorDrive, "MotorDrive", configMINIMAL_STACK_SIZE, NULL, mainDistance_TASK_PRIORITY, &HandleTask4);
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <main+0x12c>)
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	e9cd 4300 	strd	r4, r3, [sp]
 800395e:	491e      	ldr	r1, [pc, #120]	; (80039d8 <main+0x130>)
 8003960:	2300      	movs	r3, #0
 8003962:	481e      	ldr	r0, [pc, #120]	; (80039dc <main+0x134>)
 8003964:	f7fe f972 	bl	8001c4c <xTaskCreate>
	xTaskCreate(prvSendMessage, "SendUsart", configMINIMAL_STACK_SIZE, NULL, mainDistance_TASK_PRIORITY, &HandleTask5);
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <main+0x138>)
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	e9cd 4300 	strd	r4, r3, [sp]
 8003970:	491c      	ldr	r1, [pc, #112]	; (80039e4 <main+0x13c>)
 8003972:	2300      	movs	r3, #0
 8003974:	481c      	ldr	r0, [pc, #112]	; (80039e8 <main+0x140>)
 8003976:	f7fe f969 	bl	8001c4c <xTaskCreate>
	xTaskCreate(prvOdometryTrack, "Odometry", configMINIMAL_STACK_SIZE+200, NULL, mainDistance_TASK_PRIORITY, &HandleTask6);
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <main+0x144>)
 800397c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003980:	e9cd 4300 	strd	r4, r3, [sp]
 8003984:	491a      	ldr	r1, [pc, #104]	; (80039f0 <main+0x148>)
 8003986:	2300      	movs	r3, #0
 8003988:	481a      	ldr	r0, [pc, #104]	; (80039f4 <main+0x14c>)
 800398a:	f7fe f95f 	bl	8001c4c <xTaskCreate>
	vTaskStartScheduler();
 800398e:	f7fe fa27 	bl	8001de0 <vTaskStartScheduler>
}
 8003992:	2000      	movs	r0, #0
 8003994:	b003      	add	sp, #12
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003998:	20003410 	.word	0x20003410
 800399c:	20003420 	.word	0x20003420
 80039a0:	20003418 	.word	0x20003418
 80039a4:	20003438 	.word	0x20003438
 80039a8:	2000341c 	.word	0x2000341c
 80039ac:	20003434 	.word	0x20003434
 80039b0:	2000342c 	.word	0x2000342c
 80039b4:	080094e1 	.word	0x080094e1
 80039b8:	080037ed 	.word	0x080037ed
 80039bc:	2000340c 	.word	0x2000340c
 80039c0:	080094ee 	.word	0x080094ee
 80039c4:	08003679 	.word	0x08003679
 80039c8:	20003414 	.word	0x20003414
 80039cc:	080094fa 	.word	0x080094fa
 80039d0:	0800352d 	.word	0x0800352d
 80039d4:	20003430 	.word	0x20003430
 80039d8:	08009504 	.word	0x08009504
 80039dc:	08003641 	.word	0x08003641
 80039e0:	20003428 	.word	0x20003428
 80039e4:	0800950f 	.word	0x0800950f
 80039e8:	08003621 	.word	0x08003621
 80039ec:	20003424 	.word	0x20003424
 80039f0:	08009519 	.word	0x08009519
 80039f4:	080033b1 	.word	0x080033b1

080039f8 <WWDG_IRQHandler>:
 80039f8:	4770      	bx	lr

080039fa <PVD_IRQHandler>:
 80039fa:	4770      	bx	lr

080039fc <TAMPER_IRQHandler>:
 80039fc:	4770      	bx	lr

080039fe <RTC_IRQHandler>:
 80039fe:	4770      	bx	lr

08003a00 <FLASH_IRQHandler>:
 8003a00:	4770      	bx	lr

08003a02 <RCC_IRQHandler>:
 8003a02:	4770      	bx	lr

08003a04 <EXTI0_IRQHandler>:
 8003a04:	4770      	bx	lr

08003a06 <EXTI1_IRQHandler>:
 8003a06:	4770      	bx	lr

08003a08 <EXTI2_IRQHandler>:
 8003a08:	4770      	bx	lr

08003a0a <EXTI3_IRQHandler>:
 8003a0a:	4770      	bx	lr

08003a0c <EXTI4_IRQHandler>:
 8003a0c:	4770      	bx	lr

08003a0e <DMA1_Channel1_IRQHandler>:
 8003a0e:	4770      	bx	lr

08003a10 <DMA1_Channel2_IRQHandler>:
 8003a10:	4770      	bx	lr

08003a12 <DMA1_Channel3_IRQHandler>:
 8003a12:	4770      	bx	lr

08003a14 <DMA1_Channel4_IRQHandler>:
 8003a14:	4770      	bx	lr

08003a16 <DMA1_Channel5_IRQHandler>:
 8003a16:	4770      	bx	lr

08003a18 <DMA1_Channel6_IRQHandler>:
 8003a18:	4770      	bx	lr

08003a1a <DMA1_Channel7_IRQHandler>:
 8003a1a:	4770      	bx	lr

08003a1c <ADC1_2_IRQHandler>:
 8003a1c:	4770      	bx	lr

08003a1e <EXTI9_5_IRQHandler>:
 8003a1e:	4770      	bx	lr

08003a20 <TIM1_BRK_IRQHandler>:
 8003a20:	4770      	bx	lr

08003a22 <TIM1_UP_IRQHandler>:
 8003a22:	4770      	bx	lr

08003a24 <TIM1_TRG_COM_IRQHandler>:
 8003a24:	4770      	bx	lr

08003a26 <TIM1_CC_IRQHandler>:
 8003a26:	4770      	bx	lr

08003a28 <TIM2_IRQHandler>:
*******************************************************************************/

extern int overflowB;
void TIM2_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a2e:	f7ff ba3b 	b.w	8002ea8 <TIM_ClearITPendingBit>
	...

08003a34 <TIM3_IRQHandler>:
* Return         : None
*******************************************************************************/
extern long int contRPM;
void TIM3_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8003a34:	2101      	movs	r1, #1
 8003a36:	4801      	ldr	r0, [pc, #4]	; (8003a3c <TIM3_IRQHandler+0x8>)
 8003a38:	f7ff ba36 	b.w	8002ea8 <TIM_ClearITPendingBit>
 8003a3c:	40000400 	.word	0x40000400

08003a40 <TIM4_IRQHandler>:
* Return         : None
*******************************************************************************/
extern int overflowA;
void TIM4_IRQHandler(void)
{
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8003a40:	2101      	movs	r1, #1
 8003a42:	4801      	ldr	r0, [pc, #4]	; (8003a48 <TIM4_IRQHandler+0x8>)
 8003a44:	f7ff ba30 	b.w	8002ea8 <TIM_ClearITPendingBit>
 8003a48:	40000800 	.word	0x40000800

08003a4c <I2C1_EV_IRQHandler>:
 8003a4c:	4770      	bx	lr

08003a4e <I2C1_ER_IRQHandler>:
 8003a4e:	4770      	bx	lr

08003a50 <I2C2_EV_IRQHandler>:
 8003a50:	4770      	bx	lr

08003a52 <I2C2_ER_IRQHandler>:
 8003a52:	4770      	bx	lr

08003a54 <SPI1_IRQHandler>:
 8003a54:	4770      	bx	lr

08003a56 <SPI2_IRQHandler>:
 8003a56:	4770      	bx	lr

08003a58 <USART1_IRQHandler>:
 8003a58:	4770      	bx	lr
	...

08003a5c <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void USART2_IRQHandler(void)
{
 8003a5c:	b513      	push	{r0, r1, r4, lr}
	static BaseType_t pxHigherPriorityTaskWoken;
	char ulVar;

	ulVar = USART_ReceiveData(USART2);
 8003a5e:	4810      	ldr	r0, [pc, #64]	; (8003aa0 <USART2_IRQHandler+0x44>)
 8003a60:	f7ff faa2 	bl	8002fa8 <USART_ReceiveData>
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 8003a64:	4c0f      	ldr	r4, [pc, #60]	; (8003aa4 <USART2_IRQHandler+0x48>)
	ulVar = USART_ReceiveData(USART2);
 8003a66:	f88d 0007 	strb.w	r0, [sp, #7]
	xQueueSendToBackFromISR(xQueueUsart,&ulVar, &pxHigherPriorityTaskWoken);
 8003a6a:	480f      	ldr	r0, [pc, #60]	; (8003aa8 <USART2_IRQHandler+0x4c>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4622      	mov	r2, r4
 8003a70:	6800      	ldr	r0, [r0, #0]
 8003a72:	f10d 0107 	add.w	r1, sp, #7
 8003a76:	f7fd feb5 	bl	80017e4 <xQueueGenericSendFromISR>


	if( pxHigherPriorityTaskWoken == pdTRUE )
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <USART2_IRQHandler+0x34>
	{
		taskYIELD();
 8003a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <USART2_IRQHandler+0x50>)
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
	}

	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8003a90:	f240 5125 	movw	r1, #1317	; 0x525
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <USART2_IRQHandler+0x44>)
 8003a96:	f7ff fa91 	bl	8002fbc <USART_ClearITPendingBit>
}
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	200033f8 	.word	0x200033f8
 8003aa8:	20003420 	.word	0x20003420
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <USART3_IRQHandler>:
 8003ab0:	4770      	bx	lr

08003ab2 <EXTI15_10_IRQHandler>:
 8003ab2:	4770      	bx	lr

08003ab4 <RTCAlarm_IRQHandler>:
 8003ab4:	4770      	bx	lr

08003ab6 <USBWakeUp_IRQHandler>:
 8003ab6:	4770      	bx	lr

08003ab8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003ab8:	2001      	movs	r0, #1
 8003aba:	4770      	bx	lr

08003abc <_kill>:

int _kill(int pid, int sig)
{
 8003abc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003abe:	f000 f86f 	bl	8003ba0 <__errno>
 8003ac2:	2316      	movs	r3, #22
 8003ac4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aca:	bd08      	pop	{r3, pc}

08003acc <_exit>:

void _exit (int status)
{
 8003acc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ace:	f000 f867 	bl	8003ba0 <__errno>
 8003ad2:	2316      	movs	r3, #22
 8003ad4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003ad6:	e7fe      	b.n	8003ad6 <_exit+0xa>

08003ad8 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	460e      	mov	r6, r1
 8003adc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ade:	2500      	movs	r5, #0
 8003ae0:	42a5      	cmp	r5, r4
 8003ae2:	db01      	blt.n	8003ae8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003ae8:	f3af 8000 	nop.w
 8003aec:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aee:	3501      	adds	r5, #1
 8003af0:	e7f6      	b.n	8003ae0 <_read+0x8>

08003af2 <_write>:

int _write(int file, char *ptr, int len)
{
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	460e      	mov	r6, r1
 8003af6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af8:	2500      	movs	r5, #0
 8003afa:	42a5      	cmp	r5, r4
 8003afc:	db01      	blt.n	8003b02 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003afe:	4620      	mov	r0, r4
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003b02:	5d70      	ldrb	r0, [r6, r5]
 8003b04:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7f6      	b.n	8003afa <_write+0x8>

08003b0c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003b0c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <_sbrk+0x2c>)
{
 8003b10:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	b909      	cbnz	r1, 8003b1a <_sbrk+0xe>
		heap_end = &end;
 8003b16:	4909      	ldr	r1, [pc, #36]	; (8003b3c <_sbrk+0x30>)
 8003b18:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003b1a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003b1c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003b1e:	4402      	add	r2, r0
 8003b20:	428a      	cmp	r2, r1
 8003b22:	d906      	bls.n	8003b32 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003b24:	f000 f83c 	bl	8003ba0 <__errno>
 8003b28:	230c      	movs	r3, #12
 8003b2a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003b30:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003b32:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003b34:	e7fc      	b.n	8003b30 <_sbrk+0x24>
 8003b36:	bf00      	nop
 8003b38:	200033fc 	.word	0x200033fc
 8003b3c:	20003450 	.word	0x20003450

08003b40 <_close>:

int _close(int file)
{
	return -1;
}
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b44:	4770      	bx	lr

08003b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003b4a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003b4c:	604b      	str	r3, [r1, #4]
}
 8003b4e:	4770      	bx	lr

08003b50 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003b50:	2001      	movs	r0, #1
 8003b52:	4770      	bx	lr

08003b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003b54:	2000      	movs	r0, #0
 8003b56:	4770      	bx	lr

08003b58 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b5a:	e003      	b.n	8003b64 <LoopCopyDataInit>

08003b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8003b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b62:	3104      	adds	r1, #4

08003b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8003b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b6c:	d3f6      	bcc.n	8003b5c <CopyDataInit>
	ldr	r2, =_sbss
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8003b70:	e002      	b.n	8003b78 <LoopFillZerobss>

08003b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b74:	f842 3b04 	str.w	r3, [r2], #4

08003b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8003b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b7c:	d3f9      	bcc.n	8003b72 <FillZerobss>

/* Call the clock system intitialization function.*/
/* 	bl  SystemInit */
/* Call static constructors */
    bl __libc_init_array
 8003b7e:	f000 f815 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b82:	f7ff fe91 	bl	80038a8 <main>
	bx	lr
 8003b86:	4770      	bx	lr
	ldr	r3, =_sidata
 8003b88:	08009bc0 	.word	0x08009bc0
	ldr	r0, =_sdata
 8003b8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b90:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8003b94:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8003b98:	2000344c 	.word	0x2000344c

08003b9c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b9c:	e7fe      	b.n	8003b9c <BusFault_Handler>
	...

08003ba0 <__errno>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <__errno+0x8>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000020 	.word	0x20000020

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	2600      	movs	r6, #0
 8003bb0:	4d0c      	ldr	r5, [pc, #48]	; (8003be4 <__libc_init_array+0x38>)
 8003bb2:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	f005 fc6a 	bl	8009494 <_init>
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	4d0a      	ldr	r5, [pc, #40]	; (8003bec <__libc_init_array+0x40>)
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc6:	1b64      	subs	r4, r4, r5
 8003bc8:	10a4      	asrs	r4, r4, #2
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08009bb8 	.word	0x08009bb8
 8003be8:	08009bb8 	.word	0x08009bb8
 8003bec:	08009bb8 	.word	0x08009bb8
 8003bf0:	08009bbc 	.word	0x08009bbc

08003bf4 <memcpy>:
 8003bf4:	440a      	add	r2, r1
 8003bf6:	4291      	cmp	r1, r2
 8003bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bfc:	d100      	bne.n	8003c00 <memcpy+0xc>
 8003bfe:	4770      	bx	lr
 8003c00:	b510      	push	{r4, lr}
 8003c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c0c:	d1f9      	bne.n	8003c02 <memcpy+0xe>
 8003c0e:	bd10      	pop	{r4, pc}

08003c10 <memset>:
 8003c10:	4603      	mov	r3, r0
 8003c12:	4402      	add	r2, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <__cvt>:
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c26:	461f      	mov	r7, r3
 8003c28:	bfbb      	ittet	lt
 8003c2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003c2e:	461f      	movlt	r7, r3
 8003c30:	2300      	movge	r3, #0
 8003c32:	232d      	movlt	r3, #45	; 0x2d
 8003c34:	b088      	sub	sp, #32
 8003c36:	4614      	mov	r4, r2
 8003c38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003c3c:	7013      	strb	r3, [r2, #0]
 8003c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c40:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003c44:	f023 0820 	bic.w	r8, r3, #32
 8003c48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c4c:	d005      	beq.n	8003c5a <__cvt+0x3a>
 8003c4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003c52:	d100      	bne.n	8003c56 <__cvt+0x36>
 8003c54:	3501      	adds	r5, #1
 8003c56:	2302      	movs	r3, #2
 8003c58:	e000      	b.n	8003c5c <__cvt+0x3c>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	aa07      	add	r2, sp, #28
 8003c5e:	9204      	str	r2, [sp, #16]
 8003c60:	aa06      	add	r2, sp, #24
 8003c62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c66:	e9cd 3500 	strd	r3, r5, [sp]
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	f001 fd9f 	bl	80057b0 <_dtoa_r>
 8003c72:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c76:	4606      	mov	r6, r0
 8003c78:	d102      	bne.n	8003c80 <__cvt+0x60>
 8003c7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c7c:	07db      	lsls	r3, r3, #31
 8003c7e:	d522      	bpl.n	8003cc6 <__cvt+0xa6>
 8003c80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c84:	eb06 0905 	add.w	r9, r6, r5
 8003c88:	d110      	bne.n	8003cac <__cvt+0x8c>
 8003c8a:	7833      	ldrb	r3, [r6, #0]
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d10a      	bne.n	8003ca6 <__cvt+0x86>
 8003c90:	2200      	movs	r2, #0
 8003c92:	2300      	movs	r3, #0
 8003c94:	4620      	mov	r0, r4
 8003c96:	4639      	mov	r1, r7
 8003c98:	f7fc fe86 	bl	80009a8 <__aeabi_dcmpeq>
 8003c9c:	b918      	cbnz	r0, 8003ca6 <__cvt+0x86>
 8003c9e:	f1c5 0501 	rsb	r5, r5, #1
 8003ca2:	f8ca 5000 	str.w	r5, [sl]
 8003ca6:	f8da 3000 	ldr.w	r3, [sl]
 8003caa:	4499      	add	r9, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	2300      	movs	r3, #0
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	f7fc fe78 	bl	80009a8 <__aeabi_dcmpeq>
 8003cb8:	b108      	cbz	r0, 8003cbe <__cvt+0x9e>
 8003cba:	f8cd 901c 	str.w	r9, [sp, #28]
 8003cbe:	2230      	movs	r2, #48	; 0x30
 8003cc0:	9b07      	ldr	r3, [sp, #28]
 8003cc2:	454b      	cmp	r3, r9
 8003cc4:	d307      	bcc.n	8003cd6 <__cvt+0xb6>
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	9b07      	ldr	r3, [sp, #28]
 8003cca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ccc:	1b9b      	subs	r3, r3, r6
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	b008      	add	sp, #32
 8003cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	9107      	str	r1, [sp, #28]
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e7f0      	b.n	8003cc0 <__cvt+0xa0>

08003cde <__exponent>:
 8003cde:	4603      	mov	r3, r0
 8003ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	f803 2b02 	strb.w	r2, [r3], #2
 8003ce8:	bfb6      	itet	lt
 8003cea:	222d      	movlt	r2, #45	; 0x2d
 8003cec:	222b      	movge	r2, #43	; 0x2b
 8003cee:	4249      	neglt	r1, r1
 8003cf0:	2909      	cmp	r1, #9
 8003cf2:	7042      	strb	r2, [r0, #1]
 8003cf4:	dd2b      	ble.n	8003d4e <__exponent+0x70>
 8003cf6:	f10d 0407 	add.w	r4, sp, #7
 8003cfa:	46a4      	mov	ip, r4
 8003cfc:	270a      	movs	r7, #10
 8003cfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d02:	460a      	mov	r2, r1
 8003d04:	46a6      	mov	lr, r4
 8003d06:	fb07 1516 	mls	r5, r7, r6, r1
 8003d0a:	2a63      	cmp	r2, #99	; 0x63
 8003d0c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003d10:	4631      	mov	r1, r6
 8003d12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003d16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003d1a:	dcf0      	bgt.n	8003cfe <__exponent+0x20>
 8003d1c:	3130      	adds	r1, #48	; 0x30
 8003d1e:	f1ae 0502 	sub.w	r5, lr, #2
 8003d22:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003d26:	4629      	mov	r1, r5
 8003d28:	1c44      	adds	r4, r0, #1
 8003d2a:	4561      	cmp	r1, ip
 8003d2c:	d30a      	bcc.n	8003d44 <__exponent+0x66>
 8003d2e:	f10d 0209 	add.w	r2, sp, #9
 8003d32:	eba2 020e 	sub.w	r2, r2, lr
 8003d36:	4565      	cmp	r5, ip
 8003d38:	bf88      	it	hi
 8003d3a:	2200      	movhi	r2, #0
 8003d3c:	4413      	add	r3, r2
 8003d3e:	1a18      	subs	r0, r3, r0
 8003d40:	b003      	add	sp, #12
 8003d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d48:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003d4c:	e7ed      	b.n	8003d2a <__exponent+0x4c>
 8003d4e:	2330      	movs	r3, #48	; 0x30
 8003d50:	3130      	adds	r1, #48	; 0x30
 8003d52:	7083      	strb	r3, [r0, #2]
 8003d54:	70c1      	strb	r1, [r0, #3]
 8003d56:	1d03      	adds	r3, r0, #4
 8003d58:	e7f1      	b.n	8003d3e <__exponent+0x60>
	...

08003d5c <_printf_float>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	b091      	sub	sp, #68	; 0x44
 8003d62:	460c      	mov	r4, r1
 8003d64:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003d68:	4616      	mov	r6, r2
 8003d6a:	461f      	mov	r7, r3
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	f002 fe73 	bl	8006a58 <_localeconv_r>
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	f7fc f9ea 	bl	8000150 <strlen>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8003d80:	f8d8 3000 	ldr.w	r3, [r8]
 8003d84:	900a      	str	r0, [sp, #40]	; 0x28
 8003d86:	3307      	adds	r3, #7
 8003d88:	f023 0307 	bic.w	r3, r3, #7
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003d94:	f8d4 b000 	ldr.w	fp, [r4]
 8003d98:	f8c8 2000 	str.w	r2, [r8]
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003da4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003da8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003db2:	4640      	mov	r0, r8
 8003db4:	4b9c      	ldr	r3, [pc, #624]	; (8004028 <_printf_float+0x2cc>)
 8003db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003db8:	f7fc fe28 	bl	8000a0c <__aeabi_dcmpun>
 8003dbc:	bb70      	cbnz	r0, 8003e1c <_printf_float+0xc0>
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4b98      	ldr	r3, [pc, #608]	; (8004028 <_printf_float+0x2cc>)
 8003dc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003dc8:	f7fc fe02 	bl	80009d0 <__aeabi_dcmple>
 8003dcc:	bb30      	cbnz	r0, 8003e1c <_printf_float+0xc0>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	f7fc fdf1 	bl	80009bc <__aeabi_dcmplt>
 8003dda:	b110      	cbz	r0, 8003de2 <_printf_float+0x86>
 8003ddc:	232d      	movs	r3, #45	; 0x2d
 8003dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de2:	4b92      	ldr	r3, [pc, #584]	; (800402c <_printf_float+0x2d0>)
 8003de4:	4892      	ldr	r0, [pc, #584]	; (8004030 <_printf_float+0x2d4>)
 8003de6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003dea:	bf94      	ite	ls
 8003dec:	4698      	movls	r8, r3
 8003dee:	4680      	movhi	r8, r0
 8003df0:	2303      	movs	r3, #3
 8003df2:	f04f 0a00 	mov.w	sl, #0
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	f02b 0304 	bic.w	r3, fp, #4
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	4633      	mov	r3, r6
 8003e00:	4621      	mov	r1, r4
 8003e02:	4628      	mov	r0, r5
 8003e04:	9700      	str	r7, [sp, #0]
 8003e06:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e08:	f000 f9d4 	bl	80041b4 <_printf_common>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	f040 8090 	bne.w	8003f32 <_printf_float+0x1d6>
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e16:	b011      	add	sp, #68	; 0x44
 8003e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	4653      	mov	r3, sl
 8003e20:	4640      	mov	r0, r8
 8003e22:	4651      	mov	r1, sl
 8003e24:	f7fc fdf2 	bl	8000a0c <__aeabi_dcmpun>
 8003e28:	b148      	cbz	r0, 8003e3e <_printf_float+0xe2>
 8003e2a:	f1ba 0f00 	cmp.w	sl, #0
 8003e2e:	bfb8      	it	lt
 8003e30:	232d      	movlt	r3, #45	; 0x2d
 8003e32:	4880      	ldr	r0, [pc, #512]	; (8004034 <_printf_float+0x2d8>)
 8003e34:	bfb8      	it	lt
 8003e36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	; (8004038 <_printf_float+0x2dc>)
 8003e3c:	e7d3      	b.n	8003de6 <_printf_float+0x8a>
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	d142      	bne.n	8003ece <_printf_float+0x172>
 8003e48:	2306      	movs	r3, #6
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	9206      	str	r2, [sp, #24]
 8003e50:	aa0e      	add	r2, sp, #56	; 0x38
 8003e52:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003e56:	aa0d      	add	r2, sp, #52	; 0x34
 8003e58:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003e5c:	9203      	str	r2, [sp, #12]
 8003e5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003e62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	4628      	mov	r0, r5
 8003e70:	4653      	mov	r3, sl
 8003e72:	910b      	str	r1, [sp, #44]	; 0x2c
 8003e74:	f7ff fed4 	bl	8003c20 <__cvt>
 8003e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e7a:	4680      	mov	r8, r0
 8003e7c:	2947      	cmp	r1, #71	; 0x47
 8003e7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e80:	d108      	bne.n	8003e94 <_printf_float+0x138>
 8003e82:	1cc8      	adds	r0, r1, #3
 8003e84:	db02      	blt.n	8003e8c <_printf_float+0x130>
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	dd40      	ble.n	8003f0e <_printf_float+0x1b2>
 8003e8c:	f1a9 0902 	sub.w	r9, r9, #2
 8003e90:	fa5f f989 	uxtb.w	r9, r9
 8003e94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e98:	d81f      	bhi.n	8003eda <_printf_float+0x17e>
 8003e9a:	464a      	mov	r2, r9
 8003e9c:	3901      	subs	r1, #1
 8003e9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ea2:	910d      	str	r1, [sp, #52]	; 0x34
 8003ea4:	f7ff ff1b 	bl	8003cde <__exponent>
 8003ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003eaa:	4682      	mov	sl, r0
 8003eac:	1813      	adds	r3, r2, r0
 8003eae:	2a01      	cmp	r2, #1
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	dc02      	bgt.n	8003eba <_printf_float+0x15e>
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	07d2      	lsls	r2, r2, #31
 8003eb8:	d501      	bpl.n	8003ebe <_printf_float+0x162>
 8003eba:	3301      	adds	r3, #1
 8003ebc:	6123      	str	r3, [r4, #16]
 8003ebe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d09b      	beq.n	8003dfe <_printf_float+0xa2>
 8003ec6:	232d      	movs	r3, #45	; 0x2d
 8003ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ecc:	e797      	b.n	8003dfe <_printf_float+0xa2>
 8003ece:	2947      	cmp	r1, #71	; 0x47
 8003ed0:	d1bc      	bne.n	8003e4c <_printf_float+0xf0>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ba      	bne.n	8003e4c <_printf_float+0xf0>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e7b7      	b.n	8003e4a <_printf_float+0xee>
 8003eda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003ede:	d118      	bne.n	8003f12 <_printf_float+0x1b6>
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	dd0b      	ble.n	8003efe <_printf_float+0x1a2>
 8003ee6:	6121      	str	r1, [r4, #16]
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_printf_float+0x194>
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	07d0      	lsls	r0, r2, #31
 8003eee:	d502      	bpl.n	8003ef6 <_printf_float+0x19a>
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	f04f 0a00 	mov.w	sl, #0
 8003efa:	65a1      	str	r1, [r4, #88]	; 0x58
 8003efc:	e7df      	b.n	8003ebe <_printf_float+0x162>
 8003efe:	b913      	cbnz	r3, 8003f06 <_printf_float+0x1aa>
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	07d2      	lsls	r2, r2, #31
 8003f04:	d501      	bpl.n	8003f0a <_printf_float+0x1ae>
 8003f06:	3302      	adds	r3, #2
 8003f08:	e7f4      	b.n	8003ef4 <_printf_float+0x198>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e7f2      	b.n	8003ef4 <_printf_float+0x198>
 8003f0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f14:	4299      	cmp	r1, r3
 8003f16:	db05      	blt.n	8003f24 <_printf_float+0x1c8>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	6121      	str	r1, [r4, #16]
 8003f1c:	07d8      	lsls	r0, r3, #31
 8003f1e:	d5ea      	bpl.n	8003ef6 <_printf_float+0x19a>
 8003f20:	1c4b      	adds	r3, r1, #1
 8003f22:	e7e7      	b.n	8003ef4 <_printf_float+0x198>
 8003f24:	2900      	cmp	r1, #0
 8003f26:	bfcc      	ite	gt
 8003f28:	2201      	movgt	r2, #1
 8003f2a:	f1c1 0202 	rsble	r2, r1, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	e7e0      	b.n	8003ef4 <_printf_float+0x198>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	055a      	lsls	r2, r3, #21
 8003f36:	d407      	bmi.n	8003f48 <_printf_float+0x1ec>
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	d12b      	bne.n	8003f9e <_printf_float+0x242>
 8003f46:	e764      	b.n	8003e12 <_printf_float+0xb6>
 8003f48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f4c:	f240 80dd 	bls.w	800410a <_printf_float+0x3ae>
 8003f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f54:	2200      	movs	r2, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	f7fc fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d033      	beq.n	8003fc8 <_printf_float+0x26c>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4631      	mov	r1, r6
 8003f64:	4628      	mov	r0, r5
 8003f66:	4a35      	ldr	r2, [pc, #212]	; (800403c <_printf_float+0x2e0>)
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f af51 	beq.w	8003e12 <_printf_float+0xb6>
 8003f70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f74:	429a      	cmp	r2, r3
 8003f76:	db02      	blt.n	8003f7e <_printf_float+0x222>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	07d8      	lsls	r0, r3, #31
 8003f7c:	d50f      	bpl.n	8003f9e <_printf_float+0x242>
 8003f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f af42 	beq.w	8003e12 <_printf_float+0xb6>
 8003f8e:	f04f 0800 	mov.w	r8, #0
 8003f92:	f104 091a 	add.w	r9, r4, #26
 8003f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	4543      	cmp	r3, r8
 8003f9c:	dc09      	bgt.n	8003fb2 <_printf_float+0x256>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	079b      	lsls	r3, r3, #30
 8003fa2:	f100 8102 	bmi.w	80041aa <_printf_float+0x44e>
 8003fa6:	68e0      	ldr	r0, [r4, #12]
 8003fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003faa:	4298      	cmp	r0, r3
 8003fac:	bfb8      	it	lt
 8003fae:	4618      	movlt	r0, r3
 8003fb0:	e731      	b.n	8003e16 <_printf_float+0xba>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	464a      	mov	r2, r9
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b8      	blx	r7
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	f43f af28 	beq.w	8003e12 <_printf_float+0xb6>
 8003fc2:	f108 0801 	add.w	r8, r8, #1
 8003fc6:	e7e6      	b.n	8003f96 <_printf_float+0x23a>
 8003fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dc38      	bgt.n	8004040 <_printf_float+0x2e4>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <_printf_float+0x2e0>)
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	f43f af1a 	beq.w	8003e12 <_printf_float+0xb6>
 8003fde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	d102      	bne.n	8003fec <_printf_float+0x290>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	07d9      	lsls	r1, r3, #31
 8003fea:	d5d8      	bpl.n	8003f9e <_printf_float+0x242>
 8003fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	47b8      	blx	r7
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	f43f af0b 	beq.w	8003e12 <_printf_float+0xb6>
 8003ffc:	f04f 0900 	mov.w	r9, #0
 8004000:	f104 0a1a 	add.w	sl, r4, #26
 8004004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004006:	425b      	negs	r3, r3
 8004008:	454b      	cmp	r3, r9
 800400a:	dc01      	bgt.n	8004010 <_printf_float+0x2b4>
 800400c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800400e:	e794      	b.n	8003f3a <_printf_float+0x1de>
 8004010:	2301      	movs	r3, #1
 8004012:	4652      	mov	r2, sl
 8004014:	4631      	mov	r1, r6
 8004016:	4628      	mov	r0, r5
 8004018:	47b8      	blx	r7
 800401a:	3001      	adds	r0, #1
 800401c:	f43f aef9 	beq.w	8003e12 <_printf_float+0xb6>
 8004020:	f109 0901 	add.w	r9, r9, #1
 8004024:	e7ee      	b.n	8004004 <_printf_float+0x2a8>
 8004026:	bf00      	nop
 8004028:	7fefffff 	.word	0x7fefffff
 800402c:	08009528 	.word	0x08009528
 8004030:	0800952c 	.word	0x0800952c
 8004034:	08009534 	.word	0x08009534
 8004038:	08009530 	.word	0x08009530
 800403c:	08009538 	.word	0x08009538
 8004040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004044:	429a      	cmp	r2, r3
 8004046:	bfa8      	it	ge
 8004048:	461a      	movge	r2, r3
 800404a:	2a00      	cmp	r2, #0
 800404c:	4691      	mov	r9, r2
 800404e:	dc37      	bgt.n	80040c0 <_printf_float+0x364>
 8004050:	f04f 0b00 	mov.w	fp, #0
 8004054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004058:	f104 021a 	add.w	r2, r4, #26
 800405c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004060:	ebaa 0309 	sub.w	r3, sl, r9
 8004064:	455b      	cmp	r3, fp
 8004066:	dc33      	bgt.n	80040d0 <_printf_float+0x374>
 8004068:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800406c:	429a      	cmp	r2, r3
 800406e:	db3b      	blt.n	80040e8 <_printf_float+0x38c>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	07da      	lsls	r2, r3, #31
 8004074:	d438      	bmi.n	80040e8 <_printf_float+0x38c>
 8004076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004078:	990d      	ldr	r1, [sp, #52]	; 0x34
 800407a:	eba2 030a 	sub.w	r3, r2, sl
 800407e:	eba2 0901 	sub.w	r9, r2, r1
 8004082:	4599      	cmp	r9, r3
 8004084:	bfa8      	it	ge
 8004086:	4699      	movge	r9, r3
 8004088:	f1b9 0f00 	cmp.w	r9, #0
 800408c:	dc34      	bgt.n	80040f8 <_printf_float+0x39c>
 800408e:	f04f 0800 	mov.w	r8, #0
 8004092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004096:	f104 0a1a 	add.w	sl, r4, #26
 800409a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	eba3 0309 	sub.w	r3, r3, r9
 80040a4:	4543      	cmp	r3, r8
 80040a6:	f77f af7a 	ble.w	8003f9e <_printf_float+0x242>
 80040aa:	2301      	movs	r3, #1
 80040ac:	4652      	mov	r2, sl
 80040ae:	4631      	mov	r1, r6
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b8      	blx	r7
 80040b4:	3001      	adds	r0, #1
 80040b6:	f43f aeac 	beq.w	8003e12 <_printf_float+0xb6>
 80040ba:	f108 0801 	add.w	r8, r8, #1
 80040be:	e7ec      	b.n	800409a <_printf_float+0x33e>
 80040c0:	4613      	mov	r3, r2
 80040c2:	4631      	mov	r1, r6
 80040c4:	4642      	mov	r2, r8
 80040c6:	4628      	mov	r0, r5
 80040c8:	47b8      	blx	r7
 80040ca:	3001      	adds	r0, #1
 80040cc:	d1c0      	bne.n	8004050 <_printf_float+0x2f4>
 80040ce:	e6a0      	b.n	8003e12 <_printf_float+0xb6>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80040d8:	47b8      	blx	r7
 80040da:	3001      	adds	r0, #1
 80040dc:	f43f ae99 	beq.w	8003e12 <_printf_float+0xb6>
 80040e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040e2:	f10b 0b01 	add.w	fp, fp, #1
 80040e6:	e7b9      	b.n	800405c <_printf_float+0x300>
 80040e8:	4631      	mov	r1, r6
 80040ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	d1bf      	bne.n	8004076 <_printf_float+0x31a>
 80040f6:	e68c      	b.n	8003e12 <_printf_float+0xb6>
 80040f8:	464b      	mov	r3, r9
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	eb08 020a 	add.w	r2, r8, sl
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	d1c2      	bne.n	800408e <_printf_float+0x332>
 8004108:	e683      	b.n	8003e12 <_printf_float+0xb6>
 800410a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800410c:	2a01      	cmp	r2, #1
 800410e:	dc01      	bgt.n	8004114 <_printf_float+0x3b8>
 8004110:	07db      	lsls	r3, r3, #31
 8004112:	d537      	bpl.n	8004184 <_printf_float+0x428>
 8004114:	2301      	movs	r3, #1
 8004116:	4642      	mov	r2, r8
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	f43f ae77 	beq.w	8003e12 <_printf_float+0xb6>
 8004124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	f43f ae6f 	beq.w	8003e12 <_printf_float+0xb6>
 8004134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004138:	2200      	movs	r2, #0
 800413a:	2300      	movs	r3, #0
 800413c:	f7fc fc34 	bl	80009a8 <__aeabi_dcmpeq>
 8004140:	b9d8      	cbnz	r0, 800417a <_printf_float+0x41e>
 8004142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004144:	f108 0201 	add.w	r2, r8, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	d10e      	bne.n	8004172 <_printf_float+0x416>
 8004154:	e65d      	b.n	8003e12 <_printf_float+0xb6>
 8004156:	2301      	movs	r3, #1
 8004158:	464a      	mov	r2, r9
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f ae56 	beq.w	8003e12 <_printf_float+0xb6>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800416c:	3b01      	subs	r3, #1
 800416e:	4543      	cmp	r3, r8
 8004170:	dcf1      	bgt.n	8004156 <_printf_float+0x3fa>
 8004172:	4653      	mov	r3, sl
 8004174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004178:	e6e0      	b.n	8003f3c <_printf_float+0x1e0>
 800417a:	f04f 0800 	mov.w	r8, #0
 800417e:	f104 091a 	add.w	r9, r4, #26
 8004182:	e7f2      	b.n	800416a <_printf_float+0x40e>
 8004184:	2301      	movs	r3, #1
 8004186:	4642      	mov	r2, r8
 8004188:	e7df      	b.n	800414a <_printf_float+0x3ee>
 800418a:	2301      	movs	r3, #1
 800418c:	464a      	mov	r2, r9
 800418e:	4631      	mov	r1, r6
 8004190:	4628      	mov	r0, r5
 8004192:	47b8      	blx	r7
 8004194:	3001      	adds	r0, #1
 8004196:	f43f ae3c 	beq.w	8003e12 <_printf_float+0xb6>
 800419a:	f108 0801 	add.w	r8, r8, #1
 800419e:	68e3      	ldr	r3, [r4, #12]
 80041a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80041a2:	1a5b      	subs	r3, r3, r1
 80041a4:	4543      	cmp	r3, r8
 80041a6:	dcf0      	bgt.n	800418a <_printf_float+0x42e>
 80041a8:	e6fd      	b.n	8003fa6 <_printf_float+0x24a>
 80041aa:	f04f 0800 	mov.w	r8, #0
 80041ae:	f104 0919 	add.w	r9, r4, #25
 80041b2:	e7f4      	b.n	800419e <_printf_float+0x442>

080041b4 <_printf_common>:
 80041b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	4616      	mov	r6, r2
 80041ba:	4699      	mov	r9, r3
 80041bc:	688a      	ldr	r2, [r1, #8]
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	4607      	mov	r7, r0
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bfb8      	it	lt
 80041c6:	4613      	movlt	r3, r2
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ce:	460c      	mov	r4, r1
 80041d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d4:	b10a      	cbz	r2, 80041da <_printf_common+0x26>
 80041d6:	3301      	adds	r3, #1
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	6833      	ldrmi	r3, [r6, #0]
 80041e2:	3302      	addmi	r3, #2
 80041e4:	6033      	strmi	r3, [r6, #0]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d106      	bne.n	80041fc <_printf_common+0x48>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	6832      	ldr	r2, [r6, #0]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dc28      	bgt.n	800424e <_printf_common+0x9a>
 80041fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004200:	1e13      	subs	r3, r2, #0
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	bf18      	it	ne
 8004206:	2301      	movne	r3, #1
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d42d      	bmi.n	8004268 <_printf_common+0xb4>
 800420c:	4649      	mov	r1, r9
 800420e:	4638      	mov	r0, r7
 8004210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d020      	beq.n	800425c <_printf_common+0xa8>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	68e5      	ldr	r5, [r4, #12]
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	2b04      	cmp	r3, #4
 8004224:	bf18      	it	ne
 8004226:	2500      	movne	r5, #0
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	f04f 0600 	mov.w	r6, #0
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	bf08      	it	eq
 8004232:	1aad      	subeq	r5, r5, r2
 8004234:	6922      	ldr	r2, [r4, #16]
 8004236:	bf08      	it	eq
 8004238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800423c:	4293      	cmp	r3, r2
 800423e:	bfc4      	itt	gt
 8004240:	1a9b      	subgt	r3, r3, r2
 8004242:	18ed      	addgt	r5, r5, r3
 8004244:	341a      	adds	r4, #26
 8004246:	42b5      	cmp	r5, r6
 8004248:	d11a      	bne.n	8004280 <_printf_common+0xcc>
 800424a:	2000      	movs	r0, #0
 800424c:	e008      	b.n	8004260 <_printf_common+0xac>
 800424e:	2301      	movs	r3, #1
 8004250:	4652      	mov	r2, sl
 8004252:	4649      	mov	r1, r9
 8004254:	4638      	mov	r0, r7
 8004256:	47c0      	blx	r8
 8004258:	3001      	adds	r0, #1
 800425a:	d103      	bne.n	8004264 <_printf_common+0xb0>
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004264:	3501      	adds	r5, #1
 8004266:	e7c4      	b.n	80041f2 <_printf_common+0x3e>
 8004268:	2030      	movs	r0, #48	; 0x30
 800426a:	18e1      	adds	r1, r4, r3
 800426c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004276:	4422      	add	r2, r4
 8004278:	3302      	adds	r3, #2
 800427a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800427e:	e7c5      	b.n	800420c <_printf_common+0x58>
 8004280:	2301      	movs	r3, #1
 8004282:	4622      	mov	r2, r4
 8004284:	4649      	mov	r1, r9
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	3001      	adds	r0, #1
 800428c:	d0e6      	beq.n	800425c <_printf_common+0xa8>
 800428e:	3601      	adds	r6, #1
 8004290:	e7d9      	b.n	8004246 <_printf_common+0x92>
	...

08004294 <_printf_i>:
 8004294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	460c      	mov	r4, r1
 800429a:	7e27      	ldrb	r7, [r4, #24]
 800429c:	4691      	mov	r9, r2
 800429e:	2f78      	cmp	r7, #120	; 0x78
 80042a0:	4680      	mov	r8, r0
 80042a2:	469a      	mov	sl, r3
 80042a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042aa:	d807      	bhi.n	80042bc <_printf_i+0x28>
 80042ac:	2f62      	cmp	r7, #98	; 0x62
 80042ae:	d80a      	bhi.n	80042c6 <_printf_i+0x32>
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	f000 80d9 	beq.w	8004468 <_printf_i+0x1d4>
 80042b6:	2f58      	cmp	r7, #88	; 0x58
 80042b8:	f000 80a4 	beq.w	8004404 <_printf_i+0x170>
 80042bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c4:	e03a      	b.n	800433c <_printf_i+0xa8>
 80042c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ca:	2b15      	cmp	r3, #21
 80042cc:	d8f6      	bhi.n	80042bc <_printf_i+0x28>
 80042ce:	a001      	add	r0, pc, #4	; (adr r0, 80042d4 <_printf_i+0x40>)
 80042d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	08004341 	.word	0x08004341
 80042dc:	080042bd 	.word	0x080042bd
 80042e0:	080042bd 	.word	0x080042bd
 80042e4:	080042bd 	.word	0x080042bd
 80042e8:	080042bd 	.word	0x080042bd
 80042ec:	08004341 	.word	0x08004341
 80042f0:	080042bd 	.word	0x080042bd
 80042f4:	080042bd 	.word	0x080042bd
 80042f8:	080042bd 	.word	0x080042bd
 80042fc:	080042bd 	.word	0x080042bd
 8004300:	0800444f 	.word	0x0800444f
 8004304:	08004371 	.word	0x08004371
 8004308:	08004431 	.word	0x08004431
 800430c:	080042bd 	.word	0x080042bd
 8004310:	080042bd 	.word	0x080042bd
 8004314:	08004471 	.word	0x08004471
 8004318:	080042bd 	.word	0x080042bd
 800431c:	08004371 	.word	0x08004371
 8004320:	080042bd 	.word	0x080042bd
 8004324:	080042bd 	.word	0x080042bd
 8004328:	08004439 	.word	0x08004439
 800432c:	680b      	ldr	r3, [r1, #0]
 800432e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	600a      	str	r2, [r1, #0]
 8004338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800433c:	2301      	movs	r3, #1
 800433e:	e0a4      	b.n	800448a <_printf_i+0x1f6>
 8004340:	6825      	ldr	r5, [r4, #0]
 8004342:	6808      	ldr	r0, [r1, #0]
 8004344:	062e      	lsls	r6, r5, #24
 8004346:	f100 0304 	add.w	r3, r0, #4
 800434a:	d50a      	bpl.n	8004362 <_printf_i+0xce>
 800434c:	6805      	ldr	r5, [r0, #0]
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	2d00      	cmp	r5, #0
 8004352:	da03      	bge.n	800435c <_printf_i+0xc8>
 8004354:	232d      	movs	r3, #45	; 0x2d
 8004356:	426d      	negs	r5, r5
 8004358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800435c:	230a      	movs	r3, #10
 800435e:	485e      	ldr	r0, [pc, #376]	; (80044d8 <_printf_i+0x244>)
 8004360:	e019      	b.n	8004396 <_printf_i+0x102>
 8004362:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004366:	6805      	ldr	r5, [r0, #0]
 8004368:	600b      	str	r3, [r1, #0]
 800436a:	bf18      	it	ne
 800436c:	b22d      	sxthne	r5, r5
 800436e:	e7ef      	b.n	8004350 <_printf_i+0xbc>
 8004370:	680b      	ldr	r3, [r1, #0]
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	1d18      	adds	r0, r3, #4
 8004376:	6008      	str	r0, [r1, #0]
 8004378:	0628      	lsls	r0, r5, #24
 800437a:	d501      	bpl.n	8004380 <_printf_i+0xec>
 800437c:	681d      	ldr	r5, [r3, #0]
 800437e:	e002      	b.n	8004386 <_printf_i+0xf2>
 8004380:	0669      	lsls	r1, r5, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0xe8>
 8004384:	881d      	ldrh	r5, [r3, #0]
 8004386:	2f6f      	cmp	r7, #111	; 0x6f
 8004388:	bf0c      	ite	eq
 800438a:	2308      	moveq	r3, #8
 800438c:	230a      	movne	r3, #10
 800438e:	4852      	ldr	r0, [pc, #328]	; (80044d8 <_printf_i+0x244>)
 8004390:	2100      	movs	r1, #0
 8004392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004396:	6866      	ldr	r6, [r4, #4]
 8004398:	2e00      	cmp	r6, #0
 800439a:	bfa8      	it	ge
 800439c:	6821      	ldrge	r1, [r4, #0]
 800439e:	60a6      	str	r6, [r4, #8]
 80043a0:	bfa4      	itt	ge
 80043a2:	f021 0104 	bicge.w	r1, r1, #4
 80043a6:	6021      	strge	r1, [r4, #0]
 80043a8:	b90d      	cbnz	r5, 80043ae <_printf_i+0x11a>
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d04d      	beq.n	800444a <_printf_i+0x1b6>
 80043ae:	4616      	mov	r6, r2
 80043b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b4:	fb03 5711 	mls	r7, r3, r1, r5
 80043b8:	5dc7      	ldrb	r7, [r0, r7]
 80043ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043be:	462f      	mov	r7, r5
 80043c0:	42bb      	cmp	r3, r7
 80043c2:	460d      	mov	r5, r1
 80043c4:	d9f4      	bls.n	80043b0 <_printf_i+0x11c>
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d10b      	bne.n	80043e2 <_printf_i+0x14e>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	07df      	lsls	r7, r3, #31
 80043ce:	d508      	bpl.n	80043e2 <_printf_i+0x14e>
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	6861      	ldr	r1, [r4, #4]
 80043d4:	4299      	cmp	r1, r3
 80043d6:	bfde      	ittt	le
 80043d8:	2330      	movle	r3, #48	; 0x30
 80043da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043de:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80043e2:	1b92      	subs	r2, r2, r6
 80043e4:	6122      	str	r2, [r4, #16]
 80043e6:	464b      	mov	r3, r9
 80043e8:	4621      	mov	r1, r4
 80043ea:	4640      	mov	r0, r8
 80043ec:	f8cd a000 	str.w	sl, [sp]
 80043f0:	aa03      	add	r2, sp, #12
 80043f2:	f7ff fedf 	bl	80041b4 <_printf_common>
 80043f6:	3001      	adds	r0, #1
 80043f8:	d14c      	bne.n	8004494 <_printf_i+0x200>
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043fe:	b004      	add	sp, #16
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004404:	4834      	ldr	r0, [pc, #208]	; (80044d8 <_printf_i+0x244>)
 8004406:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800440a:	680e      	ldr	r6, [r1, #0]
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004412:	061f      	lsls	r7, r3, #24
 8004414:	600e      	str	r6, [r1, #0]
 8004416:	d514      	bpl.n	8004442 <_printf_i+0x1ae>
 8004418:	07d9      	lsls	r1, r3, #31
 800441a:	bf44      	itt	mi
 800441c:	f043 0320 	orrmi.w	r3, r3, #32
 8004420:	6023      	strmi	r3, [r4, #0]
 8004422:	b91d      	cbnz	r5, 800442c <_printf_i+0x198>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	2310      	movs	r3, #16
 800442e:	e7af      	b.n	8004390 <_printf_i+0xfc>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f043 0320 	orr.w	r3, r3, #32
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	2378      	movs	r3, #120	; 0x78
 800443a:	4828      	ldr	r0, [pc, #160]	; (80044dc <_printf_i+0x248>)
 800443c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004440:	e7e3      	b.n	800440a <_printf_i+0x176>
 8004442:	065e      	lsls	r6, r3, #25
 8004444:	bf48      	it	mi
 8004446:	b2ad      	uxthmi	r5, r5
 8004448:	e7e6      	b.n	8004418 <_printf_i+0x184>
 800444a:	4616      	mov	r6, r2
 800444c:	e7bb      	b.n	80043c6 <_printf_i+0x132>
 800444e:	680b      	ldr	r3, [r1, #0]
 8004450:	6826      	ldr	r6, [r4, #0]
 8004452:	1d1d      	adds	r5, r3, #4
 8004454:	6960      	ldr	r0, [r4, #20]
 8004456:	600d      	str	r5, [r1, #0]
 8004458:	0635      	lsls	r5, r6, #24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	d501      	bpl.n	8004462 <_printf_i+0x1ce>
 800445e:	6018      	str	r0, [r3, #0]
 8004460:	e002      	b.n	8004468 <_printf_i+0x1d4>
 8004462:	0671      	lsls	r1, r6, #25
 8004464:	d5fb      	bpl.n	800445e <_printf_i+0x1ca>
 8004466:	8018      	strh	r0, [r3, #0]
 8004468:	2300      	movs	r3, #0
 800446a:	4616      	mov	r6, r2
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	e7ba      	b.n	80043e6 <_printf_i+0x152>
 8004470:	680b      	ldr	r3, [r1, #0]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	600a      	str	r2, [r1, #0]
 8004476:	681e      	ldr	r6, [r3, #0]
 8004478:	2100      	movs	r1, #0
 800447a:	4630      	mov	r0, r6
 800447c:	6862      	ldr	r2, [r4, #4]
 800447e:	f002 fb09 	bl	8006a94 <memchr>
 8004482:	b108      	cbz	r0, 8004488 <_printf_i+0x1f4>
 8004484:	1b80      	subs	r0, r0, r6
 8004486:	6060      	str	r0, [r4, #4]
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	6123      	str	r3, [r4, #16]
 800448c:	2300      	movs	r3, #0
 800448e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004492:	e7a8      	b.n	80043e6 <_printf_i+0x152>
 8004494:	4632      	mov	r2, r6
 8004496:	4649      	mov	r1, r9
 8004498:	4640      	mov	r0, r8
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	47d0      	blx	sl
 800449e:	3001      	adds	r0, #1
 80044a0:	d0ab      	beq.n	80043fa <_printf_i+0x166>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	079b      	lsls	r3, r3, #30
 80044a6:	d413      	bmi.n	80044d0 <_printf_i+0x23c>
 80044a8:	68e0      	ldr	r0, [r4, #12]
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	4298      	cmp	r0, r3
 80044ae:	bfb8      	it	lt
 80044b0:	4618      	movlt	r0, r3
 80044b2:	e7a4      	b.n	80043fe <_printf_i+0x16a>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4632      	mov	r2, r6
 80044b8:	4649      	mov	r1, r9
 80044ba:	4640      	mov	r0, r8
 80044bc:	47d0      	blx	sl
 80044be:	3001      	adds	r0, #1
 80044c0:	d09b      	beq.n	80043fa <_printf_i+0x166>
 80044c2:	3501      	adds	r5, #1
 80044c4:	68e3      	ldr	r3, [r4, #12]
 80044c6:	9903      	ldr	r1, [sp, #12]
 80044c8:	1a5b      	subs	r3, r3, r1
 80044ca:	42ab      	cmp	r3, r5
 80044cc:	dcf2      	bgt.n	80044b4 <_printf_i+0x220>
 80044ce:	e7eb      	b.n	80044a8 <_printf_i+0x214>
 80044d0:	2500      	movs	r5, #0
 80044d2:	f104 0619 	add.w	r6, r4, #25
 80044d6:	e7f5      	b.n	80044c4 <_printf_i+0x230>
 80044d8:	0800953a 	.word	0x0800953a
 80044dc:	0800954b 	.word	0x0800954b

080044e0 <_scanf_float>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	b087      	sub	sp, #28
 80044e6:	9303      	str	r3, [sp, #12]
 80044e8:	688b      	ldr	r3, [r1, #8]
 80044ea:	4617      	mov	r7, r2
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80044f2:	bf85      	ittet	hi
 80044f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80044f8:	195b      	addhi	r3, r3, r5
 80044fa:	2300      	movls	r3, #0
 80044fc:	9302      	strhi	r3, [sp, #8]
 80044fe:	bf88      	it	hi
 8004500:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004504:	468b      	mov	fp, r1
 8004506:	f04f 0500 	mov.w	r5, #0
 800450a:	bf8c      	ite	hi
 800450c:	608b      	strhi	r3, [r1, #8]
 800450e:	9302      	strls	r3, [sp, #8]
 8004510:	680b      	ldr	r3, [r1, #0]
 8004512:	4680      	mov	r8, r0
 8004514:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004518:	f84b 3b1c 	str.w	r3, [fp], #28
 800451c:	460c      	mov	r4, r1
 800451e:	465e      	mov	r6, fp
 8004520:	46aa      	mov	sl, r5
 8004522:	46a9      	mov	r9, r5
 8004524:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004528:	9501      	str	r5, [sp, #4]
 800452a:	68a2      	ldr	r2, [r4, #8]
 800452c:	b152      	cbz	r2, 8004544 <_scanf_float+0x64>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b4e      	cmp	r3, #78	; 0x4e
 8004534:	d864      	bhi.n	8004600 <_scanf_float+0x120>
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d83c      	bhi.n	80045b4 <_scanf_float+0xd4>
 800453a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800453e:	b2c8      	uxtb	r0, r1
 8004540:	280e      	cmp	r0, #14
 8004542:	d93a      	bls.n	80045ba <_scanf_float+0xda>
 8004544:	f1b9 0f00 	cmp.w	r9, #0
 8004548:	d003      	beq.n	8004552 <_scanf_float+0x72>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004556:	f1ba 0f01 	cmp.w	sl, #1
 800455a:	f200 8113 	bhi.w	8004784 <_scanf_float+0x2a4>
 800455e:	455e      	cmp	r6, fp
 8004560:	f200 8105 	bhi.w	800476e <_scanf_float+0x28e>
 8004564:	2501      	movs	r5, #1
 8004566:	4628      	mov	r0, r5
 8004568:	b007      	add	sp, #28
 800456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004572:	2a0d      	cmp	r2, #13
 8004574:	d8e6      	bhi.n	8004544 <_scanf_float+0x64>
 8004576:	a101      	add	r1, pc, #4	; (adr r1, 800457c <_scanf_float+0x9c>)
 8004578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800457c:	080046bb 	.word	0x080046bb
 8004580:	08004545 	.word	0x08004545
 8004584:	08004545 	.word	0x08004545
 8004588:	08004545 	.word	0x08004545
 800458c:	0800471b 	.word	0x0800471b
 8004590:	080046f3 	.word	0x080046f3
 8004594:	08004545 	.word	0x08004545
 8004598:	08004545 	.word	0x08004545
 800459c:	080046c9 	.word	0x080046c9
 80045a0:	08004545 	.word	0x08004545
 80045a4:	08004545 	.word	0x08004545
 80045a8:	08004545 	.word	0x08004545
 80045ac:	08004545 	.word	0x08004545
 80045b0:	08004681 	.word	0x08004681
 80045b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80045b8:	e7db      	b.n	8004572 <_scanf_float+0x92>
 80045ba:	290e      	cmp	r1, #14
 80045bc:	d8c2      	bhi.n	8004544 <_scanf_float+0x64>
 80045be:	a001      	add	r0, pc, #4	; (adr r0, 80045c4 <_scanf_float+0xe4>)
 80045c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045c4:	08004673 	.word	0x08004673
 80045c8:	08004545 	.word	0x08004545
 80045cc:	08004673 	.word	0x08004673
 80045d0:	08004707 	.word	0x08004707
 80045d4:	08004545 	.word	0x08004545
 80045d8:	08004621 	.word	0x08004621
 80045dc:	0800465d 	.word	0x0800465d
 80045e0:	0800465d 	.word	0x0800465d
 80045e4:	0800465d 	.word	0x0800465d
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800465d 	.word	0x0800465d
 80045f0:	0800465d 	.word	0x0800465d
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	0800465d 	.word	0x0800465d
 8004600:	2b6e      	cmp	r3, #110	; 0x6e
 8004602:	d809      	bhi.n	8004618 <_scanf_float+0x138>
 8004604:	2b60      	cmp	r3, #96	; 0x60
 8004606:	d8b2      	bhi.n	800456e <_scanf_float+0x8e>
 8004608:	2b54      	cmp	r3, #84	; 0x54
 800460a:	d077      	beq.n	80046fc <_scanf_float+0x21c>
 800460c:	2b59      	cmp	r3, #89	; 0x59
 800460e:	d199      	bne.n	8004544 <_scanf_float+0x64>
 8004610:	2d07      	cmp	r5, #7
 8004612:	d197      	bne.n	8004544 <_scanf_float+0x64>
 8004614:	2508      	movs	r5, #8
 8004616:	e029      	b.n	800466c <_scanf_float+0x18c>
 8004618:	2b74      	cmp	r3, #116	; 0x74
 800461a:	d06f      	beq.n	80046fc <_scanf_float+0x21c>
 800461c:	2b79      	cmp	r3, #121	; 0x79
 800461e:	e7f6      	b.n	800460e <_scanf_float+0x12e>
 8004620:	6821      	ldr	r1, [r4, #0]
 8004622:	05c8      	lsls	r0, r1, #23
 8004624:	d51a      	bpl.n	800465c <_scanf_float+0x17c>
 8004626:	9b02      	ldr	r3, [sp, #8]
 8004628:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800462c:	6021      	str	r1, [r4, #0]
 800462e:	f109 0901 	add.w	r9, r9, #1
 8004632:	b11b      	cbz	r3, 800463c <_scanf_float+0x15c>
 8004634:	3b01      	subs	r3, #1
 8004636:	3201      	adds	r2, #1
 8004638:	9302      	str	r3, [sp, #8]
 800463a:	60a2      	str	r2, [r4, #8]
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	f340 8084 	ble.w	800475c <_scanf_float+0x27c>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	e766      	b.n	800452a <_scanf_float+0x4a>
 800465c:	eb1a 0f05 	cmn.w	sl, r5
 8004660:	f47f af70 	bne.w	8004544 <_scanf_float+0x64>
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800466a:	6022      	str	r2, [r4, #0]
 800466c:	f806 3b01 	strb.w	r3, [r6], #1
 8004670:	e7e4      	b.n	800463c <_scanf_float+0x15c>
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	0610      	lsls	r0, r2, #24
 8004676:	f57f af65 	bpl.w	8004544 <_scanf_float+0x64>
 800467a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467e:	e7f4      	b.n	800466a <_scanf_float+0x18a>
 8004680:	f1ba 0f00 	cmp.w	sl, #0
 8004684:	d10e      	bne.n	80046a4 <_scanf_float+0x1c4>
 8004686:	f1b9 0f00 	cmp.w	r9, #0
 800468a:	d10e      	bne.n	80046aa <_scanf_float+0x1ca>
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004692:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004696:	d108      	bne.n	80046aa <_scanf_float+0x1ca>
 8004698:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800469c:	f04f 0a01 	mov.w	sl, #1
 80046a0:	6022      	str	r2, [r4, #0]
 80046a2:	e7e3      	b.n	800466c <_scanf_float+0x18c>
 80046a4:	f1ba 0f02 	cmp.w	sl, #2
 80046a8:	d055      	beq.n	8004756 <_scanf_float+0x276>
 80046aa:	2d01      	cmp	r5, #1
 80046ac:	d002      	beq.n	80046b4 <_scanf_float+0x1d4>
 80046ae:	2d04      	cmp	r5, #4
 80046b0:	f47f af48 	bne.w	8004544 <_scanf_float+0x64>
 80046b4:	3501      	adds	r5, #1
 80046b6:	b2ed      	uxtb	r5, r5
 80046b8:	e7d8      	b.n	800466c <_scanf_float+0x18c>
 80046ba:	f1ba 0f01 	cmp.w	sl, #1
 80046be:	f47f af41 	bne.w	8004544 <_scanf_float+0x64>
 80046c2:	f04f 0a02 	mov.w	sl, #2
 80046c6:	e7d1      	b.n	800466c <_scanf_float+0x18c>
 80046c8:	b97d      	cbnz	r5, 80046ea <_scanf_float+0x20a>
 80046ca:	f1b9 0f00 	cmp.w	r9, #0
 80046ce:	f47f af3c 	bne.w	800454a <_scanf_float+0x6a>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046dc:	f47f af39 	bne.w	8004552 <_scanf_float+0x72>
 80046e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046e4:	2501      	movs	r5, #1
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	e7c0      	b.n	800466c <_scanf_float+0x18c>
 80046ea:	2d03      	cmp	r5, #3
 80046ec:	d0e2      	beq.n	80046b4 <_scanf_float+0x1d4>
 80046ee:	2d05      	cmp	r5, #5
 80046f0:	e7de      	b.n	80046b0 <_scanf_float+0x1d0>
 80046f2:	2d02      	cmp	r5, #2
 80046f4:	f47f af26 	bne.w	8004544 <_scanf_float+0x64>
 80046f8:	2503      	movs	r5, #3
 80046fa:	e7b7      	b.n	800466c <_scanf_float+0x18c>
 80046fc:	2d06      	cmp	r5, #6
 80046fe:	f47f af21 	bne.w	8004544 <_scanf_float+0x64>
 8004702:	2507      	movs	r5, #7
 8004704:	e7b2      	b.n	800466c <_scanf_float+0x18c>
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	0591      	lsls	r1, r2, #22
 800470a:	f57f af1b 	bpl.w	8004544 <_scanf_float+0x64>
 800470e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004712:	6022      	str	r2, [r4, #0]
 8004714:	f8cd 9004 	str.w	r9, [sp, #4]
 8004718:	e7a8      	b.n	800466c <_scanf_float+0x18c>
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004720:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004724:	d006      	beq.n	8004734 <_scanf_float+0x254>
 8004726:	0550      	lsls	r0, r2, #21
 8004728:	f57f af0c 	bpl.w	8004544 <_scanf_float+0x64>
 800472c:	f1b9 0f00 	cmp.w	r9, #0
 8004730:	f43f af0f 	beq.w	8004552 <_scanf_float+0x72>
 8004734:	0591      	lsls	r1, r2, #22
 8004736:	bf58      	it	pl
 8004738:	9901      	ldrpl	r1, [sp, #4]
 800473a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800473e:	bf58      	it	pl
 8004740:	eba9 0101 	subpl.w	r1, r9, r1
 8004744:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004748:	f04f 0900 	mov.w	r9, #0
 800474c:	bf58      	it	pl
 800474e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	e78a      	b.n	800466c <_scanf_float+0x18c>
 8004756:	f04f 0a03 	mov.w	sl, #3
 800475a:	e787      	b.n	800466c <_scanf_float+0x18c>
 800475c:	4639      	mov	r1, r7
 800475e:	4640      	mov	r0, r8
 8004760:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004764:	4798      	blx	r3
 8004766:	2800      	cmp	r0, #0
 8004768:	f43f aedf 	beq.w	800452a <_scanf_float+0x4a>
 800476c:	e6ea      	b.n	8004544 <_scanf_float+0x64>
 800476e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004772:	463a      	mov	r2, r7
 8004774:	4640      	mov	r0, r8
 8004776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800477a:	4798      	blx	r3
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	3b01      	subs	r3, #1
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	e6ec      	b.n	800455e <_scanf_float+0x7e>
 8004784:	1e6b      	subs	r3, r5, #1
 8004786:	2b06      	cmp	r3, #6
 8004788:	d825      	bhi.n	80047d6 <_scanf_float+0x2f6>
 800478a:	2d02      	cmp	r5, #2
 800478c:	d836      	bhi.n	80047fc <_scanf_float+0x31c>
 800478e:	455e      	cmp	r6, fp
 8004790:	f67f aee8 	bls.w	8004564 <_scanf_float+0x84>
 8004794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004798:	463a      	mov	r2, r7
 800479a:	4640      	mov	r0, r8
 800479c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047a0:	4798      	blx	r3
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	6123      	str	r3, [r4, #16]
 80047a8:	e7f1      	b.n	800478e <_scanf_float+0x2ae>
 80047aa:	9802      	ldr	r0, [sp, #8]
 80047ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80047b4:	463a      	mov	r2, r7
 80047b6:	9002      	str	r0, [sp, #8]
 80047b8:	4640      	mov	r0, r8
 80047ba:	4798      	blx	r3
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	3b01      	subs	r3, #1
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047c6:	fa5f fa8a 	uxtb.w	sl, sl
 80047ca:	f1ba 0f02 	cmp.w	sl, #2
 80047ce:	d1ec      	bne.n	80047aa <_scanf_float+0x2ca>
 80047d0:	3d03      	subs	r5, #3
 80047d2:	b2ed      	uxtb	r5, r5
 80047d4:	1b76      	subs	r6, r6, r5
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	05da      	lsls	r2, r3, #23
 80047da:	d52f      	bpl.n	800483c <_scanf_float+0x35c>
 80047dc:	055b      	lsls	r3, r3, #21
 80047de:	d510      	bpl.n	8004802 <_scanf_float+0x322>
 80047e0:	455e      	cmp	r6, fp
 80047e2:	f67f aebf 	bls.w	8004564 <_scanf_float+0x84>
 80047e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047ea:	463a      	mov	r2, r7
 80047ec:	4640      	mov	r0, r8
 80047ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047f2:	4798      	blx	r3
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	e7f1      	b.n	80047e0 <_scanf_float+0x300>
 80047fc:	46aa      	mov	sl, r5
 80047fe:	9602      	str	r6, [sp, #8]
 8004800:	e7df      	b.n	80047c2 <_scanf_float+0x2e2>
 8004802:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	2965      	cmp	r1, #101	; 0x65
 800480a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800480e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	d00c      	beq.n	8004830 <_scanf_float+0x350>
 8004816:	2945      	cmp	r1, #69	; 0x45
 8004818:	d00a      	beq.n	8004830 <_scanf_float+0x350>
 800481a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800481e:	463a      	mov	r2, r7
 8004820:	4640      	mov	r0, r8
 8004822:	4798      	blx	r3
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800482a:	3b01      	subs	r3, #1
 800482c:	1eb5      	subs	r5, r6, #2
 800482e:	6123      	str	r3, [r4, #16]
 8004830:	463a      	mov	r2, r7
 8004832:	4640      	mov	r0, r8
 8004834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004838:	4798      	blx	r3
 800483a:	462e      	mov	r6, r5
 800483c:	6825      	ldr	r5, [r4, #0]
 800483e:	f015 0510 	ands.w	r5, r5, #16
 8004842:	d159      	bne.n	80048f8 <_scanf_float+0x418>
 8004844:	7035      	strb	r5, [r6, #0]
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004850:	d11c      	bne.n	800488c <_scanf_float+0x3ac>
 8004852:	9b01      	ldr	r3, [sp, #4]
 8004854:	454b      	cmp	r3, r9
 8004856:	eba3 0209 	sub.w	r2, r3, r9
 800485a:	d124      	bne.n	80048a6 <_scanf_float+0x3c6>
 800485c:	2200      	movs	r2, #0
 800485e:	4659      	mov	r1, fp
 8004860:	4640      	mov	r0, r8
 8004862:	f000 fe89 	bl	8005578 <_strtod_r>
 8004866:	f8d4 c000 	ldr.w	ip, [r4]
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	f01c 0f02 	tst.w	ip, #2
 8004870:	4606      	mov	r6, r0
 8004872:	460f      	mov	r7, r1
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	d021      	beq.n	80048bc <_scanf_float+0x3dc>
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	600a      	str	r2, [r1, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	e9c3 6700 	strd	r6, r7, [r3]
 8004884:	68e3      	ldr	r3, [r4, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60e3      	str	r3, [r4, #12]
 800488a:	e66c      	b.n	8004566 <_scanf_float+0x86>
 800488c:	9b04      	ldr	r3, [sp, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0e4      	beq.n	800485c <_scanf_float+0x37c>
 8004892:	9905      	ldr	r1, [sp, #20]
 8004894:	230a      	movs	r3, #10
 8004896:	462a      	mov	r2, r5
 8004898:	4640      	mov	r0, r8
 800489a:	3101      	adds	r1, #1
 800489c:	f000 fef8 	bl	8005690 <_strtol_r>
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	9e05      	ldr	r6, [sp, #20]
 80048a4:	1ac2      	subs	r2, r0, r3
 80048a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80048aa:	429e      	cmp	r6, r3
 80048ac:	bf28      	it	cs
 80048ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80048b2:	4630      	mov	r0, r6
 80048b4:	4911      	ldr	r1, [pc, #68]	; (80048fc <_scanf_float+0x41c>)
 80048b6:	f000 f829 	bl	800490c <siprintf>
 80048ba:	e7cf      	b.n	800485c <_scanf_float+0x37c>
 80048bc:	f01c 0f04 	tst.w	ip, #4
 80048c0:	f103 0e04 	add.w	lr, r3, #4
 80048c4:	d003      	beq.n	80048ce <_scanf_float+0x3ee>
 80048c6:	9903      	ldr	r1, [sp, #12]
 80048c8:	f8c1 e000 	str.w	lr, [r1]
 80048cc:	e7d7      	b.n	800487e <_scanf_float+0x39e>
 80048ce:	9a03      	ldr	r2, [sp, #12]
 80048d0:	f8c2 e000 	str.w	lr, [r2]
 80048d4:	f8d3 8000 	ldr.w	r8, [r3]
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	f7fc f896 	bl	8000a0c <__aeabi_dcmpun>
 80048e0:	b128      	cbz	r0, 80048ee <_scanf_float+0x40e>
 80048e2:	4807      	ldr	r0, [pc, #28]	; (8004900 <_scanf_float+0x420>)
 80048e4:	f000 f80e 	bl	8004904 <nanf>
 80048e8:	f8c8 0000 	str.w	r0, [r8]
 80048ec:	e7ca      	b.n	8004884 <_scanf_float+0x3a4>
 80048ee:	4630      	mov	r0, r6
 80048f0:	4639      	mov	r1, r7
 80048f2:	f7fc f8e9 	bl	8000ac8 <__aeabi_d2f>
 80048f6:	e7f7      	b.n	80048e8 <_scanf_float+0x408>
 80048f8:	2500      	movs	r5, #0
 80048fa:	e634      	b.n	8004566 <_scanf_float+0x86>
 80048fc:	0800955c 	.word	0x0800955c
 8004900:	080094c3 	.word	0x080094c3

08004904 <nanf>:
 8004904:	4800      	ldr	r0, [pc, #0]	; (8004908 <nanf+0x4>)
 8004906:	4770      	bx	lr
 8004908:	7fc00000 	.word	0x7fc00000

0800490c <siprintf>:
 800490c:	b40e      	push	{r1, r2, r3}
 800490e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004912:	b500      	push	{lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	ab1d      	add	r3, sp, #116	; 0x74
 8004918:	9002      	str	r0, [sp, #8]
 800491a:	9006      	str	r0, [sp, #24]
 800491c:	9107      	str	r1, [sp, #28]
 800491e:	9104      	str	r1, [sp, #16]
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <siprintf+0x38>)
 8004922:	4909      	ldr	r1, [pc, #36]	; (8004948 <siprintf+0x3c>)
 8004924:	f853 2b04 	ldr.w	r2, [r3], #4
 8004928:	9105      	str	r1, [sp, #20]
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	a902      	add	r1, sp, #8
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	f002 fe86 	bl	8007640 <_svfiprintf_r>
 8004934:	2200      	movs	r2, #0
 8004936:	9b02      	ldr	r3, [sp, #8]
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	b01c      	add	sp, #112	; 0x70
 800493c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004940:	b003      	add	sp, #12
 8004942:	4770      	bx	lr
 8004944:	20000020 	.word	0x20000020
 8004948:	ffff0208 	.word	0xffff0208

0800494c <sulp>:
 800494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	460f      	mov	r7, r1
 8004952:	4690      	mov	r8, r2
 8004954:	f002 fc1c 	bl	8007190 <__ulp>
 8004958:	4604      	mov	r4, r0
 800495a:	460d      	mov	r5, r1
 800495c:	f1b8 0f00 	cmp.w	r8, #0
 8004960:	d011      	beq.n	8004986 <sulp+0x3a>
 8004962:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004966:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800496a:	2b00      	cmp	r3, #0
 800496c:	dd0b      	ble.n	8004986 <sulp+0x3a>
 800496e:	2400      	movs	r4, #0
 8004970:	051b      	lsls	r3, r3, #20
 8004972:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004976:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	f7fb fdab 	bl	80004d8 <__aeabi_dmul>
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004990 <_strtod_l>:
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	469b      	mov	fp, r3
 8004996:	2300      	movs	r3, #0
 8004998:	b0a1      	sub	sp, #132	; 0x84
 800499a:	931c      	str	r3, [sp, #112]	; 0x70
 800499c:	4ba1      	ldr	r3, [pc, #644]	; (8004c24 <_strtod_l+0x294>)
 800499e:	4682      	mov	sl, r0
 80049a0:	681f      	ldr	r7, [r3, #0]
 80049a2:	460e      	mov	r6, r1
 80049a4:	4638      	mov	r0, r7
 80049a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80049a8:	f7fb fbd2 	bl	8000150 <strlen>
 80049ac:	f04f 0800 	mov.w	r8, #0
 80049b0:	4604      	mov	r4, r0
 80049b2:	f04f 0900 	mov.w	r9, #0
 80049b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80049b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	2a2b      	cmp	r2, #43	; 0x2b
 80049be:	d04c      	beq.n	8004a5a <_strtod_l+0xca>
 80049c0:	d83a      	bhi.n	8004a38 <_strtod_l+0xa8>
 80049c2:	2a0d      	cmp	r2, #13
 80049c4:	d833      	bhi.n	8004a2e <_strtod_l+0x9e>
 80049c6:	2a08      	cmp	r2, #8
 80049c8:	d833      	bhi.n	8004a32 <_strtod_l+0xa2>
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d03d      	beq.n	8004a4a <_strtod_l+0xba>
 80049ce:	2300      	movs	r3, #0
 80049d0:	930c      	str	r3, [sp, #48]	; 0x30
 80049d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80049d4:	782b      	ldrb	r3, [r5, #0]
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	f040 80af 	bne.w	8004b3a <_strtod_l+0x1aa>
 80049dc:	786b      	ldrb	r3, [r5, #1]
 80049de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80049e2:	2b58      	cmp	r3, #88	; 0x58
 80049e4:	d16c      	bne.n	8004ac0 <_strtod_l+0x130>
 80049e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049e8:	4650      	mov	r0, sl
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	ab1c      	add	r3, sp, #112	; 0x70
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4a8d      	ldr	r2, [pc, #564]	; (8004c28 <_strtod_l+0x298>)
 80049f2:	f8cd b008 	str.w	fp, [sp, #8]
 80049f6:	ab1d      	add	r3, sp, #116	; 0x74
 80049f8:	a91b      	add	r1, sp, #108	; 0x6c
 80049fa:	f001 fd2f 	bl	800645c <__gethex>
 80049fe:	f010 0607 	ands.w	r6, r0, #7
 8004a02:	4604      	mov	r4, r0
 8004a04:	d005      	beq.n	8004a12 <_strtod_l+0x82>
 8004a06:	2e06      	cmp	r6, #6
 8004a08:	d129      	bne.n	8004a5e <_strtod_l+0xce>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004a10:	930c      	str	r3, [sp, #48]	; 0x30
 8004a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 8596 	bne.w	8005546 <_strtod_l+0xbb6>
 8004a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a1c:	b1d3      	cbz	r3, 8004a54 <_strtod_l+0xc4>
 8004a1e:	4642      	mov	r2, r8
 8004a20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	b021      	add	sp, #132	; 0x84
 8004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a2e:	2a20      	cmp	r2, #32
 8004a30:	d1cd      	bne.n	80049ce <_strtod_l+0x3e>
 8004a32:	3301      	adds	r3, #1
 8004a34:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a36:	e7bf      	b.n	80049b8 <_strtod_l+0x28>
 8004a38:	2a2d      	cmp	r2, #45	; 0x2d
 8004a3a:	d1c8      	bne.n	80049ce <_strtod_l+0x3e>
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	920c      	str	r2, [sp, #48]	; 0x30
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1c3      	bne.n	80049d2 <_strtod_l+0x42>
 8004a4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 8577 	bne.w	8005542 <_strtod_l+0xbb2>
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	e7e4      	b.n	8004a24 <_strtod_l+0x94>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	e7ef      	b.n	8004a3e <_strtod_l+0xae>
 8004a5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a60:	b13a      	cbz	r2, 8004a72 <_strtod_l+0xe2>
 8004a62:	2135      	movs	r1, #53	; 0x35
 8004a64:	a81e      	add	r0, sp, #120	; 0x78
 8004a66:	f002 fc97 	bl	8007398 <__copybits>
 8004a6a:	4650      	mov	r0, sl
 8004a6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a6e:	f002 f85f 	bl	8006b30 <_Bfree>
 8004a72:	3e01      	subs	r6, #1
 8004a74:	2e05      	cmp	r6, #5
 8004a76:	d807      	bhi.n	8004a88 <_strtod_l+0xf8>
 8004a78:	e8df f006 	tbb	[pc, r6]
 8004a7c:	1d180b0e 	.word	0x1d180b0e
 8004a80:	030e      	.short	0x030e
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	46c8      	mov	r8, r9
 8004a88:	0721      	lsls	r1, r4, #28
 8004a8a:	d5c2      	bpl.n	8004a12 <_strtod_l+0x82>
 8004a8c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004a90:	e7bf      	b.n	8004a12 <_strtod_l+0x82>
 8004a92:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004a96:	e7f7      	b.n	8004a88 <_strtod_l+0xf8>
 8004a98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004a9a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004a9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004aa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004aa6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004aaa:	e7ed      	b.n	8004a88 <_strtod_l+0xf8>
 8004aac:	f04f 0800 	mov.w	r8, #0
 8004ab0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004c2c <_strtod_l+0x29c>
 8004ab4:	e7e8      	b.n	8004a88 <_strtod_l+0xf8>
 8004ab6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004aba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004abe:	e7e3      	b.n	8004a88 <_strtod_l+0xf8>
 8004ac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d0f9      	beq.n	8004ac0 <_strtod_l+0x130>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0a0      	beq.n	8004a12 <_strtod_l+0x82>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ad6:	220a      	movs	r2, #10
 8004ad8:	9308      	str	r3, [sp, #32]
 8004ada:	2300      	movs	r3, #0
 8004adc:	469b      	mov	fp, r3
 8004ade:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004ae2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004ae4:	7805      	ldrb	r5, [r0, #0]
 8004ae6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004aea:	b2d9      	uxtb	r1, r3
 8004aec:	2909      	cmp	r1, #9
 8004aee:	d926      	bls.n	8004b3e <_strtod_l+0x1ae>
 8004af0:	4622      	mov	r2, r4
 8004af2:	4639      	mov	r1, r7
 8004af4:	f002 feba 	bl	800786c <strncmp>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d032      	beq.n	8004b62 <_strtod_l+0x1d2>
 8004afc:	2000      	movs	r0, #0
 8004afe:	462b      	mov	r3, r5
 8004b00:	465c      	mov	r4, fp
 8004b02:	4602      	mov	r2, r0
 8004b04:	9004      	str	r0, [sp, #16]
 8004b06:	2b65      	cmp	r3, #101	; 0x65
 8004b08:	d001      	beq.n	8004b0e <_strtod_l+0x17e>
 8004b0a:	2b45      	cmp	r3, #69	; 0x45
 8004b0c:	d113      	bne.n	8004b36 <_strtod_l+0x1a6>
 8004b0e:	b91c      	cbnz	r4, 8004b18 <_strtod_l+0x188>
 8004b10:	9b07      	ldr	r3, [sp, #28]
 8004b12:	4303      	orrs	r3, r0
 8004b14:	d099      	beq.n	8004a4a <_strtod_l+0xba>
 8004b16:	2400      	movs	r4, #0
 8004b18:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004b1a:	1c73      	adds	r3, r6, #1
 8004b1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b1e:	7873      	ldrb	r3, [r6, #1]
 8004b20:	2b2b      	cmp	r3, #43	; 0x2b
 8004b22:	d078      	beq.n	8004c16 <_strtod_l+0x286>
 8004b24:	2b2d      	cmp	r3, #45	; 0x2d
 8004b26:	d07b      	beq.n	8004c20 <_strtod_l+0x290>
 8004b28:	2700      	movs	r7, #0
 8004b2a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004b2e:	2909      	cmp	r1, #9
 8004b30:	f240 8082 	bls.w	8004c38 <_strtod_l+0x2a8>
 8004b34:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b36:	2500      	movs	r5, #0
 8004b38:	e09e      	b.n	8004c78 <_strtod_l+0x2e8>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e7c9      	b.n	8004ad2 <_strtod_l+0x142>
 8004b3e:	f1bb 0f08 	cmp.w	fp, #8
 8004b42:	bfd5      	itete	le
 8004b44:	9906      	ldrle	r1, [sp, #24]
 8004b46:	9905      	ldrgt	r1, [sp, #20]
 8004b48:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004b50:	f100 0001 	add.w	r0, r0, #1
 8004b54:	bfd4      	ite	le
 8004b56:	9306      	strle	r3, [sp, #24]
 8004b58:	9305      	strgt	r3, [sp, #20]
 8004b5a:	f10b 0b01 	add.w	fp, fp, #1
 8004b5e:	901b      	str	r0, [sp, #108]	; 0x6c
 8004b60:	e7bf      	b.n	8004ae2 <_strtod_l+0x152>
 8004b62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b64:	191a      	adds	r2, r3, r4
 8004b66:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b68:	5d1b      	ldrb	r3, [r3, r4]
 8004b6a:	f1bb 0f00 	cmp.w	fp, #0
 8004b6e:	d036      	beq.n	8004bde <_strtod_l+0x24e>
 8004b70:	465c      	mov	r4, fp
 8004b72:	9004      	str	r0, [sp, #16]
 8004b74:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004b78:	2a09      	cmp	r2, #9
 8004b7a:	d912      	bls.n	8004ba2 <_strtod_l+0x212>
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	e7c2      	b.n	8004b06 <_strtod_l+0x176>
 8004b80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b82:	3001      	adds	r0, #1
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b30      	cmp	r3, #48	; 0x30
 8004b8c:	d0f8      	beq.n	8004b80 <_strtod_l+0x1f0>
 8004b8e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004b92:	2a08      	cmp	r2, #8
 8004b94:	f200 84dc 	bhi.w	8005550 <_strtod_l+0xbc0>
 8004b98:	9004      	str	r0, [sp, #16]
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004ba0:	9208      	str	r2, [sp, #32]
 8004ba2:	3b30      	subs	r3, #48	; 0x30
 8004ba4:	f100 0201 	add.w	r2, r0, #1
 8004ba8:	d013      	beq.n	8004bd2 <_strtod_l+0x242>
 8004baa:	9904      	ldr	r1, [sp, #16]
 8004bac:	1905      	adds	r5, r0, r4
 8004bae:	4411      	add	r1, r2
 8004bb0:	9104      	str	r1, [sp, #16]
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	210a      	movs	r1, #10
 8004bb6:	42aa      	cmp	r2, r5
 8004bb8:	d113      	bne.n	8004be2 <_strtod_l+0x252>
 8004bba:	1822      	adds	r2, r4, r0
 8004bbc:	2a08      	cmp	r2, #8
 8004bbe:	f104 0401 	add.w	r4, r4, #1
 8004bc2:	4404      	add	r4, r0
 8004bc4:	dc1b      	bgt.n	8004bfe <_strtod_l+0x26e>
 8004bc6:	220a      	movs	r2, #10
 8004bc8:	9906      	ldr	r1, [sp, #24]
 8004bca:	fb02 3301 	mla	r3, r2, r1, r3
 8004bce:	9306      	str	r3, [sp, #24]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	911b      	str	r1, [sp, #108]	; 0x6c
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	e7ca      	b.n	8004b74 <_strtod_l+0x1e4>
 8004bde:	4658      	mov	r0, fp
 8004be0:	e7d3      	b.n	8004b8a <_strtod_l+0x1fa>
 8004be2:	2a08      	cmp	r2, #8
 8004be4:	dc04      	bgt.n	8004bf0 <_strtod_l+0x260>
 8004be6:	9f06      	ldr	r7, [sp, #24]
 8004be8:	434f      	muls	r7, r1
 8004bea:	9706      	str	r7, [sp, #24]
 8004bec:	3201      	adds	r2, #1
 8004bee:	e7e2      	b.n	8004bb6 <_strtod_l+0x226>
 8004bf0:	1c57      	adds	r7, r2, #1
 8004bf2:	2f10      	cmp	r7, #16
 8004bf4:	bfde      	ittt	le
 8004bf6:	9f05      	ldrle	r7, [sp, #20]
 8004bf8:	434f      	mulle	r7, r1
 8004bfa:	9705      	strle	r7, [sp, #20]
 8004bfc:	e7f6      	b.n	8004bec <_strtod_l+0x25c>
 8004bfe:	2c10      	cmp	r4, #16
 8004c00:	bfdf      	itttt	le
 8004c02:	220a      	movle	r2, #10
 8004c04:	9905      	ldrle	r1, [sp, #20]
 8004c06:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c0a:	9305      	strle	r3, [sp, #20]
 8004c0c:	e7e0      	b.n	8004bd0 <_strtod_l+0x240>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2201      	movs	r2, #1
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	e77c      	b.n	8004b10 <_strtod_l+0x180>
 8004c16:	2700      	movs	r7, #0
 8004c18:	1cb3      	adds	r3, r6, #2
 8004c1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c1c:	78b3      	ldrb	r3, [r6, #2]
 8004c1e:	e784      	b.n	8004b2a <_strtod_l+0x19a>
 8004c20:	2701      	movs	r7, #1
 8004c22:	e7f9      	b.n	8004c18 <_strtod_l+0x288>
 8004c24:	080097b8 	.word	0x080097b8
 8004c28:	08009564 	.word	0x08009564
 8004c2c:	7ff00000 	.word	0x7ff00000
 8004c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	911b      	str	r1, [sp, #108]	; 0x6c
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d0f9      	beq.n	8004c30 <_strtod_l+0x2a0>
 8004c3c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004c40:	2908      	cmp	r1, #8
 8004c42:	f63f af78 	bhi.w	8004b36 <_strtod_l+0x1a6>
 8004c46:	f04f 0e0a 	mov.w	lr, #10
 8004c4a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
 8004c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c54:	1c59      	adds	r1, r3, #1
 8004c56:	911b      	str	r1, [sp, #108]	; 0x6c
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004c5e:	2d09      	cmp	r5, #9
 8004c60:	d935      	bls.n	8004cce <_strtod_l+0x33e>
 8004c62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c64:	1b49      	subs	r1, r1, r5
 8004c66:	2908      	cmp	r1, #8
 8004c68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004c6c:	dc02      	bgt.n	8004c74 <_strtod_l+0x2e4>
 8004c6e:	4565      	cmp	r5, ip
 8004c70:	bfa8      	it	ge
 8004c72:	4665      	movge	r5, ip
 8004c74:	b107      	cbz	r7, 8004c78 <_strtod_l+0x2e8>
 8004c76:	426d      	negs	r5, r5
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d14c      	bne.n	8004d16 <_strtod_l+0x386>
 8004c7c:	9907      	ldr	r1, [sp, #28]
 8004c7e:	4301      	orrs	r1, r0
 8004c80:	f47f aec7 	bne.w	8004a12 <_strtod_l+0x82>
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	f47f aee0 	bne.w	8004a4a <_strtod_l+0xba>
 8004c8a:	2b69      	cmp	r3, #105	; 0x69
 8004c8c:	d026      	beq.n	8004cdc <_strtod_l+0x34c>
 8004c8e:	dc23      	bgt.n	8004cd8 <_strtod_l+0x348>
 8004c90:	2b49      	cmp	r3, #73	; 0x49
 8004c92:	d023      	beq.n	8004cdc <_strtod_l+0x34c>
 8004c94:	2b4e      	cmp	r3, #78	; 0x4e
 8004c96:	f47f aed8 	bne.w	8004a4a <_strtod_l+0xba>
 8004c9a:	499c      	ldr	r1, [pc, #624]	; (8004f0c <_strtod_l+0x57c>)
 8004c9c:	a81b      	add	r0, sp, #108	; 0x6c
 8004c9e:	f001 fe2b 	bl	80068f8 <__match>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f aed1 	beq.w	8004a4a <_strtod_l+0xba>
 8004ca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b28      	cmp	r3, #40	; 0x28
 8004cae:	d12c      	bne.n	8004d0a <_strtod_l+0x37a>
 8004cb0:	4997      	ldr	r1, [pc, #604]	; (8004f10 <_strtod_l+0x580>)
 8004cb2:	aa1e      	add	r2, sp, #120	; 0x78
 8004cb4:	a81b      	add	r0, sp, #108	; 0x6c
 8004cb6:	f001 fe33 	bl	8006920 <__hexnan>
 8004cba:	2805      	cmp	r0, #5
 8004cbc:	d125      	bne.n	8004d0a <_strtod_l+0x37a>
 8004cbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cc0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004cc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004cc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004ccc:	e6a1      	b.n	8004a12 <_strtod_l+0x82>
 8004cce:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004cd2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004cd6:	e7bc      	b.n	8004c52 <_strtod_l+0x2c2>
 8004cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8004cda:	e7dc      	b.n	8004c96 <_strtod_l+0x306>
 8004cdc:	498d      	ldr	r1, [pc, #564]	; (8004f14 <_strtod_l+0x584>)
 8004cde:	a81b      	add	r0, sp, #108	; 0x6c
 8004ce0:	f001 fe0a 	bl	80068f8 <__match>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	f43f aeb0 	beq.w	8004a4a <_strtod_l+0xba>
 8004cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cec:	498a      	ldr	r1, [pc, #552]	; (8004f18 <_strtod_l+0x588>)
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	a81b      	add	r0, sp, #108	; 0x6c
 8004cf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cf4:	f001 fe00 	bl	80068f8 <__match>
 8004cf8:	b910      	cbnz	r0, 8004d00 <_strtod_l+0x370>
 8004cfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d00:	f04f 0800 	mov.w	r8, #0
 8004d04:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004f28 <_strtod_l+0x598>
 8004d08:	e683      	b.n	8004a12 <_strtod_l+0x82>
 8004d0a:	4884      	ldr	r0, [pc, #528]	; (8004f1c <_strtod_l+0x58c>)
 8004d0c:	f002 fd98 	bl	8007840 <nan>
 8004d10:	4680      	mov	r8, r0
 8004d12:	4689      	mov	r9, r1
 8004d14:	e67d      	b.n	8004a12 <_strtod_l+0x82>
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	f1bb 0f00 	cmp.w	fp, #0
 8004d1c:	bf08      	it	eq
 8004d1e:	46a3      	moveq	fp, r4
 8004d20:	1aeb      	subs	r3, r5, r3
 8004d22:	2c10      	cmp	r4, #16
 8004d24:	9806      	ldr	r0, [sp, #24]
 8004d26:	4626      	mov	r6, r4
 8004d28:	9307      	str	r3, [sp, #28]
 8004d2a:	bfa8      	it	ge
 8004d2c:	2610      	movge	r6, #16
 8004d2e:	f7fb fb59 	bl	80003e4 <__aeabi_ui2d>
 8004d32:	2c09      	cmp	r4, #9
 8004d34:	4680      	mov	r8, r0
 8004d36:	4689      	mov	r9, r1
 8004d38:	dd13      	ble.n	8004d62 <_strtod_l+0x3d2>
 8004d3a:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <_strtod_l+0x590>)
 8004d3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004d44:	f7fb fbc8 	bl	80004d8 <__aeabi_dmul>
 8004d48:	4680      	mov	r8, r0
 8004d4a:	9805      	ldr	r0, [sp, #20]
 8004d4c:	4689      	mov	r9, r1
 8004d4e:	f7fb fb49 	bl	80003e4 <__aeabi_ui2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb fa07 	bl	800016c <__adddf3>
 8004d5e:	4680      	mov	r8, r0
 8004d60:	4689      	mov	r9, r1
 8004d62:	2c0f      	cmp	r4, #15
 8004d64:	dc36      	bgt.n	8004dd4 <_strtod_l+0x444>
 8004d66:	9b07      	ldr	r3, [sp, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f43f ae52 	beq.w	8004a12 <_strtod_l+0x82>
 8004d6e:	dd22      	ble.n	8004db6 <_strtod_l+0x426>
 8004d70:	2b16      	cmp	r3, #22
 8004d72:	dc09      	bgt.n	8004d88 <_strtod_l+0x3f8>
 8004d74:	4c6a      	ldr	r4, [pc, #424]	; (8004f20 <_strtod_l+0x590>)
 8004d76:	4642      	mov	r2, r8
 8004d78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004d82:	f7fb fba9 	bl	80004d8 <__aeabi_dmul>
 8004d86:	e7c3      	b.n	8004d10 <_strtod_l+0x380>
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	db20      	blt.n	8004dd4 <_strtod_l+0x444>
 8004d92:	4d63      	ldr	r5, [pc, #396]	; (8004f20 <_strtod_l+0x590>)
 8004d94:	f1c4 040f 	rsb	r4, r4, #15
 8004d98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da2:	464b      	mov	r3, r9
 8004da4:	f7fb fb98 	bl	80004d8 <__aeabi_dmul>
 8004da8:	9b07      	ldr	r3, [sp, #28]
 8004daa:	1b1c      	subs	r4, r3, r4
 8004dac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004db4:	e7e5      	b.n	8004d82 <_strtod_l+0x3f2>
 8004db6:	9b07      	ldr	r3, [sp, #28]
 8004db8:	3316      	adds	r3, #22
 8004dba:	db0b      	blt.n	8004dd4 <_strtod_l+0x444>
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	4a58      	ldr	r2, [pc, #352]	; (8004f20 <_strtod_l+0x590>)
 8004dc0:	1b5d      	subs	r5, r3, r5
 8004dc2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dcc:	4649      	mov	r1, r9
 8004dce:	f7fb fcad 	bl	800072c <__aeabi_ddiv>
 8004dd2:	e79d      	b.n	8004d10 <_strtod_l+0x380>
 8004dd4:	9b07      	ldr	r3, [sp, #28]
 8004dd6:	1ba6      	subs	r6, r4, r6
 8004dd8:	441e      	add	r6, r3
 8004dda:	2e00      	cmp	r6, #0
 8004ddc:	dd71      	ble.n	8004ec2 <_strtod_l+0x532>
 8004dde:	f016 030f 	ands.w	r3, r6, #15
 8004de2:	d00a      	beq.n	8004dfa <_strtod_l+0x46a>
 8004de4:	494e      	ldr	r1, [pc, #312]	; (8004f20 <_strtod_l+0x590>)
 8004de6:	4642      	mov	r2, r8
 8004de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df0:	464b      	mov	r3, r9
 8004df2:	f7fb fb71 	bl	80004d8 <__aeabi_dmul>
 8004df6:	4680      	mov	r8, r0
 8004df8:	4689      	mov	r9, r1
 8004dfa:	f036 060f 	bics.w	r6, r6, #15
 8004dfe:	d050      	beq.n	8004ea2 <_strtod_l+0x512>
 8004e00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004e04:	dd27      	ble.n	8004e56 <_strtod_l+0x4c6>
 8004e06:	f04f 0b00 	mov.w	fp, #0
 8004e0a:	f8cd b010 	str.w	fp, [sp, #16]
 8004e0e:	f8cd b020 	str.w	fp, [sp, #32]
 8004e12:	f8cd b018 	str.w	fp, [sp, #24]
 8004e16:	2322      	movs	r3, #34	; 0x22
 8004e18:	f04f 0800 	mov.w	r8, #0
 8004e1c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004f28 <_strtod_l+0x598>
 8004e20:	f8ca 3000 	str.w	r3, [sl]
 8004e24:	9b08      	ldr	r3, [sp, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f43f adf3 	beq.w	8004a12 <_strtod_l+0x82>
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e30:	f001 fe7e 	bl	8006b30 <_Bfree>
 8004e34:	4650      	mov	r0, sl
 8004e36:	9906      	ldr	r1, [sp, #24]
 8004e38:	f001 fe7a 	bl	8006b30 <_Bfree>
 8004e3c:	4650      	mov	r0, sl
 8004e3e:	9904      	ldr	r1, [sp, #16]
 8004e40:	f001 fe76 	bl	8006b30 <_Bfree>
 8004e44:	4650      	mov	r0, sl
 8004e46:	9908      	ldr	r1, [sp, #32]
 8004e48:	f001 fe72 	bl	8006b30 <_Bfree>
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	4650      	mov	r0, sl
 8004e50:	f001 fe6e 	bl	8006b30 <_Bfree>
 8004e54:	e5dd      	b.n	8004a12 <_strtod_l+0x82>
 8004e56:	2300      	movs	r3, #0
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	461f      	mov	r7, r3
 8004e5e:	1136      	asrs	r6, r6, #4
 8004e60:	2e01      	cmp	r6, #1
 8004e62:	dc21      	bgt.n	8004ea8 <_strtod_l+0x518>
 8004e64:	b10b      	cbz	r3, 8004e6a <_strtod_l+0x4da>
 8004e66:	4680      	mov	r8, r0
 8004e68:	4689      	mov	r9, r1
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <_strtod_l+0x594>)
 8004e6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004e70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e74:	4642      	mov	r2, r8
 8004e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	f7fb fb2c 	bl	80004d8 <__aeabi_dmul>
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <_strtod_l+0x598>)
 8004e82:	460a      	mov	r2, r1
 8004e84:	400b      	ands	r3, r1
 8004e86:	4929      	ldr	r1, [pc, #164]	; (8004f2c <_strtod_l+0x59c>)
 8004e88:	4680      	mov	r8, r0
 8004e8a:	428b      	cmp	r3, r1
 8004e8c:	d8bb      	bhi.n	8004e06 <_strtod_l+0x476>
 8004e8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e92:	428b      	cmp	r3, r1
 8004e94:	bf86      	itte	hi
 8004e96:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004e9a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004f30 <_strtod_l+0x5a0>
 8004e9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	e07e      	b.n	8004fa6 <_strtod_l+0x616>
 8004ea8:	07f2      	lsls	r2, r6, #31
 8004eaa:	d507      	bpl.n	8004ebc <_strtod_l+0x52c>
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <_strtod_l+0x594>)
 8004eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb fb0f 	bl	80004d8 <__aeabi_dmul>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	3701      	adds	r7, #1
 8004ebe:	1076      	asrs	r6, r6, #1
 8004ec0:	e7ce      	b.n	8004e60 <_strtod_l+0x4d0>
 8004ec2:	d0ee      	beq.n	8004ea2 <_strtod_l+0x512>
 8004ec4:	4276      	negs	r6, r6
 8004ec6:	f016 020f 	ands.w	r2, r6, #15
 8004eca:	d00a      	beq.n	8004ee2 <_strtod_l+0x552>
 8004ecc:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <_strtod_l+0x590>)
 8004ece:	4640      	mov	r0, r8
 8004ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb fc27 	bl	800072c <__aeabi_ddiv>
 8004ede:	4680      	mov	r8, r0
 8004ee0:	4689      	mov	r9, r1
 8004ee2:	1136      	asrs	r6, r6, #4
 8004ee4:	d0dd      	beq.n	8004ea2 <_strtod_l+0x512>
 8004ee6:	2e1f      	cmp	r6, #31
 8004ee8:	dd24      	ble.n	8004f34 <_strtod_l+0x5a4>
 8004eea:	f04f 0b00 	mov.w	fp, #0
 8004eee:	f8cd b010 	str.w	fp, [sp, #16]
 8004ef2:	f8cd b020 	str.w	fp, [sp, #32]
 8004ef6:	f8cd b018 	str.w	fp, [sp, #24]
 8004efa:	2322      	movs	r3, #34	; 0x22
 8004efc:	f04f 0800 	mov.w	r8, #0
 8004f00:	f04f 0900 	mov.w	r9, #0
 8004f04:	f8ca 3000 	str.w	r3, [sl]
 8004f08:	e78c      	b.n	8004e24 <_strtod_l+0x494>
 8004f0a:	bf00      	nop
 8004f0c:	08009535 	.word	0x08009535
 8004f10:	08009578 	.word	0x08009578
 8004f14:	0800952d 	.word	0x0800952d
 8004f18:	080096bc 	.word	0x080096bc
 8004f1c:	080094c3 	.word	0x080094c3
 8004f20:	08009858 	.word	0x08009858
 8004f24:	08009830 	.word	0x08009830
 8004f28:	7ff00000 	.word	0x7ff00000
 8004f2c:	7ca00000 	.word	0x7ca00000
 8004f30:	7fefffff 	.word	0x7fefffff
 8004f34:	f016 0310 	ands.w	r3, r6, #16
 8004f38:	bf18      	it	ne
 8004f3a:	236a      	movne	r3, #106	; 0x6a
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	9305      	str	r3, [sp, #20]
 8004f40:	4649      	mov	r1, r9
 8004f42:	2300      	movs	r3, #0
 8004f44:	4fb2      	ldr	r7, [pc, #712]	; (8005210 <_strtod_l+0x880>)
 8004f46:	07f2      	lsls	r2, r6, #31
 8004f48:	d504      	bpl.n	8004f54 <_strtod_l+0x5c4>
 8004f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4e:	f7fb fac3 	bl	80004d8 <__aeabi_dmul>
 8004f52:	2301      	movs	r3, #1
 8004f54:	1076      	asrs	r6, r6, #1
 8004f56:	f107 0708 	add.w	r7, r7, #8
 8004f5a:	d1f4      	bne.n	8004f46 <_strtod_l+0x5b6>
 8004f5c:	b10b      	cbz	r3, 8004f62 <_strtod_l+0x5d2>
 8004f5e:	4680      	mov	r8, r0
 8004f60:	4689      	mov	r9, r1
 8004f62:	9b05      	ldr	r3, [sp, #20]
 8004f64:	b1bb      	cbz	r3, 8004f96 <_strtod_l+0x606>
 8004f66:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004f6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	4649      	mov	r1, r9
 8004f72:	dd10      	ble.n	8004f96 <_strtod_l+0x606>
 8004f74:	2b1f      	cmp	r3, #31
 8004f76:	f340 812b 	ble.w	80051d0 <_strtod_l+0x840>
 8004f7a:	2b34      	cmp	r3, #52	; 0x34
 8004f7c:	bfd8      	it	le
 8004f7e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	bfcf      	iteee	gt
 8004f88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004f8c:	3b20      	suble	r3, #32
 8004f8e:	fa02 f303 	lslle.w	r3, r2, r3
 8004f92:	ea03 0901 	andle.w	r9, r3, r1
 8004f96:	2200      	movs	r2, #0
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb fd03 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d1a1      	bne.n	8004eea <_strtod_l+0x55a>
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	465a      	mov	r2, fp
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4650      	mov	r0, sl
 8004fae:	4623      	mov	r3, r4
 8004fb0:	9908      	ldr	r1, [sp, #32]
 8004fb2:	f001 fe29 	bl	8006c08 <__s2b>
 8004fb6:	9008      	str	r0, [sp, #32]
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f43f af24 	beq.w	8004e06 <_strtod_l+0x476>
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	f04f 0b00 	mov.w	fp, #0
 8004fc4:	1b5d      	subs	r5, r3, r5
 8004fc6:	9b07      	ldr	r3, [sp, #28]
 8004fc8:	f8cd b010 	str.w	fp, [sp, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bfb4      	ite	lt
 8004fd0:	462b      	movlt	r3, r5
 8004fd2:	2300      	movge	r3, #0
 8004fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8004fd6:	9b07      	ldr	r3, [sp, #28]
 8004fd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004fdc:	9316      	str	r3, [sp, #88]	; 0x58
 8004fde:	9b08      	ldr	r3, [sp, #32]
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	f001 fd64 	bl	8006ab0 <_Balloc>
 8004fe8:	9006      	str	r0, [sp, #24]
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f43f af13 	beq.w	8004e16 <_strtod_l+0x486>
 8004ff0:	9b08      	ldr	r3, [sp, #32]
 8004ff2:	300c      	adds	r0, #12
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	f103 010c 	add.w	r1, r3, #12
 8004ffa:	3202      	adds	r2, #2
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	f7fe fdf9 	bl	8003bf4 <memcpy>
 8005002:	ab1e      	add	r3, sp, #120	; 0x78
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	ab1d      	add	r3, sp, #116	; 0x74
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4642      	mov	r2, r8
 800500c:	464b      	mov	r3, r9
 800500e:	4650      	mov	r0, sl
 8005010:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005014:	f002 f936 	bl	8007284 <__d2b>
 8005018:	901c      	str	r0, [sp, #112]	; 0x70
 800501a:	2800      	cmp	r0, #0
 800501c:	f43f aefb 	beq.w	8004e16 <_strtod_l+0x486>
 8005020:	2101      	movs	r1, #1
 8005022:	4650      	mov	r0, sl
 8005024:	f001 fe88 	bl	8006d38 <__i2b>
 8005028:	4603      	mov	r3, r0
 800502a:	9004      	str	r0, [sp, #16]
 800502c:	2800      	cmp	r0, #0
 800502e:	f43f aef2 	beq.w	8004e16 <_strtod_l+0x486>
 8005032:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005034:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005036:	2d00      	cmp	r5, #0
 8005038:	bfab      	itete	ge
 800503a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800503c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800503e:	18ee      	addge	r6, r5, r3
 8005040:	1b5c      	sublt	r4, r3, r5
 8005042:	9b05      	ldr	r3, [sp, #20]
 8005044:	bfa8      	it	ge
 8005046:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005048:	eba5 0503 	sub.w	r5, r5, r3
 800504c:	4415      	add	r5, r2
 800504e:	4b71      	ldr	r3, [pc, #452]	; (8005214 <_strtod_l+0x884>)
 8005050:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005054:	bfb8      	it	lt
 8005056:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005058:	429d      	cmp	r5, r3
 800505a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800505e:	f280 80c9 	bge.w	80051f4 <_strtod_l+0x864>
 8005062:	1b5b      	subs	r3, r3, r5
 8005064:	2b1f      	cmp	r3, #31
 8005066:	f04f 0701 	mov.w	r7, #1
 800506a:	eba2 0203 	sub.w	r2, r2, r3
 800506e:	f300 80b6 	bgt.w	80051de <_strtod_l+0x84e>
 8005072:	2500      	movs	r5, #0
 8005074:	fa07 f303 	lsl.w	r3, r7, r3
 8005078:	930f      	str	r3, [sp, #60]	; 0x3c
 800507a:	18b7      	adds	r7, r6, r2
 800507c:	9b05      	ldr	r3, [sp, #20]
 800507e:	42be      	cmp	r6, r7
 8005080:	4414      	add	r4, r2
 8005082:	441c      	add	r4, r3
 8005084:	4633      	mov	r3, r6
 8005086:	bfa8      	it	ge
 8005088:	463b      	movge	r3, r7
 800508a:	42a3      	cmp	r3, r4
 800508c:	bfa8      	it	ge
 800508e:	4623      	movge	r3, r4
 8005090:	2b00      	cmp	r3, #0
 8005092:	bfc2      	ittt	gt
 8005094:	1aff      	subgt	r7, r7, r3
 8005096:	1ae4      	subgt	r4, r4, r3
 8005098:	1af6      	subgt	r6, r6, r3
 800509a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd17      	ble.n	80050d0 <_strtod_l+0x740>
 80050a0:	461a      	mov	r2, r3
 80050a2:	4650      	mov	r0, sl
 80050a4:	9904      	ldr	r1, [sp, #16]
 80050a6:	f001 ff01 	bl	8006eac <__pow5mult>
 80050aa:	9004      	str	r0, [sp, #16]
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f43f aeb2 	beq.w	8004e16 <_strtod_l+0x486>
 80050b2:	4601      	mov	r1, r0
 80050b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050b6:	4650      	mov	r0, sl
 80050b8:	f001 fe54 	bl	8006d64 <__multiply>
 80050bc:	9009      	str	r0, [sp, #36]	; 0x24
 80050be:	2800      	cmp	r0, #0
 80050c0:	f43f aea9 	beq.w	8004e16 <_strtod_l+0x486>
 80050c4:	4650      	mov	r0, sl
 80050c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050c8:	f001 fd32 	bl	8006b30 <_Bfree>
 80050cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ce:	931c      	str	r3, [sp, #112]	; 0x70
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	f300 8093 	bgt.w	80051fc <_strtod_l+0x86c>
 80050d6:	9b07      	ldr	r3, [sp, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd08      	ble.n	80050ee <_strtod_l+0x75e>
 80050dc:	4650      	mov	r0, sl
 80050de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80050e0:	9906      	ldr	r1, [sp, #24]
 80050e2:	f001 fee3 	bl	8006eac <__pow5mult>
 80050e6:	9006      	str	r0, [sp, #24]
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f43f ae94 	beq.w	8004e16 <_strtod_l+0x486>
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	dd08      	ble.n	8005104 <_strtod_l+0x774>
 80050f2:	4622      	mov	r2, r4
 80050f4:	4650      	mov	r0, sl
 80050f6:	9906      	ldr	r1, [sp, #24]
 80050f8:	f001 ff32 	bl	8006f60 <__lshift>
 80050fc:	9006      	str	r0, [sp, #24]
 80050fe:	2800      	cmp	r0, #0
 8005100:	f43f ae89 	beq.w	8004e16 <_strtod_l+0x486>
 8005104:	2e00      	cmp	r6, #0
 8005106:	dd08      	ble.n	800511a <_strtod_l+0x78a>
 8005108:	4632      	mov	r2, r6
 800510a:	4650      	mov	r0, sl
 800510c:	9904      	ldr	r1, [sp, #16]
 800510e:	f001 ff27 	bl	8006f60 <__lshift>
 8005112:	9004      	str	r0, [sp, #16]
 8005114:	2800      	cmp	r0, #0
 8005116:	f43f ae7e 	beq.w	8004e16 <_strtod_l+0x486>
 800511a:	4650      	mov	r0, sl
 800511c:	9a06      	ldr	r2, [sp, #24]
 800511e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005120:	f001 ffa6 	bl	8007070 <__mdiff>
 8005124:	4683      	mov	fp, r0
 8005126:	2800      	cmp	r0, #0
 8005128:	f43f ae75 	beq.w	8004e16 <_strtod_l+0x486>
 800512c:	2400      	movs	r4, #0
 800512e:	68c3      	ldr	r3, [r0, #12]
 8005130:	9904      	ldr	r1, [sp, #16]
 8005132:	60c4      	str	r4, [r0, #12]
 8005134:	930d      	str	r3, [sp, #52]	; 0x34
 8005136:	f001 ff7f 	bl	8007038 <__mcmp>
 800513a:	42a0      	cmp	r0, r4
 800513c:	da70      	bge.n	8005220 <_strtod_l+0x890>
 800513e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005140:	ea53 0308 	orrs.w	r3, r3, r8
 8005144:	f040 8096 	bne.w	8005274 <_strtod_l+0x8e4>
 8005148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 8091 	bne.w	8005274 <_strtod_l+0x8e4>
 8005152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800515e:	f240 8089 	bls.w	8005274 <_strtod_l+0x8e4>
 8005162:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005166:	b923      	cbnz	r3, 8005172 <_strtod_l+0x7e2>
 8005168:	f8db 3010 	ldr.w	r3, [fp, #16]
 800516c:	2b01      	cmp	r3, #1
 800516e:	f340 8081 	ble.w	8005274 <_strtod_l+0x8e4>
 8005172:	4659      	mov	r1, fp
 8005174:	2201      	movs	r2, #1
 8005176:	4650      	mov	r0, sl
 8005178:	f001 fef2 	bl	8006f60 <__lshift>
 800517c:	9904      	ldr	r1, [sp, #16]
 800517e:	4683      	mov	fp, r0
 8005180:	f001 ff5a 	bl	8007038 <__mcmp>
 8005184:	2800      	cmp	r0, #0
 8005186:	dd75      	ble.n	8005274 <_strtod_l+0x8e4>
 8005188:	9905      	ldr	r1, [sp, #20]
 800518a:	464b      	mov	r3, r9
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <_strtod_l+0x888>)
 800518e:	2900      	cmp	r1, #0
 8005190:	f000 8091 	beq.w	80052b6 <_strtod_l+0x926>
 8005194:	ea02 0109 	and.w	r1, r2, r9
 8005198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800519c:	f300 808b 	bgt.w	80052b6 <_strtod_l+0x926>
 80051a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80051a4:	f77f aea9 	ble.w	8004efa <_strtod_l+0x56a>
 80051a8:	2300      	movs	r3, #0
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <_strtod_l+0x88c>)
 80051ac:	4640      	mov	r0, r8
 80051ae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80051b2:	4649      	mov	r1, r9
 80051b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80051b8:	f7fb f98e 	bl	80004d8 <__aeabi_dmul>
 80051bc:	460b      	mov	r3, r1
 80051be:	4303      	orrs	r3, r0
 80051c0:	bf08      	it	eq
 80051c2:	2322      	moveq	r3, #34	; 0x22
 80051c4:	4680      	mov	r8, r0
 80051c6:	4689      	mov	r9, r1
 80051c8:	bf08      	it	eq
 80051ca:	f8ca 3000 	streq.w	r3, [sl]
 80051ce:	e62d      	b.n	8004e2c <_strtod_l+0x49c>
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	ea03 0808 	and.w	r8, r3, r8
 80051dc:	e6db      	b.n	8004f96 <_strtod_l+0x606>
 80051de:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80051e2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80051e6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80051ea:	35e2      	adds	r5, #226	; 0xe2
 80051ec:	fa07 f505 	lsl.w	r5, r7, r5
 80051f0:	970f      	str	r7, [sp, #60]	; 0x3c
 80051f2:	e742      	b.n	800507a <_strtod_l+0x6ea>
 80051f4:	2301      	movs	r3, #1
 80051f6:	2500      	movs	r5, #0
 80051f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051fa:	e73e      	b.n	800507a <_strtod_l+0x6ea>
 80051fc:	463a      	mov	r2, r7
 80051fe:	4650      	mov	r0, sl
 8005200:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005202:	f001 fead 	bl	8006f60 <__lshift>
 8005206:	901c      	str	r0, [sp, #112]	; 0x70
 8005208:	2800      	cmp	r0, #0
 800520a:	f47f af64 	bne.w	80050d6 <_strtod_l+0x746>
 800520e:	e602      	b.n	8004e16 <_strtod_l+0x486>
 8005210:	08009590 	.word	0x08009590
 8005214:	fffffc02 	.word	0xfffffc02
 8005218:	7ff00000 	.word	0x7ff00000
 800521c:	39500000 	.word	0x39500000
 8005220:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005224:	d166      	bne.n	80052f4 <_strtod_l+0x964>
 8005226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800522c:	b35a      	cbz	r2, 8005286 <_strtod_l+0x8f6>
 800522e:	4a9c      	ldr	r2, [pc, #624]	; (80054a0 <_strtod_l+0xb10>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d12c      	bne.n	800528e <_strtod_l+0x8fe>
 8005234:	9b05      	ldr	r3, [sp, #20]
 8005236:	4640      	mov	r0, r8
 8005238:	b303      	cbz	r3, 800527c <_strtod_l+0x8ec>
 800523a:	464b      	mov	r3, r9
 800523c:	4a99      	ldr	r2, [pc, #612]	; (80054a4 <_strtod_l+0xb14>)
 800523e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005242:	401a      	ands	r2, r3
 8005244:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005248:	d81b      	bhi.n	8005282 <_strtod_l+0x8f2>
 800524a:	0d12      	lsrs	r2, r2, #20
 800524c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	4298      	cmp	r0, r3
 8005256:	d11a      	bne.n	800528e <_strtod_l+0x8fe>
 8005258:	4b93      	ldr	r3, [pc, #588]	; (80054a8 <_strtod_l+0xb18>)
 800525a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525c:	429a      	cmp	r2, r3
 800525e:	d102      	bne.n	8005266 <_strtod_l+0x8d6>
 8005260:	3001      	adds	r0, #1
 8005262:	f43f add8 	beq.w	8004e16 <_strtod_l+0x486>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	4b8e      	ldr	r3, [pc, #568]	; (80054a4 <_strtod_l+0xb14>)
 800526c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800526e:	401a      	ands	r2, r3
 8005270:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005274:	9b05      	ldr	r3, [sp, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d196      	bne.n	80051a8 <_strtod_l+0x818>
 800527a:	e5d7      	b.n	8004e2c <_strtod_l+0x49c>
 800527c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005280:	e7e8      	b.n	8005254 <_strtod_l+0x8c4>
 8005282:	460b      	mov	r3, r1
 8005284:	e7e6      	b.n	8005254 <_strtod_l+0x8c4>
 8005286:	ea53 0308 	orrs.w	r3, r3, r8
 800528a:	f43f af7d 	beq.w	8005188 <_strtod_l+0x7f8>
 800528e:	b1e5      	cbz	r5, 80052ca <_strtod_l+0x93a>
 8005290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005292:	421d      	tst	r5, r3
 8005294:	d0ee      	beq.n	8005274 <_strtod_l+0x8e4>
 8005296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	9a05      	ldr	r2, [sp, #20]
 800529e:	b1c3      	cbz	r3, 80052d2 <_strtod_l+0x942>
 80052a0:	f7ff fb54 	bl	800494c <sulp>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052ac:	f7fa ff5e 	bl	800016c <__adddf3>
 80052b0:	4680      	mov	r8, r0
 80052b2:	4689      	mov	r9, r1
 80052b4:	e7de      	b.n	8005274 <_strtod_l+0x8e4>
 80052b6:	4013      	ands	r3, r2
 80052b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80052c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80052c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80052c8:	e7d4      	b.n	8005274 <_strtod_l+0x8e4>
 80052ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052cc:	ea13 0f08 	tst.w	r3, r8
 80052d0:	e7e0      	b.n	8005294 <_strtod_l+0x904>
 80052d2:	f7ff fb3b 	bl	800494c <sulp>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052de:	f7fa ff43 	bl	8000168 <__aeabi_dsub>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4680      	mov	r8, r0
 80052e8:	4689      	mov	r9, r1
 80052ea:	f7fb fb5d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d0c0      	beq.n	8005274 <_strtod_l+0x8e4>
 80052f2:	e602      	b.n	8004efa <_strtod_l+0x56a>
 80052f4:	4658      	mov	r0, fp
 80052f6:	9904      	ldr	r1, [sp, #16]
 80052f8:	f002 f820 	bl	800733c <__ratio>
 80052fc:	2200      	movs	r2, #0
 80052fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005302:	4606      	mov	r6, r0
 8005304:	460f      	mov	r7, r1
 8005306:	f7fb fb63 	bl	80009d0 <__aeabi_dcmple>
 800530a:	2800      	cmp	r0, #0
 800530c:	d075      	beq.n	80053fa <_strtod_l+0xa6a>
 800530e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d047      	beq.n	80053a4 <_strtod_l+0xa14>
 8005314:	2600      	movs	r6, #0
 8005316:	4f65      	ldr	r7, [pc, #404]	; (80054ac <_strtod_l+0xb1c>)
 8005318:	4d64      	ldr	r5, [pc, #400]	; (80054ac <_strtod_l+0xb1c>)
 800531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	051b      	lsls	r3, r3, #20
 8005324:	930f      	str	r3, [sp, #60]	; 0x3c
 8005326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005328:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <_strtod_l+0xb20>)
 800532a:	429a      	cmp	r2, r3
 800532c:	f040 80c8 	bne.w	80054c0 <_strtod_l+0xb30>
 8005330:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005334:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800533a:	4640      	mov	r0, r8
 800533c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005340:	4649      	mov	r1, r9
 8005342:	f001 ff25 	bl	8007190 <__ulp>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4630      	mov	r0, r6
 800534c:	4639      	mov	r1, r7
 800534e:	f7fb f8c3 	bl	80004d8 <__aeabi_dmul>
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	f7fa ff09 	bl	800016c <__adddf3>
 800535a:	460b      	mov	r3, r1
 800535c:	4951      	ldr	r1, [pc, #324]	; (80054a4 <_strtod_l+0xb14>)
 800535e:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <_strtod_l+0xb24>)
 8005360:	4019      	ands	r1, r3
 8005362:	4291      	cmp	r1, r2
 8005364:	4680      	mov	r8, r0
 8005366:	d95e      	bls.n	8005426 <_strtod_l+0xa96>
 8005368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800536e:	4293      	cmp	r3, r2
 8005370:	d103      	bne.n	800537a <_strtod_l+0x9ea>
 8005372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005374:	3301      	adds	r3, #1
 8005376:	f43f ad4e 	beq.w	8004e16 <_strtod_l+0x486>
 800537a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800537e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80054a8 <_strtod_l+0xb18>
 8005382:	4650      	mov	r0, sl
 8005384:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005386:	f001 fbd3 	bl	8006b30 <_Bfree>
 800538a:	4650      	mov	r0, sl
 800538c:	9906      	ldr	r1, [sp, #24]
 800538e:	f001 fbcf 	bl	8006b30 <_Bfree>
 8005392:	4650      	mov	r0, sl
 8005394:	9904      	ldr	r1, [sp, #16]
 8005396:	f001 fbcb 	bl	8006b30 <_Bfree>
 800539a:	4659      	mov	r1, fp
 800539c:	4650      	mov	r0, sl
 800539e:	f001 fbc7 	bl	8006b30 <_Bfree>
 80053a2:	e61c      	b.n	8004fde <_strtod_l+0x64e>
 80053a4:	f1b8 0f00 	cmp.w	r8, #0
 80053a8:	d119      	bne.n	80053de <_strtod_l+0xa4e>
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b0:	b9e3      	cbnz	r3, 80053ec <_strtod_l+0xa5c>
 80053b2:	2200      	movs	r2, #0
 80053b4:	4630      	mov	r0, r6
 80053b6:	4639      	mov	r1, r7
 80053b8:	4b3c      	ldr	r3, [pc, #240]	; (80054ac <_strtod_l+0xb1c>)
 80053ba:	f7fb faff 	bl	80009bc <__aeabi_dcmplt>
 80053be:	b9c8      	cbnz	r0, 80053f4 <_strtod_l+0xa64>
 80053c0:	2200      	movs	r2, #0
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <_strtod_l+0xb28>)
 80053c8:	f7fb f886 	bl	80004d8 <__aeabi_dmul>
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80053d4:	9418      	str	r4, [sp, #96]	; 0x60
 80053d6:	9319      	str	r3, [sp, #100]	; 0x64
 80053d8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80053dc:	e79d      	b.n	800531a <_strtod_l+0x98a>
 80053de:	f1b8 0f01 	cmp.w	r8, #1
 80053e2:	d103      	bne.n	80053ec <_strtod_l+0xa5c>
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f43f ad87 	beq.w	8004efa <_strtod_l+0x56a>
 80053ec:	2600      	movs	r6, #0
 80053ee:	2400      	movs	r4, #0
 80053f0:	4f32      	ldr	r7, [pc, #200]	; (80054bc <_strtod_l+0xb2c>)
 80053f2:	e791      	b.n	8005318 <_strtod_l+0x988>
 80053f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80053f6:	4d30      	ldr	r5, [pc, #192]	; (80054b8 <_strtod_l+0xb28>)
 80053f8:	e7ea      	b.n	80053d0 <_strtod_l+0xa40>
 80053fa:	4b2f      	ldr	r3, [pc, #188]	; (80054b8 <_strtod_l+0xb28>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	4630      	mov	r0, r6
 8005400:	4639      	mov	r1, r7
 8005402:	f7fb f869 	bl	80004d8 <__aeabi_dmul>
 8005406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	b933      	cbnz	r3, 800541c <_strtod_l+0xa8c>
 800540e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005412:	9010      	str	r0, [sp, #64]	; 0x40
 8005414:	9311      	str	r3, [sp, #68]	; 0x44
 8005416:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800541a:	e77e      	b.n	800531a <_strtod_l+0x98a>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005424:	e7f7      	b.n	8005416 <_strtod_l+0xa86>
 8005426:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1a8      	bne.n	8005382 <_strtod_l+0x9f2>
 8005430:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005436:	0d1b      	lsrs	r3, r3, #20
 8005438:	051b      	lsls	r3, r3, #20
 800543a:	429a      	cmp	r2, r3
 800543c:	d1a1      	bne.n	8005382 <_strtod_l+0x9f2>
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb feab 	bl	800119c <__aeabi_d2lz>
 8005446:	f7fb f819 	bl	800047c <__aeabi_l2d>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fa fe89 	bl	8000168 <__aeabi_dsub>
 8005456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800545c:	ea43 0308 	orr.w	r3, r3, r8
 8005460:	4313      	orrs	r3, r2
 8005462:	4604      	mov	r4, r0
 8005464:	460d      	mov	r5, r1
 8005466:	d066      	beq.n	8005536 <_strtod_l+0xba6>
 8005468:	a309      	add	r3, pc, #36	; (adr r3, 8005490 <_strtod_l+0xb00>)
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f7fb faa5 	bl	80009bc <__aeabi_dcmplt>
 8005472:	2800      	cmp	r0, #0
 8005474:	f47f acda 	bne.w	8004e2c <_strtod_l+0x49c>
 8005478:	a307      	add	r3, pc, #28	; (adr r3, 8005498 <_strtod_l+0xb08>)
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	4620      	mov	r0, r4
 8005480:	4629      	mov	r1, r5
 8005482:	f7fb fab9 	bl	80009f8 <__aeabi_dcmpgt>
 8005486:	2800      	cmp	r0, #0
 8005488:	f43f af7b 	beq.w	8005382 <_strtod_l+0x9f2>
 800548c:	e4ce      	b.n	8004e2c <_strtod_l+0x49c>
 800548e:	bf00      	nop
 8005490:	94a03595 	.word	0x94a03595
 8005494:	3fdfffff 	.word	0x3fdfffff
 8005498:	35afe535 	.word	0x35afe535
 800549c:	3fe00000 	.word	0x3fe00000
 80054a0:	000fffff 	.word	0x000fffff
 80054a4:	7ff00000 	.word	0x7ff00000
 80054a8:	7fefffff 	.word	0x7fefffff
 80054ac:	3ff00000 	.word	0x3ff00000
 80054b0:	7fe00000 	.word	0x7fe00000
 80054b4:	7c9fffff 	.word	0x7c9fffff
 80054b8:	3fe00000 	.word	0x3fe00000
 80054bc:	bff00000 	.word	0xbff00000
 80054c0:	9b05      	ldr	r3, [sp, #20]
 80054c2:	b313      	cbz	r3, 800550a <_strtod_l+0xb7a>
 80054c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054ca:	d81e      	bhi.n	800550a <_strtod_l+0xb7a>
 80054cc:	a326      	add	r3, pc, #152	; (adr r3, 8005568 <_strtod_l+0xbd8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	f7fb fa7b 	bl	80009d0 <__aeabi_dcmple>
 80054da:	b190      	cbz	r0, 8005502 <_strtod_l+0xb72>
 80054dc:	4629      	mov	r1, r5
 80054de:	4620      	mov	r0, r4
 80054e0:	f7fb fad2 	bl	8000a88 <__aeabi_d2uiz>
 80054e4:	2801      	cmp	r0, #1
 80054e6:	bf38      	it	cc
 80054e8:	2001      	movcc	r0, #1
 80054ea:	f7fa ff7b 	bl	80003e4 <__aeabi_ui2d>
 80054ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	b9d3      	cbnz	r3, 800552c <_strtod_l+0xb9c>
 80054f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054fa:	9012      	str	r0, [sp, #72]	; 0x48
 80054fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80054fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005504:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005508:	1a9f      	subs	r7, r3, r2
 800550a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800550e:	f001 fe3f 	bl	8007190 <__ulp>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fa ffdd 	bl	80004d8 <__aeabi_dmul>
 800551e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005522:	f7fa fe23 	bl	800016c <__adddf3>
 8005526:	4680      	mov	r8, r0
 8005528:	4689      	mov	r9, r1
 800552a:	e77e      	b.n	800542a <_strtod_l+0xa9a>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005534:	e7e3      	b.n	80054fe <_strtod_l+0xb6e>
 8005536:	a30e      	add	r3, pc, #56	; (adr r3, 8005570 <_strtod_l+0xbe0>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fb fa3e 	bl	80009bc <__aeabi_dcmplt>
 8005540:	e7a1      	b.n	8005486 <_strtod_l+0xaf6>
 8005542:	2300      	movs	r3, #0
 8005544:	930c      	str	r3, [sp, #48]	; 0x30
 8005546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005548:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	f7ff ba65 	b.w	8004a1a <_strtod_l+0x8a>
 8005550:	2b65      	cmp	r3, #101	; 0x65
 8005552:	f43f ab5c 	beq.w	8004c0e <_strtod_l+0x27e>
 8005556:	2b45      	cmp	r3, #69	; 0x45
 8005558:	f43f ab59 	beq.w	8004c0e <_strtod_l+0x27e>
 800555c:	2201      	movs	r2, #1
 800555e:	f7ff bb8d 	b.w	8004c7c <_strtod_l+0x2ec>
 8005562:	bf00      	nop
 8005564:	f3af 8000 	nop.w
 8005568:	ffc00000 	.word	0xffc00000
 800556c:	41dfffff 	.word	0x41dfffff
 8005570:	94a03595 	.word	0x94a03595
 8005574:	3fcfffff 	.word	0x3fcfffff

08005578 <_strtod_r>:
 8005578:	4b01      	ldr	r3, [pc, #4]	; (8005580 <_strtod_r+0x8>)
 800557a:	f7ff ba09 	b.w	8004990 <_strtod_l>
 800557e:	bf00      	nop
 8005580:	20000088 	.word	0x20000088

08005584 <_strtol_l.isra.0>:
 8005584:	2b01      	cmp	r3, #1
 8005586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800558a:	4686      	mov	lr, r0
 800558c:	d001      	beq.n	8005592 <_strtol_l.isra.0+0xe>
 800558e:	2b24      	cmp	r3, #36	; 0x24
 8005590:	d906      	bls.n	80055a0 <_strtol_l.isra.0+0x1c>
 8005592:	f7fe fb05 	bl	8003ba0 <__errno>
 8005596:	2316      	movs	r3, #22
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	2000      	movs	r0, #0
 800559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a0:	468c      	mov	ip, r1
 80055a2:	4e3a      	ldr	r6, [pc, #232]	; (800568c <_strtol_l.isra.0+0x108>)
 80055a4:	4660      	mov	r0, ip
 80055a6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80055aa:	5da5      	ldrb	r5, [r4, r6]
 80055ac:	f015 0508 	ands.w	r5, r5, #8
 80055b0:	d1f8      	bne.n	80055a4 <_strtol_l.isra.0+0x20>
 80055b2:	2c2d      	cmp	r4, #45	; 0x2d
 80055b4:	d133      	bne.n	800561e <_strtol_l.isra.0+0x9a>
 80055b6:	f04f 0801 	mov.w	r8, #1
 80055ba:	f89c 4000 	ldrb.w	r4, [ip]
 80055be:	f100 0c02 	add.w	ip, r0, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d05d      	beq.n	8005682 <_strtol_l.isra.0+0xfe>
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d10c      	bne.n	80055e4 <_strtol_l.isra.0+0x60>
 80055ca:	2c30      	cmp	r4, #48	; 0x30
 80055cc:	d10a      	bne.n	80055e4 <_strtol_l.isra.0+0x60>
 80055ce:	f89c 0000 	ldrb.w	r0, [ip]
 80055d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80055d6:	2858      	cmp	r0, #88	; 0x58
 80055d8:	d14e      	bne.n	8005678 <_strtol_l.isra.0+0xf4>
 80055da:	2310      	movs	r3, #16
 80055dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80055e0:	f10c 0c02 	add.w	ip, ip, #2
 80055e4:	2500      	movs	r5, #0
 80055e6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80055ea:	3f01      	subs	r7, #1
 80055ec:	fbb7 f9f3 	udiv	r9, r7, r3
 80055f0:	4628      	mov	r0, r5
 80055f2:	fb03 7a19 	mls	sl, r3, r9, r7
 80055f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80055fa:	2e09      	cmp	r6, #9
 80055fc:	d818      	bhi.n	8005630 <_strtol_l.isra.0+0xac>
 80055fe:	4634      	mov	r4, r6
 8005600:	42a3      	cmp	r3, r4
 8005602:	dd24      	ble.n	800564e <_strtol_l.isra.0+0xca>
 8005604:	2d00      	cmp	r5, #0
 8005606:	db1f      	blt.n	8005648 <_strtol_l.isra.0+0xc4>
 8005608:	4581      	cmp	r9, r0
 800560a:	d31d      	bcc.n	8005648 <_strtol_l.isra.0+0xc4>
 800560c:	d101      	bne.n	8005612 <_strtol_l.isra.0+0x8e>
 800560e:	45a2      	cmp	sl, r4
 8005610:	db1a      	blt.n	8005648 <_strtol_l.isra.0+0xc4>
 8005612:	2501      	movs	r5, #1
 8005614:	fb00 4003 	mla	r0, r0, r3, r4
 8005618:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800561c:	e7eb      	b.n	80055f6 <_strtol_l.isra.0+0x72>
 800561e:	2c2b      	cmp	r4, #43	; 0x2b
 8005620:	bf08      	it	eq
 8005622:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005626:	46a8      	mov	r8, r5
 8005628:	bf08      	it	eq
 800562a:	f100 0c02 	addeq.w	ip, r0, #2
 800562e:	e7c8      	b.n	80055c2 <_strtol_l.isra.0+0x3e>
 8005630:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005634:	2e19      	cmp	r6, #25
 8005636:	d801      	bhi.n	800563c <_strtol_l.isra.0+0xb8>
 8005638:	3c37      	subs	r4, #55	; 0x37
 800563a:	e7e1      	b.n	8005600 <_strtol_l.isra.0+0x7c>
 800563c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005640:	2e19      	cmp	r6, #25
 8005642:	d804      	bhi.n	800564e <_strtol_l.isra.0+0xca>
 8005644:	3c57      	subs	r4, #87	; 0x57
 8005646:	e7db      	b.n	8005600 <_strtol_l.isra.0+0x7c>
 8005648:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800564c:	e7e4      	b.n	8005618 <_strtol_l.isra.0+0x94>
 800564e:	2d00      	cmp	r5, #0
 8005650:	da08      	bge.n	8005664 <_strtol_l.isra.0+0xe0>
 8005652:	2322      	movs	r3, #34	; 0x22
 8005654:	4638      	mov	r0, r7
 8005656:	f8ce 3000 	str.w	r3, [lr]
 800565a:	2a00      	cmp	r2, #0
 800565c:	d09e      	beq.n	800559c <_strtol_l.isra.0+0x18>
 800565e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8005662:	e007      	b.n	8005674 <_strtol_l.isra.0+0xf0>
 8005664:	f1b8 0f00 	cmp.w	r8, #0
 8005668:	d000      	beq.n	800566c <_strtol_l.isra.0+0xe8>
 800566a:	4240      	negs	r0, r0
 800566c:	2a00      	cmp	r2, #0
 800566e:	d095      	beq.n	800559c <_strtol_l.isra.0+0x18>
 8005670:	2d00      	cmp	r5, #0
 8005672:	d1f4      	bne.n	800565e <_strtol_l.isra.0+0xda>
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	e791      	b.n	800559c <_strtol_l.isra.0+0x18>
 8005678:	2430      	movs	r4, #48	; 0x30
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1b2      	bne.n	80055e4 <_strtol_l.isra.0+0x60>
 800567e:	2308      	movs	r3, #8
 8005680:	e7b0      	b.n	80055e4 <_strtol_l.isra.0+0x60>
 8005682:	2c30      	cmp	r4, #48	; 0x30
 8005684:	d0a3      	beq.n	80055ce <_strtol_l.isra.0+0x4a>
 8005686:	230a      	movs	r3, #10
 8005688:	e7ac      	b.n	80055e4 <_strtol_l.isra.0+0x60>
 800568a:	bf00      	nop
 800568c:	080095b9 	.word	0x080095b9

08005690 <_strtol_r>:
 8005690:	f7ff bf78 	b.w	8005584 <_strtol_l.isra.0>

08005694 <quorem>:
 8005694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	6903      	ldr	r3, [r0, #16]
 800569a:	690c      	ldr	r4, [r1, #16]
 800569c:	4607      	mov	r7, r0
 800569e:	42a3      	cmp	r3, r4
 80056a0:	f2c0 8083 	blt.w	80057aa <quorem+0x116>
 80056a4:	3c01      	subs	r4, #1
 80056a6:	f100 0514 	add.w	r5, r0, #20
 80056aa:	f101 0814 	add.w	r8, r1, #20
 80056ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056bc:	3301      	adds	r3, #1
 80056be:	429a      	cmp	r2, r3
 80056c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056cc:	d332      	bcc.n	8005734 <quorem+0xa0>
 80056ce:	f04f 0e00 	mov.w	lr, #0
 80056d2:	4640      	mov	r0, r8
 80056d4:	46ac      	mov	ip, r5
 80056d6:	46f2      	mov	sl, lr
 80056d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80056dc:	b293      	uxth	r3, r2
 80056de:	fb06 e303 	mla	r3, r6, r3, lr
 80056e2:	0c12      	lsrs	r2, r2, #16
 80056e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056e8:	fb06 e202 	mla	r2, r6, r2, lr
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	ebaa 0303 	sub.w	r3, sl, r3
 80056f2:	f8dc a000 	ldr.w	sl, [ip]
 80056f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056fa:	fa1f fa8a 	uxth.w	sl, sl
 80056fe:	4453      	add	r3, sl
 8005700:	fa1f fa82 	uxth.w	sl, r2
 8005704:	f8dc 2000 	ldr.w	r2, [ip]
 8005708:	4581      	cmp	r9, r0
 800570a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800570e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005718:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800571c:	f84c 3b04 	str.w	r3, [ip], #4
 8005720:	d2da      	bcs.n	80056d8 <quorem+0x44>
 8005722:	f855 300b 	ldr.w	r3, [r5, fp]
 8005726:	b92b      	cbnz	r3, 8005734 <quorem+0xa0>
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	3b04      	subs	r3, #4
 800572c:	429d      	cmp	r5, r3
 800572e:	461a      	mov	r2, r3
 8005730:	d32f      	bcc.n	8005792 <quorem+0xfe>
 8005732:	613c      	str	r4, [r7, #16]
 8005734:	4638      	mov	r0, r7
 8005736:	f001 fc7f 	bl	8007038 <__mcmp>
 800573a:	2800      	cmp	r0, #0
 800573c:	db25      	blt.n	800578a <quorem+0xf6>
 800573e:	4628      	mov	r0, r5
 8005740:	f04f 0c00 	mov.w	ip, #0
 8005744:	3601      	adds	r6, #1
 8005746:	f858 1b04 	ldr.w	r1, [r8], #4
 800574a:	f8d0 e000 	ldr.w	lr, [r0]
 800574e:	b28b      	uxth	r3, r1
 8005750:	ebac 0303 	sub.w	r3, ip, r3
 8005754:	fa1f f28e 	uxth.w	r2, lr
 8005758:	4413      	add	r3, r2
 800575a:	0c0a      	lsrs	r2, r1, #16
 800575c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800576a:	45c1      	cmp	r9, r8
 800576c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005770:	f840 3b04 	str.w	r3, [r0], #4
 8005774:	d2e7      	bcs.n	8005746 <quorem+0xb2>
 8005776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800577a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800577e:	b922      	cbnz	r2, 800578a <quorem+0xf6>
 8005780:	3b04      	subs	r3, #4
 8005782:	429d      	cmp	r5, r3
 8005784:	461a      	mov	r2, r3
 8005786:	d30a      	bcc.n	800579e <quorem+0x10a>
 8005788:	613c      	str	r4, [r7, #16]
 800578a:	4630      	mov	r0, r6
 800578c:	b003      	add	sp, #12
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	3b04      	subs	r3, #4
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1cb      	bne.n	8005732 <quorem+0x9e>
 800579a:	3c01      	subs	r4, #1
 800579c:	e7c6      	b.n	800572c <quorem+0x98>
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	d1f0      	bne.n	8005788 <quorem+0xf4>
 80057a6:	3c01      	subs	r4, #1
 80057a8:	e7eb      	b.n	8005782 <quorem+0xee>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e7ee      	b.n	800578c <quorem+0xf8>
	...

080057b0 <_dtoa_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4616      	mov	r6, r2
 80057b6:	461f      	mov	r7, r3
 80057b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057ba:	b099      	sub	sp, #100	; 0x64
 80057bc:	4605      	mov	r5, r0
 80057be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057c6:	b974      	cbnz	r4, 80057e6 <_dtoa_r+0x36>
 80057c8:	2010      	movs	r0, #16
 80057ca:	f001 f949 	bl	8006a60 <malloc>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6268      	str	r0, [r5, #36]	; 0x24
 80057d2:	b920      	cbnz	r0, 80057de <_dtoa_r+0x2e>
 80057d4:	21ea      	movs	r1, #234	; 0xea
 80057d6:	4bae      	ldr	r3, [pc, #696]	; (8005a90 <_dtoa_r+0x2e0>)
 80057d8:	48ae      	ldr	r0, [pc, #696]	; (8005a94 <_dtoa_r+0x2e4>)
 80057da:	f002 f867 	bl	80078ac <__assert_func>
 80057de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057e2:	6004      	str	r4, [r0, #0]
 80057e4:	60c4      	str	r4, [r0, #12]
 80057e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	b151      	cbz	r1, 8005802 <_dtoa_r+0x52>
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	2301      	movs	r3, #1
 80057f0:	4093      	lsls	r3, r2
 80057f2:	604a      	str	r2, [r1, #4]
 80057f4:	608b      	str	r3, [r1, #8]
 80057f6:	4628      	mov	r0, r5
 80057f8:	f001 f99a 	bl	8006b30 <_Bfree>
 80057fc:	2200      	movs	r2, #0
 80057fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	1e3b      	subs	r3, r7, #0
 8005804:	bfaf      	iteee	ge
 8005806:	2300      	movge	r3, #0
 8005808:	2201      	movlt	r2, #1
 800580a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800580e:	9305      	strlt	r3, [sp, #20]
 8005810:	bfa8      	it	ge
 8005812:	f8c8 3000 	strge.w	r3, [r8]
 8005816:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800581a:	4b9f      	ldr	r3, [pc, #636]	; (8005a98 <_dtoa_r+0x2e8>)
 800581c:	bfb8      	it	lt
 800581e:	f8c8 2000 	strlt.w	r2, [r8]
 8005822:	ea33 0309 	bics.w	r3, r3, r9
 8005826:	d119      	bne.n	800585c <_dtoa_r+0xac>
 8005828:	f242 730f 	movw	r3, #9999	; 0x270f
 800582c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005834:	4333      	orrs	r3, r6
 8005836:	f000 8580 	beq.w	800633a <_dtoa_r+0xb8a>
 800583a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800583c:	b953      	cbnz	r3, 8005854 <_dtoa_r+0xa4>
 800583e:	4b97      	ldr	r3, [pc, #604]	; (8005a9c <_dtoa_r+0x2ec>)
 8005840:	e022      	b.n	8005888 <_dtoa_r+0xd8>
 8005842:	4b97      	ldr	r3, [pc, #604]	; (8005aa0 <_dtoa_r+0x2f0>)
 8005844:	9308      	str	r3, [sp, #32]
 8005846:	3308      	adds	r3, #8
 8005848:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	9808      	ldr	r0, [sp, #32]
 800584e:	b019      	add	sp, #100	; 0x64
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <_dtoa_r+0x2ec>)
 8005856:	9308      	str	r3, [sp, #32]
 8005858:	3303      	adds	r3, #3
 800585a:	e7f5      	b.n	8005848 <_dtoa_r+0x98>
 800585c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005860:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	2300      	movs	r3, #0
 800586c:	f7fb f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8005870:	4680      	mov	r8, r0
 8005872:	b158      	cbz	r0, 800588c <_dtoa_r+0xdc>
 8005874:	2301      	movs	r3, #1
 8005876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8559 	beq.w	8006334 <_dtoa_r+0xb84>
 8005882:	4888      	ldr	r0, [pc, #544]	; (8005aa4 <_dtoa_r+0x2f4>)
 8005884:	6018      	str	r0, [r3, #0]
 8005886:	1e43      	subs	r3, r0, #1
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	e7df      	b.n	800584c <_dtoa_r+0x9c>
 800588c:	ab16      	add	r3, sp, #88	; 0x58
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	ab17      	add	r3, sp, #92	; 0x5c
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4628      	mov	r0, r5
 8005896:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800589a:	f001 fcf3 	bl	8007284 <__d2b>
 800589e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058a2:	4682      	mov	sl, r0
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d07e      	beq.n	80059a6 <_dtoa_r+0x1f6>
 80058a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80058ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80058be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <_dtoa_r+0x2f8>)
 80058c6:	f7fa fc4f 	bl	8000168 <__aeabi_dsub>
 80058ca:	a36b      	add	r3, pc, #428	; (adr r3, 8005a78 <_dtoa_r+0x2c8>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	a36a      	add	r3, pc, #424	; (adr r3, 8005a80 <_dtoa_r+0x2d0>)
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f7fa fc47 	bl	800016c <__adddf3>
 80058de:	4606      	mov	r6, r0
 80058e0:	4620      	mov	r0, r4
 80058e2:	460f      	mov	r7, r1
 80058e4:	f7fa fd8e 	bl	8000404 <__aeabi_i2d>
 80058e8:	a367      	add	r3, pc, #412	; (adr r3, 8005a88 <_dtoa_r+0x2d8>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fdf3 	bl	80004d8 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4630      	mov	r0, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	f7fa fc37 	bl	800016c <__adddf3>
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	f7fb f899 	bl	8000a38 <__aeabi_d2iz>
 8005906:	2200      	movs	r2, #0
 8005908:	4681      	mov	r9, r0
 800590a:	2300      	movs	r3, #0
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f7fb f854 	bl	80009bc <__aeabi_dcmplt>
 8005914:	b148      	cbz	r0, 800592a <_dtoa_r+0x17a>
 8005916:	4648      	mov	r0, r9
 8005918:	f7fa fd74 	bl	8000404 <__aeabi_i2d>
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	f7fb f842 	bl	80009a8 <__aeabi_dcmpeq>
 8005924:	b908      	cbnz	r0, 800592a <_dtoa_r+0x17a>
 8005926:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800592a:	f1b9 0f16 	cmp.w	r9, #22
 800592e:	d857      	bhi.n	80059e0 <_dtoa_r+0x230>
 8005930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005934:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <_dtoa_r+0x2fc>)
 8005936:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fb f83d 	bl	80009bc <__aeabi_dcmplt>
 8005942:	2800      	cmp	r0, #0
 8005944:	d04e      	beq.n	80059e4 <_dtoa_r+0x234>
 8005946:	2300      	movs	r3, #0
 8005948:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800594c:	930f      	str	r3, [sp, #60]	; 0x3c
 800594e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005950:	1b1c      	subs	r4, r3, r4
 8005952:	1e63      	subs	r3, r4, #1
 8005954:	9309      	str	r3, [sp, #36]	; 0x24
 8005956:	bf49      	itett	mi
 8005958:	f1c4 0301 	rsbmi	r3, r4, #1
 800595c:	2300      	movpl	r3, #0
 800595e:	9306      	strmi	r3, [sp, #24]
 8005960:	2300      	movmi	r3, #0
 8005962:	bf54      	ite	pl
 8005964:	9306      	strpl	r3, [sp, #24]
 8005966:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	db3c      	blt.n	80059e8 <_dtoa_r+0x238>
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005974:	444b      	add	r3, r9
 8005976:	9309      	str	r3, [sp, #36]	; 0x24
 8005978:	2300      	movs	r3, #0
 800597a:	930a      	str	r3, [sp, #40]	; 0x28
 800597c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800597e:	2b09      	cmp	r3, #9
 8005980:	d86c      	bhi.n	8005a5c <_dtoa_r+0x2ac>
 8005982:	2b05      	cmp	r3, #5
 8005984:	bfc4      	itt	gt
 8005986:	3b04      	subgt	r3, #4
 8005988:	9322      	strgt	r3, [sp, #136]	; 0x88
 800598a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800598c:	bfc8      	it	gt
 800598e:	2400      	movgt	r4, #0
 8005990:	f1a3 0302 	sub.w	r3, r3, #2
 8005994:	bfd8      	it	le
 8005996:	2401      	movle	r4, #1
 8005998:	2b03      	cmp	r3, #3
 800599a:	f200 808b 	bhi.w	8005ab4 <_dtoa_r+0x304>
 800599e:	e8df f003 	tbb	[pc, r3]
 80059a2:	4f2d      	.short	0x4f2d
 80059a4:	5b4d      	.short	0x5b4d
 80059a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059aa:	441c      	add	r4, r3
 80059ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	bfc3      	ittte	gt
 80059b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80059bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80059c0:	f1c3 0320 	rsble	r3, r3, #32
 80059c4:	bfc6      	itte	gt
 80059c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059ca:	4318      	orrgt	r0, r3
 80059cc:	fa06 f003 	lslle.w	r0, r6, r3
 80059d0:	f7fa fd08 	bl	80003e4 <__aeabi_ui2d>
 80059d4:	2301      	movs	r3, #1
 80059d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80059da:	3c01      	subs	r4, #1
 80059dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80059de:	e770      	b.n	80058c2 <_dtoa_r+0x112>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e7b3      	b.n	800594c <_dtoa_r+0x19c>
 80059e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80059e6:	e7b2      	b.n	800594e <_dtoa_r+0x19e>
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	eba3 0309 	sub.w	r3, r3, r9
 80059ee:	9306      	str	r3, [sp, #24]
 80059f0:	f1c9 0300 	rsb	r3, r9, #0
 80059f4:	930a      	str	r3, [sp, #40]	; 0x28
 80059f6:	2300      	movs	r3, #0
 80059f8:	930e      	str	r3, [sp, #56]	; 0x38
 80059fa:	e7bf      	b.n	800597c <_dtoa_r+0x1cc>
 80059fc:	2300      	movs	r3, #0
 80059fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dc59      	bgt.n	8005aba <_dtoa_r+0x30a>
 8005a06:	f04f 0b01 	mov.w	fp, #1
 8005a0a:	465b      	mov	r3, fp
 8005a0c:	f8cd b008 	str.w	fp, [sp, #8]
 8005a10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005a14:	2200      	movs	r2, #0
 8005a16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a18:	6042      	str	r2, [r0, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	f102 0614 	add.w	r6, r2, #20
 8005a20:	429e      	cmp	r6, r3
 8005a22:	6841      	ldr	r1, [r0, #4]
 8005a24:	d94f      	bls.n	8005ac6 <_dtoa_r+0x316>
 8005a26:	4628      	mov	r0, r5
 8005a28:	f001 f842 	bl	8006ab0 <_Balloc>
 8005a2c:	9008      	str	r0, [sp, #32]
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d14d      	bne.n	8005ace <_dtoa_r+0x31e>
 8005a32:	4602      	mov	r2, r0
 8005a34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <_dtoa_r+0x300>)
 8005a3a:	e6cd      	b.n	80057d8 <_dtoa_r+0x28>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e7de      	b.n	80059fe <_dtoa_r+0x24e>
 8005a40:	2300      	movs	r3, #0
 8005a42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a46:	eb09 0b03 	add.w	fp, r9, r3
 8005a4a:	f10b 0301 	add.w	r3, fp, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	9302      	str	r3, [sp, #8]
 8005a52:	bfb8      	it	lt
 8005a54:	2301      	movlt	r3, #1
 8005a56:	e7dd      	b.n	8005a14 <_dtoa_r+0x264>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7f2      	b.n	8005a42 <_dtoa_r+0x292>
 8005a5c:	2401      	movs	r4, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a62:	9322      	str	r3, [sp, #136]	; 0x88
 8005a64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2312      	movs	r3, #18
 8005a6c:	f8cd b008 	str.w	fp, [sp, #8]
 8005a70:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a72:	e7cf      	b.n	8005a14 <_dtoa_r+0x264>
 8005a74:	f3af 8000 	nop.w
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	080096c6 	.word	0x080096c6
 8005a94:	080096dd 	.word	0x080096dd
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	080096c2 	.word	0x080096c2
 8005aa0:	080096b9 	.word	0x080096b9
 8005aa4:	08009539 	.word	0x08009539
 8005aa8:	3ff80000 	.word	0x3ff80000
 8005aac:	08009858 	.word	0x08009858
 8005ab0:	0800973c 	.word	0x0800973c
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab8:	e7d4      	b.n	8005a64 <_dtoa_r+0x2b4>
 8005aba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005abe:	465b      	mov	r3, fp
 8005ac0:	f8cd b008 	str.w	fp, [sp, #8]
 8005ac4:	e7a6      	b.n	8005a14 <_dtoa_r+0x264>
 8005ac6:	3101      	adds	r1, #1
 8005ac8:	6041      	str	r1, [r0, #4]
 8005aca:	0052      	lsls	r2, r2, #1
 8005acc:	e7a6      	b.n	8005a1c <_dtoa_r+0x26c>
 8005ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad0:	9a08      	ldr	r2, [sp, #32]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	9b02      	ldr	r3, [sp, #8]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	f200 80a8 	bhi.w	8005c2c <_dtoa_r+0x47c>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	f000 80a5 	beq.w	8005c2c <_dtoa_r+0x47c>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	dd34      	ble.n	8005b52 <_dtoa_r+0x3a2>
 8005ae8:	4a9a      	ldr	r2, [pc, #616]	; (8005d54 <_dtoa_r+0x5a4>)
 8005aea:	f009 030f 	and.w	r3, r9, #15
 8005aee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005af2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005afa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005afe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005b02:	d016      	beq.n	8005b32 <_dtoa_r+0x382>
 8005b04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b08:	4b93      	ldr	r3, [pc, #588]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b0a:	2703      	movs	r7, #3
 8005b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b10:	f7fa fe0c 	bl	800072c <__aeabi_ddiv>
 8005b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b18:	f004 040f 	and.w	r4, r4, #15
 8005b1c:	4e8e      	ldr	r6, [pc, #568]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b1e:	b954      	cbnz	r4, 8005b36 <_dtoa_r+0x386>
 8005b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b28:	f7fa fe00 	bl	800072c <__aeabi_ddiv>
 8005b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b30:	e029      	b.n	8005b86 <_dtoa_r+0x3d6>
 8005b32:	2702      	movs	r7, #2
 8005b34:	e7f2      	b.n	8005b1c <_dtoa_r+0x36c>
 8005b36:	07e1      	lsls	r1, r4, #31
 8005b38:	d508      	bpl.n	8005b4c <_dtoa_r+0x39c>
 8005b3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b42:	f7fa fcc9 	bl	80004d8 <__aeabi_dmul>
 8005b46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b4a:	3701      	adds	r7, #1
 8005b4c:	1064      	asrs	r4, r4, #1
 8005b4e:	3608      	adds	r6, #8
 8005b50:	e7e5      	b.n	8005b1e <_dtoa_r+0x36e>
 8005b52:	f000 80a5 	beq.w	8005ca0 <_dtoa_r+0x4f0>
 8005b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b5a:	f1c9 0400 	rsb	r4, r9, #0
 8005b5e:	4b7d      	ldr	r3, [pc, #500]	; (8005d54 <_dtoa_r+0x5a4>)
 8005b60:	f004 020f 	and.w	r2, r4, #15
 8005b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fcb4 	bl	80004d8 <__aeabi_dmul>
 8005b70:	2702      	movs	r7, #2
 8005b72:	2300      	movs	r3, #0
 8005b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b78:	4e77      	ldr	r6, [pc, #476]	; (8005d58 <_dtoa_r+0x5a8>)
 8005b7a:	1124      	asrs	r4, r4, #4
 8005b7c:	2c00      	cmp	r4, #0
 8005b7e:	f040 8084 	bne.w	8005c8a <_dtoa_r+0x4da>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1d2      	bne.n	8005b2c <_dtoa_r+0x37c>
 8005b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 808b 	beq.w	8005ca4 <_dtoa_r+0x4f4>
 8005b8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4b6f      	ldr	r3, [pc, #444]	; (8005d5c <_dtoa_r+0x5ac>)
 8005b9e:	f7fa ff0d 	bl	80009bc <__aeabi_dcmplt>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d07e      	beq.n	8005ca4 <_dtoa_r+0x4f4>
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d07b      	beq.n	8005ca4 <_dtoa_r+0x4f4>
 8005bac:	f1bb 0f00 	cmp.w	fp, #0
 8005bb0:	dd38      	ble.n	8005c24 <_dtoa_r+0x474>
 8005bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4b69      	ldr	r3, [pc, #420]	; (8005d60 <_dtoa_r+0x5b0>)
 8005bba:	f7fa fc8d 	bl	80004d8 <__aeabi_dmul>
 8005bbe:	465c      	mov	r4, fp
 8005bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bc4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8005bc8:	3701      	adds	r7, #1
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f7fa fc1a 	bl	8000404 <__aeabi_i2d>
 8005bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd4:	f7fa fc80 	bl	80004d8 <__aeabi_dmul>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <_dtoa_r+0x5b4>)
 8005bdc:	f7fa fac6 	bl	800016c <__adddf3>
 8005be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005be4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005be8:	9611      	str	r6, [sp, #68]	; 0x44
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	d15d      	bne.n	8005caa <_dtoa_r+0x4fa>
 8005bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4b5c      	ldr	r3, [pc, #368]	; (8005d68 <_dtoa_r+0x5b8>)
 8005bf6:	f7fa fab7 	bl	8000168 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c02:	4633      	mov	r3, r6
 8005c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c06:	f7fa fef7 	bl	80009f8 <__aeabi_dcmpgt>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f040 829e 	bne.w	800614c <_dtoa_r+0x99c>
 8005c10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c1a:	f7fa fecf 	bl	80009bc <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f040 8292 	bne.w	8006148 <_dtoa_r+0x998>
 8005c24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f2c0 8153 	blt.w	8005eda <_dtoa_r+0x72a>
 8005c34:	f1b9 0f0e 	cmp.w	r9, #14
 8005c38:	f300 814f 	bgt.w	8005eda <_dtoa_r+0x72a>
 8005c3c:	4b45      	ldr	r3, [pc, #276]	; (8005d54 <_dtoa_r+0x5a4>)
 8005c3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f280 80db 	bge.w	8005e08 <_dtoa_r+0x658>
 8005c52:	9b02      	ldr	r3, [sp, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f300 80d7 	bgt.w	8005e08 <_dtoa_r+0x658>
 8005c5a:	f040 8274 	bne.w	8006146 <_dtoa_r+0x996>
 8005c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c62:	2200      	movs	r2, #0
 8005c64:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <_dtoa_r+0x5b8>)
 8005c66:	f7fa fc37 	bl	80004d8 <__aeabi_dmul>
 8005c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6e:	f7fa feb9 	bl	80009e4 <__aeabi_dcmpge>
 8005c72:	9c02      	ldr	r4, [sp, #8]
 8005c74:	4626      	mov	r6, r4
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f040 824a 	bne.w	8006110 <_dtoa_r+0x960>
 8005c7c:	2331      	movs	r3, #49	; 0x31
 8005c7e:	9f08      	ldr	r7, [sp, #32]
 8005c80:	f109 0901 	add.w	r9, r9, #1
 8005c84:	f807 3b01 	strb.w	r3, [r7], #1
 8005c88:	e246      	b.n	8006118 <_dtoa_r+0x968>
 8005c8a:	07e2      	lsls	r2, r4, #31
 8005c8c:	d505      	bpl.n	8005c9a <_dtoa_r+0x4ea>
 8005c8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c92:	f7fa fc21 	bl	80004d8 <__aeabi_dmul>
 8005c96:	2301      	movs	r3, #1
 8005c98:	3701      	adds	r7, #1
 8005c9a:	1064      	asrs	r4, r4, #1
 8005c9c:	3608      	adds	r6, #8
 8005c9e:	e76d      	b.n	8005b7c <_dtoa_r+0x3cc>
 8005ca0:	2702      	movs	r7, #2
 8005ca2:	e770      	b.n	8005b86 <_dtoa_r+0x3d6>
 8005ca4:	46c8      	mov	r8, r9
 8005ca6:	9c02      	ldr	r4, [sp, #8]
 8005ca8:	e78f      	b.n	8005bca <_dtoa_r+0x41a>
 8005caa:	9908      	ldr	r1, [sp, #32]
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <_dtoa_r+0x5a4>)
 8005cae:	4421      	add	r1, r4
 8005cb0:	9112      	str	r1, [sp, #72]	; 0x48
 8005cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d055      	beq.n	8005d70 <_dtoa_r+0x5c0>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4929      	ldr	r1, [pc, #164]	; (8005d6c <_dtoa_r+0x5bc>)
 8005cc8:	f7fa fd30 	bl	800072c <__aeabi_ddiv>
 8005ccc:	463b      	mov	r3, r7
 8005cce:	4632      	mov	r2, r6
 8005cd0:	f7fa fa4a 	bl	8000168 <__aeabi_dsub>
 8005cd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cd8:	9f08      	ldr	r7, [sp, #32]
 8005cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cde:	f7fa feab 	bl	8000a38 <__aeabi_d2iz>
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	f7fa fb8e 	bl	8000404 <__aeabi_i2d>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf0:	f7fa fa3a 	bl	8000168 <__aeabi_dsub>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	3430      	adds	r4, #48	; 0x30
 8005cfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d02:	f807 4b01 	strb.w	r4, [r7], #1
 8005d06:	f7fa fe59 	bl	80009bc <__aeabi_dcmplt>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d174      	bne.n	8005df8 <_dtoa_r+0x648>
 8005d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d12:	2000      	movs	r0, #0
 8005d14:	4911      	ldr	r1, [pc, #68]	; (8005d5c <_dtoa_r+0x5ac>)
 8005d16:	f7fa fa27 	bl	8000168 <__aeabi_dsub>
 8005d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d1e:	f7fa fe4d 	bl	80009bc <__aeabi_dcmplt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f040 80b6 	bne.w	8005e94 <_dtoa_r+0x6e4>
 8005d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2a:	429f      	cmp	r7, r3
 8005d2c:	f43f af7a 	beq.w	8005c24 <_dtoa_r+0x474>
 8005d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <_dtoa_r+0x5b0>)
 8005d38:	f7fa fbce 	bl	80004d8 <__aeabi_dmul>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <_dtoa_r+0x5b0>)
 8005d48:	f7fa fbc6 	bl	80004d8 <__aeabi_dmul>
 8005d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d50:	e7c3      	b.n	8005cda <_dtoa_r+0x52a>
 8005d52:	bf00      	nop
 8005d54:	08009858 	.word	0x08009858
 8005d58:	08009830 	.word	0x08009830
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	40240000 	.word	0x40240000
 8005d64:	401c0000 	.word	0x401c0000
 8005d68:	40140000 	.word	0x40140000
 8005d6c:	3fe00000 	.word	0x3fe00000
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fbb0 	bl	80004d8 <__aeabi_dmul>
 8005d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d7e:	9c08      	ldr	r4, [sp, #32]
 8005d80:	9314      	str	r3, [sp, #80]	; 0x50
 8005d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d86:	f7fa fe57 	bl	8000a38 <__aeabi_d2iz>
 8005d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8005d8c:	f7fa fb3a 	bl	8000404 <__aeabi_i2d>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d98:	f7fa f9e6 	bl	8000168 <__aeabi_dsub>
 8005d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d9e:	4606      	mov	r6, r0
 8005da0:	3330      	adds	r3, #48	; 0x30
 8005da2:	f804 3b01 	strb.w	r3, [r4], #1
 8005da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da8:	460f      	mov	r7, r1
 8005daa:	429c      	cmp	r4, r3
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	d124      	bne.n	8005dfc <_dtoa_r+0x64c>
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005db6:	4bb3      	ldr	r3, [pc, #716]	; (8006084 <_dtoa_r+0x8d4>)
 8005db8:	f7fa f9d8 	bl	800016c <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d162      	bne.n	8005e92 <_dtoa_r+0x6e2>
 8005dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	49ac      	ldr	r1, [pc, #688]	; (8006084 <_dtoa_r+0x8d4>)
 8005dd4:	f7fa f9c8 	bl	8000168 <__aeabi_dsub>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4630      	mov	r0, r6
 8005dde:	4639      	mov	r1, r7
 8005de0:	f7fa fdec 	bl	80009bc <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f af1d 	beq.w	8005c24 <_dtoa_r+0x474>
 8005dea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005dec:	1e7b      	subs	r3, r7, #1
 8005dee:	9314      	str	r3, [sp, #80]	; 0x50
 8005df0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005df4:	2b30      	cmp	r3, #48	; 0x30
 8005df6:	d0f8      	beq.n	8005dea <_dtoa_r+0x63a>
 8005df8:	46c1      	mov	r9, r8
 8005dfa:	e03a      	b.n	8005e72 <_dtoa_r+0x6c2>
 8005dfc:	4ba2      	ldr	r3, [pc, #648]	; (8006088 <_dtoa_r+0x8d8>)
 8005dfe:	f7fa fb6b 	bl	80004d8 <__aeabi_dmul>
 8005e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e06:	e7bc      	b.n	8005d82 <_dtoa_r+0x5d2>
 8005e08:	9f08      	ldr	r7, [sp, #32]
 8005e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e12:	f7fa fc8b 	bl	800072c <__aeabi_ddiv>
 8005e16:	f7fa fe0f 	bl	8000a38 <__aeabi_d2iz>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	f7fa faf2 	bl	8000404 <__aeabi_i2d>
 8005e20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e24:	f7fa fb58 	bl	80004d8 <__aeabi_dmul>
 8005e28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4602      	mov	r2, r0
 8005e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e34:	f7fa f998 	bl	8000168 <__aeabi_dsub>
 8005e38:	f807 6b01 	strb.w	r6, [r7], #1
 8005e3c:	9e08      	ldr	r6, [sp, #32]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	1bbe      	subs	r6, r7, r6
 8005e42:	42b3      	cmp	r3, r6
 8005e44:	d13a      	bne.n	8005ebc <_dtoa_r+0x70c>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	f7fa f98f 	bl	800016c <__adddf3>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e5a:	f7fa fdcd 	bl	80009f8 <__aeabi_dcmpgt>
 8005e5e:	bb58      	cbnz	r0, 8005eb8 <_dtoa_r+0x708>
 8005e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	f7fa fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8005e6c:	b108      	cbz	r0, 8005e72 <_dtoa_r+0x6c2>
 8005e6e:	07e1      	lsls	r1, r4, #31
 8005e70:	d422      	bmi.n	8005eb8 <_dtoa_r+0x708>
 8005e72:	4628      	mov	r0, r5
 8005e74:	4651      	mov	r1, sl
 8005e76:	f000 fe5b 	bl	8006b30 <_Bfree>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	703b      	strb	r3, [r7, #0]
 8005e7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e80:	f109 0001 	add.w	r0, r9, #1
 8005e84:	6018      	str	r0, [r3, #0]
 8005e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f43f acdf 	beq.w	800584c <_dtoa_r+0x9c>
 8005e8e:	601f      	str	r7, [r3, #0]
 8005e90:	e4dc      	b.n	800584c <_dtoa_r+0x9c>
 8005e92:	4627      	mov	r7, r4
 8005e94:	463b      	mov	r3, r7
 8005e96:	461f      	mov	r7, r3
 8005e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e9c:	2a39      	cmp	r2, #57	; 0x39
 8005e9e:	d107      	bne.n	8005eb0 <_dtoa_r+0x700>
 8005ea0:	9a08      	ldr	r2, [sp, #32]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d1f7      	bne.n	8005e96 <_dtoa_r+0x6e6>
 8005ea6:	2230      	movs	r2, #48	; 0x30
 8005ea8:	9908      	ldr	r1, [sp, #32]
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	700a      	strb	r2, [r1, #0]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e79f      	b.n	8005df8 <_dtoa_r+0x648>
 8005eb8:	46c8      	mov	r8, r9
 8005eba:	e7eb      	b.n	8005e94 <_dtoa_r+0x6e4>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4b72      	ldr	r3, [pc, #456]	; (8006088 <_dtoa_r+0x8d8>)
 8005ec0:	f7fa fb0a 	bl	80004d8 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f7fa fd6a 	bl	80009a8 <__aeabi_dcmpeq>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d098      	beq.n	8005e0a <_dtoa_r+0x65a>
 8005ed8:	e7cb      	b.n	8005e72 <_dtoa_r+0x6c2>
 8005eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005edc:	2a00      	cmp	r2, #0
 8005ede:	f000 80cd 	beq.w	800607c <_dtoa_r+0x8cc>
 8005ee2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ee4:	2a01      	cmp	r2, #1
 8005ee6:	f300 80af 	bgt.w	8006048 <_dtoa_r+0x898>
 8005eea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	f000 80a7 	beq.w	8006040 <_dtoa_r+0x890>
 8005ef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ef8:	9f06      	ldr	r7, [sp, #24]
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	2101      	movs	r1, #1
 8005efe:	441a      	add	r2, r3
 8005f00:	9206      	str	r2, [sp, #24]
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	4628      	mov	r0, r5
 8005f06:	441a      	add	r2, r3
 8005f08:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0a:	f000 ff15 	bl	8006d38 <__i2b>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	dd0c      	ble.n	8005f2e <_dtoa_r+0x77e>
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dd09      	ble.n	8005f2e <_dtoa_r+0x77e>
 8005f1a:	42bb      	cmp	r3, r7
 8005f1c:	bfa8      	it	ge
 8005f1e:	463b      	movge	r3, r7
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	1aff      	subs	r7, r7, r3
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	9206      	str	r2, [sp, #24]
 8005f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f30:	b1f3      	cbz	r3, 8005f70 <_dtoa_r+0x7c0>
 8005f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a9 	beq.w	800608c <_dtoa_r+0x8dc>
 8005f3a:	2c00      	cmp	r4, #0
 8005f3c:	dd10      	ble.n	8005f60 <_dtoa_r+0x7b0>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4622      	mov	r2, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 ffb2 	bl	8006eac <__pow5mult>
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 ff08 	bl	8006d64 <__multiply>
 8005f54:	4680      	mov	r8, r0
 8005f56:	4651      	mov	r1, sl
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fde9 	bl	8006b30 <_Bfree>
 8005f5e:	46c2      	mov	sl, r8
 8005f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f62:	1b1a      	subs	r2, r3, r4
 8005f64:	d004      	beq.n	8005f70 <_dtoa_r+0x7c0>
 8005f66:	4651      	mov	r1, sl
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 ff9f 	bl	8006eac <__pow5mult>
 8005f6e:	4682      	mov	sl, r0
 8005f70:	2101      	movs	r1, #1
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fee0 	bl	8006d38 <__i2b>
 8005f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f340 8087 	ble.w	8006090 <_dtoa_r+0x8e0>
 8005f82:	461a      	mov	r2, r3
 8005f84:	4601      	mov	r1, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 ff90 	bl	8006eac <__pow5mult>
 8005f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f8e:	4604      	mov	r4, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f340 8080 	ble.w	8006096 <_dtoa_r+0x8e6>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fa0:	6918      	ldr	r0, [r3, #16]
 8005fa2:	f000 fe7b 	bl	8006c9c <__hi0bits>
 8005fa6:	f1c0 0020 	rsb	r0, r0, #32
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	4418      	add	r0, r3
 8005fae:	f010 001f 	ands.w	r0, r0, #31
 8005fb2:	f000 8092 	beq.w	80060da <_dtoa_r+0x92a>
 8005fb6:	f1c0 0320 	rsb	r3, r0, #32
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	f340 808a 	ble.w	80060d4 <_dtoa_r+0x924>
 8005fc0:	f1c0 001c 	rsb	r0, r0, #28
 8005fc4:	9b06      	ldr	r3, [sp, #24]
 8005fc6:	4407      	add	r7, r0
 8005fc8:	4403      	add	r3, r0
 8005fca:	9306      	str	r3, [sp, #24]
 8005fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fce:	4403      	add	r3, r0
 8005fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd2:	9b06      	ldr	r3, [sp, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dd05      	ble.n	8005fe4 <_dtoa_r+0x834>
 8005fd8:	4651      	mov	r1, sl
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 ffbf 	bl	8006f60 <__lshift>
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd05      	ble.n	8005ff6 <_dtoa_r+0x846>
 8005fea:	4621      	mov	r1, r4
 8005fec:	461a      	mov	r2, r3
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 ffb6 	bl	8006f60 <__lshift>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d070      	beq.n	80060de <_dtoa_r+0x92e>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4650      	mov	r0, sl
 8006000:	f001 f81a 	bl	8007038 <__mcmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	da6a      	bge.n	80060de <_dtoa_r+0x92e>
 8006008:	2300      	movs	r3, #0
 800600a:	4651      	mov	r1, sl
 800600c:	220a      	movs	r2, #10
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fdb0 	bl	8006b74 <__multadd>
 8006014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006016:	4682      	mov	sl, r0
 8006018:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8193 	beq.w	8006348 <_dtoa_r+0xb98>
 8006022:	4631      	mov	r1, r6
 8006024:	2300      	movs	r3, #0
 8006026:	220a      	movs	r2, #10
 8006028:	4628      	mov	r0, r5
 800602a:	f000 fda3 	bl	8006b74 <__multadd>
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	4606      	mov	r6, r0
 8006034:	f300 8093 	bgt.w	800615e <_dtoa_r+0x9ae>
 8006038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603a:	2b02      	cmp	r3, #2
 800603c:	dc57      	bgt.n	80060ee <_dtoa_r+0x93e>
 800603e:	e08e      	b.n	800615e <_dtoa_r+0x9ae>
 8006040:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006042:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006046:	e756      	b.n	8005ef6 <_dtoa_r+0x746>
 8006048:	9b02      	ldr	r3, [sp, #8]
 800604a:	1e5c      	subs	r4, r3, #1
 800604c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604e:	42a3      	cmp	r3, r4
 8006050:	bfb7      	itett	lt
 8006052:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006054:	1b1c      	subge	r4, r3, r4
 8006056:	1ae2      	sublt	r2, r4, r3
 8006058:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800605a:	bfbe      	ittt	lt
 800605c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800605e:	189b      	addlt	r3, r3, r2
 8006060:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	bfb8      	it	lt
 8006066:	2400      	movlt	r4, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfbb      	ittet	lt
 800606c:	9b06      	ldrlt	r3, [sp, #24]
 800606e:	9a02      	ldrlt	r2, [sp, #8]
 8006070:	9f06      	ldrge	r7, [sp, #24]
 8006072:	1a9f      	sublt	r7, r3, r2
 8006074:	bfac      	ite	ge
 8006076:	9b02      	ldrge	r3, [sp, #8]
 8006078:	2300      	movlt	r3, #0
 800607a:	e73e      	b.n	8005efa <_dtoa_r+0x74a>
 800607c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800607e:	9f06      	ldr	r7, [sp, #24]
 8006080:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006082:	e745      	b.n	8005f10 <_dtoa_r+0x760>
 8006084:	3fe00000 	.word	0x3fe00000
 8006088:	40240000 	.word	0x40240000
 800608c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800608e:	e76a      	b.n	8005f66 <_dtoa_r+0x7b6>
 8006090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006092:	2b01      	cmp	r3, #1
 8006094:	dc19      	bgt.n	80060ca <_dtoa_r+0x91a>
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	b9bb      	cbnz	r3, 80060ca <_dtoa_r+0x91a>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a0:	b99b      	cbnz	r3, 80060ca <_dtoa_r+0x91a>
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	0d1b      	lsrs	r3, r3, #20
 80060aa:	051b      	lsls	r3, r3, #20
 80060ac:	b183      	cbz	r3, 80060d0 <_dtoa_r+0x920>
 80060ae:	f04f 0801 	mov.w	r8, #1
 80060b2:	9b06      	ldr	r3, [sp, #24]
 80060b4:	3301      	adds	r3, #1
 80060b6:	9306      	str	r3, [sp, #24]
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	3301      	adds	r3, #1
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
 80060be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f47f af6a 	bne.w	8005f9a <_dtoa_r+0x7ea>
 80060c6:	2001      	movs	r0, #1
 80060c8:	e76f      	b.n	8005faa <_dtoa_r+0x7fa>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	e7f6      	b.n	80060be <_dtoa_r+0x90e>
 80060d0:	4698      	mov	r8, r3
 80060d2:	e7f4      	b.n	80060be <_dtoa_r+0x90e>
 80060d4:	f43f af7d 	beq.w	8005fd2 <_dtoa_r+0x822>
 80060d8:	4618      	mov	r0, r3
 80060da:	301c      	adds	r0, #28
 80060dc:	e772      	b.n	8005fc4 <_dtoa_r+0x814>
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc36      	bgt.n	8006152 <_dtoa_r+0x9a2>
 80060e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	dd33      	ble.n	8006152 <_dtoa_r+0x9a2>
 80060ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060ee:	f1bb 0f00 	cmp.w	fp, #0
 80060f2:	d10d      	bne.n	8006110 <_dtoa_r+0x960>
 80060f4:	4621      	mov	r1, r4
 80060f6:	465b      	mov	r3, fp
 80060f8:	2205      	movs	r2, #5
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 fd3a 	bl	8006b74 <__multadd>
 8006100:	4601      	mov	r1, r0
 8006102:	4604      	mov	r4, r0
 8006104:	4650      	mov	r0, sl
 8006106:	f000 ff97 	bl	8007038 <__mcmp>
 800610a:	2800      	cmp	r0, #0
 800610c:	f73f adb6 	bgt.w	8005c7c <_dtoa_r+0x4cc>
 8006110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006112:	9f08      	ldr	r7, [sp, #32]
 8006114:	ea6f 0903 	mvn.w	r9, r3
 8006118:	f04f 0800 	mov.w	r8, #0
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fd06 	bl	8006b30 <_Bfree>
 8006124:	2e00      	cmp	r6, #0
 8006126:	f43f aea4 	beq.w	8005e72 <_dtoa_r+0x6c2>
 800612a:	f1b8 0f00 	cmp.w	r8, #0
 800612e:	d005      	beq.n	800613c <_dtoa_r+0x98c>
 8006130:	45b0      	cmp	r8, r6
 8006132:	d003      	beq.n	800613c <_dtoa_r+0x98c>
 8006134:	4641      	mov	r1, r8
 8006136:	4628      	mov	r0, r5
 8006138:	f000 fcfa 	bl	8006b30 <_Bfree>
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fcf6 	bl	8006b30 <_Bfree>
 8006144:	e695      	b.n	8005e72 <_dtoa_r+0x6c2>
 8006146:	2400      	movs	r4, #0
 8006148:	4626      	mov	r6, r4
 800614a:	e7e1      	b.n	8006110 <_dtoa_r+0x960>
 800614c:	46c1      	mov	r9, r8
 800614e:	4626      	mov	r6, r4
 8006150:	e594      	b.n	8005c7c <_dtoa_r+0x4cc>
 8006152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006154:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80fc 	beq.w	8006356 <_dtoa_r+0xba6>
 800615e:	2f00      	cmp	r7, #0
 8006160:	dd05      	ble.n	800616e <_dtoa_r+0x9be>
 8006162:	4631      	mov	r1, r6
 8006164:	463a      	mov	r2, r7
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fefa 	bl	8006f60 <__lshift>
 800616c:	4606      	mov	r6, r0
 800616e:	f1b8 0f00 	cmp.w	r8, #0
 8006172:	d05c      	beq.n	800622e <_dtoa_r+0xa7e>
 8006174:	4628      	mov	r0, r5
 8006176:	6871      	ldr	r1, [r6, #4]
 8006178:	f000 fc9a 	bl	8006ab0 <_Balloc>
 800617c:	4607      	mov	r7, r0
 800617e:	b928      	cbnz	r0, 800618c <_dtoa_r+0x9dc>
 8006180:	4602      	mov	r2, r0
 8006182:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006186:	4b7e      	ldr	r3, [pc, #504]	; (8006380 <_dtoa_r+0xbd0>)
 8006188:	f7ff bb26 	b.w	80057d8 <_dtoa_r+0x28>
 800618c:	6932      	ldr	r2, [r6, #16]
 800618e:	f106 010c 	add.w	r1, r6, #12
 8006192:	3202      	adds	r2, #2
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	300c      	adds	r0, #12
 8006198:	f7fd fd2c 	bl	8003bf4 <memcpy>
 800619c:	2201      	movs	r2, #1
 800619e:	4639      	mov	r1, r7
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fedd 	bl	8006f60 <__lshift>
 80061a6:	46b0      	mov	r8, r6
 80061a8:	4606      	mov	r6, r0
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	3301      	adds	r3, #1
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	445b      	add	r3, fp
 80061b4:	930a      	str	r3, [sp, #40]	; 0x28
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	9b02      	ldr	r3, [sp, #8]
 80061c0:	4621      	mov	r1, r4
 80061c2:	4650      	mov	r0, sl
 80061c4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80061c8:	f7ff fa64 	bl	8005694 <quorem>
 80061cc:	4603      	mov	r3, r0
 80061ce:	4641      	mov	r1, r8
 80061d0:	3330      	adds	r3, #48	; 0x30
 80061d2:	9004      	str	r0, [sp, #16]
 80061d4:	4650      	mov	r0, sl
 80061d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d8:	f000 ff2e 	bl	8007038 <__mcmp>
 80061dc:	4632      	mov	r2, r6
 80061de:	9006      	str	r0, [sp, #24]
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 ff44 	bl	8007070 <__mdiff>
 80061e8:	68c2      	ldr	r2, [r0, #12]
 80061ea:	4607      	mov	r7, r0
 80061ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ee:	bb02      	cbnz	r2, 8006232 <_dtoa_r+0xa82>
 80061f0:	4601      	mov	r1, r0
 80061f2:	4650      	mov	r0, sl
 80061f4:	f000 ff20 	bl	8007038 <__mcmp>
 80061f8:	4602      	mov	r2, r0
 80061fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fc:	4639      	mov	r1, r7
 80061fe:	4628      	mov	r0, r5
 8006200:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006204:	f000 fc94 	bl	8006b30 <_Bfree>
 8006208:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800620a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800620c:	9f02      	ldr	r7, [sp, #8]
 800620e:	ea43 0102 	orr.w	r1, r3, r2
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006214:	430b      	orrs	r3, r1
 8006216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006218:	d10d      	bne.n	8006236 <_dtoa_r+0xa86>
 800621a:	2b39      	cmp	r3, #57	; 0x39
 800621c:	d027      	beq.n	800626e <_dtoa_r+0xabe>
 800621e:	9a06      	ldr	r2, [sp, #24]
 8006220:	2a00      	cmp	r2, #0
 8006222:	dd01      	ble.n	8006228 <_dtoa_r+0xa78>
 8006224:	9b04      	ldr	r3, [sp, #16]
 8006226:	3331      	adds	r3, #49	; 0x31
 8006228:	f88b 3000 	strb.w	r3, [fp]
 800622c:	e776      	b.n	800611c <_dtoa_r+0x96c>
 800622e:	4630      	mov	r0, r6
 8006230:	e7b9      	b.n	80061a6 <_dtoa_r+0x9f6>
 8006232:	2201      	movs	r2, #1
 8006234:	e7e2      	b.n	80061fc <_dtoa_r+0xa4c>
 8006236:	9906      	ldr	r1, [sp, #24]
 8006238:	2900      	cmp	r1, #0
 800623a:	db04      	blt.n	8006246 <_dtoa_r+0xa96>
 800623c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800623e:	4301      	orrs	r1, r0
 8006240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006242:	4301      	orrs	r1, r0
 8006244:	d120      	bne.n	8006288 <_dtoa_r+0xad8>
 8006246:	2a00      	cmp	r2, #0
 8006248:	ddee      	ble.n	8006228 <_dtoa_r+0xa78>
 800624a:	4651      	mov	r1, sl
 800624c:	2201      	movs	r2, #1
 800624e:	4628      	mov	r0, r5
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	f000 fe85 	bl	8006f60 <__lshift>
 8006256:	4621      	mov	r1, r4
 8006258:	4682      	mov	sl, r0
 800625a:	f000 feed 	bl	8007038 <__mcmp>
 800625e:	2800      	cmp	r0, #0
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	dc02      	bgt.n	800626a <_dtoa_r+0xaba>
 8006264:	d1e0      	bne.n	8006228 <_dtoa_r+0xa78>
 8006266:	07da      	lsls	r2, r3, #31
 8006268:	d5de      	bpl.n	8006228 <_dtoa_r+0xa78>
 800626a:	2b39      	cmp	r3, #57	; 0x39
 800626c:	d1da      	bne.n	8006224 <_dtoa_r+0xa74>
 800626e:	2339      	movs	r3, #57	; 0x39
 8006270:	f88b 3000 	strb.w	r3, [fp]
 8006274:	463b      	mov	r3, r7
 8006276:	461f      	mov	r7, r3
 8006278:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800627c:	3b01      	subs	r3, #1
 800627e:	2a39      	cmp	r2, #57	; 0x39
 8006280:	d050      	beq.n	8006324 <_dtoa_r+0xb74>
 8006282:	3201      	adds	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e749      	b.n	800611c <_dtoa_r+0x96c>
 8006288:	2a00      	cmp	r2, #0
 800628a:	dd03      	ble.n	8006294 <_dtoa_r+0xae4>
 800628c:	2b39      	cmp	r3, #57	; 0x39
 800628e:	d0ee      	beq.n	800626e <_dtoa_r+0xabe>
 8006290:	3301      	adds	r3, #1
 8006292:	e7c9      	b.n	8006228 <_dtoa_r+0xa78>
 8006294:	9a02      	ldr	r2, [sp, #8]
 8006296:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006298:	f802 3c01 	strb.w	r3, [r2, #-1]
 800629c:	428a      	cmp	r2, r1
 800629e:	d02a      	beq.n	80062f6 <_dtoa_r+0xb46>
 80062a0:	4651      	mov	r1, sl
 80062a2:	2300      	movs	r3, #0
 80062a4:	220a      	movs	r2, #10
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fc64 	bl	8006b74 <__multadd>
 80062ac:	45b0      	cmp	r8, r6
 80062ae:	4682      	mov	sl, r0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 020a 	mov.w	r2, #10
 80062b8:	4641      	mov	r1, r8
 80062ba:	4628      	mov	r0, r5
 80062bc:	d107      	bne.n	80062ce <_dtoa_r+0xb1e>
 80062be:	f000 fc59 	bl	8006b74 <__multadd>
 80062c2:	4680      	mov	r8, r0
 80062c4:	4606      	mov	r6, r0
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	3301      	adds	r3, #1
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	e777      	b.n	80061be <_dtoa_r+0xa0e>
 80062ce:	f000 fc51 	bl	8006b74 <__multadd>
 80062d2:	4631      	mov	r1, r6
 80062d4:	4680      	mov	r8, r0
 80062d6:	2300      	movs	r3, #0
 80062d8:	220a      	movs	r2, #10
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 fc4a 	bl	8006b74 <__multadd>
 80062e0:	4606      	mov	r6, r0
 80062e2:	e7f0      	b.n	80062c6 <_dtoa_r+0xb16>
 80062e4:	f1bb 0f00 	cmp.w	fp, #0
 80062e8:	bfcc      	ite	gt
 80062ea:	465f      	movgt	r7, fp
 80062ec:	2701      	movle	r7, #1
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	9a08      	ldr	r2, [sp, #32]
 80062f4:	4417      	add	r7, r2
 80062f6:	4651      	mov	r1, sl
 80062f8:	2201      	movs	r2, #1
 80062fa:	4628      	mov	r0, r5
 80062fc:	9302      	str	r3, [sp, #8]
 80062fe:	f000 fe2f 	bl	8006f60 <__lshift>
 8006302:	4621      	mov	r1, r4
 8006304:	4682      	mov	sl, r0
 8006306:	f000 fe97 	bl	8007038 <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	dcb2      	bgt.n	8006274 <_dtoa_r+0xac4>
 800630e:	d102      	bne.n	8006316 <_dtoa_r+0xb66>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d4ae      	bmi.n	8006274 <_dtoa_r+0xac4>
 8006316:	463b      	mov	r3, r7
 8006318:	461f      	mov	r7, r3
 800631a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631e:	2a30      	cmp	r2, #48	; 0x30
 8006320:	d0fa      	beq.n	8006318 <_dtoa_r+0xb68>
 8006322:	e6fb      	b.n	800611c <_dtoa_r+0x96c>
 8006324:	9a08      	ldr	r2, [sp, #32]
 8006326:	429a      	cmp	r2, r3
 8006328:	d1a5      	bne.n	8006276 <_dtoa_r+0xac6>
 800632a:	2331      	movs	r3, #49	; 0x31
 800632c:	f109 0901 	add.w	r9, r9, #1
 8006330:	7013      	strb	r3, [r2, #0]
 8006332:	e6f3      	b.n	800611c <_dtoa_r+0x96c>
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <_dtoa_r+0xbd4>)
 8006336:	f7ff baa7 	b.w	8005888 <_dtoa_r+0xd8>
 800633a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f aa80 	bne.w	8005842 <_dtoa_r+0x92>
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <_dtoa_r+0xbd8>)
 8006344:	f7ff baa0 	b.w	8005888 <_dtoa_r+0xd8>
 8006348:	f1bb 0f00 	cmp.w	fp, #0
 800634c:	dc03      	bgt.n	8006356 <_dtoa_r+0xba6>
 800634e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006350:	2b02      	cmp	r3, #2
 8006352:	f73f aecc 	bgt.w	80060ee <_dtoa_r+0x93e>
 8006356:	9f08      	ldr	r7, [sp, #32]
 8006358:	4621      	mov	r1, r4
 800635a:	4650      	mov	r0, sl
 800635c:	f7ff f99a 	bl	8005694 <quorem>
 8006360:	9a08      	ldr	r2, [sp, #32]
 8006362:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006366:	f807 3b01 	strb.w	r3, [r7], #1
 800636a:	1aba      	subs	r2, r7, r2
 800636c:	4593      	cmp	fp, r2
 800636e:	ddb9      	ble.n	80062e4 <_dtoa_r+0xb34>
 8006370:	4651      	mov	r1, sl
 8006372:	2300      	movs	r3, #0
 8006374:	220a      	movs	r2, #10
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fbfc 	bl	8006b74 <__multadd>
 800637c:	4682      	mov	sl, r0
 800637e:	e7eb      	b.n	8006358 <_dtoa_r+0xba8>
 8006380:	0800973c 	.word	0x0800973c
 8006384:	08009538 	.word	0x08009538
 8006388:	080096b9 	.word	0x080096b9

0800638c <rshift>:
 800638c:	6903      	ldr	r3, [r0, #16]
 800638e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006392:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006396:	f100 0414 	add.w	r4, r0, #20
 800639a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800639e:	dd46      	ble.n	800642e <rshift+0xa2>
 80063a0:	f011 011f 	ands.w	r1, r1, #31
 80063a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80063a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80063ac:	d10c      	bne.n	80063c8 <rshift+0x3c>
 80063ae:	4629      	mov	r1, r5
 80063b0:	f100 0710 	add.w	r7, r0, #16
 80063b4:	42b1      	cmp	r1, r6
 80063b6:	d335      	bcc.n	8006424 <rshift+0x98>
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	1eea      	subs	r2, r5, #3
 80063be:	4296      	cmp	r6, r2
 80063c0:	bf38      	it	cc
 80063c2:	2300      	movcc	r3, #0
 80063c4:	4423      	add	r3, r4
 80063c6:	e015      	b.n	80063f4 <rshift+0x68>
 80063c8:	46a1      	mov	r9, r4
 80063ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80063ce:	f1c1 0820 	rsb	r8, r1, #32
 80063d2:	40cf      	lsrs	r7, r1
 80063d4:	f105 0e04 	add.w	lr, r5, #4
 80063d8:	4576      	cmp	r6, lr
 80063da:	46f4      	mov	ip, lr
 80063dc:	d816      	bhi.n	800640c <rshift+0x80>
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	009a      	lsls	r2, r3, #2
 80063e2:	3a04      	subs	r2, #4
 80063e4:	3501      	adds	r5, #1
 80063e6:	42ae      	cmp	r6, r5
 80063e8:	bf38      	it	cc
 80063ea:	2200      	movcc	r2, #0
 80063ec:	18a3      	adds	r3, r4, r2
 80063ee:	50a7      	str	r7, [r4, r2]
 80063f0:	b107      	cbz	r7, 80063f4 <rshift+0x68>
 80063f2:	3304      	adds	r3, #4
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	eba3 0204 	sub.w	r2, r3, r4
 80063fa:	bf08      	it	eq
 80063fc:	2300      	moveq	r3, #0
 80063fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006402:	6102      	str	r2, [r0, #16]
 8006404:	bf08      	it	eq
 8006406:	6143      	streq	r3, [r0, #20]
 8006408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800640c:	f8dc c000 	ldr.w	ip, [ip]
 8006410:	fa0c fc08 	lsl.w	ip, ip, r8
 8006414:	ea4c 0707 	orr.w	r7, ip, r7
 8006418:	f849 7b04 	str.w	r7, [r9], #4
 800641c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006420:	40cf      	lsrs	r7, r1
 8006422:	e7d9      	b.n	80063d8 <rshift+0x4c>
 8006424:	f851 cb04 	ldr.w	ip, [r1], #4
 8006428:	f847 cf04 	str.w	ip, [r7, #4]!
 800642c:	e7c2      	b.n	80063b4 <rshift+0x28>
 800642e:	4623      	mov	r3, r4
 8006430:	e7e0      	b.n	80063f4 <rshift+0x68>

08006432 <__hexdig_fun>:
 8006432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006436:	2b09      	cmp	r3, #9
 8006438:	d802      	bhi.n	8006440 <__hexdig_fun+0xe>
 800643a:	3820      	subs	r0, #32
 800643c:	b2c0      	uxtb	r0, r0
 800643e:	4770      	bx	lr
 8006440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006444:	2b05      	cmp	r3, #5
 8006446:	d801      	bhi.n	800644c <__hexdig_fun+0x1a>
 8006448:	3847      	subs	r0, #71	; 0x47
 800644a:	e7f7      	b.n	800643c <__hexdig_fun+0xa>
 800644c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006450:	2b05      	cmp	r3, #5
 8006452:	d801      	bhi.n	8006458 <__hexdig_fun+0x26>
 8006454:	3827      	subs	r0, #39	; 0x27
 8006456:	e7f1      	b.n	800643c <__hexdig_fun+0xa>
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr

0800645c <__gethex>:
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	b08b      	sub	sp, #44	; 0x2c
 8006462:	9306      	str	r3, [sp, #24]
 8006464:	4bb9      	ldr	r3, [pc, #740]	; (800674c <__gethex+0x2f0>)
 8006466:	9002      	str	r0, [sp, #8]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	468b      	mov	fp, r1
 800646c:	4618      	mov	r0, r3
 800646e:	4690      	mov	r8, r2
 8006470:	9303      	str	r3, [sp, #12]
 8006472:	f7f9 fe6d 	bl	8000150 <strlen>
 8006476:	4682      	mov	sl, r0
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	f8db 2000 	ldr.w	r2, [fp]
 800647e:	4403      	add	r3, r0
 8006480:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006484:	9307      	str	r3, [sp, #28]
 8006486:	1c93      	adds	r3, r2, #2
 8006488:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800648c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006490:	32fe      	adds	r2, #254	; 0xfe
 8006492:	18d1      	adds	r1, r2, r3
 8006494:	461f      	mov	r7, r3
 8006496:	f813 0b01 	ldrb.w	r0, [r3], #1
 800649a:	9101      	str	r1, [sp, #4]
 800649c:	2830      	cmp	r0, #48	; 0x30
 800649e:	d0f8      	beq.n	8006492 <__gethex+0x36>
 80064a0:	f7ff ffc7 	bl	8006432 <__hexdig_fun>
 80064a4:	4604      	mov	r4, r0
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d13a      	bne.n	8006520 <__gethex+0xc4>
 80064aa:	4652      	mov	r2, sl
 80064ac:	4638      	mov	r0, r7
 80064ae:	9903      	ldr	r1, [sp, #12]
 80064b0:	f001 f9dc 	bl	800786c <strncmp>
 80064b4:	4605      	mov	r5, r0
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d166      	bne.n	8006588 <__gethex+0x12c>
 80064ba:	f817 000a 	ldrb.w	r0, [r7, sl]
 80064be:	eb07 060a 	add.w	r6, r7, sl
 80064c2:	f7ff ffb6 	bl	8006432 <__hexdig_fun>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d060      	beq.n	800658c <__gethex+0x130>
 80064ca:	4633      	mov	r3, r6
 80064cc:	7818      	ldrb	r0, [r3, #0]
 80064ce:	461f      	mov	r7, r3
 80064d0:	2830      	cmp	r0, #48	; 0x30
 80064d2:	f103 0301 	add.w	r3, r3, #1
 80064d6:	d0f9      	beq.n	80064cc <__gethex+0x70>
 80064d8:	f7ff ffab 	bl	8006432 <__hexdig_fun>
 80064dc:	2301      	movs	r3, #1
 80064de:	fab0 f480 	clz	r4, r0
 80064e2:	4635      	mov	r5, r6
 80064e4:	0964      	lsrs	r4, r4, #5
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	463a      	mov	r2, r7
 80064ea:	4616      	mov	r6, r2
 80064ec:	7830      	ldrb	r0, [r6, #0]
 80064ee:	3201      	adds	r2, #1
 80064f0:	f7ff ff9f 	bl	8006432 <__hexdig_fun>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1f8      	bne.n	80064ea <__gethex+0x8e>
 80064f8:	4652      	mov	r2, sl
 80064fa:	4630      	mov	r0, r6
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	f001 f9b5 	bl	800786c <strncmp>
 8006502:	b980      	cbnz	r0, 8006526 <__gethex+0xca>
 8006504:	b94d      	cbnz	r5, 800651a <__gethex+0xbe>
 8006506:	eb06 050a 	add.w	r5, r6, sl
 800650a:	462a      	mov	r2, r5
 800650c:	4616      	mov	r6, r2
 800650e:	7830      	ldrb	r0, [r6, #0]
 8006510:	3201      	adds	r2, #1
 8006512:	f7ff ff8e 	bl	8006432 <__hexdig_fun>
 8006516:	2800      	cmp	r0, #0
 8006518:	d1f8      	bne.n	800650c <__gethex+0xb0>
 800651a:	1bad      	subs	r5, r5, r6
 800651c:	00ad      	lsls	r5, r5, #2
 800651e:	e004      	b.n	800652a <__gethex+0xce>
 8006520:	2400      	movs	r4, #0
 8006522:	4625      	mov	r5, r4
 8006524:	e7e0      	b.n	80064e8 <__gethex+0x8c>
 8006526:	2d00      	cmp	r5, #0
 8006528:	d1f7      	bne.n	800651a <__gethex+0xbe>
 800652a:	7833      	ldrb	r3, [r6, #0]
 800652c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006530:	2b50      	cmp	r3, #80	; 0x50
 8006532:	d139      	bne.n	80065a8 <__gethex+0x14c>
 8006534:	7873      	ldrb	r3, [r6, #1]
 8006536:	2b2b      	cmp	r3, #43	; 0x2b
 8006538:	d02a      	beq.n	8006590 <__gethex+0x134>
 800653a:	2b2d      	cmp	r3, #45	; 0x2d
 800653c:	d02c      	beq.n	8006598 <__gethex+0x13c>
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	1c71      	adds	r1, r6, #1
 8006544:	7808      	ldrb	r0, [r1, #0]
 8006546:	f7ff ff74 	bl	8006432 <__hexdig_fun>
 800654a:	1e43      	subs	r3, r0, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b18      	cmp	r3, #24
 8006550:	d82a      	bhi.n	80065a8 <__gethex+0x14c>
 8006552:	f1a0 0210 	sub.w	r2, r0, #16
 8006556:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800655a:	f7ff ff6a 	bl	8006432 <__hexdig_fun>
 800655e:	1e43      	subs	r3, r0, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b18      	cmp	r3, #24
 8006564:	d91b      	bls.n	800659e <__gethex+0x142>
 8006566:	f1b9 0f00 	cmp.w	r9, #0
 800656a:	d000      	beq.n	800656e <__gethex+0x112>
 800656c:	4252      	negs	r2, r2
 800656e:	4415      	add	r5, r2
 8006570:	f8cb 1000 	str.w	r1, [fp]
 8006574:	b1d4      	cbz	r4, 80065ac <__gethex+0x150>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2700      	movne	r7, #0
 800657e:	2706      	moveq	r7, #6
 8006580:	4638      	mov	r0, r7
 8006582:	b00b      	add	sp, #44	; 0x2c
 8006584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006588:	463e      	mov	r6, r7
 800658a:	4625      	mov	r5, r4
 800658c:	2401      	movs	r4, #1
 800658e:	e7cc      	b.n	800652a <__gethex+0xce>
 8006590:	f04f 0900 	mov.w	r9, #0
 8006594:	1cb1      	adds	r1, r6, #2
 8006596:	e7d5      	b.n	8006544 <__gethex+0xe8>
 8006598:	f04f 0901 	mov.w	r9, #1
 800659c:	e7fa      	b.n	8006594 <__gethex+0x138>
 800659e:	230a      	movs	r3, #10
 80065a0:	fb03 0202 	mla	r2, r3, r2, r0
 80065a4:	3a10      	subs	r2, #16
 80065a6:	e7d6      	b.n	8006556 <__gethex+0xfa>
 80065a8:	4631      	mov	r1, r6
 80065aa:	e7e1      	b.n	8006570 <__gethex+0x114>
 80065ac:	4621      	mov	r1, r4
 80065ae:	1bf3      	subs	r3, r6, r7
 80065b0:	3b01      	subs	r3, #1
 80065b2:	2b07      	cmp	r3, #7
 80065b4:	dc0a      	bgt.n	80065cc <__gethex+0x170>
 80065b6:	9802      	ldr	r0, [sp, #8]
 80065b8:	f000 fa7a 	bl	8006ab0 <_Balloc>
 80065bc:	4604      	mov	r4, r0
 80065be:	b940      	cbnz	r0, 80065d2 <__gethex+0x176>
 80065c0:	4602      	mov	r2, r0
 80065c2:	21de      	movs	r1, #222	; 0xde
 80065c4:	4b62      	ldr	r3, [pc, #392]	; (8006750 <__gethex+0x2f4>)
 80065c6:	4863      	ldr	r0, [pc, #396]	; (8006754 <__gethex+0x2f8>)
 80065c8:	f001 f970 	bl	80078ac <__assert_func>
 80065cc:	3101      	adds	r1, #1
 80065ce:	105b      	asrs	r3, r3, #1
 80065d0:	e7ef      	b.n	80065b2 <__gethex+0x156>
 80065d2:	f04f 0b00 	mov.w	fp, #0
 80065d6:	f100 0914 	add.w	r9, r0, #20
 80065da:	f1ca 0301 	rsb	r3, sl, #1
 80065de:	f8cd 9010 	str.w	r9, [sp, #16]
 80065e2:	f8cd b004 	str.w	fp, [sp, #4]
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	42b7      	cmp	r7, r6
 80065ea:	d33f      	bcc.n	800666c <__gethex+0x210>
 80065ec:	9f04      	ldr	r7, [sp, #16]
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	f847 3b04 	str.w	r3, [r7], #4
 80065f4:	eba7 0709 	sub.w	r7, r7, r9
 80065f8:	10bf      	asrs	r7, r7, #2
 80065fa:	6127      	str	r7, [r4, #16]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fb4d 	bl	8006c9c <__hi0bits>
 8006602:	017f      	lsls	r7, r7, #5
 8006604:	f8d8 6000 	ldr.w	r6, [r8]
 8006608:	1a3f      	subs	r7, r7, r0
 800660a:	42b7      	cmp	r7, r6
 800660c:	dd62      	ble.n	80066d4 <__gethex+0x278>
 800660e:	1bbf      	subs	r7, r7, r6
 8006610:	4639      	mov	r1, r7
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fee3 	bl	80073de <__any_on>
 8006618:	4682      	mov	sl, r0
 800661a:	b1a8      	cbz	r0, 8006648 <__gethex+0x1ec>
 800661c:	f04f 0a01 	mov.w	sl, #1
 8006620:	1e7b      	subs	r3, r7, #1
 8006622:	1159      	asrs	r1, r3, #5
 8006624:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006628:	f003 021f 	and.w	r2, r3, #31
 800662c:	fa0a f202 	lsl.w	r2, sl, r2
 8006630:	420a      	tst	r2, r1
 8006632:	d009      	beq.n	8006648 <__gethex+0x1ec>
 8006634:	4553      	cmp	r3, sl
 8006636:	dd05      	ble.n	8006644 <__gethex+0x1e8>
 8006638:	4620      	mov	r0, r4
 800663a:	1eb9      	subs	r1, r7, #2
 800663c:	f000 fecf 	bl	80073de <__any_on>
 8006640:	2800      	cmp	r0, #0
 8006642:	d144      	bne.n	80066ce <__gethex+0x272>
 8006644:	f04f 0a02 	mov.w	sl, #2
 8006648:	4639      	mov	r1, r7
 800664a:	4620      	mov	r0, r4
 800664c:	f7ff fe9e 	bl	800638c <rshift>
 8006650:	443d      	add	r5, r7
 8006652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006656:	42ab      	cmp	r3, r5
 8006658:	da4a      	bge.n	80066f0 <__gethex+0x294>
 800665a:	4621      	mov	r1, r4
 800665c:	9802      	ldr	r0, [sp, #8]
 800665e:	f000 fa67 	bl	8006b30 <_Bfree>
 8006662:	2300      	movs	r3, #0
 8006664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006666:	27a3      	movs	r7, #163	; 0xa3
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e789      	b.n	8006580 <__gethex+0x124>
 800666c:	1e73      	subs	r3, r6, #1
 800666e:	9a07      	ldr	r2, [sp, #28]
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006676:	4293      	cmp	r3, r2
 8006678:	d019      	beq.n	80066ae <__gethex+0x252>
 800667a:	f1bb 0f20 	cmp.w	fp, #32
 800667e:	d107      	bne.n	8006690 <__gethex+0x234>
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	f843 2b04 	str.w	r2, [r3], #4
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	2300      	movs	r3, #0
 800668c:	469b      	mov	fp, r3
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006694:	f7ff fecd 	bl	8006432 <__hexdig_fun>
 8006698:	9b01      	ldr	r3, [sp, #4]
 800669a:	f000 000f 	and.w	r0, r0, #15
 800669e:	fa00 f00b 	lsl.w	r0, r0, fp
 80066a2:	4303      	orrs	r3, r0
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	f10b 0b04 	add.w	fp, fp, #4
 80066aa:	9b05      	ldr	r3, [sp, #20]
 80066ac:	e00d      	b.n	80066ca <__gethex+0x26e>
 80066ae:	9b05      	ldr	r3, [sp, #20]
 80066b0:	9a08      	ldr	r2, [sp, #32]
 80066b2:	4413      	add	r3, r2
 80066b4:	42bb      	cmp	r3, r7
 80066b6:	d3e0      	bcc.n	800667a <__gethex+0x21e>
 80066b8:	4618      	mov	r0, r3
 80066ba:	4652      	mov	r2, sl
 80066bc:	9903      	ldr	r1, [sp, #12]
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	f001 f8d4 	bl	800786c <strncmp>
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d1d7      	bne.n	800667a <__gethex+0x21e>
 80066ca:	461e      	mov	r6, r3
 80066cc:	e78c      	b.n	80065e8 <__gethex+0x18c>
 80066ce:	f04f 0a03 	mov.w	sl, #3
 80066d2:	e7b9      	b.n	8006648 <__gethex+0x1ec>
 80066d4:	da09      	bge.n	80066ea <__gethex+0x28e>
 80066d6:	1bf7      	subs	r7, r6, r7
 80066d8:	4621      	mov	r1, r4
 80066da:	463a      	mov	r2, r7
 80066dc:	9802      	ldr	r0, [sp, #8]
 80066de:	f000 fc3f 	bl	8006f60 <__lshift>
 80066e2:	4604      	mov	r4, r0
 80066e4:	1bed      	subs	r5, r5, r7
 80066e6:	f100 0914 	add.w	r9, r0, #20
 80066ea:	f04f 0a00 	mov.w	sl, #0
 80066ee:	e7b0      	b.n	8006652 <__gethex+0x1f6>
 80066f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80066f4:	42a8      	cmp	r0, r5
 80066f6:	dd71      	ble.n	80067dc <__gethex+0x380>
 80066f8:	1b45      	subs	r5, r0, r5
 80066fa:	42ae      	cmp	r6, r5
 80066fc:	dc34      	bgt.n	8006768 <__gethex+0x30c>
 80066fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d028      	beq.n	8006758 <__gethex+0x2fc>
 8006706:	2b03      	cmp	r3, #3
 8006708:	d02a      	beq.n	8006760 <__gethex+0x304>
 800670a:	2b01      	cmp	r3, #1
 800670c:	d115      	bne.n	800673a <__gethex+0x2de>
 800670e:	42ae      	cmp	r6, r5
 8006710:	d113      	bne.n	800673a <__gethex+0x2de>
 8006712:	2e01      	cmp	r6, #1
 8006714:	d10b      	bne.n	800672e <__gethex+0x2d2>
 8006716:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800671a:	9a06      	ldr	r2, [sp, #24]
 800671c:	2762      	movs	r7, #98	; 0x62
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	2301      	movs	r3, #1
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	f8c9 3000 	str.w	r3, [r9]
 8006728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800672a:	601c      	str	r4, [r3, #0]
 800672c:	e728      	b.n	8006580 <__gethex+0x124>
 800672e:	4620      	mov	r0, r4
 8006730:	1e71      	subs	r1, r6, #1
 8006732:	f000 fe54 	bl	80073de <__any_on>
 8006736:	2800      	cmp	r0, #0
 8006738:	d1ed      	bne.n	8006716 <__gethex+0x2ba>
 800673a:	4621      	mov	r1, r4
 800673c:	9802      	ldr	r0, [sp, #8]
 800673e:	f000 f9f7 	bl	8006b30 <_Bfree>
 8006742:	2300      	movs	r3, #0
 8006744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006746:	2750      	movs	r7, #80	; 0x50
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e719      	b.n	8006580 <__gethex+0x124>
 800674c:	080097b8 	.word	0x080097b8
 8006750:	0800973c 	.word	0x0800973c
 8006754:	0800974d 	.word	0x0800974d
 8006758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ed      	bne.n	800673a <__gethex+0x2de>
 800675e:	e7da      	b.n	8006716 <__gethex+0x2ba>
 8006760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1d7      	bne.n	8006716 <__gethex+0x2ba>
 8006766:	e7e8      	b.n	800673a <__gethex+0x2de>
 8006768:	1e6f      	subs	r7, r5, #1
 800676a:	f1ba 0f00 	cmp.w	sl, #0
 800676e:	d132      	bne.n	80067d6 <__gethex+0x37a>
 8006770:	b127      	cbz	r7, 800677c <__gethex+0x320>
 8006772:	4639      	mov	r1, r7
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fe32 	bl	80073de <__any_on>
 800677a:	4682      	mov	sl, r0
 800677c:	2101      	movs	r1, #1
 800677e:	117b      	asrs	r3, r7, #5
 8006780:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006784:	f007 071f 	and.w	r7, r7, #31
 8006788:	fa01 f707 	lsl.w	r7, r1, r7
 800678c:	421f      	tst	r7, r3
 800678e:	f04f 0702 	mov.w	r7, #2
 8006792:	4629      	mov	r1, r5
 8006794:	4620      	mov	r0, r4
 8006796:	bf18      	it	ne
 8006798:	f04a 0a02 	orrne.w	sl, sl, #2
 800679c:	1b76      	subs	r6, r6, r5
 800679e:	f7ff fdf5 	bl	800638c <rshift>
 80067a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80067a6:	f1ba 0f00 	cmp.w	sl, #0
 80067aa:	d048      	beq.n	800683e <__gethex+0x3e2>
 80067ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d015      	beq.n	80067e0 <__gethex+0x384>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d017      	beq.n	80067e8 <__gethex+0x38c>
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d109      	bne.n	80067d0 <__gethex+0x374>
 80067bc:	f01a 0f02 	tst.w	sl, #2
 80067c0:	d006      	beq.n	80067d0 <__gethex+0x374>
 80067c2:	f8d9 0000 	ldr.w	r0, [r9]
 80067c6:	ea4a 0a00 	orr.w	sl, sl, r0
 80067ca:	f01a 0f01 	tst.w	sl, #1
 80067ce:	d10e      	bne.n	80067ee <__gethex+0x392>
 80067d0:	f047 0710 	orr.w	r7, r7, #16
 80067d4:	e033      	b.n	800683e <__gethex+0x3e2>
 80067d6:	f04f 0a01 	mov.w	sl, #1
 80067da:	e7cf      	b.n	800677c <__gethex+0x320>
 80067dc:	2701      	movs	r7, #1
 80067de:	e7e2      	b.n	80067a6 <__gethex+0x34a>
 80067e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067e2:	f1c3 0301 	rsb	r3, r3, #1
 80067e6:	9315      	str	r3, [sp, #84]	; 0x54
 80067e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <__gethex+0x374>
 80067ee:	f04f 0c00 	mov.w	ip, #0
 80067f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80067f6:	f104 0314 	add.w	r3, r4, #20
 80067fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80067fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006802:	4618      	mov	r0, r3
 8006804:	f853 2b04 	ldr.w	r2, [r3], #4
 8006808:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800680c:	d01c      	beq.n	8006848 <__gethex+0x3ec>
 800680e:	3201      	adds	r2, #1
 8006810:	6002      	str	r2, [r0, #0]
 8006812:	2f02      	cmp	r7, #2
 8006814:	f104 0314 	add.w	r3, r4, #20
 8006818:	d13d      	bne.n	8006896 <__gethex+0x43a>
 800681a:	f8d8 2000 	ldr.w	r2, [r8]
 800681e:	3a01      	subs	r2, #1
 8006820:	42b2      	cmp	r2, r6
 8006822:	d10a      	bne.n	800683a <__gethex+0x3de>
 8006824:	2201      	movs	r2, #1
 8006826:	1171      	asrs	r1, r6, #5
 8006828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800682c:	f006 061f 	and.w	r6, r6, #31
 8006830:	fa02 f606 	lsl.w	r6, r2, r6
 8006834:	421e      	tst	r6, r3
 8006836:	bf18      	it	ne
 8006838:	4617      	movne	r7, r2
 800683a:	f047 0720 	orr.w	r7, r7, #32
 800683e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006840:	601c      	str	r4, [r3, #0]
 8006842:	9b06      	ldr	r3, [sp, #24]
 8006844:	601d      	str	r5, [r3, #0]
 8006846:	e69b      	b.n	8006580 <__gethex+0x124>
 8006848:	4299      	cmp	r1, r3
 800684a:	f843 cc04 	str.w	ip, [r3, #-4]
 800684e:	d8d8      	bhi.n	8006802 <__gethex+0x3a6>
 8006850:	68a3      	ldr	r3, [r4, #8]
 8006852:	459b      	cmp	fp, r3
 8006854:	db17      	blt.n	8006886 <__gethex+0x42a>
 8006856:	6861      	ldr	r1, [r4, #4]
 8006858:	9802      	ldr	r0, [sp, #8]
 800685a:	3101      	adds	r1, #1
 800685c:	f000 f928 	bl	8006ab0 <_Balloc>
 8006860:	4681      	mov	r9, r0
 8006862:	b918      	cbnz	r0, 800686c <__gethex+0x410>
 8006864:	4602      	mov	r2, r0
 8006866:	2184      	movs	r1, #132	; 0x84
 8006868:	4b19      	ldr	r3, [pc, #100]	; (80068d0 <__gethex+0x474>)
 800686a:	e6ac      	b.n	80065c6 <__gethex+0x16a>
 800686c:	6922      	ldr	r2, [r4, #16]
 800686e:	f104 010c 	add.w	r1, r4, #12
 8006872:	3202      	adds	r2, #2
 8006874:	0092      	lsls	r2, r2, #2
 8006876:	300c      	adds	r0, #12
 8006878:	f7fd f9bc 	bl	8003bf4 <memcpy>
 800687c:	4621      	mov	r1, r4
 800687e:	9802      	ldr	r0, [sp, #8]
 8006880:	f000 f956 	bl	8006b30 <_Bfree>
 8006884:	464c      	mov	r4, r9
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	6122      	str	r2, [r4, #16]
 800688c:	2201      	movs	r2, #1
 800688e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006892:	615a      	str	r2, [r3, #20]
 8006894:	e7bd      	b.n	8006812 <__gethex+0x3b6>
 8006896:	6922      	ldr	r2, [r4, #16]
 8006898:	455a      	cmp	r2, fp
 800689a:	dd0b      	ble.n	80068b4 <__gethex+0x458>
 800689c:	2101      	movs	r1, #1
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff fd74 	bl	800638c <rshift>
 80068a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068a8:	3501      	adds	r5, #1
 80068aa:	42ab      	cmp	r3, r5
 80068ac:	f6ff aed5 	blt.w	800665a <__gethex+0x1fe>
 80068b0:	2701      	movs	r7, #1
 80068b2:	e7c2      	b.n	800683a <__gethex+0x3de>
 80068b4:	f016 061f 	ands.w	r6, r6, #31
 80068b8:	d0fa      	beq.n	80068b0 <__gethex+0x454>
 80068ba:	449a      	add	sl, r3
 80068bc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80068c0:	f000 f9ec 	bl	8006c9c <__hi0bits>
 80068c4:	f1c6 0620 	rsb	r6, r6, #32
 80068c8:	42b0      	cmp	r0, r6
 80068ca:	dbe7      	blt.n	800689c <__gethex+0x440>
 80068cc:	e7f0      	b.n	80068b0 <__gethex+0x454>
 80068ce:	bf00      	nop
 80068d0:	0800973c 	.word	0x0800973c

080068d4 <L_shift>:
 80068d4:	f1c2 0208 	rsb	r2, r2, #8
 80068d8:	0092      	lsls	r2, r2, #2
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	f1c2 0620 	rsb	r6, r2, #32
 80068e0:	6843      	ldr	r3, [r0, #4]
 80068e2:	6804      	ldr	r4, [r0, #0]
 80068e4:	fa03 f506 	lsl.w	r5, r3, r6
 80068e8:	432c      	orrs	r4, r5
 80068ea:	40d3      	lsrs	r3, r2
 80068ec:	6004      	str	r4, [r0, #0]
 80068ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80068f2:	4288      	cmp	r0, r1
 80068f4:	d3f4      	bcc.n	80068e0 <L_shift+0xc>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}

080068f8 <__match>:
 80068f8:	b530      	push	{r4, r5, lr}
 80068fa:	6803      	ldr	r3, [r0, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006902:	b914      	cbnz	r4, 800690a <__match+0x12>
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	2001      	movs	r0, #1
 8006908:	bd30      	pop	{r4, r5, pc}
 800690a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800690e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006912:	2d19      	cmp	r5, #25
 8006914:	bf98      	it	ls
 8006916:	3220      	addls	r2, #32
 8006918:	42a2      	cmp	r2, r4
 800691a:	d0f0      	beq.n	80068fe <__match+0x6>
 800691c:	2000      	movs	r0, #0
 800691e:	e7f3      	b.n	8006908 <__match+0x10>

08006920 <__hexnan>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	2500      	movs	r5, #0
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	4682      	mov	sl, r0
 800692a:	115e      	asrs	r6, r3, #5
 800692c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006930:	f013 031f 	ands.w	r3, r3, #31
 8006934:	bf18      	it	ne
 8006936:	3604      	addne	r6, #4
 8006938:	1f37      	subs	r7, r6, #4
 800693a:	4690      	mov	r8, r2
 800693c:	46b9      	mov	r9, r7
 800693e:	463c      	mov	r4, r7
 8006940:	46ab      	mov	fp, r5
 8006942:	b087      	sub	sp, #28
 8006944:	6801      	ldr	r1, [r0, #0]
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	f846 5c04 	str.w	r5, [r6, #-4]
 800694c:	9502      	str	r5, [sp, #8]
 800694e:	784a      	ldrb	r2, [r1, #1]
 8006950:	1c4b      	adds	r3, r1, #1
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	b342      	cbz	r2, 80069a8 <__hexnan+0x88>
 8006956:	4610      	mov	r0, r2
 8006958:	9105      	str	r1, [sp, #20]
 800695a:	9204      	str	r2, [sp, #16]
 800695c:	f7ff fd69 	bl	8006432 <__hexdig_fun>
 8006960:	2800      	cmp	r0, #0
 8006962:	d14f      	bne.n	8006a04 <__hexnan+0xe4>
 8006964:	9a04      	ldr	r2, [sp, #16]
 8006966:	9905      	ldr	r1, [sp, #20]
 8006968:	2a20      	cmp	r2, #32
 800696a:	d818      	bhi.n	800699e <__hexnan+0x7e>
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	459b      	cmp	fp, r3
 8006970:	dd13      	ble.n	800699a <__hexnan+0x7a>
 8006972:	454c      	cmp	r4, r9
 8006974:	d206      	bcs.n	8006984 <__hexnan+0x64>
 8006976:	2d07      	cmp	r5, #7
 8006978:	dc04      	bgt.n	8006984 <__hexnan+0x64>
 800697a:	462a      	mov	r2, r5
 800697c:	4649      	mov	r1, r9
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff ffa8 	bl	80068d4 <L_shift>
 8006984:	4544      	cmp	r4, r8
 8006986:	d950      	bls.n	8006a2a <__hexnan+0x10a>
 8006988:	2300      	movs	r3, #0
 800698a:	f1a4 0904 	sub.w	r9, r4, #4
 800698e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006992:	461d      	mov	r5, r3
 8006994:	464c      	mov	r4, r9
 8006996:	f8cd b008 	str.w	fp, [sp, #8]
 800699a:	9903      	ldr	r1, [sp, #12]
 800699c:	e7d7      	b.n	800694e <__hexnan+0x2e>
 800699e:	2a29      	cmp	r2, #41	; 0x29
 80069a0:	d156      	bne.n	8006a50 <__hexnan+0x130>
 80069a2:	3102      	adds	r1, #2
 80069a4:	f8ca 1000 	str.w	r1, [sl]
 80069a8:	f1bb 0f00 	cmp.w	fp, #0
 80069ac:	d050      	beq.n	8006a50 <__hexnan+0x130>
 80069ae:	454c      	cmp	r4, r9
 80069b0:	d206      	bcs.n	80069c0 <__hexnan+0xa0>
 80069b2:	2d07      	cmp	r5, #7
 80069b4:	dc04      	bgt.n	80069c0 <__hexnan+0xa0>
 80069b6:	462a      	mov	r2, r5
 80069b8:	4649      	mov	r1, r9
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff ff8a 	bl	80068d4 <L_shift>
 80069c0:	4544      	cmp	r4, r8
 80069c2:	d934      	bls.n	8006a2e <__hexnan+0x10e>
 80069c4:	4623      	mov	r3, r4
 80069c6:	f1a8 0204 	sub.w	r2, r8, #4
 80069ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80069ce:	429f      	cmp	r7, r3
 80069d0:	f842 1f04 	str.w	r1, [r2, #4]!
 80069d4:	d2f9      	bcs.n	80069ca <__hexnan+0xaa>
 80069d6:	1b3b      	subs	r3, r7, r4
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	3304      	adds	r3, #4
 80069de:	3401      	adds	r4, #1
 80069e0:	3e03      	subs	r6, #3
 80069e2:	42b4      	cmp	r4, r6
 80069e4:	bf88      	it	hi
 80069e6:	2304      	movhi	r3, #4
 80069e8:	2200      	movs	r2, #0
 80069ea:	4443      	add	r3, r8
 80069ec:	f843 2b04 	str.w	r2, [r3], #4
 80069f0:	429f      	cmp	r7, r3
 80069f2:	d2fb      	bcs.n	80069ec <__hexnan+0xcc>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	b91b      	cbnz	r3, 8006a00 <__hexnan+0xe0>
 80069f8:	4547      	cmp	r7, r8
 80069fa:	d127      	bne.n	8006a4c <__hexnan+0x12c>
 80069fc:	2301      	movs	r3, #1
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	2005      	movs	r0, #5
 8006a02:	e026      	b.n	8006a52 <__hexnan+0x132>
 8006a04:	3501      	adds	r5, #1
 8006a06:	2d08      	cmp	r5, #8
 8006a08:	f10b 0b01 	add.w	fp, fp, #1
 8006a0c:	dd06      	ble.n	8006a1c <__hexnan+0xfc>
 8006a0e:	4544      	cmp	r4, r8
 8006a10:	d9c3      	bls.n	800699a <__hexnan+0x7a>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2501      	movs	r5, #1
 8006a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a1a:	3c04      	subs	r4, #4
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	f000 000f 	and.w	r0, r0, #15
 8006a22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	e7b7      	b.n	800699a <__hexnan+0x7a>
 8006a2a:	2508      	movs	r5, #8
 8006a2c:	e7b5      	b.n	800699a <__hexnan+0x7a>
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0df      	beq.n	80069f4 <__hexnan+0xd4>
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a38:	f1c3 0320 	rsb	r3, r3, #32
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006a44:	401a      	ands	r2, r3
 8006a46:	f846 2c04 	str.w	r2, [r6, #-4]
 8006a4a:	e7d3      	b.n	80069f4 <__hexnan+0xd4>
 8006a4c:	3f04      	subs	r7, #4
 8006a4e:	e7d1      	b.n	80069f4 <__hexnan+0xd4>
 8006a50:	2004      	movs	r0, #4
 8006a52:	b007      	add	sp, #28
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a58 <_localeconv_r>:
 8006a58:	4800      	ldr	r0, [pc, #0]	; (8006a5c <_localeconv_r+0x4>)
 8006a5a:	4770      	bx	lr
 8006a5c:	20000178 	.word	0x20000178

08006a60 <malloc>:
 8006a60:	4b02      	ldr	r3, [pc, #8]	; (8006a6c <malloc+0xc>)
 8006a62:	4601      	mov	r1, r0
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	f000 bd35 	b.w	80074d4 <_malloc_r>
 8006a6a:	bf00      	nop
 8006a6c:	20000020 	.word	0x20000020

08006a70 <__ascii_mbtowc>:
 8006a70:	b082      	sub	sp, #8
 8006a72:	b901      	cbnz	r1, 8006a76 <__ascii_mbtowc+0x6>
 8006a74:	a901      	add	r1, sp, #4
 8006a76:	b142      	cbz	r2, 8006a8a <__ascii_mbtowc+0x1a>
 8006a78:	b14b      	cbz	r3, 8006a8e <__ascii_mbtowc+0x1e>
 8006a7a:	7813      	ldrb	r3, [r2, #0]
 8006a7c:	600b      	str	r3, [r1, #0]
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	1e10      	subs	r0, r2, #0
 8006a82:	bf18      	it	ne
 8006a84:	2001      	movne	r0, #1
 8006a86:	b002      	add	sp, #8
 8006a88:	4770      	bx	lr
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	e7fb      	b.n	8006a86 <__ascii_mbtowc+0x16>
 8006a8e:	f06f 0001 	mvn.w	r0, #1
 8006a92:	e7f8      	b.n	8006a86 <__ascii_mbtowc+0x16>

08006a94 <memchr>:
 8006a94:	4603      	mov	r3, r0
 8006a96:	b510      	push	{r4, lr}
 8006a98:	b2c9      	uxtb	r1, r1
 8006a9a:	4402      	add	r2, r0
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	d101      	bne.n	8006aa6 <memchr+0x12>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e003      	b.n	8006aae <memchr+0x1a>
 8006aa6:	7804      	ldrb	r4, [r0, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	428c      	cmp	r4, r1
 8006aac:	d1f6      	bne.n	8006a9c <memchr+0x8>
 8006aae:	bd10      	pop	{r4, pc}

08006ab0 <_Balloc>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	b976      	cbnz	r6, 8006ad8 <_Balloc+0x28>
 8006aba:	2010      	movs	r0, #16
 8006abc:	f7ff ffd0 	bl	8006a60 <malloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ac4:	b920      	cbnz	r0, 8006ad0 <_Balloc+0x20>
 8006ac6:	2166      	movs	r1, #102	; 0x66
 8006ac8:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <_Balloc+0x78>)
 8006aca:	4818      	ldr	r0, [pc, #96]	; (8006b2c <_Balloc+0x7c>)
 8006acc:	f000 feee 	bl	80078ac <__assert_func>
 8006ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ad4:	6006      	str	r6, [r0, #0]
 8006ad6:	60c6      	str	r6, [r0, #12]
 8006ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ada:	68f3      	ldr	r3, [r6, #12]
 8006adc:	b183      	cbz	r3, 8006b00 <_Balloc+0x50>
 8006ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ae6:	b9b8      	cbnz	r0, 8006b18 <_Balloc+0x68>
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f605 	lsl.w	r6, r1, r5
 8006aee:	1d72      	adds	r2, r6, #5
 8006af0:	4620      	mov	r0, r4
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	f000 fc94 	bl	8007420 <_calloc_r>
 8006af8:	b160      	cbz	r0, 8006b14 <_Balloc+0x64>
 8006afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006afe:	e00e      	b.n	8006b1e <_Balloc+0x6e>
 8006b00:	2221      	movs	r2, #33	; 0x21
 8006b02:	2104      	movs	r1, #4
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fc8b 	bl	8007420 <_calloc_r>
 8006b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b0c:	60f0      	str	r0, [r6, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e4      	bne.n	8006ade <_Balloc+0x2e>
 8006b14:	2000      	movs	r0, #0
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	6802      	ldr	r2, [r0, #0]
 8006b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b24:	e7f7      	b.n	8006b16 <_Balloc+0x66>
 8006b26:	bf00      	nop
 8006b28:	080096c6 	.word	0x080096c6
 8006b2c:	080097cc 	.word	0x080097cc

08006b30 <_Bfree>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b976      	cbnz	r6, 8006b58 <_Bfree+0x28>
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	f7ff ff90 	bl	8006a60 <malloc>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6268      	str	r0, [r5, #36]	; 0x24
 8006b44:	b920      	cbnz	r0, 8006b50 <_Bfree+0x20>
 8006b46:	218a      	movs	r1, #138	; 0x8a
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <_Bfree+0x3c>)
 8006b4a:	4809      	ldr	r0, [pc, #36]	; (8006b70 <_Bfree+0x40>)
 8006b4c:	f000 feae 	bl	80078ac <__assert_func>
 8006b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b54:	6006      	str	r6, [r0, #0]
 8006b56:	60c6      	str	r6, [r0, #12]
 8006b58:	b13c      	cbz	r4, 8006b6a <_Bfree+0x3a>
 8006b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b64:	6021      	str	r1, [r4, #0]
 8006b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	080096c6 	.word	0x080096c6
 8006b70:	080097cc 	.word	0x080097cc

08006b74 <__multadd>:
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	4698      	mov	r8, r3
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	690e      	ldr	r6, [r1, #16]
 8006b80:	4607      	mov	r7, r0
 8006b82:	f101 0014 	add.w	r0, r1, #20
 8006b86:	6805      	ldr	r5, [r0, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	b2a9      	uxth	r1, r5
 8006b8c:	fb02 8101 	mla	r1, r2, r1, r8
 8006b90:	0c2d      	lsrs	r5, r5, #16
 8006b92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006b96:	fb02 c505 	mla	r5, r2, r5, ip
 8006b9a:	b289      	uxth	r1, r1
 8006b9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ba0:	429e      	cmp	r6, r3
 8006ba2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ba6:	f840 1b04 	str.w	r1, [r0], #4
 8006baa:	dcec      	bgt.n	8006b86 <__multadd+0x12>
 8006bac:	f1b8 0f00 	cmp.w	r8, #0
 8006bb0:	d022      	beq.n	8006bf8 <__multadd+0x84>
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	42b3      	cmp	r3, r6
 8006bb6:	dc19      	bgt.n	8006bec <__multadd+0x78>
 8006bb8:	6861      	ldr	r1, [r4, #4]
 8006bba:	4638      	mov	r0, r7
 8006bbc:	3101      	adds	r1, #1
 8006bbe:	f7ff ff77 	bl	8006ab0 <_Balloc>
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	b928      	cbnz	r0, 8006bd2 <__multadd+0x5e>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	21b5      	movs	r1, #181	; 0xb5
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <__multadd+0x8c>)
 8006bcc:	480d      	ldr	r0, [pc, #52]	; (8006c04 <__multadd+0x90>)
 8006bce:	f000 fe6d 	bl	80078ac <__assert_func>
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	f104 010c 	add.w	r1, r4, #12
 8006bd8:	3202      	adds	r2, #2
 8006bda:	0092      	lsls	r2, r2, #2
 8006bdc:	300c      	adds	r0, #12
 8006bde:	f7fd f809 	bl	8003bf4 <memcpy>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff ffa3 	bl	8006b30 <_Bfree>
 8006bea:	462c      	mov	r4, r5
 8006bec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006bf6:	6126      	str	r6, [r4, #16]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfe:	bf00      	nop
 8006c00:	0800973c 	.word	0x0800973c
 8006c04:	080097cc 	.word	0x080097cc

08006c08 <__s2b>:
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	4615      	mov	r5, r2
 8006c0e:	2209      	movs	r2, #9
 8006c10:	461f      	mov	r7, r3
 8006c12:	3308      	adds	r3, #8
 8006c14:	460c      	mov	r4, r1
 8006c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2100      	movs	r1, #0
 8006c20:	429a      	cmp	r2, r3
 8006c22:	db09      	blt.n	8006c38 <__s2b+0x30>
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff ff43 	bl	8006ab0 <_Balloc>
 8006c2a:	b940      	cbnz	r0, 8006c3e <__s2b+0x36>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	21ce      	movs	r1, #206	; 0xce
 8006c30:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <__s2b+0x8c>)
 8006c32:	4819      	ldr	r0, [pc, #100]	; (8006c98 <__s2b+0x90>)
 8006c34:	f000 fe3a 	bl	80078ac <__assert_func>
 8006c38:	0052      	lsls	r2, r2, #1
 8006c3a:	3101      	adds	r1, #1
 8006c3c:	e7f0      	b.n	8006c20 <__s2b+0x18>
 8006c3e:	9b08      	ldr	r3, [sp, #32]
 8006c40:	2d09      	cmp	r5, #9
 8006c42:	6143      	str	r3, [r0, #20]
 8006c44:	f04f 0301 	mov.w	r3, #1
 8006c48:	6103      	str	r3, [r0, #16]
 8006c4a:	dd16      	ble.n	8006c7a <__s2b+0x72>
 8006c4c:	f104 0909 	add.w	r9, r4, #9
 8006c50:	46c8      	mov	r8, r9
 8006c52:	442c      	add	r4, r5
 8006c54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c58:	4601      	mov	r1, r0
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	3b30      	subs	r3, #48	; 0x30
 8006c60:	f7ff ff88 	bl	8006b74 <__multadd>
 8006c64:	45a0      	cmp	r8, r4
 8006c66:	d1f5      	bne.n	8006c54 <__s2b+0x4c>
 8006c68:	f1a5 0408 	sub.w	r4, r5, #8
 8006c6c:	444c      	add	r4, r9
 8006c6e:	1b2d      	subs	r5, r5, r4
 8006c70:	1963      	adds	r3, r4, r5
 8006c72:	42bb      	cmp	r3, r7
 8006c74:	db04      	blt.n	8006c80 <__s2b+0x78>
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	2509      	movs	r5, #9
 8006c7c:	340a      	adds	r4, #10
 8006c7e:	e7f6      	b.n	8006c6e <__s2b+0x66>
 8006c80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c84:	4601      	mov	r1, r0
 8006c86:	220a      	movs	r2, #10
 8006c88:	4630      	mov	r0, r6
 8006c8a:	3b30      	subs	r3, #48	; 0x30
 8006c8c:	f7ff ff72 	bl	8006b74 <__multadd>
 8006c90:	e7ee      	b.n	8006c70 <__s2b+0x68>
 8006c92:	bf00      	nop
 8006c94:	0800973c 	.word	0x0800973c
 8006c98:	080097cc 	.word	0x080097cc

08006c9c <__hi0bits>:
 8006c9c:	0c02      	lsrs	r2, r0, #16
 8006c9e:	0412      	lsls	r2, r2, #16
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	b9ca      	cbnz	r2, 8006cd8 <__hi0bits+0x3c>
 8006ca4:	0403      	lsls	r3, r0, #16
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cac:	bf04      	itt	eq
 8006cae:	021b      	lsleq	r3, r3, #8
 8006cb0:	3008      	addeq	r0, #8
 8006cb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cb6:	bf04      	itt	eq
 8006cb8:	011b      	lsleq	r3, r3, #4
 8006cba:	3004      	addeq	r0, #4
 8006cbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cc0:	bf04      	itt	eq
 8006cc2:	009b      	lsleq	r3, r3, #2
 8006cc4:	3002      	addeq	r0, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	db05      	blt.n	8006cd6 <__hi0bits+0x3a>
 8006cca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cce:	f100 0001 	add.w	r0, r0, #1
 8006cd2:	bf08      	it	eq
 8006cd4:	2020      	moveq	r0, #32
 8006cd6:	4770      	bx	lr
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e7e5      	b.n	8006ca8 <__hi0bits+0xc>

08006cdc <__lo0bits>:
 8006cdc:	6803      	ldr	r3, [r0, #0]
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f013 0007 	ands.w	r0, r3, #7
 8006ce4:	d00b      	beq.n	8006cfe <__lo0bits+0x22>
 8006ce6:	07d9      	lsls	r1, r3, #31
 8006ce8:	d422      	bmi.n	8006d30 <__lo0bits+0x54>
 8006cea:	0798      	lsls	r0, r3, #30
 8006cec:	bf49      	itett	mi
 8006cee:	085b      	lsrmi	r3, r3, #1
 8006cf0:	089b      	lsrpl	r3, r3, #2
 8006cf2:	2001      	movmi	r0, #1
 8006cf4:	6013      	strmi	r3, [r2, #0]
 8006cf6:	bf5c      	itt	pl
 8006cf8:	2002      	movpl	r0, #2
 8006cfa:	6013      	strpl	r3, [r2, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	b909      	cbnz	r1, 8006d06 <__lo0bits+0x2a>
 8006d02:	2010      	movs	r0, #16
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d0a:	bf04      	itt	eq
 8006d0c:	0a1b      	lsreq	r3, r3, #8
 8006d0e:	3008      	addeq	r0, #8
 8006d10:	0719      	lsls	r1, r3, #28
 8006d12:	bf04      	itt	eq
 8006d14:	091b      	lsreq	r3, r3, #4
 8006d16:	3004      	addeq	r0, #4
 8006d18:	0799      	lsls	r1, r3, #30
 8006d1a:	bf04      	itt	eq
 8006d1c:	089b      	lsreq	r3, r3, #2
 8006d1e:	3002      	addeq	r0, #2
 8006d20:	07d9      	lsls	r1, r3, #31
 8006d22:	d403      	bmi.n	8006d2c <__lo0bits+0x50>
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	f100 0001 	add.w	r0, r0, #1
 8006d2a:	d003      	beq.n	8006d34 <__lo0bits+0x58>
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	4770      	bx	lr
 8006d30:	2000      	movs	r0, #0
 8006d32:	4770      	bx	lr
 8006d34:	2020      	movs	r0, #32
 8006d36:	4770      	bx	lr

08006d38 <__i2b>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	f7ff feb7 	bl	8006ab0 <_Balloc>
 8006d42:	4602      	mov	r2, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <__i2b+0x1a>
 8006d46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d4a:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <__i2b+0x24>)
 8006d4c:	4804      	ldr	r0, [pc, #16]	; (8006d60 <__i2b+0x28>)
 8006d4e:	f000 fdad 	bl	80078ac <__assert_func>
 8006d52:	2301      	movs	r3, #1
 8006d54:	6144      	str	r4, [r0, #20]
 8006d56:	6103      	str	r3, [r0, #16]
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	0800973c 	.word	0x0800973c
 8006d60:	080097cc 	.word	0x080097cc

08006d64 <__multiply>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	4614      	mov	r4, r2
 8006d6a:	690a      	ldr	r2, [r1, #16]
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	460d      	mov	r5, r1
 8006d70:	429a      	cmp	r2, r3
 8006d72:	bfbe      	ittt	lt
 8006d74:	460b      	movlt	r3, r1
 8006d76:	4625      	movlt	r5, r4
 8006d78:	461c      	movlt	r4, r3
 8006d7a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d82:	68ab      	ldr	r3, [r5, #8]
 8006d84:	6869      	ldr	r1, [r5, #4]
 8006d86:	eb0a 0709 	add.w	r7, sl, r9
 8006d8a:	42bb      	cmp	r3, r7
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	bfb8      	it	lt
 8006d90:	3101      	addlt	r1, #1
 8006d92:	f7ff fe8d 	bl	8006ab0 <_Balloc>
 8006d96:	b930      	cbnz	r0, 8006da6 <__multiply+0x42>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f240 115d 	movw	r1, #349	; 0x15d
 8006d9e:	4b41      	ldr	r3, [pc, #260]	; (8006ea4 <__multiply+0x140>)
 8006da0:	4841      	ldr	r0, [pc, #260]	; (8006ea8 <__multiply+0x144>)
 8006da2:	f000 fd83 	bl	80078ac <__assert_func>
 8006da6:	f100 0614 	add.w	r6, r0, #20
 8006daa:	4633      	mov	r3, r6
 8006dac:	2200      	movs	r2, #0
 8006dae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006db2:	4543      	cmp	r3, r8
 8006db4:	d31e      	bcc.n	8006df4 <__multiply+0x90>
 8006db6:	f105 0c14 	add.w	ip, r5, #20
 8006dba:	f104 0314 	add.w	r3, r4, #20
 8006dbe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006dc2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006dc6:	9202      	str	r2, [sp, #8]
 8006dc8:	ebac 0205 	sub.w	r2, ip, r5
 8006dcc:	3a15      	subs	r2, #21
 8006dce:	f022 0203 	bic.w	r2, r2, #3
 8006dd2:	3204      	adds	r2, #4
 8006dd4:	f105 0115 	add.w	r1, r5, #21
 8006dd8:	458c      	cmp	ip, r1
 8006dda:	bf38      	it	cc
 8006ddc:	2204      	movcc	r2, #4
 8006dde:	9201      	str	r2, [sp, #4]
 8006de0:	9a02      	ldr	r2, [sp, #8]
 8006de2:	9303      	str	r3, [sp, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d808      	bhi.n	8006dfa <__multiply+0x96>
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	dc55      	bgt.n	8006e98 <__multiply+0x134>
 8006dec:	6107      	str	r7, [r0, #16]
 8006dee:	b005      	add	sp, #20
 8006df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df4:	f843 2b04 	str.w	r2, [r3], #4
 8006df8:	e7db      	b.n	8006db2 <__multiply+0x4e>
 8006dfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dfe:	f1ba 0f00 	cmp.w	sl, #0
 8006e02:	d020      	beq.n	8006e46 <__multiply+0xe2>
 8006e04:	46b1      	mov	r9, r6
 8006e06:	2200      	movs	r2, #0
 8006e08:	f105 0e14 	add.w	lr, r5, #20
 8006e0c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006e10:	f8d9 b000 	ldr.w	fp, [r9]
 8006e14:	b2a1      	uxth	r1, r4
 8006e16:	fa1f fb8b 	uxth.w	fp, fp
 8006e1a:	fb0a b101 	mla	r1, sl, r1, fp
 8006e1e:	4411      	add	r1, r2
 8006e20:	f8d9 2000 	ldr.w	r2, [r9]
 8006e24:	0c24      	lsrs	r4, r4, #16
 8006e26:	0c12      	lsrs	r2, r2, #16
 8006e28:	fb0a 2404 	mla	r4, sl, r4, r2
 8006e2c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006e30:	b289      	uxth	r1, r1
 8006e32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e36:	45f4      	cmp	ip, lr
 8006e38:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006e3c:	f849 1b04 	str.w	r1, [r9], #4
 8006e40:	d8e4      	bhi.n	8006e0c <__multiply+0xa8>
 8006e42:	9901      	ldr	r1, [sp, #4]
 8006e44:	5072      	str	r2, [r6, r1]
 8006e46:	9a03      	ldr	r2, [sp, #12]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	d01f      	beq.n	8006e94 <__multiply+0x130>
 8006e54:	46b6      	mov	lr, r6
 8006e56:	f04f 0a00 	mov.w	sl, #0
 8006e5a:	6834      	ldr	r4, [r6, #0]
 8006e5c:	f105 0114 	add.w	r1, r5, #20
 8006e60:	880a      	ldrh	r2, [r1, #0]
 8006e62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006e66:	b2a4      	uxth	r4, r4
 8006e68:	fb09 b202 	mla	r2, r9, r2, fp
 8006e6c:	4492      	add	sl, r2
 8006e6e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006e72:	f84e 4b04 	str.w	r4, [lr], #4
 8006e76:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e7a:	f8be 2000 	ldrh.w	r2, [lr]
 8006e7e:	0c24      	lsrs	r4, r4, #16
 8006e80:	fb09 2404 	mla	r4, r9, r4, r2
 8006e84:	458c      	cmp	ip, r1
 8006e86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e8e:	d8e7      	bhi.n	8006e60 <__multiply+0xfc>
 8006e90:	9a01      	ldr	r2, [sp, #4]
 8006e92:	50b4      	str	r4, [r6, r2]
 8006e94:	3604      	adds	r6, #4
 8006e96:	e7a3      	b.n	8006de0 <__multiply+0x7c>
 8006e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1a5      	bne.n	8006dec <__multiply+0x88>
 8006ea0:	3f01      	subs	r7, #1
 8006ea2:	e7a1      	b.n	8006de8 <__multiply+0x84>
 8006ea4:	0800973c 	.word	0x0800973c
 8006ea8:	080097cc 	.word	0x080097cc

08006eac <__pow5mult>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	f012 0203 	ands.w	r2, r2, #3
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460f      	mov	r7, r1
 8006eba:	d007      	beq.n	8006ecc <__pow5mult+0x20>
 8006ebc:	4c25      	ldr	r4, [pc, #148]	; (8006f54 <__pow5mult+0xa8>)
 8006ebe:	3a01      	subs	r2, #1
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ec6:	f7ff fe55 	bl	8006b74 <__multadd>
 8006eca:	4607      	mov	r7, r0
 8006ecc:	10ad      	asrs	r5, r5, #2
 8006ece:	d03d      	beq.n	8006f4c <__pow5mult+0xa0>
 8006ed0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ed2:	b97c      	cbnz	r4, 8006ef4 <__pow5mult+0x48>
 8006ed4:	2010      	movs	r0, #16
 8006ed6:	f7ff fdc3 	bl	8006a60 <malloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	6270      	str	r0, [r6, #36]	; 0x24
 8006ede:	b928      	cbnz	r0, 8006eec <__pow5mult+0x40>
 8006ee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	; (8006f58 <__pow5mult+0xac>)
 8006ee6:	481d      	ldr	r0, [pc, #116]	; (8006f5c <__pow5mult+0xb0>)
 8006ee8:	f000 fce0 	bl	80078ac <__assert_func>
 8006eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef0:	6004      	str	r4, [r0, #0]
 8006ef2:	60c4      	str	r4, [r0, #12]
 8006ef4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006efc:	b94c      	cbnz	r4, 8006f12 <__pow5mult+0x66>
 8006efe:	f240 2171 	movw	r1, #625	; 0x271
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7ff ff18 	bl	8006d38 <__i2b>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 0900 	mov.w	r9, #0
 8006f16:	07eb      	lsls	r3, r5, #31
 8006f18:	d50a      	bpl.n	8006f30 <__pow5mult+0x84>
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff ff20 	bl	8006d64 <__multiply>
 8006f24:	4680      	mov	r8, r0
 8006f26:	4639      	mov	r1, r7
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff fe01 	bl	8006b30 <_Bfree>
 8006f2e:	4647      	mov	r7, r8
 8006f30:	106d      	asrs	r5, r5, #1
 8006f32:	d00b      	beq.n	8006f4c <__pow5mult+0xa0>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	b938      	cbnz	r0, 8006f48 <__pow5mult+0x9c>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff ff11 	bl	8006d64 <__multiply>
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	f8c0 9000 	str.w	r9, [r0]
 8006f48:	4604      	mov	r4, r0
 8006f4a:	e7e4      	b.n	8006f16 <__pow5mult+0x6a>
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	bf00      	nop
 8006f54:	08009920 	.word	0x08009920
 8006f58:	080096c6 	.word	0x080096c6
 8006f5c:	080097cc 	.word	0x080097cc

08006f60 <__lshift>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	460c      	mov	r4, r1
 8006f66:	4607      	mov	r7, r0
 8006f68:	4691      	mov	r9, r2
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	6849      	ldr	r1, [r1, #4]
 8006f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f78:	f108 0601 	add.w	r6, r8, #1
 8006f7c:	42b3      	cmp	r3, r6
 8006f7e:	db0b      	blt.n	8006f98 <__lshift+0x38>
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff fd95 	bl	8006ab0 <_Balloc>
 8006f86:	4605      	mov	r5, r0
 8006f88:	b948      	cbnz	r0, 8006f9e <__lshift+0x3e>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <__lshift+0xd0>)
 8006f92:	4828      	ldr	r0, [pc, #160]	; (8007034 <__lshift+0xd4>)
 8006f94:	f000 fc8a 	bl	80078ac <__assert_func>
 8006f98:	3101      	adds	r1, #1
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	e7ee      	b.n	8006f7c <__lshift+0x1c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f100 0114 	add.w	r1, r0, #20
 8006fa4:	f100 0210 	add.w	r2, r0, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	4553      	cmp	r3, sl
 8006fac:	db33      	blt.n	8007016 <__lshift+0xb6>
 8006fae:	6920      	ldr	r0, [r4, #16]
 8006fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb4:	f104 0314 	add.w	r3, r4, #20
 8006fb8:	f019 091f 	ands.w	r9, r9, #31
 8006fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc4:	d02b      	beq.n	800701e <__lshift+0xbe>
 8006fc6:	468a      	mov	sl, r1
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f1c9 0e20 	rsb	lr, r9, #32
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd4:	4302      	orrs	r2, r0
 8006fd6:	f84a 2b04 	str.w	r2, [sl], #4
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	459c      	cmp	ip, r3
 8006fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe4:	d8f3      	bhi.n	8006fce <__lshift+0x6e>
 8006fe6:	ebac 0304 	sub.w	r3, ip, r4
 8006fea:	3b15      	subs	r3, #21
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	f104 0015 	add.w	r0, r4, #21
 8006ff6:	4584      	cmp	ip, r0
 8006ff8:	bf38      	it	cc
 8006ffa:	2304      	movcc	r3, #4
 8006ffc:	50ca      	str	r2, [r1, r3]
 8006ffe:	b10a      	cbz	r2, 8007004 <__lshift+0xa4>
 8007000:	f108 0602 	add.w	r6, r8, #2
 8007004:	3e01      	subs	r6, #1
 8007006:	4638      	mov	r0, r7
 8007008:	4621      	mov	r1, r4
 800700a:	612e      	str	r6, [r5, #16]
 800700c:	f7ff fd90 	bl	8006b30 <_Bfree>
 8007010:	4628      	mov	r0, r5
 8007012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007016:	f842 0f04 	str.w	r0, [r2, #4]!
 800701a:	3301      	adds	r3, #1
 800701c:	e7c5      	b.n	8006faa <__lshift+0x4a>
 800701e:	3904      	subs	r1, #4
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	459c      	cmp	ip, r3
 8007026:	f841 2f04 	str.w	r2, [r1, #4]!
 800702a:	d8f9      	bhi.n	8007020 <__lshift+0xc0>
 800702c:	e7ea      	b.n	8007004 <__lshift+0xa4>
 800702e:	bf00      	nop
 8007030:	0800973c 	.word	0x0800973c
 8007034:	080097cc 	.word	0x080097cc

08007038 <__mcmp>:
 8007038:	4603      	mov	r3, r0
 800703a:	690a      	ldr	r2, [r1, #16]
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	1a80      	subs	r0, r0, r2
 8007042:	d10d      	bne.n	8007060 <__mcmp+0x28>
 8007044:	3314      	adds	r3, #20
 8007046:	3114      	adds	r1, #20
 8007048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800704c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007058:	4295      	cmp	r5, r2
 800705a:	d002      	beq.n	8007062 <__mcmp+0x2a>
 800705c:	d304      	bcc.n	8007068 <__mcmp+0x30>
 800705e:	2001      	movs	r0, #1
 8007060:	bd30      	pop	{r4, r5, pc}
 8007062:	42a3      	cmp	r3, r4
 8007064:	d3f4      	bcc.n	8007050 <__mcmp+0x18>
 8007066:	e7fb      	b.n	8007060 <__mcmp+0x28>
 8007068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706c:	e7f8      	b.n	8007060 <__mcmp+0x28>
	...

08007070 <__mdiff>:
 8007070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	460c      	mov	r4, r1
 8007076:	4606      	mov	r6, r0
 8007078:	4611      	mov	r1, r2
 800707a:	4620      	mov	r0, r4
 800707c:	4692      	mov	sl, r2
 800707e:	f7ff ffdb 	bl	8007038 <__mcmp>
 8007082:	1e05      	subs	r5, r0, #0
 8007084:	d111      	bne.n	80070aa <__mdiff+0x3a>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fd11 	bl	8006ab0 <_Balloc>
 800708e:	4602      	mov	r2, r0
 8007090:	b928      	cbnz	r0, 800709e <__mdiff+0x2e>
 8007092:	f240 2132 	movw	r1, #562	; 0x232
 8007096:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <__mdiff+0x118>)
 8007098:	483c      	ldr	r0, [pc, #240]	; (800718c <__mdiff+0x11c>)
 800709a:	f000 fc07 	bl	80078ac <__assert_func>
 800709e:	2301      	movs	r3, #1
 80070a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a4:	4610      	mov	r0, r2
 80070a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	bfa4      	itt	ge
 80070ac:	4653      	movge	r3, sl
 80070ae:	46a2      	movge	sl, r4
 80070b0:	4630      	mov	r0, r6
 80070b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80070b6:	bfa6      	itte	ge
 80070b8:	461c      	movge	r4, r3
 80070ba:	2500      	movge	r5, #0
 80070bc:	2501      	movlt	r5, #1
 80070be:	f7ff fcf7 	bl	8006ab0 <_Balloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	b918      	cbnz	r0, 80070ce <__mdiff+0x5e>
 80070c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070ca:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <__mdiff+0x118>)
 80070cc:	e7e4      	b.n	8007098 <__mdiff+0x28>
 80070ce:	f100 0814 	add.w	r8, r0, #20
 80070d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80070d6:	60c5      	str	r5, [r0, #12]
 80070d8:	f04f 0c00 	mov.w	ip, #0
 80070dc:	f10a 0514 	add.w	r5, sl, #20
 80070e0:	f10a 0010 	add.w	r0, sl, #16
 80070e4:	46c2      	mov	sl, r8
 80070e6:	6926      	ldr	r6, [r4, #16]
 80070e8:	f104 0914 	add.w	r9, r4, #20
 80070ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80070f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80070f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80070fc:	fa1f f18b 	uxth.w	r1, fp
 8007100:	4461      	add	r1, ip
 8007102:	fa1f fc83 	uxth.w	ip, r3
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	eba1 010c 	sub.w	r1, r1, ip
 800710c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007110:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007114:	b289      	uxth	r1, r1
 8007116:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800711a:	454e      	cmp	r6, r9
 800711c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007120:	f84a 3b04 	str.w	r3, [sl], #4
 8007124:	d8e6      	bhi.n	80070f4 <__mdiff+0x84>
 8007126:	1b33      	subs	r3, r6, r4
 8007128:	3b15      	subs	r3, #21
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	3415      	adds	r4, #21
 8007130:	3304      	adds	r3, #4
 8007132:	42a6      	cmp	r6, r4
 8007134:	bf38      	it	cc
 8007136:	2304      	movcc	r3, #4
 8007138:	441d      	add	r5, r3
 800713a:	4443      	add	r3, r8
 800713c:	461e      	mov	r6, r3
 800713e:	462c      	mov	r4, r5
 8007140:	4574      	cmp	r4, lr
 8007142:	d30e      	bcc.n	8007162 <__mdiff+0xf2>
 8007144:	f10e 0103 	add.w	r1, lr, #3
 8007148:	1b49      	subs	r1, r1, r5
 800714a:	f021 0103 	bic.w	r1, r1, #3
 800714e:	3d03      	subs	r5, #3
 8007150:	45ae      	cmp	lr, r5
 8007152:	bf38      	it	cc
 8007154:	2100      	movcc	r1, #0
 8007156:	4419      	add	r1, r3
 8007158:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800715c:	b18b      	cbz	r3, 8007182 <__mdiff+0x112>
 800715e:	6117      	str	r7, [r2, #16]
 8007160:	e7a0      	b.n	80070a4 <__mdiff+0x34>
 8007162:	f854 8b04 	ldr.w	r8, [r4], #4
 8007166:	fa1f f188 	uxth.w	r1, r8
 800716a:	4461      	add	r1, ip
 800716c:	1408      	asrs	r0, r1, #16
 800716e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007172:	b289      	uxth	r1, r1
 8007174:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800717c:	f846 1b04 	str.w	r1, [r6], #4
 8007180:	e7de      	b.n	8007140 <__mdiff+0xd0>
 8007182:	3f01      	subs	r7, #1
 8007184:	e7e8      	b.n	8007158 <__mdiff+0xe8>
 8007186:	bf00      	nop
 8007188:	0800973c 	.word	0x0800973c
 800718c:	080097cc 	.word	0x080097cc

08007190 <__ulp>:
 8007190:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <__ulp+0x48>)
 8007192:	400b      	ands	r3, r1
 8007194:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd02      	ble.n	80071a2 <__ulp+0x12>
 800719c:	2000      	movs	r0, #0
 800719e:	4619      	mov	r1, r3
 80071a0:	4770      	bx	lr
 80071a2:	425b      	negs	r3, r3
 80071a4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80071a8:	f04f 0000 	mov.w	r0, #0
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071b4:	da04      	bge.n	80071c0 <__ulp+0x30>
 80071b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071ba:	fa43 f102 	asr.w	r1, r3, r2
 80071be:	4770      	bx	lr
 80071c0:	f1a2 0314 	sub.w	r3, r2, #20
 80071c4:	2b1e      	cmp	r3, #30
 80071c6:	bfd6      	itet	le
 80071c8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80071cc:	2301      	movgt	r3, #1
 80071ce:	fa22 f303 	lsrle.w	r3, r2, r3
 80071d2:	4618      	mov	r0, r3
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	7ff00000 	.word	0x7ff00000

080071dc <__b2d>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	6907      	ldr	r7, [r0, #16]
 80071e2:	f100 0914 	add.w	r9, r0, #20
 80071e6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80071ea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80071ee:	f1a7 0804 	sub.w	r8, r7, #4
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff fd52 	bl	8006c9c <__hi0bits>
 80071f8:	f1c0 0320 	rsb	r3, r0, #32
 80071fc:	280a      	cmp	r0, #10
 80071fe:	600b      	str	r3, [r1, #0]
 8007200:	491f      	ldr	r1, [pc, #124]	; (8007280 <__b2d+0xa4>)
 8007202:	dc17      	bgt.n	8007234 <__b2d+0x58>
 8007204:	45c1      	cmp	r9, r8
 8007206:	bf28      	it	cs
 8007208:	2200      	movcs	r2, #0
 800720a:	f1c0 0c0b 	rsb	ip, r0, #11
 800720e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007212:	bf38      	it	cc
 8007214:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007218:	ea43 0501 	orr.w	r5, r3, r1
 800721c:	f100 0315 	add.w	r3, r0, #21
 8007220:	fa06 f303 	lsl.w	r3, r6, r3
 8007224:	fa22 f20c 	lsr.w	r2, r2, ip
 8007228:	ea43 0402 	orr.w	r4, r3, r2
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007234:	45c1      	cmp	r9, r8
 8007236:	bf2e      	itee	cs
 8007238:	2200      	movcs	r2, #0
 800723a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800723e:	f1a7 0808 	subcc.w	r8, r7, #8
 8007242:	f1b0 030b 	subs.w	r3, r0, #11
 8007246:	d016      	beq.n	8007276 <__b2d+0x9a>
 8007248:	f1c3 0720 	rsb	r7, r3, #32
 800724c:	fa22 f107 	lsr.w	r1, r2, r7
 8007250:	45c8      	cmp	r8, r9
 8007252:	fa06 f603 	lsl.w	r6, r6, r3
 8007256:	ea46 0601 	orr.w	r6, r6, r1
 800725a:	bf94      	ite	ls
 800725c:	2100      	movls	r1, #0
 800725e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007262:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007266:	fa02 f003 	lsl.w	r0, r2, r3
 800726a:	40f9      	lsrs	r1, r7
 800726c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007270:	ea40 0401 	orr.w	r4, r0, r1
 8007274:	e7da      	b.n	800722c <__b2d+0x50>
 8007276:	4614      	mov	r4, r2
 8007278:	ea46 0501 	orr.w	r5, r6, r1
 800727c:	e7d6      	b.n	800722c <__b2d+0x50>
 800727e:	bf00      	nop
 8007280:	3ff00000 	.word	0x3ff00000

08007284 <__d2b>:
 8007284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007288:	2101      	movs	r1, #1
 800728a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800728e:	4690      	mov	r8, r2
 8007290:	461d      	mov	r5, r3
 8007292:	f7ff fc0d 	bl	8006ab0 <_Balloc>
 8007296:	4604      	mov	r4, r0
 8007298:	b930      	cbnz	r0, 80072a8 <__d2b+0x24>
 800729a:	4602      	mov	r2, r0
 800729c:	f240 310a 	movw	r1, #778	; 0x30a
 80072a0:	4b24      	ldr	r3, [pc, #144]	; (8007334 <__d2b+0xb0>)
 80072a2:	4825      	ldr	r0, [pc, #148]	; (8007338 <__d2b+0xb4>)
 80072a4:	f000 fb02 	bl	80078ac <__assert_func>
 80072a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80072ac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80072b0:	bb2d      	cbnz	r5, 80072fe <__d2b+0x7a>
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	f1b8 0300 	subs.w	r3, r8, #0
 80072b8:	d026      	beq.n	8007308 <__d2b+0x84>
 80072ba:	4668      	mov	r0, sp
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	f7ff fd0d 	bl	8006cdc <__lo0bits>
 80072c2:	9900      	ldr	r1, [sp, #0]
 80072c4:	b1f0      	cbz	r0, 8007304 <__d2b+0x80>
 80072c6:	9a01      	ldr	r2, [sp, #4]
 80072c8:	f1c0 0320 	rsb	r3, r0, #32
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	430b      	orrs	r3, r1
 80072d2:	40c2      	lsrs	r2, r0
 80072d4:	6163      	str	r3, [r4, #20]
 80072d6:	9201      	str	r2, [sp, #4]
 80072d8:	9b01      	ldr	r3, [sp, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2102      	movne	r1, #2
 80072e0:	2101      	moveq	r1, #1
 80072e2:	61a3      	str	r3, [r4, #24]
 80072e4:	6121      	str	r1, [r4, #16]
 80072e6:	b1c5      	cbz	r5, 800731a <__d2b+0x96>
 80072e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072ec:	4405      	add	r5, r0
 80072ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072f2:	603d      	str	r5, [r7, #0]
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	4620      	mov	r0, r4
 80072f8:	b002      	add	sp, #8
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007302:	e7d6      	b.n	80072b2 <__d2b+0x2e>
 8007304:	6161      	str	r1, [r4, #20]
 8007306:	e7e7      	b.n	80072d8 <__d2b+0x54>
 8007308:	a801      	add	r0, sp, #4
 800730a:	f7ff fce7 	bl	8006cdc <__lo0bits>
 800730e:	2101      	movs	r1, #1
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	6121      	str	r1, [r4, #16]
 8007314:	6163      	str	r3, [r4, #20]
 8007316:	3020      	adds	r0, #32
 8007318:	e7e5      	b.n	80072e6 <__d2b+0x62>
 800731a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800731e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007322:	6038      	str	r0, [r7, #0]
 8007324:	6918      	ldr	r0, [r3, #16]
 8007326:	f7ff fcb9 	bl	8006c9c <__hi0bits>
 800732a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800732e:	6031      	str	r1, [r6, #0]
 8007330:	e7e1      	b.n	80072f6 <__d2b+0x72>
 8007332:	bf00      	nop
 8007334:	0800973c 	.word	0x0800973c
 8007338:	080097cc 	.word	0x080097cc

0800733c <__ratio>:
 800733c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	4688      	mov	r8, r1
 8007342:	4669      	mov	r1, sp
 8007344:	4681      	mov	r9, r0
 8007346:	f7ff ff49 	bl	80071dc <__b2d>
 800734a:	460f      	mov	r7, r1
 800734c:	4604      	mov	r4, r0
 800734e:	460d      	mov	r5, r1
 8007350:	4640      	mov	r0, r8
 8007352:	a901      	add	r1, sp, #4
 8007354:	f7ff ff42 	bl	80071dc <__b2d>
 8007358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800735c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007360:	468b      	mov	fp, r1
 8007362:	eba3 0c02 	sub.w	ip, r3, r2
 8007366:	e9dd 3200 	ldrd	r3, r2, [sp]
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007370:	2b00      	cmp	r3, #0
 8007372:	bfd5      	itete	le
 8007374:	460a      	movle	r2, r1
 8007376:	462a      	movgt	r2, r5
 8007378:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800737c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007380:	bfd8      	it	le
 8007382:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007386:	465b      	mov	r3, fp
 8007388:	4602      	mov	r2, r0
 800738a:	4639      	mov	r1, r7
 800738c:	4620      	mov	r0, r4
 800738e:	f7f9 f9cd 	bl	800072c <__aeabi_ddiv>
 8007392:	b003      	add	sp, #12
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007398 <__copybits>:
 8007398:	3901      	subs	r1, #1
 800739a:	b570      	push	{r4, r5, r6, lr}
 800739c:	1149      	asrs	r1, r1, #5
 800739e:	6914      	ldr	r4, [r2, #16]
 80073a0:	3101      	adds	r1, #1
 80073a2:	f102 0314 	add.w	r3, r2, #20
 80073a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073ae:	1f05      	subs	r5, r0, #4
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	d30c      	bcc.n	80073ce <__copybits+0x36>
 80073b4:	1aa3      	subs	r3, r4, r2
 80073b6:	3b11      	subs	r3, #17
 80073b8:	f023 0303 	bic.w	r3, r3, #3
 80073bc:	3211      	adds	r2, #17
 80073be:	42a2      	cmp	r2, r4
 80073c0:	bf88      	it	hi
 80073c2:	2300      	movhi	r3, #0
 80073c4:	4418      	add	r0, r3
 80073c6:	2300      	movs	r3, #0
 80073c8:	4288      	cmp	r0, r1
 80073ca:	d305      	bcc.n	80073d8 <__copybits+0x40>
 80073cc:	bd70      	pop	{r4, r5, r6, pc}
 80073ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80073d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80073d6:	e7eb      	b.n	80073b0 <__copybits+0x18>
 80073d8:	f840 3b04 	str.w	r3, [r0], #4
 80073dc:	e7f4      	b.n	80073c8 <__copybits+0x30>

080073de <__any_on>:
 80073de:	f100 0214 	add.w	r2, r0, #20
 80073e2:	6900      	ldr	r0, [r0, #16]
 80073e4:	114b      	asrs	r3, r1, #5
 80073e6:	4298      	cmp	r0, r3
 80073e8:	b510      	push	{r4, lr}
 80073ea:	db11      	blt.n	8007410 <__any_on+0x32>
 80073ec:	dd0a      	ble.n	8007404 <__any_on+0x26>
 80073ee:	f011 011f 	ands.w	r1, r1, #31
 80073f2:	d007      	beq.n	8007404 <__any_on+0x26>
 80073f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073f8:	fa24 f001 	lsr.w	r0, r4, r1
 80073fc:	fa00 f101 	lsl.w	r1, r0, r1
 8007400:	428c      	cmp	r4, r1
 8007402:	d10b      	bne.n	800741c <__any_on+0x3e>
 8007404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007408:	4293      	cmp	r3, r2
 800740a:	d803      	bhi.n	8007414 <__any_on+0x36>
 800740c:	2000      	movs	r0, #0
 800740e:	bd10      	pop	{r4, pc}
 8007410:	4603      	mov	r3, r0
 8007412:	e7f7      	b.n	8007404 <__any_on+0x26>
 8007414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007418:	2900      	cmp	r1, #0
 800741a:	d0f5      	beq.n	8007408 <__any_on+0x2a>
 800741c:	2001      	movs	r0, #1
 800741e:	e7f6      	b.n	800740e <__any_on+0x30>

08007420 <_calloc_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	fb02 f501 	mul.w	r5, r2, r1
 8007426:	4629      	mov	r1, r5
 8007428:	f000 f854 	bl	80074d4 <_malloc_r>
 800742c:	4604      	mov	r4, r0
 800742e:	b118      	cbz	r0, 8007438 <_calloc_r+0x18>
 8007430:	462a      	mov	r2, r5
 8007432:	2100      	movs	r1, #0
 8007434:	f7fc fbec 	bl	8003c10 <memset>
 8007438:	4620      	mov	r0, r4
 800743a:	bd38      	pop	{r3, r4, r5, pc}

0800743c <_free_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4605      	mov	r5, r0
 8007440:	2900      	cmp	r1, #0
 8007442:	d043      	beq.n	80074cc <_free_r+0x90>
 8007444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007448:	1f0c      	subs	r4, r1, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfb8      	it	lt
 800744e:	18e4      	addlt	r4, r4, r3
 8007450:	f000 fa76 	bl	8007940 <__malloc_lock>
 8007454:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <_free_r+0x94>)
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	4610      	mov	r0, r2
 800745a:	b933      	cbnz	r3, 800746a <_free_r+0x2e>
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	6014      	str	r4, [r2, #0]
 8007460:	4628      	mov	r0, r5
 8007462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007466:	f000 ba71 	b.w	800794c <__malloc_unlock>
 800746a:	42a3      	cmp	r3, r4
 800746c:	d90a      	bls.n	8007484 <_free_r+0x48>
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	1862      	adds	r2, r4, r1
 8007472:	4293      	cmp	r3, r2
 8007474:	bf01      	itttt	eq
 8007476:	681a      	ldreq	r2, [r3, #0]
 8007478:	685b      	ldreq	r3, [r3, #4]
 800747a:	1852      	addeq	r2, r2, r1
 800747c:	6022      	streq	r2, [r4, #0]
 800747e:	6063      	str	r3, [r4, #4]
 8007480:	6004      	str	r4, [r0, #0]
 8007482:	e7ed      	b.n	8007460 <_free_r+0x24>
 8007484:	461a      	mov	r2, r3
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	b10b      	cbz	r3, 800748e <_free_r+0x52>
 800748a:	42a3      	cmp	r3, r4
 800748c:	d9fa      	bls.n	8007484 <_free_r+0x48>
 800748e:	6811      	ldr	r1, [r2, #0]
 8007490:	1850      	adds	r0, r2, r1
 8007492:	42a0      	cmp	r0, r4
 8007494:	d10b      	bne.n	80074ae <_free_r+0x72>
 8007496:	6820      	ldr	r0, [r4, #0]
 8007498:	4401      	add	r1, r0
 800749a:	1850      	adds	r0, r2, r1
 800749c:	4283      	cmp	r3, r0
 800749e:	6011      	str	r1, [r2, #0]
 80074a0:	d1de      	bne.n	8007460 <_free_r+0x24>
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4401      	add	r1, r0
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	6053      	str	r3, [r2, #4]
 80074ac:	e7d8      	b.n	8007460 <_free_r+0x24>
 80074ae:	d902      	bls.n	80074b6 <_free_r+0x7a>
 80074b0:	230c      	movs	r3, #12
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	e7d4      	b.n	8007460 <_free_r+0x24>
 80074b6:	6820      	ldr	r0, [r4, #0]
 80074b8:	1821      	adds	r1, r4, r0
 80074ba:	428b      	cmp	r3, r1
 80074bc:	bf01      	itttt	eq
 80074be:	6819      	ldreq	r1, [r3, #0]
 80074c0:	685b      	ldreq	r3, [r3, #4]
 80074c2:	1809      	addeq	r1, r1, r0
 80074c4:	6021      	streq	r1, [r4, #0]
 80074c6:	6063      	str	r3, [r4, #4]
 80074c8:	6054      	str	r4, [r2, #4]
 80074ca:	e7c9      	b.n	8007460 <_free_r+0x24>
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	20003404 	.word	0x20003404

080074d4 <_malloc_r>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	1ccd      	adds	r5, r1, #3
 80074d8:	f025 0503 	bic.w	r5, r5, #3
 80074dc:	3508      	adds	r5, #8
 80074de:	2d0c      	cmp	r5, #12
 80074e0:	bf38      	it	cc
 80074e2:	250c      	movcc	r5, #12
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	4606      	mov	r6, r0
 80074e8:	db01      	blt.n	80074ee <_malloc_r+0x1a>
 80074ea:	42a9      	cmp	r1, r5
 80074ec:	d903      	bls.n	80074f6 <_malloc_r+0x22>
 80074ee:	230c      	movs	r3, #12
 80074f0:	6033      	str	r3, [r6, #0]
 80074f2:	2000      	movs	r0, #0
 80074f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f6:	f000 fa23 	bl	8007940 <__malloc_lock>
 80074fa:	4921      	ldr	r1, [pc, #132]	; (8007580 <_malloc_r+0xac>)
 80074fc:	680a      	ldr	r2, [r1, #0]
 80074fe:	4614      	mov	r4, r2
 8007500:	b99c      	cbnz	r4, 800752a <_malloc_r+0x56>
 8007502:	4f20      	ldr	r7, [pc, #128]	; (8007584 <_malloc_r+0xb0>)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b923      	cbnz	r3, 8007512 <_malloc_r+0x3e>
 8007508:	4621      	mov	r1, r4
 800750a:	4630      	mov	r0, r6
 800750c:	f000 f99e 	bl	800784c <_sbrk_r>
 8007510:	6038      	str	r0, [r7, #0]
 8007512:	4629      	mov	r1, r5
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f999 	bl	800784c <_sbrk_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d123      	bne.n	8007566 <_malloc_r+0x92>
 800751e:	230c      	movs	r3, #12
 8007520:	4630      	mov	r0, r6
 8007522:	6033      	str	r3, [r6, #0]
 8007524:	f000 fa12 	bl	800794c <__malloc_unlock>
 8007528:	e7e3      	b.n	80074f2 <_malloc_r+0x1e>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	1b5b      	subs	r3, r3, r5
 800752e:	d417      	bmi.n	8007560 <_malloc_r+0x8c>
 8007530:	2b0b      	cmp	r3, #11
 8007532:	d903      	bls.n	800753c <_malloc_r+0x68>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	441c      	add	r4, r3
 8007538:	6025      	str	r5, [r4, #0]
 800753a:	e004      	b.n	8007546 <_malloc_r+0x72>
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	42a2      	cmp	r2, r4
 8007540:	bf0c      	ite	eq
 8007542:	600b      	streq	r3, [r1, #0]
 8007544:	6053      	strne	r3, [r2, #4]
 8007546:	4630      	mov	r0, r6
 8007548:	f000 fa00 	bl	800794c <__malloc_unlock>
 800754c:	f104 000b 	add.w	r0, r4, #11
 8007550:	1d23      	adds	r3, r4, #4
 8007552:	f020 0007 	bic.w	r0, r0, #7
 8007556:	1ac2      	subs	r2, r0, r3
 8007558:	d0cc      	beq.n	80074f4 <_malloc_r+0x20>
 800755a:	1a1b      	subs	r3, r3, r0
 800755c:	50a3      	str	r3, [r4, r2]
 800755e:	e7c9      	b.n	80074f4 <_malloc_r+0x20>
 8007560:	4622      	mov	r2, r4
 8007562:	6864      	ldr	r4, [r4, #4]
 8007564:	e7cc      	b.n	8007500 <_malloc_r+0x2c>
 8007566:	1cc4      	adds	r4, r0, #3
 8007568:	f024 0403 	bic.w	r4, r4, #3
 800756c:	42a0      	cmp	r0, r4
 800756e:	d0e3      	beq.n	8007538 <_malloc_r+0x64>
 8007570:	1a21      	subs	r1, r4, r0
 8007572:	4630      	mov	r0, r6
 8007574:	f000 f96a 	bl	800784c <_sbrk_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d1dd      	bne.n	8007538 <_malloc_r+0x64>
 800757c:	e7cf      	b.n	800751e <_malloc_r+0x4a>
 800757e:	bf00      	nop
 8007580:	20003404 	.word	0x20003404
 8007584:	20003408 	.word	0x20003408

08007588 <__ssputs_r>:
 8007588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	688e      	ldr	r6, [r1, #8]
 800758e:	4682      	mov	sl, r0
 8007590:	429e      	cmp	r6, r3
 8007592:	460c      	mov	r4, r1
 8007594:	4690      	mov	r8, r2
 8007596:	461f      	mov	r7, r3
 8007598:	d838      	bhi.n	800760c <__ssputs_r+0x84>
 800759a:	898a      	ldrh	r2, [r1, #12]
 800759c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075a0:	d032      	beq.n	8007608 <__ssputs_r+0x80>
 80075a2:	6825      	ldr	r5, [r4, #0]
 80075a4:	6909      	ldr	r1, [r1, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	eba5 0901 	sub.w	r9, r5, r1
 80075ac:	6965      	ldr	r5, [r4, #20]
 80075ae:	444b      	add	r3, r9
 80075b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075b8:	106d      	asrs	r5, r5, #1
 80075ba:	429d      	cmp	r5, r3
 80075bc:	bf38      	it	cc
 80075be:	461d      	movcc	r5, r3
 80075c0:	0553      	lsls	r3, r2, #21
 80075c2:	d531      	bpl.n	8007628 <__ssputs_r+0xa0>
 80075c4:	4629      	mov	r1, r5
 80075c6:	f7ff ff85 	bl	80074d4 <_malloc_r>
 80075ca:	4606      	mov	r6, r0
 80075cc:	b950      	cbnz	r0, 80075e4 <__ssputs_r+0x5c>
 80075ce:	230c      	movs	r3, #12
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d4:	f8ca 3000 	str.w	r3, [sl]
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e4:	464a      	mov	r2, r9
 80075e6:	6921      	ldr	r1, [r4, #16]
 80075e8:	f7fc fb04 	bl	8003bf4 <memcpy>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	6126      	str	r6, [r4, #16]
 80075fa:	444e      	add	r6, r9
 80075fc:	6026      	str	r6, [r4, #0]
 80075fe:	463e      	mov	r6, r7
 8007600:	6165      	str	r5, [r4, #20]
 8007602:	eba5 0509 	sub.w	r5, r5, r9
 8007606:	60a5      	str	r5, [r4, #8]
 8007608:	42be      	cmp	r6, r7
 800760a:	d900      	bls.n	800760e <__ssputs_r+0x86>
 800760c:	463e      	mov	r6, r7
 800760e:	4632      	mov	r2, r6
 8007610:	4641      	mov	r1, r8
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	f000 f97a 	bl	800790c <memmove>
 8007618:	68a3      	ldr	r3, [r4, #8]
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	1b9b      	subs	r3, r3, r6
 800761e:	4432      	add	r2, r6
 8007620:	2000      	movs	r0, #0
 8007622:	60a3      	str	r3, [r4, #8]
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	e7db      	b.n	80075e0 <__ssputs_r+0x58>
 8007628:	462a      	mov	r2, r5
 800762a:	f000 f995 	bl	8007958 <_realloc_r>
 800762e:	4606      	mov	r6, r0
 8007630:	2800      	cmp	r0, #0
 8007632:	d1e1      	bne.n	80075f8 <__ssputs_r+0x70>
 8007634:	4650      	mov	r0, sl
 8007636:	6921      	ldr	r1, [r4, #16]
 8007638:	f7ff ff00 	bl	800743c <_free_r>
 800763c:	e7c7      	b.n	80075ce <__ssputs_r+0x46>
	...

08007640 <_svfiprintf_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	4698      	mov	r8, r3
 8007646:	898b      	ldrh	r3, [r1, #12]
 8007648:	4607      	mov	r7, r0
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	460d      	mov	r5, r1
 800764e:	4614      	mov	r4, r2
 8007650:	b09d      	sub	sp, #116	; 0x74
 8007652:	d50e      	bpl.n	8007672 <_svfiprintf_r+0x32>
 8007654:	690b      	ldr	r3, [r1, #16]
 8007656:	b963      	cbnz	r3, 8007672 <_svfiprintf_r+0x32>
 8007658:	2140      	movs	r1, #64	; 0x40
 800765a:	f7ff ff3b 	bl	80074d4 <_malloc_r>
 800765e:	6028      	str	r0, [r5, #0]
 8007660:	6128      	str	r0, [r5, #16]
 8007662:	b920      	cbnz	r0, 800766e <_svfiprintf_r+0x2e>
 8007664:	230c      	movs	r3, #12
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800766c:	e0d1      	b.n	8007812 <_svfiprintf_r+0x1d2>
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	616b      	str	r3, [r5, #20]
 8007672:	2300      	movs	r3, #0
 8007674:	9309      	str	r3, [sp, #36]	; 0x24
 8007676:	2320      	movs	r3, #32
 8007678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	f04f 0901 	mov.w	r9, #1
 8007682:	f8cd 800c 	str.w	r8, [sp, #12]
 8007686:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800782c <_svfiprintf_r+0x1ec>
 800768a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800768e:	4623      	mov	r3, r4
 8007690:	469a      	mov	sl, r3
 8007692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007696:	b10a      	cbz	r2, 800769c <_svfiprintf_r+0x5c>
 8007698:	2a25      	cmp	r2, #37	; 0x25
 800769a:	d1f9      	bne.n	8007690 <_svfiprintf_r+0x50>
 800769c:	ebba 0b04 	subs.w	fp, sl, r4
 80076a0:	d00b      	beq.n	80076ba <_svfiprintf_r+0x7a>
 80076a2:	465b      	mov	r3, fp
 80076a4:	4622      	mov	r2, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ff6d 	bl	8007588 <__ssputs_r>
 80076ae:	3001      	adds	r0, #1
 80076b0:	f000 80aa 	beq.w	8007808 <_svfiprintf_r+0x1c8>
 80076b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b6:	445a      	add	r2, fp
 80076b8:	9209      	str	r2, [sp, #36]	; 0x24
 80076ba:	f89a 3000 	ldrb.w	r3, [sl]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 80a2 	beq.w	8007808 <_svfiprintf_r+0x1c8>
 80076c4:	2300      	movs	r3, #0
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ce:	f10a 0a01 	add.w	sl, sl, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	9307      	str	r3, [sp, #28]
 80076d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076da:	931a      	str	r3, [sp, #104]	; 0x68
 80076dc:	4654      	mov	r4, sl
 80076de:	2205      	movs	r2, #5
 80076e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e4:	4851      	ldr	r0, [pc, #324]	; (800782c <_svfiprintf_r+0x1ec>)
 80076e6:	f7ff f9d5 	bl	8006a94 <memchr>
 80076ea:	9a04      	ldr	r2, [sp, #16]
 80076ec:	b9d8      	cbnz	r0, 8007726 <_svfiprintf_r+0xe6>
 80076ee:	06d0      	lsls	r0, r2, #27
 80076f0:	bf44      	itt	mi
 80076f2:	2320      	movmi	r3, #32
 80076f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f8:	0711      	lsls	r1, r2, #28
 80076fa:	bf44      	itt	mi
 80076fc:	232b      	movmi	r3, #43	; 0x2b
 80076fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007702:	f89a 3000 	ldrb.w	r3, [sl]
 8007706:	2b2a      	cmp	r3, #42	; 0x2a
 8007708:	d015      	beq.n	8007736 <_svfiprintf_r+0xf6>
 800770a:	4654      	mov	r4, sl
 800770c:	2000      	movs	r0, #0
 800770e:	f04f 0c0a 	mov.w	ip, #10
 8007712:	9a07      	ldr	r2, [sp, #28]
 8007714:	4621      	mov	r1, r4
 8007716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800771a:	3b30      	subs	r3, #48	; 0x30
 800771c:	2b09      	cmp	r3, #9
 800771e:	d94e      	bls.n	80077be <_svfiprintf_r+0x17e>
 8007720:	b1b0      	cbz	r0, 8007750 <_svfiprintf_r+0x110>
 8007722:	9207      	str	r2, [sp, #28]
 8007724:	e014      	b.n	8007750 <_svfiprintf_r+0x110>
 8007726:	eba0 0308 	sub.w	r3, r0, r8
 800772a:	fa09 f303 	lsl.w	r3, r9, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	46a2      	mov	sl, r4
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	e7d2      	b.n	80076dc <_svfiprintf_r+0x9c>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	1d19      	adds	r1, r3, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	9103      	str	r1, [sp, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfbb      	ittet	lt
 8007742:	425b      	neglt	r3, r3
 8007744:	f042 0202 	orrlt.w	r2, r2, #2
 8007748:	9307      	strge	r3, [sp, #28]
 800774a:	9307      	strlt	r3, [sp, #28]
 800774c:	bfb8      	it	lt
 800774e:	9204      	strlt	r2, [sp, #16]
 8007750:	7823      	ldrb	r3, [r4, #0]
 8007752:	2b2e      	cmp	r3, #46	; 0x2e
 8007754:	d10c      	bne.n	8007770 <_svfiprintf_r+0x130>
 8007756:	7863      	ldrb	r3, [r4, #1]
 8007758:	2b2a      	cmp	r3, #42	; 0x2a
 800775a:	d135      	bne.n	80077c8 <_svfiprintf_r+0x188>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	3402      	adds	r4, #2
 8007760:	1d1a      	adds	r2, r3, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	9203      	str	r2, [sp, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	bfb8      	it	lt
 800776a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800776e:	9305      	str	r3, [sp, #20]
 8007770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800783c <_svfiprintf_r+0x1fc>
 8007774:	2203      	movs	r2, #3
 8007776:	4650      	mov	r0, sl
 8007778:	7821      	ldrb	r1, [r4, #0]
 800777a:	f7ff f98b 	bl	8006a94 <memchr>
 800777e:	b140      	cbz	r0, 8007792 <_svfiprintf_r+0x152>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	eba0 000a 	sub.w	r0, r0, sl
 8007786:	fa03 f000 	lsl.w	r0, r3, r0
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	3401      	adds	r4, #1
 800778e:	4303      	orrs	r3, r0
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007796:	2206      	movs	r2, #6
 8007798:	4825      	ldr	r0, [pc, #148]	; (8007830 <_svfiprintf_r+0x1f0>)
 800779a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800779e:	f7ff f979 	bl	8006a94 <memchr>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d038      	beq.n	8007818 <_svfiprintf_r+0x1d8>
 80077a6:	4b23      	ldr	r3, [pc, #140]	; (8007834 <_svfiprintf_r+0x1f4>)
 80077a8:	bb1b      	cbnz	r3, 80077f2 <_svfiprintf_r+0x1b2>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	3307      	adds	r3, #7
 80077ae:	f023 0307 	bic.w	r3, r3, #7
 80077b2:	3308      	adds	r3, #8
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b8:	4433      	add	r3, r6
 80077ba:	9309      	str	r3, [sp, #36]	; 0x24
 80077bc:	e767      	b.n	800768e <_svfiprintf_r+0x4e>
 80077be:	460c      	mov	r4, r1
 80077c0:	2001      	movs	r0, #1
 80077c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c6:	e7a5      	b.n	8007714 <_svfiprintf_r+0xd4>
 80077c8:	2300      	movs	r3, #0
 80077ca:	f04f 0c0a 	mov.w	ip, #10
 80077ce:	4619      	mov	r1, r3
 80077d0:	3401      	adds	r4, #1
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	4620      	mov	r0, r4
 80077d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077da:	3a30      	subs	r2, #48	; 0x30
 80077dc:	2a09      	cmp	r2, #9
 80077de:	d903      	bls.n	80077e8 <_svfiprintf_r+0x1a8>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0c5      	beq.n	8007770 <_svfiprintf_r+0x130>
 80077e4:	9105      	str	r1, [sp, #20]
 80077e6:	e7c3      	b.n	8007770 <_svfiprintf_r+0x130>
 80077e8:	4604      	mov	r4, r0
 80077ea:	2301      	movs	r3, #1
 80077ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f0:	e7f0      	b.n	80077d4 <_svfiprintf_r+0x194>
 80077f2:	ab03      	add	r3, sp, #12
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	462a      	mov	r2, r5
 80077f8:	4638      	mov	r0, r7
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <_svfiprintf_r+0x1f8>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	f7fc faad 	bl	8003d5c <_printf_float>
 8007802:	1c42      	adds	r2, r0, #1
 8007804:	4606      	mov	r6, r0
 8007806:	d1d6      	bne.n	80077b6 <_svfiprintf_r+0x176>
 8007808:	89ab      	ldrh	r3, [r5, #12]
 800780a:	065b      	lsls	r3, r3, #25
 800780c:	f53f af2c 	bmi.w	8007668 <_svfiprintf_r+0x28>
 8007810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007812:	b01d      	add	sp, #116	; 0x74
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	ab03      	add	r3, sp, #12
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	462a      	mov	r2, r5
 800781e:	4638      	mov	r0, r7
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <_svfiprintf_r+0x1f8>)
 8007822:	a904      	add	r1, sp, #16
 8007824:	f7fc fd36 	bl	8004294 <_printf_i>
 8007828:	e7eb      	b.n	8007802 <_svfiprintf_r+0x1c2>
 800782a:	bf00      	nop
 800782c:	0800992c 	.word	0x0800992c
 8007830:	08009936 	.word	0x08009936
 8007834:	08003d5d 	.word	0x08003d5d
 8007838:	08007589 	.word	0x08007589
 800783c:	08009932 	.word	0x08009932

08007840 <nan>:
 8007840:	2000      	movs	r0, #0
 8007842:	4901      	ldr	r1, [pc, #4]	; (8007848 <nan+0x8>)
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	7ff80000 	.word	0x7ff80000

0800784c <_sbrk_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	2300      	movs	r3, #0
 8007850:	4d05      	ldr	r5, [pc, #20]	; (8007868 <_sbrk_r+0x1c>)
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7fc f958 	bl	8003b0c <_sbrk>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_sbrk_r+0x1a>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_sbrk_r+0x1a>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	2000343c 	.word	0x2000343c

0800786c <strncmp>:
 800786c:	b510      	push	{r4, lr}
 800786e:	b16a      	cbz	r2, 800788c <strncmp+0x20>
 8007870:	3901      	subs	r1, #1
 8007872:	1884      	adds	r4, r0, r2
 8007874:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007878:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800787c:	4293      	cmp	r3, r2
 800787e:	d103      	bne.n	8007888 <strncmp+0x1c>
 8007880:	42a0      	cmp	r0, r4
 8007882:	d001      	beq.n	8007888 <strncmp+0x1c>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f5      	bne.n	8007874 <strncmp+0x8>
 8007888:	1a98      	subs	r0, r3, r2
 800788a:	bd10      	pop	{r4, pc}
 800788c:	4610      	mov	r0, r2
 800788e:	e7fc      	b.n	800788a <strncmp+0x1e>

08007890 <__ascii_wctomb>:
 8007890:	4603      	mov	r3, r0
 8007892:	4608      	mov	r0, r1
 8007894:	b141      	cbz	r1, 80078a8 <__ascii_wctomb+0x18>
 8007896:	2aff      	cmp	r2, #255	; 0xff
 8007898:	d904      	bls.n	80078a4 <__ascii_wctomb+0x14>
 800789a:	228a      	movs	r2, #138	; 0x8a
 800789c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	4770      	bx	lr
 80078a4:	2001      	movs	r0, #1
 80078a6:	700a      	strb	r2, [r1, #0]
 80078a8:	4770      	bx	lr
	...

080078ac <__assert_func>:
 80078ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ae:	4614      	mov	r4, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <__assert_func+0x2c>)
 80078b4:	4605      	mov	r5, r0
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68d8      	ldr	r0, [r3, #12]
 80078ba:	b14c      	cbz	r4, 80078d0 <__assert_func+0x24>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <__assert_func+0x30>)
 80078be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078c2:	9100      	str	r1, [sp, #0]
 80078c4:	462b      	mov	r3, r5
 80078c6:	4906      	ldr	r1, [pc, #24]	; (80078e0 <__assert_func+0x34>)
 80078c8:	f000 f80e 	bl	80078e8 <fiprintf>
 80078cc:	f000 fa82 	bl	8007dd4 <abort>
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <__assert_func+0x38>)
 80078d2:	461c      	mov	r4, r3
 80078d4:	e7f3      	b.n	80078be <__assert_func+0x12>
 80078d6:	bf00      	nop
 80078d8:	20000020 	.word	0x20000020
 80078dc:	0800993d 	.word	0x0800993d
 80078e0:	0800994a 	.word	0x0800994a
 80078e4:	080094c3 	.word	0x080094c3

080078e8 <fiprintf>:
 80078e8:	b40e      	push	{r1, r2, r3}
 80078ea:	b503      	push	{r0, r1, lr}
 80078ec:	4601      	mov	r1, r0
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <fiprintf+0x20>)
 80078f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	f000 f87b 	bl	80079f4 <_vfiprintf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	f85d eb04 	ldr.w	lr, [sp], #4
 8007904:	b003      	add	sp, #12
 8007906:	4770      	bx	lr
 8007908:	20000020 	.word	0x20000020

0800790c <memmove>:
 800790c:	4288      	cmp	r0, r1
 800790e:	b510      	push	{r4, lr}
 8007910:	eb01 0402 	add.w	r4, r1, r2
 8007914:	d902      	bls.n	800791c <memmove+0x10>
 8007916:	4284      	cmp	r4, r0
 8007918:	4623      	mov	r3, r4
 800791a:	d807      	bhi.n	800792c <memmove+0x20>
 800791c:	1e43      	subs	r3, r0, #1
 800791e:	42a1      	cmp	r1, r4
 8007920:	d008      	beq.n	8007934 <memmove+0x28>
 8007922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800792a:	e7f8      	b.n	800791e <memmove+0x12>
 800792c:	4601      	mov	r1, r0
 800792e:	4402      	add	r2, r0
 8007930:	428a      	cmp	r2, r1
 8007932:	d100      	bne.n	8007936 <memmove+0x2a>
 8007934:	bd10      	pop	{r4, pc}
 8007936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800793a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800793e:	e7f7      	b.n	8007930 <memmove+0x24>

08007940 <__malloc_lock>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__malloc_lock+0x8>)
 8007942:	f000 bc07 	b.w	8008154 <__retarget_lock_acquire_recursive>
 8007946:	bf00      	nop
 8007948:	20003444 	.word	0x20003444

0800794c <__malloc_unlock>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__malloc_unlock+0x8>)
 800794e:	f000 bc02 	b.w	8008156 <__retarget_lock_release_recursive>
 8007952:	bf00      	nop
 8007954:	20003444 	.word	0x20003444

08007958 <_realloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4607      	mov	r7, r0
 800795c:	4614      	mov	r4, r2
 800795e:	460e      	mov	r6, r1
 8007960:	b921      	cbnz	r1, 800796c <_realloc_r+0x14>
 8007962:	4611      	mov	r1, r2
 8007964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007968:	f7ff bdb4 	b.w	80074d4 <_malloc_r>
 800796c:	b922      	cbnz	r2, 8007978 <_realloc_r+0x20>
 800796e:	f7ff fd65 	bl	800743c <_free_r>
 8007972:	4625      	mov	r5, r4
 8007974:	4628      	mov	r0, r5
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	f000 fc52 	bl	8008220 <_malloc_usable_size_r>
 800797c:	42a0      	cmp	r0, r4
 800797e:	d20f      	bcs.n	80079a0 <_realloc_r+0x48>
 8007980:	4621      	mov	r1, r4
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff fda6 	bl	80074d4 <_malloc_r>
 8007988:	4605      	mov	r5, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d0f2      	beq.n	8007974 <_realloc_r+0x1c>
 800798e:	4631      	mov	r1, r6
 8007990:	4622      	mov	r2, r4
 8007992:	f7fc f92f 	bl	8003bf4 <memcpy>
 8007996:	4631      	mov	r1, r6
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff fd4f 	bl	800743c <_free_r>
 800799e:	e7e9      	b.n	8007974 <_realloc_r+0x1c>
 80079a0:	4635      	mov	r5, r6
 80079a2:	e7e7      	b.n	8007974 <_realloc_r+0x1c>

080079a4 <__sfputc_r>:
 80079a4:	6893      	ldr	r3, [r2, #8]
 80079a6:	b410      	push	{r4}
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	6093      	str	r3, [r2, #8]
 80079ae:	da07      	bge.n	80079c0 <__sfputc_r+0x1c>
 80079b0:	6994      	ldr	r4, [r2, #24]
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	db01      	blt.n	80079ba <__sfputc_r+0x16>
 80079b6:	290a      	cmp	r1, #10
 80079b8:	d102      	bne.n	80079c0 <__sfputc_r+0x1c>
 80079ba:	bc10      	pop	{r4}
 80079bc:	f000 b94a 	b.w	8007c54 <__swbuf_r>
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	1c58      	adds	r0, r3, #1
 80079c4:	6010      	str	r0, [r2, #0]
 80079c6:	7019      	strb	r1, [r3, #0]
 80079c8:	4608      	mov	r0, r1
 80079ca:	bc10      	pop	{r4}
 80079cc:	4770      	bx	lr

080079ce <__sfputs_r>:
 80079ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d0:	4606      	mov	r6, r0
 80079d2:	460f      	mov	r7, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	18d5      	adds	r5, r2, r3
 80079d8:	42ac      	cmp	r4, r5
 80079da:	d101      	bne.n	80079e0 <__sfputs_r+0x12>
 80079dc:	2000      	movs	r0, #0
 80079de:	e007      	b.n	80079f0 <__sfputs_r+0x22>
 80079e0:	463a      	mov	r2, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	f7ff ffdc 	bl	80079a4 <__sfputc_r>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d1f3      	bne.n	80079d8 <__sfputs_r+0xa>
 80079f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079f4 <_vfiprintf_r>:
 80079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	460d      	mov	r5, r1
 80079fa:	4614      	mov	r4, r2
 80079fc:	4698      	mov	r8, r3
 80079fe:	4606      	mov	r6, r0
 8007a00:	b09d      	sub	sp, #116	; 0x74
 8007a02:	b118      	cbz	r0, 8007a0c <_vfiprintf_r+0x18>
 8007a04:	6983      	ldr	r3, [r0, #24]
 8007a06:	b90b      	cbnz	r3, 8007a0c <_vfiprintf_r+0x18>
 8007a08:	f000 fb06 	bl	8008018 <__sinit>
 8007a0c:	4b89      	ldr	r3, [pc, #548]	; (8007c34 <_vfiprintf_r+0x240>)
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	d11b      	bne.n	8007a4a <_vfiprintf_r+0x56>
 8007a12:	6875      	ldr	r5, [r6, #4]
 8007a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a16:	07d9      	lsls	r1, r3, #31
 8007a18:	d405      	bmi.n	8007a26 <_vfiprintf_r+0x32>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	059a      	lsls	r2, r3, #22
 8007a1e:	d402      	bmi.n	8007a26 <_vfiprintf_r+0x32>
 8007a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a22:	f000 fb97 	bl	8008154 <__retarget_lock_acquire_recursive>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	071b      	lsls	r3, r3, #28
 8007a2a:	d501      	bpl.n	8007a30 <_vfiprintf_r+0x3c>
 8007a2c:	692b      	ldr	r3, [r5, #16]
 8007a2e:	b9eb      	cbnz	r3, 8007a6c <_vfiprintf_r+0x78>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f960 	bl	8007cf8 <__swsetup_r>
 8007a38:	b1c0      	cbz	r0, 8007a6c <_vfiprintf_r+0x78>
 8007a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a3c:	07dc      	lsls	r4, r3, #31
 8007a3e:	d50e      	bpl.n	8007a5e <_vfiprintf_r+0x6a>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a44:	b01d      	add	sp, #116	; 0x74
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <_vfiprintf_r+0x244>)
 8007a4c:	429d      	cmp	r5, r3
 8007a4e:	d101      	bne.n	8007a54 <_vfiprintf_r+0x60>
 8007a50:	68b5      	ldr	r5, [r6, #8]
 8007a52:	e7df      	b.n	8007a14 <_vfiprintf_r+0x20>
 8007a54:	4b79      	ldr	r3, [pc, #484]	; (8007c3c <_vfiprintf_r+0x248>)
 8007a56:	429d      	cmp	r5, r3
 8007a58:	bf08      	it	eq
 8007a5a:	68f5      	ldreq	r5, [r6, #12]
 8007a5c:	e7da      	b.n	8007a14 <_vfiprintf_r+0x20>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	0598      	lsls	r0, r3, #22
 8007a62:	d4ed      	bmi.n	8007a40 <_vfiprintf_r+0x4c>
 8007a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a66:	f000 fb76 	bl	8008156 <__retarget_lock_release_recursive>
 8007a6a:	e7e9      	b.n	8007a40 <_vfiprintf_r+0x4c>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a70:	2320      	movs	r3, #32
 8007a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a76:	2330      	movs	r3, #48	; 0x30
 8007a78:	f04f 0901 	mov.w	r9, #1
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c40 <_vfiprintf_r+0x24c>
 8007a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a88:	4623      	mov	r3, r4
 8007a8a:	469a      	mov	sl, r3
 8007a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a90:	b10a      	cbz	r2, 8007a96 <_vfiprintf_r+0xa2>
 8007a92:	2a25      	cmp	r2, #37	; 0x25
 8007a94:	d1f9      	bne.n	8007a8a <_vfiprintf_r+0x96>
 8007a96:	ebba 0b04 	subs.w	fp, sl, r4
 8007a9a:	d00b      	beq.n	8007ab4 <_vfiprintf_r+0xc0>
 8007a9c:	465b      	mov	r3, fp
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff93 	bl	80079ce <__sfputs_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f000 80aa 	beq.w	8007c02 <_vfiprintf_r+0x20e>
 8007aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab0:	445a      	add	r2, fp
 8007ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80a2 	beq.w	8007c02 <_vfiprintf_r+0x20e>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac8:	f10a 0a01 	add.w	sl, sl, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad6:	4654      	mov	r4, sl
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ade:	4858      	ldr	r0, [pc, #352]	; (8007c40 <_vfiprintf_r+0x24c>)
 8007ae0:	f7fe ffd8 	bl	8006a94 <memchr>
 8007ae4:	9a04      	ldr	r2, [sp, #16]
 8007ae6:	b9d8      	cbnz	r0, 8007b20 <_vfiprintf_r+0x12c>
 8007ae8:	06d1      	lsls	r1, r2, #27
 8007aea:	bf44      	itt	mi
 8007aec:	2320      	movmi	r3, #32
 8007aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af2:	0713      	lsls	r3, r2, #28
 8007af4:	bf44      	itt	mi
 8007af6:	232b      	movmi	r3, #43	; 0x2b
 8007af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afc:	f89a 3000 	ldrb.w	r3, [sl]
 8007b00:	2b2a      	cmp	r3, #42	; 0x2a
 8007b02:	d015      	beq.n	8007b30 <_vfiprintf_r+0x13c>
 8007b04:	4654      	mov	r4, sl
 8007b06:	2000      	movs	r0, #0
 8007b08:	f04f 0c0a 	mov.w	ip, #10
 8007b0c:	9a07      	ldr	r2, [sp, #28]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b14:	3b30      	subs	r3, #48	; 0x30
 8007b16:	2b09      	cmp	r3, #9
 8007b18:	d94e      	bls.n	8007bb8 <_vfiprintf_r+0x1c4>
 8007b1a:	b1b0      	cbz	r0, 8007b4a <_vfiprintf_r+0x156>
 8007b1c:	9207      	str	r2, [sp, #28]
 8007b1e:	e014      	b.n	8007b4a <_vfiprintf_r+0x156>
 8007b20:	eba0 0308 	sub.w	r3, r0, r8
 8007b24:	fa09 f303 	lsl.w	r3, r9, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	46a2      	mov	sl, r4
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	e7d2      	b.n	8007ad6 <_vfiprintf_r+0xe2>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	1d19      	adds	r1, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9103      	str	r1, [sp, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfbb      	ittet	lt
 8007b3c:	425b      	neglt	r3, r3
 8007b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b42:	9307      	strge	r3, [sp, #28]
 8007b44:	9307      	strlt	r3, [sp, #28]
 8007b46:	bfb8      	it	lt
 8007b48:	9204      	strlt	r2, [sp, #16]
 8007b4a:	7823      	ldrb	r3, [r4, #0]
 8007b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b4e:	d10c      	bne.n	8007b6a <_vfiprintf_r+0x176>
 8007b50:	7863      	ldrb	r3, [r4, #1]
 8007b52:	2b2a      	cmp	r3, #42	; 0x2a
 8007b54:	d135      	bne.n	8007bc2 <_vfiprintf_r+0x1ce>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3402      	adds	r4, #2
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9203      	str	r2, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfb8      	it	lt
 8007b64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c50 <_vfiprintf_r+0x25c>
 8007b6e:	2203      	movs	r2, #3
 8007b70:	4650      	mov	r0, sl
 8007b72:	7821      	ldrb	r1, [r4, #0]
 8007b74:	f7fe ff8e 	bl	8006a94 <memchr>
 8007b78:	b140      	cbz	r0, 8007b8c <_vfiprintf_r+0x198>
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	eba0 000a 	sub.w	r0, r0, sl
 8007b80:	fa03 f000 	lsl.w	r0, r3, r0
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	3401      	adds	r4, #1
 8007b88:	4303      	orrs	r3, r0
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	2206      	movs	r2, #6
 8007b92:	482c      	ldr	r0, [pc, #176]	; (8007c44 <_vfiprintf_r+0x250>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b98:	f7fe ff7c 	bl	8006a94 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d03f      	beq.n	8007c20 <_vfiprintf_r+0x22c>
 8007ba0:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <_vfiprintf_r+0x254>)
 8007ba2:	bb1b      	cbnz	r3, 8007bec <_vfiprintf_r+0x1f8>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb2:	443b      	add	r3, r7
 8007bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb6:	e767      	b.n	8007a88 <_vfiprintf_r+0x94>
 8007bb8:	460c      	mov	r4, r1
 8007bba:	2001      	movs	r0, #1
 8007bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc0:	e7a5      	b.n	8007b0e <_vfiprintf_r+0x11a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f04f 0c0a 	mov.w	ip, #10
 8007bc8:	4619      	mov	r1, r3
 8007bca:	3401      	adds	r4, #1
 8007bcc:	9305      	str	r3, [sp, #20]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	; 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_vfiprintf_r+0x1ee>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c5      	beq.n	8007b6a <_vfiprintf_r+0x176>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c3      	b.n	8007b6a <_vfiprintf_r+0x176>
 8007be2:	4604      	mov	r4, r0
 8007be4:	2301      	movs	r3, #1
 8007be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bea:	e7f0      	b.n	8007bce <_vfiprintf_r+0x1da>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <_vfiprintf_r+0x258>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	f7fc f8b0 	bl	8003d5c <_printf_float>
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	1c78      	adds	r0, r7, #1
 8007c00:	d1d6      	bne.n	8007bb0 <_vfiprintf_r+0x1bc>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c04:	07d9      	lsls	r1, r3, #31
 8007c06:	d405      	bmi.n	8007c14 <_vfiprintf_r+0x220>
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	059a      	lsls	r2, r3, #22
 8007c0c:	d402      	bmi.n	8007c14 <_vfiprintf_r+0x220>
 8007c0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c10:	f000 faa1 	bl	8008156 <__retarget_lock_release_recursive>
 8007c14:	89ab      	ldrh	r3, [r5, #12]
 8007c16:	065b      	lsls	r3, r3, #25
 8007c18:	f53f af12 	bmi.w	8007a40 <_vfiprintf_r+0x4c>
 8007c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c1e:	e711      	b.n	8007a44 <_vfiprintf_r+0x50>
 8007c20:	ab03      	add	r3, sp, #12
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4630      	mov	r0, r6
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <_vfiprintf_r+0x258>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	f7fc fb32 	bl	8004294 <_printf_i>
 8007c30:	e7e4      	b.n	8007bfc <_vfiprintf_r+0x208>
 8007c32:	bf00      	nop
 8007c34:	0800999c 	.word	0x0800999c
 8007c38:	080099bc 	.word	0x080099bc
 8007c3c:	0800997c 	.word	0x0800997c
 8007c40:	0800992c 	.word	0x0800992c
 8007c44:	08009936 	.word	0x08009936
 8007c48:	08003d5d 	.word	0x08003d5d
 8007c4c:	080079cf 	.word	0x080079cf
 8007c50:	08009932 	.word	0x08009932

08007c54 <__swbuf_r>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	460e      	mov	r6, r1
 8007c58:	4614      	mov	r4, r2
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b118      	cbz	r0, 8007c66 <__swbuf_r+0x12>
 8007c5e:	6983      	ldr	r3, [r0, #24]
 8007c60:	b90b      	cbnz	r3, 8007c66 <__swbuf_r+0x12>
 8007c62:	f000 f9d9 	bl	8008018 <__sinit>
 8007c66:	4b21      	ldr	r3, [pc, #132]	; (8007cec <__swbuf_r+0x98>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d12b      	bne.n	8007cc4 <__swbuf_r+0x70>
 8007c6c:	686c      	ldr	r4, [r5, #4]
 8007c6e:	69a3      	ldr	r3, [r4, #24]
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	071a      	lsls	r2, r3, #28
 8007c76:	d52f      	bpl.n	8007cd8 <__swbuf_r+0x84>
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	b36b      	cbz	r3, 8007cd8 <__swbuf_r+0x84>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	b2f6      	uxtb	r6, r6
 8007c82:	1ac0      	subs	r0, r0, r3
 8007c84:	6963      	ldr	r3, [r4, #20]
 8007c86:	4637      	mov	r7, r6
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	dc04      	bgt.n	8007c96 <__swbuf_r+0x42>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f92e 	bl	8007ef0 <_fflush_r>
 8007c94:	bb30      	cbnz	r0, 8007ce4 <__swbuf_r+0x90>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	3001      	adds	r0, #1
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	60a3      	str	r3, [r4, #8]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	701e      	strb	r6, [r3, #0]
 8007ca6:	6963      	ldr	r3, [r4, #20]
 8007ca8:	4283      	cmp	r3, r0
 8007caa:	d004      	beq.n	8007cb6 <__swbuf_r+0x62>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	07db      	lsls	r3, r3, #31
 8007cb0:	d506      	bpl.n	8007cc0 <__swbuf_r+0x6c>
 8007cb2:	2e0a      	cmp	r6, #10
 8007cb4:	d104      	bne.n	8007cc0 <__swbuf_r+0x6c>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 f919 	bl	8007ef0 <_fflush_r>
 8007cbe:	b988      	cbnz	r0, 8007ce4 <__swbuf_r+0x90>
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <__swbuf_r+0x9c>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <__swbuf_r+0x7a>
 8007cca:	68ac      	ldr	r4, [r5, #8]
 8007ccc:	e7cf      	b.n	8007c6e <__swbuf_r+0x1a>
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <__swbuf_r+0xa0>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	bf08      	it	eq
 8007cd4:	68ec      	ldreq	r4, [r5, #12]
 8007cd6:	e7ca      	b.n	8007c6e <__swbuf_r+0x1a>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f80c 	bl	8007cf8 <__swsetup_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d0cb      	beq.n	8007c7c <__swbuf_r+0x28>
 8007ce4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ce8:	e7ea      	b.n	8007cc0 <__swbuf_r+0x6c>
 8007cea:	bf00      	nop
 8007cec:	0800999c 	.word	0x0800999c
 8007cf0:	080099bc 	.word	0x080099bc
 8007cf4:	0800997c 	.word	0x0800997c

08007cf8 <__swsetup_r>:
 8007cf8:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <__swsetup_r+0xcc>)
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	b125      	cbz	r5, 8007d0e <__swsetup_r+0x16>
 8007d04:	69ab      	ldr	r3, [r5, #24]
 8007d06:	b913      	cbnz	r3, 8007d0e <__swsetup_r+0x16>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f985 	bl	8008018 <__sinit>
 8007d0e:	4b2e      	ldr	r3, [pc, #184]	; (8007dc8 <__swsetup_r+0xd0>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d10f      	bne.n	8007d34 <__swsetup_r+0x3c>
 8007d14:	686c      	ldr	r4, [r5, #4]
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d1c:	0719      	lsls	r1, r3, #28
 8007d1e:	d42c      	bmi.n	8007d7a <__swsetup_r+0x82>
 8007d20:	06dd      	lsls	r5, r3, #27
 8007d22:	d411      	bmi.n	8007d48 <__swsetup_r+0x50>
 8007d24:	2309      	movs	r3, #9
 8007d26:	6033      	str	r3, [r6, #0]
 8007d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d30:	81a3      	strh	r3, [r4, #12]
 8007d32:	e03e      	b.n	8007db2 <__swsetup_r+0xba>
 8007d34:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <__swsetup_r+0xd4>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <__swsetup_r+0x46>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7eb      	b.n	8007d16 <__swsetup_r+0x1e>
 8007d3e:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <__swsetup_r+0xd8>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7e6      	b.n	8007d16 <__swsetup_r+0x1e>
 8007d48:	0758      	lsls	r0, r3, #29
 8007d4a:	d512      	bpl.n	8007d72 <__swsetup_r+0x7a>
 8007d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4e:	b141      	cbz	r1, 8007d62 <__swsetup_r+0x6a>
 8007d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <__swsetup_r+0x66>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff fb6f 	bl	800743c <_free_r>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6363      	str	r3, [r4, #52]	; 0x34
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f043 0308 	orr.w	r3, r3, #8
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	b94b      	cbnz	r3, 8007d92 <__swsetup_r+0x9a>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d88:	d003      	beq.n	8007d92 <__swsetup_r+0x9a>
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f000 fa07 	bl	80081a0 <__smakebuf_r>
 8007d92:	89a0      	ldrh	r0, [r4, #12]
 8007d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d98:	f010 0301 	ands.w	r3, r0, #1
 8007d9c:	d00a      	beq.n	8007db4 <__swsetup_r+0xbc>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60a3      	str	r3, [r4, #8]
 8007da2:	6963      	ldr	r3, [r4, #20]
 8007da4:	425b      	negs	r3, r3
 8007da6:	61a3      	str	r3, [r4, #24]
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	b943      	cbnz	r3, 8007dbe <__swsetup_r+0xc6>
 8007dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007db0:	d1ba      	bne.n	8007d28 <__swsetup_r+0x30>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	0781      	lsls	r1, r0, #30
 8007db6:	bf58      	it	pl
 8007db8:	6963      	ldrpl	r3, [r4, #20]
 8007dba:	60a3      	str	r3, [r4, #8]
 8007dbc:	e7f4      	b.n	8007da8 <__swsetup_r+0xb0>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e7f7      	b.n	8007db2 <__swsetup_r+0xba>
 8007dc2:	bf00      	nop
 8007dc4:	20000020 	.word	0x20000020
 8007dc8:	0800999c 	.word	0x0800999c
 8007dcc:	080099bc 	.word	0x080099bc
 8007dd0:	0800997c 	.word	0x0800997c

08007dd4 <abort>:
 8007dd4:	2006      	movs	r0, #6
 8007dd6:	b508      	push	{r3, lr}
 8007dd8:	f000 fa52 	bl	8008280 <raise>
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f7fb fe75 	bl	8003acc <_exit>
	...

08007de4 <__sflush_r>:
 8007de4:	898a      	ldrh	r2, [r1, #12]
 8007de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	0710      	lsls	r0, r2, #28
 8007dee:	460c      	mov	r4, r1
 8007df0:	d458      	bmi.n	8007ea4 <__sflush_r+0xc0>
 8007df2:	684b      	ldr	r3, [r1, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dc05      	bgt.n	8007e04 <__sflush_r+0x20>
 8007df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc02      	bgt.n	8007e04 <__sflush_r+0x20>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	d0f9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e10:	682f      	ldr	r7, [r5, #0]
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	d032      	beq.n	8007e7c <__sflush_r+0x98>
 8007e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	075a      	lsls	r2, r3, #29
 8007e1c:	d505      	bpl.n	8007e2a <__sflush_r+0x46>
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	1ac0      	subs	r0, r0, r3
 8007e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e24:	b10b      	cbz	r3, 8007e2a <__sflush_r+0x46>
 8007e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e28:	1ac0      	subs	r0, r0, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e30:	4628      	mov	r0, r5
 8007e32:	6a21      	ldr	r1, [r4, #32]
 8007e34:	47b0      	blx	r6
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	d106      	bne.n	8007e4a <__sflush_r+0x66>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	291d      	cmp	r1, #29
 8007e40:	d82c      	bhi.n	8007e9c <__sflush_r+0xb8>
 8007e42:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <__sflush_r+0x108>)
 8007e44:	40ca      	lsrs	r2, r1
 8007e46:	07d6      	lsls	r6, r2, #31
 8007e48:	d528      	bpl.n	8007e9c <__sflush_r+0xb8>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	6062      	str	r2, [r4, #4]
 8007e4e:	6922      	ldr	r2, [r4, #16]
 8007e50:	04d9      	lsls	r1, r3, #19
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	d504      	bpl.n	8007e60 <__sflush_r+0x7c>
 8007e56:	1c42      	adds	r2, r0, #1
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0x7a>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b903      	cbnz	r3, 8007e60 <__sflush_r+0x7c>
 8007e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e62:	602f      	str	r7, [r5, #0]
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d0ca      	beq.n	8007dfe <__sflush_r+0x1a>
 8007e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d002      	beq.n	8007e76 <__sflush_r+0x92>
 8007e70:	4628      	mov	r0, r5
 8007e72:	f7ff fae3 	bl	800743c <_free_r>
 8007e76:	2000      	movs	r0, #0
 8007e78:	6360      	str	r0, [r4, #52]	; 0x34
 8007e7a:	e7c1      	b.n	8007e00 <__sflush_r+0x1c>
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	1c41      	adds	r1, r0, #1
 8007e86:	d1c7      	bne.n	8007e18 <__sflush_r+0x34>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c4      	beq.n	8007e18 <__sflush_r+0x34>
 8007e8e:	2b1d      	cmp	r3, #29
 8007e90:	d001      	beq.n	8007e96 <__sflush_r+0xb2>
 8007e92:	2b16      	cmp	r3, #22
 8007e94:	d101      	bne.n	8007e9a <__sflush_r+0xb6>
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	e7b1      	b.n	8007dfe <__sflush_r+0x1a>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e7ad      	b.n	8007e00 <__sflush_r+0x1c>
 8007ea4:	690f      	ldr	r7, [r1, #16]
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d0a9      	beq.n	8007dfe <__sflush_r+0x1a>
 8007eaa:	0793      	lsls	r3, r2, #30
 8007eac:	bf18      	it	ne
 8007eae:	2300      	movne	r3, #0
 8007eb0:	680e      	ldr	r6, [r1, #0]
 8007eb2:	bf08      	it	eq
 8007eb4:	694b      	ldreq	r3, [r1, #20]
 8007eb6:	eba6 0807 	sub.w	r8, r6, r7
 8007eba:	600f      	str	r7, [r1, #0]
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd9c      	ble.n	8007dfe <__sflush_r+0x1a>
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	4628      	mov	r0, r5
 8007eca:	6a21      	ldr	r1, [r4, #32]
 8007ecc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ece:	47b0      	blx	r6
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dc06      	bgt.n	8007ee2 <__sflush_r+0xfe>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	e78e      	b.n	8007e00 <__sflush_r+0x1c>
 8007ee2:	4407      	add	r7, r0
 8007ee4:	eba8 0800 	sub.w	r8, r8, r0
 8007ee8:	e7e9      	b.n	8007ebe <__sflush_r+0xda>
 8007eea:	bf00      	nop
 8007eec:	20400001 	.word	0x20400001

08007ef0 <_fflush_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	690b      	ldr	r3, [r1, #16]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b913      	cbnz	r3, 8007f00 <_fflush_r+0x10>
 8007efa:	2500      	movs	r5, #0
 8007efc:	4628      	mov	r0, r5
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	b118      	cbz	r0, 8007f0a <_fflush_r+0x1a>
 8007f02:	6983      	ldr	r3, [r0, #24]
 8007f04:	b90b      	cbnz	r3, 8007f0a <_fflush_r+0x1a>
 8007f06:	f000 f887 	bl	8008018 <__sinit>
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <_fflush_r+0x6c>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d11b      	bne.n	8007f48 <_fflush_r+0x58>
 8007f10:	686c      	ldr	r4, [r5, #4]
 8007f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0ef      	beq.n	8007efa <_fflush_r+0xa>
 8007f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f1c:	07d0      	lsls	r0, r2, #31
 8007f1e:	d404      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f20:	0599      	lsls	r1, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_fflush_r+0x3a>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f000 f915 	bl	8008154 <__retarget_lock_acquire_recursive>
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	f7ff ff59 	bl	8007de4 <__sflush_r>
 8007f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f34:	4605      	mov	r5, r0
 8007f36:	07da      	lsls	r2, r3, #31
 8007f38:	d4e0      	bmi.n	8007efc <_fflush_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	059b      	lsls	r3, r3, #22
 8007f3e:	d4dd      	bmi.n	8007efc <_fflush_r+0xc>
 8007f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f42:	f000 f908 	bl	8008156 <__retarget_lock_release_recursive>
 8007f46:	e7d9      	b.n	8007efc <_fflush_r+0xc>
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <_fflush_r+0x70>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <_fflush_r+0x62>
 8007f4e:	68ac      	ldr	r4, [r5, #8]
 8007f50:	e7df      	b.n	8007f12 <_fflush_r+0x22>
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <_fflush_r+0x74>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68ec      	ldreq	r4, [r5, #12]
 8007f5a:	e7da      	b.n	8007f12 <_fflush_r+0x22>
 8007f5c:	0800999c 	.word	0x0800999c
 8007f60:	080099bc 	.word	0x080099bc
 8007f64:	0800997c 	.word	0x0800997c

08007f68 <std>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f76:	6083      	str	r3, [r0, #8]
 8007f78:	8181      	strh	r1, [r0, #12]
 8007f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f7c:	81c2      	strh	r2, [r0, #14]
 8007f7e:	6183      	str	r3, [r0, #24]
 8007f80:	4619      	mov	r1, r3
 8007f82:	2208      	movs	r2, #8
 8007f84:	305c      	adds	r0, #92	; 0x5c
 8007f86:	f7fb fe43 	bl	8003c10 <memset>
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x38>)
 8007f8c:	6224      	str	r4, [r4, #32]
 8007f8e:	6263      	str	r3, [r4, #36]	; 0x24
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <std+0x3c>)
 8007f92:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <std+0x40>)
 8007f96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <std+0x44>)
 8007f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	080082b9 	.word	0x080082b9
 8007fa4:	080082db 	.word	0x080082db
 8007fa8:	08008313 	.word	0x08008313
 8007fac:	08008337 	.word	0x08008337

08007fb0 <_cleanup_r>:
 8007fb0:	4901      	ldr	r1, [pc, #4]	; (8007fb8 <_cleanup_r+0x8>)
 8007fb2:	f000 b8af 	b.w	8008114 <_fwalk_reent>
 8007fb6:	bf00      	nop
 8007fb8:	08007ef1 	.word	0x08007ef1

08007fbc <__sfmoreglue>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	2568      	movs	r5, #104	; 0x68
 8007fc0:	1e4a      	subs	r2, r1, #1
 8007fc2:	4355      	muls	r5, r2
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fca:	f7ff fa83 	bl	80074d4 <_malloc_r>
 8007fce:	4604      	mov	r4, r0
 8007fd0:	b140      	cbz	r0, 8007fe4 <__sfmoreglue+0x28>
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fd8:	300c      	adds	r0, #12
 8007fda:	60a0      	str	r0, [r4, #8]
 8007fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe0:	f7fb fe16 	bl	8003c10 <memset>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <__sfp_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sfp_lock_acquire+0x8>)
 8007fea:	f000 b8b3 	b.w	8008154 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20003448 	.word	0x20003448

08007ff4 <__sfp_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sfp_lock_release+0x8>)
 8007ff6:	f000 b8ae 	b.w	8008156 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20003448 	.word	0x20003448

08008000 <__sinit_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sinit_lock_acquire+0x8>)
 8008002:	f000 b8a7 	b.w	8008154 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	20003443 	.word	0x20003443

0800800c <__sinit_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sinit_lock_release+0x8>)
 800800e:	f000 b8a2 	b.w	8008156 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	20003443 	.word	0x20003443

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sinit_lock_acquire>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sinit_lock_release>
 800802c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008030:	6523      	str	r3, [r4, #80]	; 0x50
 8008032:	4b13      	ldr	r3, [pc, #76]	; (8008080 <__sinit+0x68>)
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <__sinit+0x6c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	62a2      	str	r2, [r4, #40]	; 0x28
 800803a:	42a3      	cmp	r3, r4
 800803c:	bf08      	it	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	4620      	mov	r0, r4
 8008042:	bf08      	it	eq
 8008044:	61a3      	streq	r3, [r4, #24]
 8008046:	f000 f81f 	bl	8008088 <__sfp>
 800804a:	6060      	str	r0, [r4, #4]
 800804c:	4620      	mov	r0, r4
 800804e:	f000 f81b 	bl	8008088 <__sfp>
 8008052:	60a0      	str	r0, [r4, #8]
 8008054:	4620      	mov	r0, r4
 8008056:	f000 f817 	bl	8008088 <__sfp>
 800805a:	2200      	movs	r2, #0
 800805c:	2104      	movs	r1, #4
 800805e:	60e0      	str	r0, [r4, #12]
 8008060:	6860      	ldr	r0, [r4, #4]
 8008062:	f7ff ff81 	bl	8007f68 <std>
 8008066:	2201      	movs	r2, #1
 8008068:	2109      	movs	r1, #9
 800806a:	68a0      	ldr	r0, [r4, #8]
 800806c:	f7ff ff7c 	bl	8007f68 <std>
 8008070:	2202      	movs	r2, #2
 8008072:	2112      	movs	r1, #18
 8008074:	68e0      	ldr	r0, [r4, #12]
 8008076:	f7ff ff77 	bl	8007f68 <std>
 800807a:	2301      	movs	r3, #1
 800807c:	61a3      	str	r3, [r4, #24]
 800807e:	e7d1      	b.n	8008024 <__sinit+0xc>
 8008080:	08009524 	.word	0x08009524
 8008084:	08007fb1 	.word	0x08007fb1

08008088 <__sfp>:
 8008088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808a:	4607      	mov	r7, r0
 800808c:	f7ff ffac 	bl	8007fe8 <__sfp_lock_acquire>
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <__sfp+0x84>)
 8008092:	681e      	ldr	r6, [r3, #0]
 8008094:	69b3      	ldr	r3, [r6, #24]
 8008096:	b913      	cbnz	r3, 800809e <__sfp+0x16>
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff ffbd 	bl	8008018 <__sinit>
 800809e:	3648      	adds	r6, #72	; 0x48
 80080a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	d503      	bpl.n	80080b0 <__sfp+0x28>
 80080a8:	6833      	ldr	r3, [r6, #0]
 80080aa:	b30b      	cbz	r3, 80080f0 <__sfp+0x68>
 80080ac:	6836      	ldr	r6, [r6, #0]
 80080ae:	e7f7      	b.n	80080a0 <__sfp+0x18>
 80080b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080b4:	b9d5      	cbnz	r5, 80080ec <__sfp+0x64>
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <__sfp+0x88>)
 80080b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080bc:	60e3      	str	r3, [r4, #12]
 80080be:	6665      	str	r5, [r4, #100]	; 0x64
 80080c0:	f000 f847 	bl	8008152 <__retarget_lock_init_recursive>
 80080c4:	f7ff ff96 	bl	8007ff4 <__sfp_lock_release>
 80080c8:	2208      	movs	r2, #8
 80080ca:	4629      	mov	r1, r5
 80080cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d4:	6025      	str	r5, [r4, #0]
 80080d6:	61a5      	str	r5, [r4, #24]
 80080d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080dc:	f7fb fd98 	bl	8003c10 <memset>
 80080e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080e8:	4620      	mov	r0, r4
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	3468      	adds	r4, #104	; 0x68
 80080ee:	e7d9      	b.n	80080a4 <__sfp+0x1c>
 80080f0:	2104      	movs	r1, #4
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff ff62 	bl	8007fbc <__sfmoreglue>
 80080f8:	4604      	mov	r4, r0
 80080fa:	6030      	str	r0, [r6, #0]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1d5      	bne.n	80080ac <__sfp+0x24>
 8008100:	f7ff ff78 	bl	8007ff4 <__sfp_lock_release>
 8008104:	230c      	movs	r3, #12
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	e7ee      	b.n	80080e8 <__sfp+0x60>
 800810a:	bf00      	nop
 800810c:	08009524 	.word	0x08009524
 8008110:	ffff0001 	.word	0xffff0001

08008114 <_fwalk_reent>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4606      	mov	r6, r0
 800811a:	4688      	mov	r8, r1
 800811c:	2700      	movs	r7, #0
 800811e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008126:	f1b9 0901 	subs.w	r9, r9, #1
 800812a:	d505      	bpl.n	8008138 <_fwalk_reent+0x24>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	2c00      	cmp	r4, #0
 8008130:	d1f7      	bne.n	8008122 <_fwalk_reent+0xe>
 8008132:	4638      	mov	r0, r7
 8008134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008138:	89ab      	ldrh	r3, [r5, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d907      	bls.n	800814e <_fwalk_reent+0x3a>
 800813e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008142:	3301      	adds	r3, #1
 8008144:	d003      	beq.n	800814e <_fwalk_reent+0x3a>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	47c0      	blx	r8
 800814c:	4307      	orrs	r7, r0
 800814e:	3568      	adds	r5, #104	; 0x68
 8008150:	e7e9      	b.n	8008126 <_fwalk_reent+0x12>

08008152 <__retarget_lock_init_recursive>:
 8008152:	4770      	bx	lr

08008154 <__retarget_lock_acquire_recursive>:
 8008154:	4770      	bx	lr

08008156 <__retarget_lock_release_recursive>:
 8008156:	4770      	bx	lr

08008158 <__swhatbuf_r>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	460e      	mov	r6, r1
 800815c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008160:	4614      	mov	r4, r2
 8008162:	2900      	cmp	r1, #0
 8008164:	461d      	mov	r5, r3
 8008166:	b096      	sub	sp, #88	; 0x58
 8008168:	da07      	bge.n	800817a <__swhatbuf_r+0x22>
 800816a:	2300      	movs	r3, #0
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	89b3      	ldrh	r3, [r6, #12]
 8008170:	061a      	lsls	r2, r3, #24
 8008172:	d410      	bmi.n	8008196 <__swhatbuf_r+0x3e>
 8008174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008178:	e00e      	b.n	8008198 <__swhatbuf_r+0x40>
 800817a:	466a      	mov	r2, sp
 800817c:	f000 f902 	bl	8008384 <_fstat_r>
 8008180:	2800      	cmp	r0, #0
 8008182:	dbf2      	blt.n	800816a <__swhatbuf_r+0x12>
 8008184:	9a01      	ldr	r2, [sp, #4]
 8008186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800818a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800818e:	425a      	negs	r2, r3
 8008190:	415a      	adcs	r2, r3
 8008192:	602a      	str	r2, [r5, #0]
 8008194:	e7ee      	b.n	8008174 <__swhatbuf_r+0x1c>
 8008196:	2340      	movs	r3, #64	; 0x40
 8008198:	2000      	movs	r0, #0
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	b016      	add	sp, #88	; 0x58
 800819e:	bd70      	pop	{r4, r5, r6, pc}

080081a0 <__smakebuf_r>:
 80081a0:	898b      	ldrh	r3, [r1, #12]
 80081a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081a4:	079d      	lsls	r5, r3, #30
 80081a6:	4606      	mov	r6, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	d507      	bpl.n	80081bc <__smakebuf_r+0x1c>
 80081ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	2301      	movs	r3, #1
 80081b6:	6163      	str	r3, [r4, #20]
 80081b8:	b002      	add	sp, #8
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	466a      	mov	r2, sp
 80081be:	ab01      	add	r3, sp, #4
 80081c0:	f7ff ffca 	bl	8008158 <__swhatbuf_r>
 80081c4:	9900      	ldr	r1, [sp, #0]
 80081c6:	4605      	mov	r5, r0
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff f983 	bl	80074d4 <_malloc_r>
 80081ce:	b948      	cbnz	r0, 80081e4 <__smakebuf_r+0x44>
 80081d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d4:	059a      	lsls	r2, r3, #22
 80081d6:	d4ef      	bmi.n	80081b8 <__smakebuf_r+0x18>
 80081d8:	f023 0303 	bic.w	r3, r3, #3
 80081dc:	f043 0302 	orr.w	r3, r3, #2
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	e7e3      	b.n	80081ac <__smakebuf_r+0xc>
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <__smakebuf_r+0x7c>)
 80081e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	6020      	str	r0, [r4, #0]
 80081ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	9b00      	ldr	r3, [sp, #0]
 80081f4:	6120      	str	r0, [r4, #16]
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	9b01      	ldr	r3, [sp, #4]
 80081fa:	b15b      	cbz	r3, 8008214 <__smakebuf_r+0x74>
 80081fc:	4630      	mov	r0, r6
 80081fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008202:	f000 f8d1 	bl	80083a8 <_isatty_r>
 8008206:	b128      	cbz	r0, 8008214 <__smakebuf_r+0x74>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	89a0      	ldrh	r0, [r4, #12]
 8008216:	4305      	orrs	r5, r0
 8008218:	81a5      	strh	r5, [r4, #12]
 800821a:	e7cd      	b.n	80081b8 <__smakebuf_r+0x18>
 800821c:	08007fb1 	.word	0x08007fb1

08008220 <_malloc_usable_size_r>:
 8008220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008224:	1f18      	subs	r0, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	bfbc      	itt	lt
 800822a:	580b      	ldrlt	r3, [r1, r0]
 800822c:	18c0      	addlt	r0, r0, r3
 800822e:	4770      	bx	lr

08008230 <_raise_r>:
 8008230:	291f      	cmp	r1, #31
 8008232:	b538      	push	{r3, r4, r5, lr}
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	d904      	bls.n	8008244 <_raise_r+0x14>
 800823a:	2316      	movs	r3, #22
 800823c:	6003      	str	r3, [r0, #0]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008246:	b112      	cbz	r2, 800824e <_raise_r+0x1e>
 8008248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800824c:	b94b      	cbnz	r3, 8008262 <_raise_r+0x32>
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f830 	bl	80082b4 <_getpid_r>
 8008254:	462a      	mov	r2, r5
 8008256:	4601      	mov	r1, r0
 8008258:	4620      	mov	r0, r4
 800825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825e:	f000 b817 	b.w	8008290 <_kill_r>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d00a      	beq.n	800827c <_raise_r+0x4c>
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	d103      	bne.n	8008272 <_raise_r+0x42>
 800826a:	2316      	movs	r3, #22
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	2001      	movs	r0, #1
 8008270:	e7e7      	b.n	8008242 <_raise_r+0x12>
 8008272:	2400      	movs	r4, #0
 8008274:	4628      	mov	r0, r5
 8008276:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800827a:	4798      	blx	r3
 800827c:	2000      	movs	r0, #0
 800827e:	e7e0      	b.n	8008242 <_raise_r+0x12>

08008280 <raise>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <raise+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f7ff bfd3 	b.w	8008230 <_raise_r>
 800828a:	bf00      	nop
 800828c:	20000020 	.word	0x20000020

08008290 <_kill_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	2300      	movs	r3, #0
 8008294:	4d06      	ldr	r5, [pc, #24]	; (80082b0 <_kill_r+0x20>)
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f7fb fc0d 	bl	8003abc <_kill>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d102      	bne.n	80082ac <_kill_r+0x1c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b103      	cbz	r3, 80082ac <_kill_r+0x1c>
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	bf00      	nop
 80082b0:	2000343c 	.word	0x2000343c

080082b4 <_getpid_r>:
 80082b4:	f7fb bc00 	b.w	8003ab8 <_getpid>

080082b8 <__sread>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	460c      	mov	r4, r1
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	f000 f894 	bl	80083ec <_read_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	bfab      	itete	ge
 80082c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ca:	89a3      	ldrhlt	r3, [r4, #12]
 80082cc:	181b      	addge	r3, r3, r0
 80082ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082d2:	bfac      	ite	ge
 80082d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082d6:	81a3      	strhlt	r3, [r4, #12]
 80082d8:	bd10      	pop	{r4, pc}

080082da <__swrite>:
 80082da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	461f      	mov	r7, r3
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	4605      	mov	r5, r0
 80082e4:	05db      	lsls	r3, r3, #23
 80082e6:	460c      	mov	r4, r1
 80082e8:	4616      	mov	r6, r2
 80082ea:	d505      	bpl.n	80082f8 <__swrite+0x1e>
 80082ec:	2302      	movs	r3, #2
 80082ee:	2200      	movs	r2, #0
 80082f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f4:	f000 f868 	bl	80083c8 <_lseek_r>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	4632      	mov	r2, r6
 80082fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	4628      	mov	r0, r5
 8008304:	463b      	mov	r3, r7
 8008306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800830a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	f000 b817 	b.w	8008340 <_write_r>

08008312 <__sseek>:
 8008312:	b510      	push	{r4, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 f855 	bl	80083c8 <_lseek_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	bf15      	itete	ne
 8008324:	6560      	strne	r0, [r4, #84]	; 0x54
 8008326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800832a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800832e:	81a3      	strheq	r3, [r4, #12]
 8008330:	bf18      	it	ne
 8008332:	81a3      	strhne	r3, [r4, #12]
 8008334:	bd10      	pop	{r4, pc}

08008336 <__sclose>:
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 b813 	b.w	8008364 <_close_r>
	...

08008340 <_write_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	2200      	movs	r2, #0
 800834a:	4d05      	ldr	r5, [pc, #20]	; (8008360 <_write_r+0x20>)
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7fb fbcf 	bl	8003af2 <_write>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_write_r+0x1e>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_write_r+0x1e>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	2000343c 	.word	0x2000343c

08008364 <_close_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	2300      	movs	r3, #0
 8008368:	4d05      	ldr	r5, [pc, #20]	; (8008380 <_close_r+0x1c>)
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7fb fbe6 	bl	8003b40 <_close>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_close_r+0x1a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_close_r+0x1a>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	2000343c 	.word	0x2000343c

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	2300      	movs	r3, #0
 8008388:	4d06      	ldr	r5, [pc, #24]	; (80083a4 <_fstat_r+0x20>)
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7fb fbd8 	bl	8003b46 <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	2000343c 	.word	0x2000343c

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	2300      	movs	r3, #0
 80083ac:	4d05      	ldr	r5, [pc, #20]	; (80083c4 <_isatty_r+0x1c>)
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7fb fbcc 	bl	8003b50 <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	2000343c 	.word	0x2000343c

080083c8 <_lseek_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_lseek_r+0x20>)
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7fb fbbc 	bl	8003b54 <_lseek>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_lseek_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_lseek_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	2000343c 	.word	0x2000343c

080083ec <_read_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	2200      	movs	r2, #0
 80083f6:	4d05      	ldr	r5, [pc, #20]	; (800840c <_read_r+0x20>)
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7fb fb6c 	bl	8003ad8 <_read>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_read_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_read_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	2000343c 	.word	0x2000343c

08008410 <cos>:
 8008410:	b530      	push	{r4, r5, lr}
 8008412:	4a1e      	ldr	r2, [pc, #120]	; (800848c <cos+0x7c>)
 8008414:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008418:	4293      	cmp	r3, r2
 800841a:	b087      	sub	sp, #28
 800841c:	dc04      	bgt.n	8008428 <cos+0x18>
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	f000 fa6d 	bl	8008900 <__kernel_cos>
 8008426:	e006      	b.n	8008436 <cos+0x26>
 8008428:	4a19      	ldr	r2, [pc, #100]	; (8008490 <cos+0x80>)
 800842a:	4293      	cmp	r3, r2
 800842c:	dd05      	ble.n	800843a <cos+0x2a>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	f7f7 fe99 	bl	8000168 <__aeabi_dsub>
 8008436:	b007      	add	sp, #28
 8008438:	bd30      	pop	{r4, r5, pc}
 800843a:	aa02      	add	r2, sp, #8
 800843c:	f000 f870 	bl	8008520 <__ieee754_rem_pio2>
 8008440:	f000 0003 	and.w	r0, r0, #3
 8008444:	2801      	cmp	r0, #1
 8008446:	d007      	beq.n	8008458 <cos+0x48>
 8008448:	2802      	cmp	r0, #2
 800844a:	d00f      	beq.n	800846c <cos+0x5c>
 800844c:	b9a8      	cbnz	r0, 800847a <cos+0x6a>
 800844e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008456:	e7e4      	b.n	8008422 <cos+0x12>
 8008458:	9000      	str	r0, [sp, #0]
 800845a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	f000 fe55 	bl	8009110 <__kernel_sin>
 8008466:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800846a:	e7e4      	b.n	8008436 <cos+0x26>
 800846c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008474:	f000 fa44 	bl	8008900 <__kernel_cos>
 8008478:	e7f5      	b.n	8008466 <cos+0x56>
 800847a:	2301      	movs	r3, #1
 800847c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008486:	f000 fe43 	bl	8009110 <__kernel_sin>
 800848a:	e7d4      	b.n	8008436 <cos+0x26>
 800848c:	3fe921fb 	.word	0x3fe921fb
 8008490:	7fefffff 	.word	0x7fefffff

08008494 <sin>:
 8008494:	b530      	push	{r4, r5, lr}
 8008496:	4a20      	ldr	r2, [pc, #128]	; (8008518 <sin+0x84>)
 8008498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800849c:	4293      	cmp	r3, r2
 800849e:	b087      	sub	sp, #28
 80084a0:	dc06      	bgt.n	80084b0 <sin+0x1c>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2200      	movs	r2, #0
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	f000 fe31 	bl	8009110 <__kernel_sin>
 80084ae:	e006      	b.n	80084be <sin+0x2a>
 80084b0:	4a1a      	ldr	r2, [pc, #104]	; (800851c <sin+0x88>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	dd05      	ble.n	80084c2 <sin+0x2e>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	f7f7 fe55 	bl	8000168 <__aeabi_dsub>
 80084be:	b007      	add	sp, #28
 80084c0:	bd30      	pop	{r4, r5, pc}
 80084c2:	aa02      	add	r2, sp, #8
 80084c4:	f000 f82c 	bl	8008520 <__ieee754_rem_pio2>
 80084c8:	f000 0003 	and.w	r0, r0, #3
 80084cc:	2801      	cmp	r0, #1
 80084ce:	d009      	beq.n	80084e4 <sin+0x50>
 80084d0:	2802      	cmp	r0, #2
 80084d2:	d00e      	beq.n	80084f2 <sin+0x5e>
 80084d4:	b9c0      	cbnz	r0, 8008508 <sin+0x74>
 80084d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084da:	2301      	movs	r3, #1
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e2:	e7e2      	b.n	80084aa <sin+0x16>
 80084e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ec:	f000 fa08 	bl	8008900 <__kernel_cos>
 80084f0:	e7e5      	b.n	80084be <sin+0x2a>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fe:	f000 fe07 	bl	8009110 <__kernel_sin>
 8008502:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008506:	e7da      	b.n	80084be <sin+0x2a>
 8008508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008510:	f000 f9f6 	bl	8008900 <__kernel_cos>
 8008514:	e7f5      	b.n	8008502 <sin+0x6e>
 8008516:	bf00      	nop
 8008518:	3fe921fb 	.word	0x3fe921fb
 800851c:	7fefffff 	.word	0x7fefffff

08008520 <__ieee754_rem_pio2>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	4614      	mov	r4, r2
 8008526:	4ac4      	ldr	r2, [pc, #784]	; (8008838 <__ieee754_rem_pio2+0x318>)
 8008528:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800852c:	b08d      	sub	sp, #52	; 0x34
 800852e:	4592      	cmp	sl, r2
 8008530:	9104      	str	r1, [sp, #16]
 8008532:	dc07      	bgt.n	8008544 <__ieee754_rem_pio2+0x24>
 8008534:	2200      	movs	r2, #0
 8008536:	2300      	movs	r3, #0
 8008538:	e9c4 0100 	strd	r0, r1, [r4]
 800853c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008540:	2500      	movs	r5, #0
 8008542:	e024      	b.n	800858e <__ieee754_rem_pio2+0x6e>
 8008544:	4abd      	ldr	r2, [pc, #756]	; (800883c <__ieee754_rem_pio2+0x31c>)
 8008546:	4592      	cmp	sl, r2
 8008548:	dc72      	bgt.n	8008630 <__ieee754_rem_pio2+0x110>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	4dbc      	ldr	r5, [pc, #752]	; (8008840 <__ieee754_rem_pio2+0x320>)
 800854e:	2b00      	cmp	r3, #0
 8008550:	a3ab      	add	r3, pc, #684	; (adr r3, 8008800 <__ieee754_rem_pio2+0x2e0>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	dd36      	ble.n	80085c6 <__ieee754_rem_pio2+0xa6>
 8008558:	f7f7 fe06 	bl	8000168 <__aeabi_dsub>
 800855c:	45aa      	cmp	sl, r5
 800855e:	4606      	mov	r6, r0
 8008560:	460f      	mov	r7, r1
 8008562:	d018      	beq.n	8008596 <__ieee754_rem_pio2+0x76>
 8008564:	a3a8      	add	r3, pc, #672	; (adr r3, 8008808 <__ieee754_rem_pio2+0x2e8>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fdfd 	bl	8000168 <__aeabi_dsub>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4630      	mov	r0, r6
 8008574:	e9c4 2300 	strd	r2, r3, [r4]
 8008578:	4639      	mov	r1, r7
 800857a:	f7f7 fdf5 	bl	8000168 <__aeabi_dsub>
 800857e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008808 <__ieee754_rem_pio2+0x2e8>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fdf0 	bl	8000168 <__aeabi_dsub>
 8008588:	2501      	movs	r5, #1
 800858a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800858e:	4628      	mov	r0, r5
 8008590:	b00d      	add	sp, #52	; 0x34
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	a39e      	add	r3, pc, #632	; (adr r3, 8008810 <__ieee754_rem_pio2+0x2f0>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f7f7 fde4 	bl	8000168 <__aeabi_dsub>
 80085a0:	a39d      	add	r3, pc, #628	; (adr r3, 8008818 <__ieee754_rem_pio2+0x2f8>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	f7f7 fddd 	bl	8000168 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4630      	mov	r0, r6
 80085b4:	e9c4 2300 	strd	r2, r3, [r4]
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f7 fdd5 	bl	8000168 <__aeabi_dsub>
 80085be:	a396      	add	r3, pc, #600	; (adr r3, 8008818 <__ieee754_rem_pio2+0x2f8>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	e7de      	b.n	8008584 <__ieee754_rem_pio2+0x64>
 80085c6:	f7f7 fdd1 	bl	800016c <__adddf3>
 80085ca:	45aa      	cmp	sl, r5
 80085cc:	4606      	mov	r6, r0
 80085ce:	460f      	mov	r7, r1
 80085d0:	d016      	beq.n	8008600 <__ieee754_rem_pio2+0xe0>
 80085d2:	a38d      	add	r3, pc, #564	; (adr r3, 8008808 <__ieee754_rem_pio2+0x2e8>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fdc8 	bl	800016c <__adddf3>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	e9c4 2300 	strd	r2, r3, [r4]
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 fdbe 	bl	8000168 <__aeabi_dsub>
 80085ec:	a386      	add	r3, pc, #536	; (adr r3, 8008808 <__ieee754_rem_pio2+0x2e8>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 fdbb 	bl	800016c <__adddf3>
 80085f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80085fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80085fe:	e7c6      	b.n	800858e <__ieee754_rem_pio2+0x6e>
 8008600:	a383      	add	r3, pc, #524	; (adr r3, 8008810 <__ieee754_rem_pio2+0x2f0>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fdb1 	bl	800016c <__adddf3>
 800860a:	a383      	add	r3, pc, #524	; (adr r3, 8008818 <__ieee754_rem_pio2+0x2f8>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	4606      	mov	r6, r0
 8008612:	460f      	mov	r7, r1
 8008614:	f7f7 fdaa 	bl	800016c <__adddf3>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4630      	mov	r0, r6
 800861e:	e9c4 2300 	strd	r2, r3, [r4]
 8008622:	4639      	mov	r1, r7
 8008624:	f7f7 fda0 	bl	8000168 <__aeabi_dsub>
 8008628:	a37b      	add	r3, pc, #492	; (adr r3, 8008818 <__ieee754_rem_pio2+0x2f8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	e7e0      	b.n	80085f2 <__ieee754_rem_pio2+0xd2>
 8008630:	4a84      	ldr	r2, [pc, #528]	; (8008844 <__ieee754_rem_pio2+0x324>)
 8008632:	4592      	cmp	sl, r2
 8008634:	f300 80d5 	bgt.w	80087e2 <__ieee754_rem_pio2+0x2c2>
 8008638:	f000 fe20 	bl	800927c <fabs>
 800863c:	a378      	add	r3, pc, #480	; (adr r3, 8008820 <__ieee754_rem_pio2+0x300>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	4606      	mov	r6, r0
 8008644:	460f      	mov	r7, r1
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	2200      	movs	r2, #0
 800864c:	4b7e      	ldr	r3, [pc, #504]	; (8008848 <__ieee754_rem_pio2+0x328>)
 800864e:	f7f7 fd8d 	bl	800016c <__adddf3>
 8008652:	f7f8 f9f1 	bl	8000a38 <__aeabi_d2iz>
 8008656:	4605      	mov	r5, r0
 8008658:	f7f7 fed4 	bl	8000404 <__aeabi_i2d>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008664:	a366      	add	r3, pc, #408	; (adr r3, 8008800 <__ieee754_rem_pio2+0x2e0>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 ff35 	bl	80004d8 <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fd77 	bl	8000168 <__aeabi_dsub>
 800867a:	a363      	add	r3, pc, #396	; (adr r3, 8008808 <__ieee754_rem_pio2+0x2e8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	4680      	mov	r8, r0
 8008682:	4689      	mov	r9, r1
 8008684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008688:	f7f7 ff26 	bl	80004d8 <__aeabi_dmul>
 800868c:	2d1f      	cmp	r5, #31
 800868e:	4606      	mov	r6, r0
 8008690:	460f      	mov	r7, r1
 8008692:	dc0e      	bgt.n	80086b2 <__ieee754_rem_pio2+0x192>
 8008694:	4b6d      	ldr	r3, [pc, #436]	; (800884c <__ieee754_rem_pio2+0x32c>)
 8008696:	1e6a      	subs	r2, r5, #1
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	4553      	cmp	r3, sl
 800869e:	d008      	beq.n	80086b2 <__ieee754_rem_pio2+0x192>
 80086a0:	4632      	mov	r2, r6
 80086a2:	463b      	mov	r3, r7
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f7 fd5e 	bl	8000168 <__aeabi_dsub>
 80086ac:	e9c4 0100 	strd	r0, r1, [r4]
 80086b0:	e013      	b.n	80086da <__ieee754_rem_pio2+0x1ba>
 80086b2:	463b      	mov	r3, r7
 80086b4:	4632      	mov	r2, r6
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 fd55 	bl	8000168 <__aeabi_dsub>
 80086be:	ea4f 532a 	mov.w	r3, sl, asr #20
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086c8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80086cc:	f1ba 0f10 	cmp.w	sl, #16
 80086d0:	dc1f      	bgt.n	8008712 <__ieee754_rem_pio2+0x1f2>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	e9c4 2300 	strd	r2, r3, [r4]
 80086da:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80086de:	4640      	mov	r0, r8
 80086e0:	4653      	mov	r3, sl
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f7 fd40 	bl	8000168 <__aeabi_dsub>
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	f7f7 fd3c 	bl	8000168 <__aeabi_dsub>
 80086f0:	460b      	mov	r3, r1
 80086f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086f6:	9904      	ldr	r1, [sp, #16]
 80086f8:	4602      	mov	r2, r0
 80086fa:	2900      	cmp	r1, #0
 80086fc:	f6bf af47 	bge.w	800858e <__ieee754_rem_pio2+0x6e>
 8008700:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008704:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008708:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800870c:	60e3      	str	r3, [r4, #12]
 800870e:	426d      	negs	r5, r5
 8008710:	e73d      	b.n	800858e <__ieee754_rem_pio2+0x6e>
 8008712:	a33f      	add	r3, pc, #252	; (adr r3, 8008810 <__ieee754_rem_pio2+0x2f0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871c:	f7f7 fedc 	bl	80004d8 <__aeabi_dmul>
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 fd1c 	bl	8000168 <__aeabi_dsub>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4682      	mov	sl, r0
 8008736:	468b      	mov	fp, r1
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 fd14 	bl	8000168 <__aeabi_dsub>
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	f7f7 fd10 	bl	8000168 <__aeabi_dsub>
 8008748:	a333      	add	r3, pc, #204	; (adr r3, 8008818 <__ieee754_rem_pio2+0x2f8>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008756:	f7f7 febf 	bl	80004d8 <__aeabi_dmul>
 800875a:	4632      	mov	r2, r6
 800875c:	463b      	mov	r3, r7
 800875e:	f7f7 fd03 	bl	8000168 <__aeabi_dsub>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	4650      	mov	r0, sl
 800876c:	4659      	mov	r1, fp
 800876e:	f7f7 fcfb 	bl	8000168 <__aeabi_dsub>
 8008772:	9a05      	ldr	r2, [sp, #20]
 8008774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b31      	cmp	r3, #49	; 0x31
 800877c:	dc06      	bgt.n	800878c <__ieee754_rem_pio2+0x26c>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	46d0      	mov	r8, sl
 8008784:	46d9      	mov	r9, fp
 8008786:	e9c4 2300 	strd	r2, r3, [r4]
 800878a:	e7a6      	b.n	80086da <__ieee754_rem_pio2+0x1ba>
 800878c:	a326      	add	r3, pc, #152	; (adr r3, 8008828 <__ieee754_rem_pio2+0x308>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008796:	f7f7 fe9f 	bl	80004d8 <__aeabi_dmul>
 800879a:	4606      	mov	r6, r0
 800879c:	460f      	mov	r7, r1
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4650      	mov	r0, sl
 80087a4:	4659      	mov	r1, fp
 80087a6:	f7f7 fcdf 	bl	8000168 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4680      	mov	r8, r0
 80087b0:	4689      	mov	r9, r1
 80087b2:	4650      	mov	r0, sl
 80087b4:	4659      	mov	r1, fp
 80087b6:	f7f7 fcd7 	bl	8000168 <__aeabi_dsub>
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	f7f7 fcd3 	bl	8000168 <__aeabi_dsub>
 80087c2:	a31b      	add	r3, pc, #108	; (adr r3, 8008830 <__ieee754_rem_pio2+0x310>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4606      	mov	r6, r0
 80087ca:	460f      	mov	r7, r1
 80087cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d0:	f7f7 fe82 	bl	80004d8 <__aeabi_dmul>
 80087d4:	4632      	mov	r2, r6
 80087d6:	463b      	mov	r3, r7
 80087d8:	f7f7 fcc6 	bl	8000168 <__aeabi_dsub>
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	e75e      	b.n	80086a0 <__ieee754_rem_pio2+0x180>
 80087e2:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <__ieee754_rem_pio2+0x330>)
 80087e4:	4592      	cmp	sl, r2
 80087e6:	dd35      	ble.n	8008854 <__ieee754_rem_pio2+0x334>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	f7f7 fcbc 	bl	8000168 <__aeabi_dsub>
 80087f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80087f4:	e9c4 0100 	strd	r0, r1, [r4]
 80087f8:	e6a2      	b.n	8008540 <__ieee754_rem_pio2+0x20>
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w
 8008800:	54400000 	.word	0x54400000
 8008804:	3ff921fb 	.word	0x3ff921fb
 8008808:	1a626331 	.word	0x1a626331
 800880c:	3dd0b461 	.word	0x3dd0b461
 8008810:	1a600000 	.word	0x1a600000
 8008814:	3dd0b461 	.word	0x3dd0b461
 8008818:	2e037073 	.word	0x2e037073
 800881c:	3ba3198a 	.word	0x3ba3198a
 8008820:	6dc9c883 	.word	0x6dc9c883
 8008824:	3fe45f30 	.word	0x3fe45f30
 8008828:	2e000000 	.word	0x2e000000
 800882c:	3ba3198a 	.word	0x3ba3198a
 8008830:	252049c1 	.word	0x252049c1
 8008834:	397b839a 	.word	0x397b839a
 8008838:	3fe921fb 	.word	0x3fe921fb
 800883c:	4002d97b 	.word	0x4002d97b
 8008840:	3ff921fb 	.word	0x3ff921fb
 8008844:	413921fb 	.word	0x413921fb
 8008848:	3fe00000 	.word	0x3fe00000
 800884c:	080099dc 	.word	0x080099dc
 8008850:	7fefffff 	.word	0x7fefffff
 8008854:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008858:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800885c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008860:	460f      	mov	r7, r1
 8008862:	4606      	mov	r6, r0
 8008864:	f7f8 f8e8 	bl	8000a38 <__aeabi_d2iz>
 8008868:	f7f7 fdcc 	bl	8000404 <__aeabi_i2d>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008878:	f7f7 fc76 	bl	8000168 <__aeabi_dsub>
 800887c:	2200      	movs	r2, #0
 800887e:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <__ieee754_rem_pio2+0x3d8>)
 8008880:	f7f7 fe2a 	bl	80004d8 <__aeabi_dmul>
 8008884:	460f      	mov	r7, r1
 8008886:	4606      	mov	r6, r0
 8008888:	f7f8 f8d6 	bl	8000a38 <__aeabi_d2iz>
 800888c:	f7f7 fdba 	bl	8000404 <__aeabi_i2d>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800889c:	f7f7 fc64 	bl	8000168 <__aeabi_dsub>
 80088a0:	2200      	movs	r2, #0
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <__ieee754_rem_pio2+0x3d8>)
 80088a4:	f7f7 fe18 	bl	80004d8 <__aeabi_dmul>
 80088a8:	f04f 0803 	mov.w	r8, #3
 80088ac:	2600      	movs	r6, #0
 80088ae:	2700      	movs	r7, #0
 80088b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80088b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80088b8:	4632      	mov	r2, r6
 80088ba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80088be:	463b      	mov	r3, r7
 80088c0:	46c2      	mov	sl, r8
 80088c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80088c6:	f7f8 f86f 	bl	80009a8 <__aeabi_dcmpeq>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d1f4      	bne.n	80088b8 <__ieee754_rem_pio2+0x398>
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <__ieee754_rem_pio2+0x3dc>)
 80088d0:	462a      	mov	r2, r5
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	2302      	movs	r3, #2
 80088d6:	4621      	mov	r1, r4
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	a806      	add	r0, sp, #24
 80088dc:	4653      	mov	r3, sl
 80088de:	f000 f8cd 	bl	8008a7c <__kernel_rem_pio2>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	4605      	mov	r5, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f6bf ae51 	bge.w	800858e <__ieee754_rem_pio2+0x6e>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088f2:	6063      	str	r3, [r4, #4]
 80088f4:	68e3      	ldr	r3, [r4, #12]
 80088f6:	e707      	b.n	8008708 <__ieee754_rem_pio2+0x1e8>
 80088f8:	41700000 	.word	0x41700000
 80088fc:	08009a5c 	.word	0x08009a5c

08008900 <__kernel_cos>:
 8008900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008908:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800890c:	4680      	mov	r8, r0
 800890e:	460f      	mov	r7, r1
 8008910:	e9cd 2300 	strd	r2, r3, [sp]
 8008914:	da04      	bge.n	8008920 <__kernel_cos+0x20>
 8008916:	f7f8 f88f 	bl	8000a38 <__aeabi_d2iz>
 800891a:	2800      	cmp	r0, #0
 800891c:	f000 8086 	beq.w	8008a2c <__kernel_cos+0x12c>
 8008920:	4642      	mov	r2, r8
 8008922:	463b      	mov	r3, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4639      	mov	r1, r7
 8008928:	f7f7 fdd6 	bl	80004d8 <__aeabi_dmul>
 800892c:	2200      	movs	r2, #0
 800892e:	4b4e      	ldr	r3, [pc, #312]	; (8008a68 <__kernel_cos+0x168>)
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	f7f7 fdd0 	bl	80004d8 <__aeabi_dmul>
 8008938:	a33f      	add	r3, pc, #252	; (adr r3, 8008a38 <__kernel_cos+0x138>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	4682      	mov	sl, r0
 8008940:	468b      	mov	fp, r1
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fdc7 	bl	80004d8 <__aeabi_dmul>
 800894a:	a33d      	add	r3, pc, #244	; (adr r3, 8008a40 <__kernel_cos+0x140>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fc0c 	bl	800016c <__adddf3>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fdbe 	bl	80004d8 <__aeabi_dmul>
 800895c:	a33a      	add	r3, pc, #232	; (adr r3, 8008a48 <__kernel_cos+0x148>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fc01 	bl	8000168 <__aeabi_dsub>
 8008966:	4622      	mov	r2, r4
 8008968:	462b      	mov	r3, r5
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	a338      	add	r3, pc, #224	; (adr r3, 8008a50 <__kernel_cos+0x150>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fbfa 	bl	800016c <__adddf3>
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	f7f7 fdac 	bl	80004d8 <__aeabi_dmul>
 8008980:	a335      	add	r3, pc, #212	; (adr r3, 8008a58 <__kernel_cos+0x158>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fbef 	bl	8000168 <__aeabi_dsub>
 800898a:	4622      	mov	r2, r4
 800898c:	462b      	mov	r3, r5
 800898e:	f7f7 fda3 	bl	80004d8 <__aeabi_dmul>
 8008992:	a333      	add	r3, pc, #204	; (adr r3, 8008a60 <__kernel_cos+0x160>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fbe8 	bl	800016c <__adddf3>
 800899c:	4622      	mov	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	f7f7 fd9a 	bl	80004d8 <__aeabi_dmul>
 80089a4:	4622      	mov	r2, r4
 80089a6:	462b      	mov	r3, r5
 80089a8:	f7f7 fd96 	bl	80004d8 <__aeabi_dmul>
 80089ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	4640      	mov	r0, r8
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fd8e 	bl	80004d8 <__aeabi_dmul>
 80089bc:	460b      	mov	r3, r1
 80089be:	4602      	mov	r2, r0
 80089c0:	4629      	mov	r1, r5
 80089c2:	4620      	mov	r0, r4
 80089c4:	f7f7 fbd0 	bl	8000168 <__aeabi_dsub>
 80089c8:	4b28      	ldr	r3, [pc, #160]	; (8008a6c <__kernel_cos+0x16c>)
 80089ca:	4680      	mov	r8, r0
 80089cc:	429e      	cmp	r6, r3
 80089ce:	4689      	mov	r9, r1
 80089d0:	dc0e      	bgt.n	80089f0 <__kernel_cos+0xf0>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4650      	mov	r0, sl
 80089d8:	4659      	mov	r1, fp
 80089da:	f7f7 fbc5 	bl	8000168 <__aeabi_dsub>
 80089de:	4602      	mov	r2, r0
 80089e0:	2000      	movs	r0, #0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4922      	ldr	r1, [pc, #136]	; (8008a70 <__kernel_cos+0x170>)
 80089e6:	f7f7 fbbf 	bl	8000168 <__aeabi_dsub>
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	2400      	movs	r4, #0
 80089f2:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <__kernel_cos+0x174>)
 80089f4:	4622      	mov	r2, r4
 80089f6:	429e      	cmp	r6, r3
 80089f8:	bfcc      	ite	gt
 80089fa:	4d1f      	ldrgt	r5, [pc, #124]	; (8008a78 <__kernel_cos+0x178>)
 80089fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008a00:	462b      	mov	r3, r5
 8008a02:	2000      	movs	r0, #0
 8008a04:	491a      	ldr	r1, [pc, #104]	; (8008a70 <__kernel_cos+0x170>)
 8008a06:	f7f7 fbaf 	bl	8000168 <__aeabi_dsub>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	462b      	mov	r3, r5
 8008a12:	4650      	mov	r0, sl
 8008a14:	4659      	mov	r1, fp
 8008a16:	f7f7 fba7 	bl	8000168 <__aeabi_dsub>
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	f7f7 fba3 	bl	8000168 <__aeabi_dsub>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	e7dc      	b.n	80089e6 <__kernel_cos+0xe6>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	4910      	ldr	r1, [pc, #64]	; (8008a70 <__kernel_cos+0x170>)
 8008a30:	e7db      	b.n	80089ea <__kernel_cos+0xea>
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	be8838d4 	.word	0xbe8838d4
 8008a3c:	bda8fae9 	.word	0xbda8fae9
 8008a40:	bdb4b1c4 	.word	0xbdb4b1c4
 8008a44:	3e21ee9e 	.word	0x3e21ee9e
 8008a48:	809c52ad 	.word	0x809c52ad
 8008a4c:	3e927e4f 	.word	0x3e927e4f
 8008a50:	19cb1590 	.word	0x19cb1590
 8008a54:	3efa01a0 	.word	0x3efa01a0
 8008a58:	16c15177 	.word	0x16c15177
 8008a5c:	3f56c16c 	.word	0x3f56c16c
 8008a60:	5555554c 	.word	0x5555554c
 8008a64:	3fa55555 	.word	0x3fa55555
 8008a68:	3fe00000 	.word	0x3fe00000
 8008a6c:	3fd33332 	.word	0x3fd33332
 8008a70:	3ff00000 	.word	0x3ff00000
 8008a74:	3fe90000 	.word	0x3fe90000
 8008a78:	3fd20000 	.word	0x3fd20000

08008a7c <__kernel_rem_pio2>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008a84:	9308      	str	r3, [sp, #32]
 8008a86:	9101      	str	r1, [sp, #4]
 8008a88:	4bc0      	ldr	r3, [pc, #768]	; (8008d8c <__kernel_rem_pio2+0x310>)
 8008a8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008a8c:	f112 0f14 	cmn.w	r2, #20
 8008a90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a94:	bfa8      	it	ge
 8008a96:	1ed4      	subge	r4, r2, #3
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	bfb8      	it	lt
 8008a9e:	2400      	movlt	r4, #0
 8008aa0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008aa4:	9306      	str	r3, [sp, #24]
 8008aa6:	bfa4      	itt	ge
 8008aa8:	2318      	movge	r3, #24
 8008aaa:	fb94 f4f3 	sdivge	r4, r4, r3
 8008aae:	f06f 0317 	mvn.w	r3, #23
 8008ab2:	fb04 3303 	mla	r3, r4, r3, r3
 8008ab6:	eb03 0a02 	add.w	sl, r3, r2
 8008aba:	9a06      	ldr	r2, [sp, #24]
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	1aa7      	subs	r7, r4, r2
 8008ac0:	eb03 0802 	add.w	r8, r3, r2
 8008ac4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008acc:	2200      	movs	r2, #0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9009      	str	r0, [sp, #36]	; 0x24
 8008ad2:	ae20      	add	r6, sp, #128	; 0x80
 8008ad4:	4545      	cmp	r5, r8
 8008ad6:	dd19      	ble.n	8008b0c <__kernel_rem_pio2+0x90>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	aa20      	add	r2, sp, #128	; 0x80
 8008adc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ae0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008ae4:	f1c3 0301 	rsb	r3, r3, #1
 8008ae8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	4443      	add	r3, r8
 8008af4:	429a      	cmp	r2, r3
 8008af6:	db35      	blt.n	8008b64 <__kernel_rem_pio2+0xe8>
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	2200      	movs	r2, #0
 8008afc:	f1a3 0908 	sub.w	r9, r3, #8
 8008b00:	2300      	movs	r3, #0
 8008b02:	462f      	mov	r7, r5
 8008b04:	2600      	movs	r6, #0
 8008b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b0a:	e01f      	b.n	8008b4c <__kernel_rem_pio2+0xd0>
 8008b0c:	42ef      	cmn	r7, r5
 8008b0e:	d40b      	bmi.n	8008b28 <__kernel_rem_pio2+0xac>
 8008b10:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b18:	f7f7 fc74 	bl	8000404 <__aeabi_i2d>
 8008b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b20:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008b24:	3501      	adds	r5, #1
 8008b26:	e7d5      	b.n	8008ad4 <__kernel_rem_pio2+0x58>
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	e7f8      	b.n	8008b20 <__kernel_rem_pio2+0xa4>
 8008b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b32:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008b36:	f7f7 fccf 	bl	80004d8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b42:	f7f7 fb13 	bl	800016c <__adddf3>
 8008b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	3f08      	subs	r7, #8
 8008b50:	429e      	cmp	r6, r3
 8008b52:	ddec      	ble.n	8008b2e <__kernel_rem_pio2+0xb2>
 8008b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b58:	3508      	adds	r5, #8
 8008b5a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8008b5e:	f108 0801 	add.w	r8, r8, #1
 8008b62:	e7c4      	b.n	8008aee <__kernel_rem_pio2+0x72>
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	aa0c      	add	r2, sp, #48	; 0x30
 8008b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b6e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008b70:	9f04      	ldr	r7, [sp, #16]
 8008b72:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b76:	930a      	str	r3, [sp, #40]	; 0x28
 8008b78:	463e      	mov	r6, r7
 8008b7a:	ab98      	add	r3, sp, #608	; 0x260
 8008b7c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008b80:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b84:	f8cd b008 	str.w	fp, [sp, #8]
 8008b88:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dc71      	bgt.n	8008c74 <__kernel_rem_pio2+0x1f8>
 8008b90:	4652      	mov	r2, sl
 8008b92:	4620      	mov	r0, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	f000 fbf7 	bl	8009388 <scalbn>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	f000 fb6e 	bl	8009288 <floor>
 8008bac:	2200      	movs	r2, #0
 8008bae:	4b78      	ldr	r3, [pc, #480]	; (8008d90 <__kernel_rem_pio2+0x314>)
 8008bb0:	f7f7 fc92 	bl	80004d8 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f7f7 fad4 	bl	8000168 <__aeabi_dsub>
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	f7f7 ff38 	bl	8000a38 <__aeabi_d2iz>
 8008bc8:	9007      	str	r0, [sp, #28]
 8008bca:	f7f7 fc1b 	bl	8000404 <__aeabi_i2d>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f7 fac7 	bl	8000168 <__aeabi_dsub>
 8008bda:	f1ba 0f00 	cmp.w	sl, #0
 8008bde:	4680      	mov	r8, r0
 8008be0:	4689      	mov	r9, r1
 8008be2:	dd70      	ble.n	8008cc6 <__kernel_rem_pio2+0x24a>
 8008be4:	1e7a      	subs	r2, r7, #1
 8008be6:	ab0c      	add	r3, sp, #48	; 0x30
 8008be8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008bec:	9c07      	ldr	r4, [sp, #28]
 8008bee:	f1ca 0118 	rsb	r1, sl, #24
 8008bf2:	fa40 f301 	asr.w	r3, r0, r1
 8008bf6:	441c      	add	r4, r3
 8008bf8:	408b      	lsls	r3, r1
 8008bfa:	1ac0      	subs	r0, r0, r3
 8008bfc:	ab0c      	add	r3, sp, #48	; 0x30
 8008bfe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008c02:	f1ca 0317 	rsb	r3, sl, #23
 8008c06:	9407      	str	r4, [sp, #28]
 8008c08:	fa40 f303 	asr.w	r3, r0, r3
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dd66      	ble.n	8008ce2 <__kernel_rem_pio2+0x266>
 8008c14:	2200      	movs	r2, #0
 8008c16:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	4297      	cmp	r7, r2
 8008c24:	f300 809f 	bgt.w	8008d66 <__kernel_rem_pio2+0x2ea>
 8008c28:	f1ba 0f00 	cmp.w	sl, #0
 8008c2c:	dd07      	ble.n	8008c3e <__kernel_rem_pio2+0x1c2>
 8008c2e:	f1ba 0f01 	cmp.w	sl, #1
 8008c32:	f000 80b9 	beq.w	8008da8 <__kernel_rem_pio2+0x32c>
 8008c36:	f1ba 0f02 	cmp.w	sl, #2
 8008c3a:	f000 80bf 	beq.w	8008dbc <__kernel_rem_pio2+0x340>
 8008c3e:	9b02      	ldr	r3, [sp, #8]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d14e      	bne.n	8008ce2 <__kernel_rem_pio2+0x266>
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	2000      	movs	r0, #0
 8008c4a:	4952      	ldr	r1, [pc, #328]	; (8008d94 <__kernel_rem_pio2+0x318>)
 8008c4c:	f7f7 fa8c 	bl	8000168 <__aeabi_dsub>
 8008c50:	4680      	mov	r8, r0
 8008c52:	4689      	mov	r9, r1
 8008c54:	2c00      	cmp	r4, #0
 8008c56:	d044      	beq.n	8008ce2 <__kernel_rem_pio2+0x266>
 8008c58:	4652      	mov	r2, sl
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	494d      	ldr	r1, [pc, #308]	; (8008d94 <__kernel_rem_pio2+0x318>)
 8008c5e:	f000 fb93 	bl	8009388 <scalbn>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fa7d 	bl	8000168 <__aeabi_dsub>
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	e036      	b.n	8008ce2 <__kernel_rem_pio2+0x266>
 8008c74:	2200      	movs	r2, #0
 8008c76:	4b48      	ldr	r3, [pc, #288]	; (8008d98 <__kernel_rem_pio2+0x31c>)
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f7f7 fc2c 	bl	80004d8 <__aeabi_dmul>
 8008c80:	f7f7 feda 	bl	8000a38 <__aeabi_d2iz>
 8008c84:	f7f7 fbbe 	bl	8000404 <__aeabi_i2d>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4b44      	ldr	r3, [pc, #272]	; (8008d9c <__kernel_rem_pio2+0x320>)
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	f7f7 fc22 	bl	80004d8 <__aeabi_dmul>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7f7 fa64 	bl	8000168 <__aeabi_dsub>
 8008ca0:	f7f7 feca 	bl	8000a38 <__aeabi_d2iz>
 8008ca4:	9b02      	ldr	r3, [sp, #8]
 8008ca6:	3e01      	subs	r6, #1
 8008ca8:	f843 0b04 	str.w	r0, [r3], #4
 8008cac:	9302      	str	r3, [sp, #8]
 8008cae:	ab70      	add	r3, sp, #448	; 0x1c0
 8008cb0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 fa56 	bl	800016c <__adddf3>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	e762      	b.n	8008b8c <__kernel_rem_pio2+0x110>
 8008cc6:	d105      	bne.n	8008cd4 <__kernel_rem_pio2+0x258>
 8008cc8:	1e7b      	subs	r3, r7, #1
 8008cca:	aa0c      	add	r2, sp, #48	; 0x30
 8008ccc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008cd0:	15c3      	asrs	r3, r0, #23
 8008cd2:	e79b      	b.n	8008c0c <__kernel_rem_pio2+0x190>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4b32      	ldr	r3, [pc, #200]	; (8008da0 <__kernel_rem_pio2+0x324>)
 8008cd8:	f7f7 fe84 	bl	80009e4 <__aeabi_dcmpge>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d13f      	bne.n	8008d60 <__kernel_rem_pio2+0x2e4>
 8008ce0:	9002      	str	r0, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f000 80b5 	beq.w	8008e5e <__kernel_rem_pio2+0x3e2>
 8008cf4:	1e7c      	subs	r4, r7, #1
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	9904      	ldr	r1, [sp, #16]
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	da64      	bge.n	8008dca <__kernel_rem_pio2+0x34e>
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d078      	beq.n	8008df6 <__kernel_rem_pio2+0x37a>
 8008d04:	ab0c      	add	r3, sp, #48	; 0x30
 8008d06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d0a:	f1aa 0a18 	sub.w	sl, sl, #24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a3 	beq.w	8008e5a <__kernel_rem_pio2+0x3de>
 8008d14:	4652      	mov	r2, sl
 8008d16:	2000      	movs	r0, #0
 8008d18:	491e      	ldr	r1, [pc, #120]	; (8008d94 <__kernel_rem_pio2+0x318>)
 8008d1a:	f000 fb35 	bl	8009388 <scalbn>
 8008d1e:	46a2      	mov	sl, r4
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	00e3      	lsls	r3, r4, #3
 8008d2a:	9306      	str	r3, [sp, #24]
 8008d2c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008d98 <__kernel_rem_pio2+0x31c>
 8008d30:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d32:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	f280 80c6 	bge.w	8008eca <__kernel_rem_pio2+0x44e>
 8008d3e:	4627      	mov	r7, r4
 8008d40:	f04f 0800 	mov.w	r8, #0
 8008d44:	2f00      	cmp	r7, #0
 8008d46:	f2c0 80f3 	blt.w	8008f30 <__kernel_rem_pio2+0x4b4>
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <__kernel_rem_pio2+0x328>)
 8008d4c:	f04f 0a00 	mov.w	sl, #0
 8008d50:	461d      	mov	r5, r3
 8008d52:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d54:	f04f 0b00 	mov.w	fp, #0
 8008d58:	2600      	movs	r6, #0
 8008d5a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008d5e:	e0d9      	b.n	8008f14 <__kernel_rem_pio2+0x498>
 8008d60:	2302      	movs	r3, #2
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	e756      	b.n	8008c14 <__kernel_rem_pio2+0x198>
 8008d66:	f8db 3000 	ldr.w	r3, [fp]
 8008d6a:	b954      	cbnz	r4, 8008d82 <__kernel_rem_pio2+0x306>
 8008d6c:	b123      	cbz	r3, 8008d78 <__kernel_rem_pio2+0x2fc>
 8008d6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d72:	f8cb 3000 	str.w	r3, [fp]
 8008d76:	2301      	movs	r3, #1
 8008d78:	461c      	mov	r4, r3
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	f10b 0b04 	add.w	fp, fp, #4
 8008d80:	e74f      	b.n	8008c22 <__kernel_rem_pio2+0x1a6>
 8008d82:	1acb      	subs	r3, r1, r3
 8008d84:	f8cb 3000 	str.w	r3, [fp]
 8008d88:	4623      	mov	r3, r4
 8008d8a:	e7f5      	b.n	8008d78 <__kernel_rem_pio2+0x2fc>
 8008d8c:	08009ba8 	.word	0x08009ba8
 8008d90:	40200000 	.word	0x40200000
 8008d94:	3ff00000 	.word	0x3ff00000
 8008d98:	3e700000 	.word	0x3e700000
 8008d9c:	41700000 	.word	0x41700000
 8008da0:	3fe00000 	.word	0x3fe00000
 8008da4:	08009b68 	.word	0x08009b68
 8008da8:	1e7a      	subs	r2, r7, #1
 8008daa:	ab0c      	add	r3, sp, #48	; 0x30
 8008dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008db4:	a90c      	add	r1, sp, #48	; 0x30
 8008db6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008dba:	e740      	b.n	8008c3e <__kernel_rem_pio2+0x1c2>
 8008dbc:	1e7a      	subs	r2, r7, #1
 8008dbe:	ab0c      	add	r3, sp, #48	; 0x30
 8008dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008dc8:	e7f4      	b.n	8008db4 <__kernel_rem_pio2+0x338>
 8008dca:	a90c      	add	r1, sp, #48	; 0x30
 8008dcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	e791      	b.n	8008cfa <__kernel_rem_pio2+0x27e>
 8008dd6:	3401      	adds	r4, #1
 8008dd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	d0fa      	beq.n	8008dd6 <__kernel_rem_pio2+0x35a>
 8008de0:	9b08      	ldr	r3, [sp, #32]
 8008de2:	1c7e      	adds	r6, r7, #1
 8008de4:	18fd      	adds	r5, r7, r3
 8008de6:	ab20      	add	r3, sp, #128	; 0x80
 8008de8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008dec:	443c      	add	r4, r7
 8008dee:	42b4      	cmp	r4, r6
 8008df0:	da04      	bge.n	8008dfc <__kernel_rem_pio2+0x380>
 8008df2:	4627      	mov	r7, r4
 8008df4:	e6c0      	b.n	8008b78 <__kernel_rem_pio2+0xfc>
 8008df6:	2401      	movs	r4, #1
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	e7ed      	b.n	8008dd8 <__kernel_rem_pio2+0x35c>
 8008dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfe:	462f      	mov	r7, r5
 8008e00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e04:	f7f7 fafe 	bl	8000404 <__aeabi_i2d>
 8008e08:	f04f 0b00 	mov.w	fp, #0
 8008e0c:	f04f 0800 	mov.w	r8, #0
 8008e10:	f04f 0900 	mov.w	r9, #0
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	e8e7 0102 	strd	r0, r1, [r7], #8
 8008e1a:	3b08      	subs	r3, #8
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	9b06      	ldr	r3, [sp, #24]
 8008e20:	459b      	cmp	fp, r3
 8008e22:	dd07      	ble.n	8008e34 <__kernel_rem_pio2+0x3b8>
 8008e24:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e2a:	463d      	mov	r5, r7
 8008e2c:	e9c3 8900 	strd	r8, r9, [r3]
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7dc      	b.n	8008dee <__kernel_rem_pio2+0x372>
 8008e34:	9902      	ldr	r1, [sp, #8]
 8008e36:	f10b 0b01 	add.w	fp, fp, #1
 8008e3a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008e3e:	9102      	str	r1, [sp, #8]
 8008e40:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8008e44:	f7f7 fb48 	bl	80004d8 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4649      	mov	r1, r9
 8008e50:	f7f7 f98c 	bl	800016c <__adddf3>
 8008e54:	4680      	mov	r8, r0
 8008e56:	4689      	mov	r9, r1
 8008e58:	e7e1      	b.n	8008e1e <__kernel_rem_pio2+0x3a2>
 8008e5a:	3c01      	subs	r4, #1
 8008e5c:	e752      	b.n	8008d04 <__kernel_rem_pio2+0x288>
 8008e5e:	f1ca 0200 	rsb	r2, sl, #0
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f000 fa8f 	bl	8009388 <scalbn>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4ba5      	ldr	r3, [pc, #660]	; (8009104 <__kernel_rem_pio2+0x688>)
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	f7f7 fdb7 	bl	80009e4 <__aeabi_dcmpge>
 8008e76:	b1f8      	cbz	r0, 8008eb8 <__kernel_rem_pio2+0x43c>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4ba3      	ldr	r3, [pc, #652]	; (8009108 <__kernel_rem_pio2+0x68c>)
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fb2a 	bl	80004d8 <__aeabi_dmul>
 8008e84:	f7f7 fdd8 	bl	8000a38 <__aeabi_d2iz>
 8008e88:	4606      	mov	r6, r0
 8008e8a:	f7f7 fabb 	bl	8000404 <__aeabi_i2d>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4b9c      	ldr	r3, [pc, #624]	; (8009104 <__kernel_rem_pio2+0x688>)
 8008e92:	f7f7 fb21 	bl	80004d8 <__aeabi_dmul>
 8008e96:	460b      	mov	r3, r1
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f7f7 f963 	bl	8000168 <__aeabi_dsub>
 8008ea2:	f7f7 fdc9 	bl	8000a38 <__aeabi_d2iz>
 8008ea6:	1c7c      	adds	r4, r7, #1
 8008ea8:	ab0c      	add	r3, sp, #48	; 0x30
 8008eaa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008eae:	f10a 0a18 	add.w	sl, sl, #24
 8008eb2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008eb6:	e72d      	b.n	8008d14 <__kernel_rem_pio2+0x298>
 8008eb8:	4620      	mov	r0, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	f7f7 fdbc 	bl	8000a38 <__aeabi_d2iz>
 8008ec0:	ab0c      	add	r3, sp, #48	; 0x30
 8008ec2:	463c      	mov	r4, r7
 8008ec4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008ec8:	e724      	b.n	8008d14 <__kernel_rem_pio2+0x298>
 8008eca:	ab0c      	add	r3, sp, #48	; 0x30
 8008ecc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008ed0:	f7f7 fa98 	bl	8000404 <__aeabi_i2d>
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	f7f7 fafe 	bl	80004d8 <__aeabi_dmul>
 8008edc:	4642      	mov	r2, r8
 8008ede:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f7 faf6 	bl	80004d8 <__aeabi_dmul>
 8008eec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	460f      	mov	r7, r1
 8008ef4:	e71f      	b.n	8008d36 <__kernel_rem_pio2+0x2ba>
 8008ef6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008efa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008efe:	f7f7 faeb 	bl	80004d8 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	f7f7 f92f 	bl	800016c <__adddf3>
 8008f0e:	4682      	mov	sl, r0
 8008f10:	468b      	mov	fp, r1
 8008f12:	3601      	adds	r6, #1
 8008f14:	9b04      	ldr	r3, [sp, #16]
 8008f16:	429e      	cmp	r6, r3
 8008f18:	dc01      	bgt.n	8008f1e <__kernel_rem_pio2+0x4a2>
 8008f1a:	45b0      	cmp	r8, r6
 8008f1c:	daeb      	bge.n	8008ef6 <__kernel_rem_pio2+0x47a>
 8008f1e:	ab48      	add	r3, sp, #288	; 0x120
 8008f20:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008f24:	e9c3 ab00 	strd	sl, fp, [r3]
 8008f28:	3f01      	subs	r7, #1
 8008f2a:	f108 0801 	add.w	r8, r8, #1
 8008f2e:	e709      	b.n	8008d44 <__kernel_rem_pio2+0x2c8>
 8008f30:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	dc09      	bgt.n	8008f4a <__kernel_rem_pio2+0x4ce>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dc34      	bgt.n	8008fa4 <__kernel_rem_pio2+0x528>
 8008f3a:	d05e      	beq.n	8008ffa <__kernel_rem_pio2+0x57e>
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	f003 0007 	and.w	r0, r3, #7
 8008f42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d1f5      	bne.n	8008f3c <__kernel_rem_pio2+0x4c0>
 8008f50:	9a06      	ldr	r2, [sp, #24]
 8008f52:	ab48      	add	r3, sp, #288	; 0x120
 8008f54:	441a      	add	r2, r3
 8008f56:	4615      	mov	r5, r2
 8008f58:	4692      	mov	sl, r2
 8008f5a:	46a3      	mov	fp, r4
 8008f5c:	f1bb 0f00 	cmp.w	fp, #0
 8008f60:	dc7a      	bgt.n	8009058 <__kernel_rem_pio2+0x5dc>
 8008f62:	46aa      	mov	sl, r5
 8008f64:	46a3      	mov	fp, r4
 8008f66:	f1bb 0f01 	cmp.w	fp, #1
 8008f6a:	f300 8094 	bgt.w	8009096 <__kernel_rem_pio2+0x61a>
 8008f6e:	2700      	movs	r7, #0
 8008f70:	463e      	mov	r6, r7
 8008f72:	2c01      	cmp	r4, #1
 8008f74:	f300 80ae 	bgt.w	80090d4 <__kernel_rem_pio2+0x658>
 8008f78:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008f7c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008f80:	9b02      	ldr	r3, [sp, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f040 80b0 	bne.w	80090e8 <__kernel_rem_pio2+0x66c>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	9801      	ldr	r0, [sp, #4]
 8008f8e:	e9c0 2300 	strd	r2, r3, [r0]
 8008f92:	4622      	mov	r2, r4
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f9a:	463a      	mov	r2, r7
 8008f9c:	4633      	mov	r3, r6
 8008f9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008fa2:	e7cb      	b.n	8008f3c <__kernel_rem_pio2+0x4c0>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	9a06      	ldr	r2, [sp, #24]
 8008fa8:	ab48      	add	r3, sp, #288	; 0x120
 8008faa:	441a      	add	r2, r3
 8008fac:	4615      	mov	r5, r2
 8008fae:	46a0      	mov	r8, r4
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	f1b8 0f00 	cmp.w	r8, #0
 8008fb6:	da3c      	bge.n	8009032 <__kernel_rem_pio2+0x5b6>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d040      	beq.n	8009040 <__kernel_rem_pio2+0x5c4>
 8008fbe:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	9d01      	ldr	r5, [sp, #4]
 8008fc8:	2601      	movs	r6, #1
 8008fca:	e9c5 2300 	strd	r2, r3, [r5]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008fd4:	f7f7 f8c8 	bl	8000168 <__aeabi_dsub>
 8008fd8:	4684      	mov	ip, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	ad48      	add	r5, sp, #288	; 0x120
 8008fde:	42b4      	cmp	r4, r6
 8008fe0:	f105 0508 	add.w	r5, r5, #8
 8008fe4:	da2e      	bge.n	8009044 <__kernel_rem_pio2+0x5c8>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	b10b      	cbz	r3, 8008fee <__kernel_rem_pio2+0x572>
 8008fea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008fee:	4662      	mov	r2, ip
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	9901      	ldr	r1, [sp, #4]
 8008ff4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008ff8:	e7a0      	b.n	8008f3c <__kernel_rem_pio2+0x4c0>
 8008ffa:	9a06      	ldr	r2, [sp, #24]
 8008ffc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008ffe:	ab48      	add	r3, sp, #288	; 0x120
 8009000:	441a      	add	r2, r3
 8009002:	4615      	mov	r5, r2
 8009004:	4637      	mov	r7, r6
 8009006:	2c00      	cmp	r4, #0
 8009008:	da09      	bge.n	800901e <__kernel_rem_pio2+0x5a2>
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	b10b      	cbz	r3, 8009012 <__kernel_rem_pio2+0x596>
 800900e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009012:	4632      	mov	r2, r6
 8009014:	463b      	mov	r3, r7
 8009016:	9901      	ldr	r1, [sp, #4]
 8009018:	e9c1 2300 	strd	r2, r3, [r1]
 800901c:	e78e      	b.n	8008f3c <__kernel_rem_pio2+0x4c0>
 800901e:	4630      	mov	r0, r6
 8009020:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009024:	4639      	mov	r1, r7
 8009026:	f7f7 f8a1 	bl	800016c <__adddf3>
 800902a:	3c01      	subs	r4, #1
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	e7e9      	b.n	8009006 <__kernel_rem_pio2+0x58a>
 8009032:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009036:	f7f7 f899 	bl	800016c <__adddf3>
 800903a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800903e:	e7b8      	b.n	8008fb2 <__kernel_rem_pio2+0x536>
 8009040:	460d      	mov	r5, r1
 8009042:	e7be      	b.n	8008fc2 <__kernel_rem_pio2+0x546>
 8009044:	4660      	mov	r0, ip
 8009046:	e9d5 2300 	ldrd	r2, r3, [r5]
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f88e 	bl	800016c <__adddf3>
 8009050:	3601      	adds	r6, #1
 8009052:	4684      	mov	ip, r0
 8009054:	460f      	mov	r7, r1
 8009056:	e7c2      	b.n	8008fde <__kernel_rem_pio2+0x562>
 8009058:	e9da 6700 	ldrd	r6, r7, [sl]
 800905c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 f880 	bl	800016c <__adddf3>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009074:	4640      	mov	r0, r8
 8009076:	4649      	mov	r1, r9
 8009078:	f7f7 f876 	bl	8000168 <__aeabi_dsub>
 800907c:	4632      	mov	r2, r6
 800907e:	463b      	mov	r3, r7
 8009080:	f7f7 f874 	bl	800016c <__adddf3>
 8009084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009088:	e86a 0102 	strd	r0, r1, [sl], #-8
 800908c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009090:	e9ca 2300 	strd	r2, r3, [sl]
 8009094:	e762      	b.n	8008f5c <__kernel_rem_pio2+0x4e0>
 8009096:	e9da 8900 	ldrd	r8, r9, [sl]
 800909a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800909e:	4642      	mov	r2, r8
 80090a0:	464b      	mov	r3, r9
 80090a2:	4630      	mov	r0, r6
 80090a4:	4639      	mov	r1, r7
 80090a6:	f7f7 f861 	bl	800016c <__adddf3>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090b2:	4630      	mov	r0, r6
 80090b4:	4639      	mov	r1, r7
 80090b6:	f7f7 f857 	bl	8000168 <__aeabi_dsub>
 80090ba:	4642      	mov	r2, r8
 80090bc:	464b      	mov	r3, r9
 80090be:	f7f7 f855 	bl	800016c <__adddf3>
 80090c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80090ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090ce:	e9ca 2300 	strd	r2, r3, [sl]
 80090d2:	e748      	b.n	8008f66 <__kernel_rem_pio2+0x4ea>
 80090d4:	4638      	mov	r0, r7
 80090d6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80090da:	4631      	mov	r1, r6
 80090dc:	f7f7 f846 	bl	800016c <__adddf3>
 80090e0:	3c01      	subs	r4, #1
 80090e2:	4607      	mov	r7, r0
 80090e4:	460e      	mov	r6, r1
 80090e6:	e744      	b.n	8008f72 <__kernel_rem_pio2+0x4f6>
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80090ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80090f2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80090f6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80090fa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80090fe:	601d      	str	r5, [r3, #0]
 8009100:	615e      	str	r6, [r3, #20]
 8009102:	e71b      	b.n	8008f3c <__kernel_rem_pio2+0x4c0>
 8009104:	41700000 	.word	0x41700000
 8009108:	3e700000 	.word	0x3e700000
 800910c:	00000000 	.word	0x00000000

08009110 <__kernel_sin>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	b086      	sub	sp, #24
 8009116:	e9cd 2300 	strd	r2, r3, [sp]
 800911a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800911e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009122:	4682      	mov	sl, r0
 8009124:	460c      	mov	r4, r1
 8009126:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009128:	da03      	bge.n	8009132 <__kernel_sin+0x22>
 800912a:	f7f7 fc85 	bl	8000a38 <__aeabi_d2iz>
 800912e:	2800      	cmp	r0, #0
 8009130:	d050      	beq.n	80091d4 <__kernel_sin+0xc4>
 8009132:	4652      	mov	r2, sl
 8009134:	4623      	mov	r3, r4
 8009136:	4650      	mov	r0, sl
 8009138:	4621      	mov	r1, r4
 800913a:	f7f7 f9cd 	bl	80004d8 <__aeabi_dmul>
 800913e:	4606      	mov	r6, r0
 8009140:	460f      	mov	r7, r1
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4650      	mov	r0, sl
 8009148:	4621      	mov	r1, r4
 800914a:	f7f7 f9c5 	bl	80004d8 <__aeabi_dmul>
 800914e:	a33e      	add	r3, pc, #248	; (adr r3, 8009248 <__kernel_sin+0x138>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	4680      	mov	r8, r0
 8009156:	4689      	mov	r9, r1
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 f9bc 	bl	80004d8 <__aeabi_dmul>
 8009160:	a33b      	add	r3, pc, #236	; (adr r3, 8009250 <__kernel_sin+0x140>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f6 ffff 	bl	8000168 <__aeabi_dsub>
 800916a:	4632      	mov	r2, r6
 800916c:	463b      	mov	r3, r7
 800916e:	f7f7 f9b3 	bl	80004d8 <__aeabi_dmul>
 8009172:	a339      	add	r3, pc, #228	; (adr r3, 8009258 <__kernel_sin+0x148>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f6 fff8 	bl	800016c <__adddf3>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 f9aa 	bl	80004d8 <__aeabi_dmul>
 8009184:	a336      	add	r3, pc, #216	; (adr r3, 8009260 <__kernel_sin+0x150>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f6 ffed 	bl	8000168 <__aeabi_dsub>
 800918e:	4632      	mov	r2, r6
 8009190:	463b      	mov	r3, r7
 8009192:	f7f7 f9a1 	bl	80004d8 <__aeabi_dmul>
 8009196:	a334      	add	r3, pc, #208	; (adr r3, 8009268 <__kernel_sin+0x158>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f6 ffe6 	bl	800016c <__adddf3>
 80091a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a4:	b9dd      	cbnz	r5, 80091de <__kernel_sin+0xce>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 f993 	bl	80004d8 <__aeabi_dmul>
 80091b2:	a32f      	add	r3, pc, #188	; (adr r3, 8009270 <__kernel_sin+0x160>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f6 ffd6 	bl	8000168 <__aeabi_dsub>
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	f7f7 f98a 	bl	80004d8 <__aeabi_dmul>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4650      	mov	r0, sl
 80091ca:	4621      	mov	r1, r4
 80091cc:	f7f6 ffce 	bl	800016c <__adddf3>
 80091d0:	4682      	mov	sl, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4650      	mov	r0, sl
 80091d6:	4621      	mov	r1, r4
 80091d8:	b006      	add	sp, #24
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	2200      	movs	r2, #0
 80091e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e4:	4b24      	ldr	r3, [pc, #144]	; (8009278 <__kernel_sin+0x168>)
 80091e6:	f7f7 f977 	bl	80004d8 <__aeabi_dmul>
 80091ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 f96f 	bl	80004d8 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009202:	f7f6 ffb1 	bl	8000168 <__aeabi_dsub>
 8009206:	4632      	mov	r2, r6
 8009208:	463b      	mov	r3, r7
 800920a:	f7f7 f965 	bl	80004d8 <__aeabi_dmul>
 800920e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009212:	f7f6 ffa9 	bl	8000168 <__aeabi_dsub>
 8009216:	a316      	add	r3, pc, #88	; (adr r3, 8009270 <__kernel_sin+0x160>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	4606      	mov	r6, r0
 800921e:	460f      	mov	r7, r1
 8009220:	4640      	mov	r0, r8
 8009222:	4649      	mov	r1, r9
 8009224:	f7f7 f958 	bl	80004d8 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f7f6 ff9c 	bl	800016c <__adddf3>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4650      	mov	r0, sl
 800923a:	4621      	mov	r1, r4
 800923c:	f7f6 ff94 	bl	8000168 <__aeabi_dsub>
 8009240:	e7c6      	b.n	80091d0 <__kernel_sin+0xc0>
 8009242:	bf00      	nop
 8009244:	f3af 8000 	nop.w
 8009248:	5acfd57c 	.word	0x5acfd57c
 800924c:	3de5d93a 	.word	0x3de5d93a
 8009250:	8a2b9ceb 	.word	0x8a2b9ceb
 8009254:	3e5ae5e6 	.word	0x3e5ae5e6
 8009258:	57b1fe7d 	.word	0x57b1fe7d
 800925c:	3ec71de3 	.word	0x3ec71de3
 8009260:	19c161d5 	.word	0x19c161d5
 8009264:	3f2a01a0 	.word	0x3f2a01a0
 8009268:	1110f8a6 	.word	0x1110f8a6
 800926c:	3f811111 	.word	0x3f811111
 8009270:	55555549 	.word	0x55555549
 8009274:	3fc55555 	.word	0x3fc55555
 8009278:	3fe00000 	.word	0x3fe00000

0800927c <fabs>:
 800927c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009280:	4770      	bx	lr
 8009282:	0000      	movs	r0, r0
 8009284:	0000      	movs	r0, r0
	...

08009288 <floor>:
 8009288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800928c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009290:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8009294:	2e13      	cmp	r6, #19
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4607      	mov	r7, r0
 800929c:	460c      	mov	r4, r1
 800929e:	4605      	mov	r5, r0
 80092a0:	dc34      	bgt.n	800930c <floor+0x84>
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	da15      	bge.n	80092d2 <floor+0x4a>
 80092a6:	a334      	add	r3, pc, #208	; (adr r3, 8009378 <floor+0xf0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 ff5e 	bl	800016c <__adddf3>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	f7f7 fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80092b8:	b140      	cbz	r0, 80092cc <floor+0x44>
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	da59      	bge.n	8009372 <floor+0xea>
 80092be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80092c2:	ea57 0503 	orrs.w	r5, r7, r3
 80092c6:	d001      	beq.n	80092cc <floor+0x44>
 80092c8:	2500      	movs	r5, #0
 80092ca:	4c2d      	ldr	r4, [pc, #180]	; (8009380 <floor+0xf8>)
 80092cc:	4623      	mov	r3, r4
 80092ce:	462f      	mov	r7, r5
 80092d0:	e025      	b.n	800931e <floor+0x96>
 80092d2:	4a2c      	ldr	r2, [pc, #176]	; (8009384 <floor+0xfc>)
 80092d4:	fa42 f806 	asr.w	r8, r2, r6
 80092d8:	ea01 0208 	and.w	r2, r1, r8
 80092dc:	4302      	orrs	r2, r0
 80092de:	d01e      	beq.n	800931e <floor+0x96>
 80092e0:	a325      	add	r3, pc, #148	; (adr r3, 8009378 <floor+0xf0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ff41 	bl	800016c <__adddf3>
 80092ea:	2200      	movs	r2, #0
 80092ec:	2300      	movs	r3, #0
 80092ee:	f7f7 fb83 	bl	80009f8 <__aeabi_dcmpgt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d0ea      	beq.n	80092cc <floor+0x44>
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	bfbe      	ittt	lt
 80092fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80092fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009302:	19a4      	addlt	r4, r4, r6
 8009304:	2500      	movs	r5, #0
 8009306:	ea24 0408 	bic.w	r4, r4, r8
 800930a:	e7df      	b.n	80092cc <floor+0x44>
 800930c:	2e33      	cmp	r6, #51	; 0x33
 800930e:	dd0a      	ble.n	8009326 <floor+0x9e>
 8009310:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009314:	d103      	bne.n	800931e <floor+0x96>
 8009316:	f7f6 ff29 	bl	800016c <__adddf3>
 800931a:	4607      	mov	r7, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4638      	mov	r0, r7
 8009320:	4619      	mov	r1, r3
 8009322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800932a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800932e:	fa22 f808 	lsr.w	r8, r2, r8
 8009332:	ea18 0f00 	tst.w	r8, r0
 8009336:	d0f2      	beq.n	800931e <floor+0x96>
 8009338:	a30f      	add	r3, pc, #60	; (adr r3, 8009378 <floor+0xf0>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff15 	bl	800016c <__adddf3>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	f7f7 fb57 	bl	80009f8 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	d0be      	beq.n	80092cc <floor+0x44>
 800934e:	2c00      	cmp	r4, #0
 8009350:	da02      	bge.n	8009358 <floor+0xd0>
 8009352:	2e14      	cmp	r6, #20
 8009354:	d103      	bne.n	800935e <floor+0xd6>
 8009356:	3401      	adds	r4, #1
 8009358:	ea25 0508 	bic.w	r5, r5, r8
 800935c:	e7b6      	b.n	80092cc <floor+0x44>
 800935e:	2301      	movs	r3, #1
 8009360:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009364:	fa03 f606 	lsl.w	r6, r3, r6
 8009368:	4435      	add	r5, r6
 800936a:	42bd      	cmp	r5, r7
 800936c:	bf38      	it	cc
 800936e:	18e4      	addcc	r4, r4, r3
 8009370:	e7f2      	b.n	8009358 <floor+0xd0>
 8009372:	2500      	movs	r5, #0
 8009374:	462c      	mov	r4, r5
 8009376:	e7a9      	b.n	80092cc <floor+0x44>
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	bff00000 	.word	0xbff00000
 8009384:	000fffff 	.word	0x000fffff

08009388 <scalbn>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	4617      	mov	r7, r2
 8009394:	460b      	mov	r3, r1
 8009396:	b996      	cbnz	r6, 80093be <scalbn+0x36>
 8009398:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800939c:	4303      	orrs	r3, r0
 800939e:	d039      	beq.n	8009414 <scalbn+0x8c>
 80093a0:	4b35      	ldr	r3, [pc, #212]	; (8009478 <scalbn+0xf0>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7f7 f898 	bl	80004d8 <__aeabi_dmul>
 80093a8:	4b34      	ldr	r3, [pc, #208]	; (800947c <scalbn+0xf4>)
 80093aa:	4604      	mov	r4, r0
 80093ac:	429f      	cmp	r7, r3
 80093ae:	460d      	mov	r5, r1
 80093b0:	da0f      	bge.n	80093d2 <scalbn+0x4a>
 80093b2:	a32d      	add	r3, pc, #180	; (adr r3, 8009468 <scalbn+0xe0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f7 f88e 	bl	80004d8 <__aeabi_dmul>
 80093bc:	e006      	b.n	80093cc <scalbn+0x44>
 80093be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80093c2:	4296      	cmp	r6, r2
 80093c4:	d10a      	bne.n	80093dc <scalbn+0x54>
 80093c6:	4602      	mov	r2, r0
 80093c8:	f7f6 fed0 	bl	800016c <__adddf3>
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	e020      	b.n	8009414 <scalbn+0x8c>
 80093d2:	460b      	mov	r3, r1
 80093d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80093dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80093e0:	19b9      	adds	r1, r7, r6
 80093e2:	4291      	cmp	r1, r2
 80093e4:	dd0e      	ble.n	8009404 <scalbn+0x7c>
 80093e6:	a322      	add	r3, pc, #136	; (adr r3, 8009470 <scalbn+0xe8>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80093f0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80093f4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80093f8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80093fc:	4820      	ldr	r0, [pc, #128]	; (8009480 <scalbn+0xf8>)
 80093fe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009402:	e7d9      	b.n	80093b8 <scalbn+0x30>
 8009404:	2900      	cmp	r1, #0
 8009406:	dd08      	ble.n	800941a <scalbn+0x92>
 8009408:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800940c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009410:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800941e:	da16      	bge.n	800944e <scalbn+0xc6>
 8009420:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009424:	429f      	cmp	r7, r3
 8009426:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800942a:	dd08      	ble.n	800943e <scalbn+0xb6>
 800942c:	4c15      	ldr	r4, [pc, #84]	; (8009484 <scalbn+0xfc>)
 800942e:	4814      	ldr	r0, [pc, #80]	; (8009480 <scalbn+0xf8>)
 8009430:	f363 74df 	bfi	r4, r3, #31, #1
 8009434:	a30e      	add	r3, pc, #56	; (adr r3, 8009470 <scalbn+0xe8>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	4621      	mov	r1, r4
 800943c:	e7bc      	b.n	80093b8 <scalbn+0x30>
 800943e:	4c12      	ldr	r4, [pc, #72]	; (8009488 <scalbn+0x100>)
 8009440:	4812      	ldr	r0, [pc, #72]	; (800948c <scalbn+0x104>)
 8009442:	f363 74df 	bfi	r4, r3, #31, #1
 8009446:	a308      	add	r3, pc, #32	; (adr r3, 8009468 <scalbn+0xe0>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	e7f5      	b.n	800943a <scalbn+0xb2>
 800944e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009452:	3136      	adds	r1, #54	; 0x36
 8009454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009458:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	2200      	movs	r2, #0
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <scalbn+0x108>)
 8009464:	e7a8      	b.n	80093b8 <scalbn+0x30>
 8009466:	bf00      	nop
 8009468:	c2f8f359 	.word	0xc2f8f359
 800946c:	01a56e1f 	.word	0x01a56e1f
 8009470:	8800759c 	.word	0x8800759c
 8009474:	7e37e43c 	.word	0x7e37e43c
 8009478:	43500000 	.word	0x43500000
 800947c:	ffff3cb0 	.word	0xffff3cb0
 8009480:	8800759c 	.word	0x8800759c
 8009484:	7e37e43c 	.word	0x7e37e43c
 8009488:	01a56e1f 	.word	0x01a56e1f
 800948c:	c2f8f359 	.word	0xc2f8f359
 8009490:	3c900000 	.word	0x3c900000

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
