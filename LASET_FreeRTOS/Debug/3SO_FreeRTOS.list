
3SO_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08002bc0  08002bc0  00012bc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003130  08003130  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003130  08003130  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000458c  20000088  080031c0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20004614  080031c0  00024614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ca8  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccc  00000000  00000000  00031d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000077be  00000000  00000000  00034a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0003c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  0003cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f7d  00000000  00000000  0003dc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e921  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005ef9c  00000000  00000000  000514f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b0492  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f0  00000000  00000000  000b04e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ba8 	.word	0x08002ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08002ba8 	.word	0x08002ba8

08000150 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8000154:	f000 fd42 	bl	8000bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000158:	4b24      	ldr	r3, [pc, #144]	; (80001ec <pvPortMalloc+0x9c>)
 800015a:	6898      	ldr	r0, [r3, #8]
 800015c:	b970      	cbnz	r0, 800017c <pvPortMalloc+0x2c>
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
	xEnd.pxNextFreeBlock = NULL;
 800015e:	4619      	mov	r1, r3
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000160:	f244 35f8 	movw	r5, #17400	; 0x43f8
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000164:	4a22      	ldr	r2, [pc, #136]	; (80001f0 <pvPortMalloc+0xa0>)
	xEnd.pxNextFreeBlock = NULL;
 8000166:	f841 0f0c 	str.w	r0, [r1, #12]!
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800016a:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800016e:	e9c3 2000 	strd	r2, r0, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000172:	e9c2 1500 	strd	r1, r5, [r2]
			xHeapHasBeenInitialised = pdTRUE;
 8000176:	2201      	movs	r2, #1
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000178:	611d      	str	r5, [r3, #16]
			xHeapHasBeenInitialised = pdTRUE;
 800017a:	609a      	str	r2, [r3, #8]
		if( xWantedSize > 0 )
 800017c:	b12c      	cbz	r4, 800018a <pvPortMalloc+0x3a>
			xWantedSize += heapSTRUCT_SIZE;
 800017e:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000180:	0762      	lsls	r2, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000182:	bf1c      	itt	ne
 8000184:	f024 0407 	bicne.w	r4, r4, #7
 8000188:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800018a:	f244 32f6 	movw	r2, #17398	; 0x43f6
 800018e:	1e61      	subs	r1, r4, #1
 8000190:	4291      	cmp	r1, r2
 8000192:	d829      	bhi.n	80001e8 <pvPortMalloc+0x98>
			pxBlock = xStart.pxNextFreeBlock;
 8000194:	681b      	ldr	r3, [r3, #0]
			pxPreviousBlock = &xStart;
 8000196:	4815      	ldr	r0, [pc, #84]	; (80001ec <pvPortMalloc+0x9c>)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000198:	6859      	ldr	r1, [r3, #4]
 800019a:	42a1      	cmp	r1, r4
 800019c:	d201      	bcs.n	80001a2 <pvPortMalloc+0x52>
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	b9fa      	cbnz	r2, 80001e2 <pvPortMalloc+0x92>
			if( pxBlock != &xEnd )
 80001a2:	4a14      	ldr	r2, [pc, #80]	; (80001f4 <pvPortMalloc+0xa4>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d01f      	beq.n	80001e8 <pvPortMalloc+0x98>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001a8:	6805      	ldr	r5, [r0, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001aa:	681e      	ldr	r6, [r3, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001ac:	1b09      	subs	r1, r1, r4
 80001ae:	2910      	cmp	r1, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001b0:	f105 0508 	add.w	r5, r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001b4:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001b6:	d90b      	bls.n	80001d0 <pvPortMalloc+0x80>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80001b8:	1918      	adds	r0, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80001ba:	6041      	str	r1, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
 80001bc:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80001be:	6844      	ldr	r4, [r0, #4]
 80001c0:	3a0c      	subs	r2, #12
 80001c2:	4611      	mov	r1, r2
 80001c4:	6812      	ldr	r2, [r2, #0]
 80001c6:	6856      	ldr	r6, [r2, #4]
 80001c8:	42a6      	cmp	r6, r4
 80001ca:	d3fa      	bcc.n	80001c2 <pvPortMalloc+0x72>
 80001cc:	6002      	str	r2, [r0, #0]
 80001ce:	6008      	str	r0, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80001d0:	4909      	ldr	r1, [pc, #36]	; (80001f8 <pvPortMalloc+0xa8>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	680a      	ldr	r2, [r1, #0]
 80001d6:	1ad2      	subs	r2, r2, r3
 80001d8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
 80001da:	f000 fda1 	bl	8000d20 <xTaskResumeAll>
}
 80001de:	4628      	mov	r0, r5
 80001e0:	bd70      	pop	{r4, r5, r6, pc}
 80001e2:	4618      	mov	r0, r3
 80001e4:	4613      	mov	r3, r2
 80001e6:	e7d7      	b.n	8000198 <pvPortMalloc+0x48>
void *pvReturn = NULL;
 80001e8:	2500      	movs	r5, #0
 80001ea:	e7f6      	b.n	80001da <pvPortMalloc+0x8a>
 80001ec:	200000a4 	.word	0x200000a4
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	200000b0 	.word	0x200000b0
 80001f8:	20000000 	.word	0x20000000

080001fc <vPortFree>:
{
 80001fc:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80001fe:	4604      	mov	r4, r0
 8000200:	b1b0      	cbz	r0, 8000230 <vPortFree+0x34>
		puc -= heapSTRUCT_SIZE;
 8000202:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
 8000206:	f000 fce9 	bl	8000bdc <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800020a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <vPortFree+0x38>)
 8000210:	461a      	mov	r2, r3
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	6858      	ldr	r0, [r3, #4]
 8000216:	4288      	cmp	r0, r1
 8000218:	d3fa      	bcc.n	8000210 <vPortFree+0x14>
 800021a:	f844 3c08 	str.w	r3, [r4, #-8]
 800021e:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <vPortFree+0x3c>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	440b      	add	r3, r1
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
 800022c:	f000 bd78 	b.w	8000d20 <xTaskResumeAll>
}
 8000230:	bd38      	pop	{r3, r4, r5, pc}
 8000232:	bf00      	nop
 8000234:	200000a4 	.word	0x200000a4
 8000238:	20000000 	.word	0x20000000

0800023c <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800023c:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000240:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000248:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800024a:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024c:	2300      	movs	r3, #0
 800024e:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000250:	4770      	bx	lr

08000252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000252:	2300      	movs	r3, #0
 8000254:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000256:	4770      	bx	lr

08000258 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000258:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800025a:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800025c:	1c63      	adds	r3, r4, #1
 800025e:	d10a      	bne.n	8000276 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000260:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000266:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000268:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800026a:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800026c:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 800026e:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8000270:	3301      	adds	r3, #1
 8000272:	6003      	str	r3, [r0, #0]
}
 8000274:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000276:	f100 0208 	add.w	r2, r0, #8
 800027a:	4613      	mov	r3, r2
 800027c:	6852      	ldr	r2, [r2, #4]
 800027e:	6815      	ldr	r5, [r2, #0]
 8000280:	42a5      	cmp	r5, r4
 8000282:	d9fa      	bls.n	800027a <vListInsert+0x22>
 8000284:	e7ed      	b.n	8000262 <vListInsert+0xa>

08000286 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000286:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000288:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800028c:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800028e:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000290:	6859      	ldr	r1, [r3, #4]
 8000292:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000294:	bf08      	it	eq
 8000296:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000298:	2200      	movs	r2, #0
 800029a:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	3a01      	subs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002a2:	6818      	ldr	r0, [r3, #0]
}
 80002a4:	4770      	bx	lr

080002a6 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80002a6:	2300      	movs	r3, #0
{
 80002a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80002aa:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002ac:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80002b0:	f383 8811 	msr	BASEPRI, r3
 80002b4:	f3bf 8f6f 	isb	sy
 80002b8:	f3bf 8f4f 	dsb	sy

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0fc      	beq.n	80002bc <prvTaskExitError+0x16>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80002c2:	b002      	add	sp, #8
 80002c4:	4770      	bx	lr
	...

080002c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80002c8:	4806      	ldr	r0, [pc, #24]	; (80002e4 <prvPortStartFirstTask+0x1c>)
 80002ca:	6800      	ldr	r0, [r0, #0]
 80002cc:	6800      	ldr	r0, [r0, #0]
 80002ce:	f380 8808 	msr	MSP, r0
 80002d2:	b662      	cpsie	i
 80002d4:	b661      	cpsie	f
 80002d6:	f3bf 8f4f 	dsb	sy
 80002da:	f3bf 8f6f 	isb	sy
 80002de:	df00      	svc	0
 80002e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80002e2:	0000      	.short	0x0000
 80002e4:	e000ed08 	.word	0xe000ed08

080002e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80002e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80002f2:	f021 0101 	bic.w	r1, r1, #1
 80002f6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80002fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80002fe:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8000302:	3840      	subs	r0, #64	; 0x40
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	080002a7 	.word	0x080002a7
 800030c:	00000000 	.word	0x00000000

08000310 <SVC_Handler>:
	__asm volatile (
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <pxCurrentTCBConst2>)
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	6808      	ldr	r0, [r1, #0]
 8000316:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800031a:	f380 8809 	msr	PSP, r0
 800031e:	f3bf 8f6f 	isb	sy
 8000322:	f04f 0000 	mov.w	r0, #0
 8000326:	f380 8811 	msr	BASEPRI, r0
 800032a:	f04e 0e0d 	orr.w	lr, lr, #13
 800032e:	4770      	bx	lr

08000330 <pxCurrentTCBConst2>:
 8000330:	200044bc 	.word	0x200044bc

08000334 <vPortEnterCritical>:
 8000334:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000338:	f383 8811 	msr	BASEPRI, r3
 800033c:	f3bf 8f6f 	isb	sy
 8000340:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000344:	4a02      	ldr	r2, [pc, #8]	; (8000350 <vPortEnterCritical+0x1c>)
 8000346:	6813      	ldr	r3, [r2, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000004 	.word	0x20000004

08000354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <vPortExitCritical+0x10>)
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800035c:	b90b      	cbnz	r3, 8000362 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800035e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000362:	4770      	bx	lr
 8000364:	20000004 	.word	0x20000004
	...

08000370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000370:	f3ef 8009 	mrs	r0, PSP
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <pxCurrentTCBConst>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000380:	6010      	str	r0, [r2, #0]
 8000382:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000386:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800038a:	f380 8811 	msr	BASEPRI, r0
 800038e:	f000 fd8f 	bl	8000eb0 <vTaskSwitchContext>
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	f380 8811 	msr	BASEPRI, r0
 800039a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	6808      	ldr	r0, [r1, #0]
 80003a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003a6:	f380 8809 	msr	PSP, r0
 80003aa:	f3bf 8f6f 	isb	sy
 80003ae:	4770      	bx	lr

080003b0 <pxCurrentTCBConst>:
 80003b0:	200044bc 	.word	0x200044bc

080003b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80003b4:	b508      	push	{r3, lr}
	__asm volatile
 80003b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003ba:	f383 8811 	msr	BASEPRI, r3
 80003be:	f3bf 8f6f 	isb	sy
 80003c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80003c6:	f000 fc19 	bl	8000bfc <xTaskIncrementTick>
 80003ca:	b118      	cbz	r0, 80003d4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80003cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <SysTick_Handler+0x28>)
 80003d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80003d4:	2300      	movs	r3, #0
 80003d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80003da:	bd08      	pop	{r3, pc}
 80003dc:	e000ed04 	.word	0xe000ed04

080003e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80003e0:	2200      	movs	r2, #0
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80003e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80003e8:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <vPortSetupTimerInterrupt+0x20>)
 80003ec:	4905      	ldr	r1, [pc, #20]	; (8000404 <vPortSetupTimerInterrupt+0x24>)
 80003ee:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80003f0:	2207      	movs	r2, #7
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	e000e018 	.word	0xe000e018
 8000400:	e000e014 	.word	0xe000e014
 8000404:	0001193f 	.word	0x0001193f

08000408 <xPortStartScheduler>:
{
 8000408:	b510      	push	{r4, lr}
	uxCriticalNesting = 0;
 800040a:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <xPortStartScheduler+0x30>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8000414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800041c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800041e:	f7ff ffdf 	bl	80003e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <xPortStartScheduler+0x34>)
 8000424:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8000426:	f7ff ff4f 	bl	80002c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800042a:	f000 fd41 	bl	8000eb0 <vTaskSwitchContext>
	prvTaskExitError();
 800042e:	f7ff ff3a 	bl	80002a6 <prvTaskExitError>
}
 8000432:	4620      	mov	r0, r4
 8000434:	bd10      	pop	{r4, pc}
 8000436:	bf00      	nop
 8000438:	e000ed20 	.word	0xe000ed20
 800043c:	20000004 	.word	0x20000004

08000440 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000440:	b510      	push	{r4, lr}
 8000442:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000444:	f7ff ff76 	bl	8000334 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000448:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800044a:	f7ff ff83 	bl	8000354 <vPortExitCritical>

    return xReturn;
}
 800044e:	fab4 f084 	clz	r0, r4
 8000452:	0940      	lsrs	r0, r0, #5
 8000454:	bd10      	pop	{r4, pc}

08000456 <prvCopyDataToQueue>:
{
 8000456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000458:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800045a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800045c:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800045e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000460:	b952      	cbnz	r2, 8000478 <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000462:	6807      	ldr	r7, [r0, #0]
 8000464:	bb47      	cbnz	r7, 80004b8 <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000466:	6880      	ldr	r0, [r0, #8]
 8000468:	f000 fe3c 	bl	80010e4 <xTaskPriorityDisinherit>
 800046c:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800046e:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000470:	3601      	adds	r6, #1
}
 8000472:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000474:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8000476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8000478:	b965      	cbnz	r5, 8000494 <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800047a:	6840      	ldr	r0, [r0, #4]
 800047c:	f001 ff52 	bl	8002324 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000480:	6863      	ldr	r3, [r4, #4]
 8000482:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000484:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000486:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000488:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800048a:	4293      	cmp	r3, r2
 800048c:	d3f0      	bcc.n	8000470 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	6063      	str	r3, [r4, #4]
 8000492:	e7ed      	b.n	8000470 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000494:	68c0      	ldr	r0, [r0, #12]
 8000496:	f001 ff45 	bl	8002324 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800049a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800049c:	68e3      	ldr	r3, [r4, #12]
 800049e:	4251      	negs	r1, r2
 80004a0:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004a2:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80004a4:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80004a6:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80004a8:	bf3e      	ittt	cc
 80004aa:	68a3      	ldrcc	r3, [r4, #8]
 80004ac:	185b      	addcc	r3, r3, r1
 80004ae:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 80004b0:	2d02      	cmp	r5, #2
 80004b2:	d101      	bne.n	80004b8 <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80004b4:	b116      	cbz	r6, 80004bc <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 80004b6:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 80004b8:	2500      	movs	r5, #0
 80004ba:	e7d9      	b.n	8000470 <prvCopyDataToQueue+0x1a>
 80004bc:	4635      	mov	r5, r6
 80004be:	e7d7      	b.n	8000470 <prvCopyDataToQueue+0x1a>

080004c0 <prvUnlockQueue>:
{
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80004c4:	f7ff ff36 	bl	8000334 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80004c8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80004cc:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 80004d0:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	dc14      	bgt.n	8000500 <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 80004d6:	23ff      	movs	r3, #255	; 0xff
 80004d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 80004dc:	f7ff ff3a 	bl	8000354 <vPortExitCritical>
    taskENTER_CRITICAL();
 80004e0:	f7ff ff28 	bl	8000334 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80004e4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80004e8:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 80004ec:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	dc12      	bgt.n	8000518 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 80004f2:	23ff      	movs	r3, #255	; 0xff
 80004f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80004f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80004fc:	f7ff bf2a 	b.w	8000354 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0e7      	beq.n	80004d6 <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000506:	4630      	mov	r0, r6
 8000508:	f000 fd0a 	bl	8000f20 <xTaskRemoveFromEventList>
 800050c:	b108      	cbz	r0, 8000512 <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 800050e:	f000 fd91 	bl	8001034 <vTaskMissedYield>
            --cTxLock;
 8000512:	3d01      	subs	r5, #1
 8000514:	b26d      	sxtb	r5, r5
 8000516:	e7dc      	b.n	80004d2 <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000518:	6923      	ldr	r3, [r4, #16]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0e9      	beq.n	80004f2 <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800051e:	4630      	mov	r0, r6
 8000520:	f000 fcfe 	bl	8000f20 <xTaskRemoveFromEventList>
 8000524:	b108      	cbz	r0, 800052a <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8000526:	f000 fd85 	bl	8001034 <vTaskMissedYield>
                --cRxLock;
 800052a:	3d01      	subs	r5, #1
 800052c:	b26d      	sxtb	r5, r5
 800052e:	e7de      	b.n	80004ee <prvUnlockQueue+0x2e>

08000530 <xQueueGenericReset>:
{
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 8000534:	4604      	mov	r4, r0
 8000536:	b310      	cbz	r0, 800057e <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 8000538:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800053a:	b300      	cbz	r0, 800057e <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800053c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800053e:	fba5 3500 	umull	r3, r5, r5, r0
 8000542:	b9dd      	cbnz	r5, 800057c <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 8000544:	f7ff fef6 	bl	8000334 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000548:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 800054c:	434b      	muls	r3, r1
 800054e:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000550:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000552:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	4413      	add	r3, r2
 8000558:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800055a:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800055c:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 800055e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000562:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 8000564:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8000568:	b156      	cbz	r6, 8000580 <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800056a:	f104 0010 	add.w	r0, r4, #16
 800056e:	f7ff fe65 	bl	800023c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000572:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000576:	f7ff fe61 	bl	800023c <vListInitialise>
 800057a:	e010      	b.n	800059e <xQueueGenericReset+0x6e>
        xReturn = pdFAIL;
 800057c:	2000      	movs	r0, #0
}
 800057e:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000580:	6923      	ldr	r3, [r4, #16]
 8000582:	b163      	cbz	r3, 800059e <xQueueGenericReset+0x6e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000584:	f104 0010 	add.w	r0, r4, #16
 8000588:	f000 fcca 	bl	8000f20 <xTaskRemoveFromEventList>
 800058c:	b138      	cbz	r0, 800059e <xQueueGenericReset+0x6e>
                        queueYIELD_IF_USING_PREEMPTION();
 800058e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <xQueueGenericReset+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	f3bf 8f4f 	dsb	sy
 800059a:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 800059e:	f7ff fed9 	bl	8000354 <vPortExitCritical>
 80005a2:	2001      	movs	r0, #1
 80005a4:	e7eb      	b.n	800057e <xQueueGenericReset+0x4e>
 80005a6:	bf00      	nop
 80005a8:	e000ed04 	.word	0xe000ed04

080005ac <xQueueGenericCreate>:
    {
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	460d      	mov	r5, r1
 80005b0:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005b2:	4606      	mov	r6, r0
 80005b4:	b910      	cbnz	r0, 80005bc <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 80005b6:	2400      	movs	r4, #0
    }
 80005b8:	4620      	mov	r0, r4
 80005ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005bc:	fba0 2301 	umull	r2, r3, r0, r1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f8      	bne.n	80005b6 <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80005c4:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005c6:	f110 0f51 	cmn.w	r0, #81	; 0x51
 80005ca:	d8f4      	bhi.n	80005b6 <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80005cc:	3050      	adds	r0, #80	; 0x50
 80005ce:	f7ff fdbf 	bl	8000150 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80005d2:	4604      	mov	r4, r0
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d0ee      	beq.n	80005b6 <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 80005d8:	b15d      	cbz	r5, 80005f2 <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005da:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005de:	2101      	movs	r1, #1
 80005e0:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 80005e2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 80005e6:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005e8:	f7ff ffa2 	bl	8000530 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 80005ec:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 80005f0:	e7e2      	b.n	80005b8 <xQueueGenericCreate+0xc>
 80005f2:	4603      	mov	r3, r0
 80005f4:	e7f3      	b.n	80005de <xQueueGenericCreate+0x32>

080005f6 <xQueueCreateCountingSemaphore>:
    {
 80005f6:	b510      	push	{r4, lr}
 80005f8:	460c      	mov	r4, r1
        if( ( uxMaxCount != 0 ) &&
 80005fa:	b140      	cbz	r0, 800060e <xQueueCreateCountingSemaphore+0x18>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d306      	bcc.n	800060e <xQueueCreateCountingSemaphore+0x18>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000600:	2202      	movs	r2, #2
 8000602:	2100      	movs	r1, #0
 8000604:	f7ff ffd2 	bl	80005ac <xQueueGenericCreate>
            if( xHandle != NULL )
 8000608:	b100      	cbz	r0, 800060c <xQueueCreateCountingSemaphore+0x16>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800060a:	6384      	str	r4, [r0, #56]	; 0x38
    }
 800060c:	bd10      	pop	{r4, pc}
        QueueHandle_t xHandle = NULL;
 800060e:	2000      	movs	r0, #0
        return xHandle;
 8000610:	e7fc      	b.n	800060c <xQueueCreateCountingSemaphore+0x16>
	...

08000614 <xQueueGenericSend>:
{
 8000614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000618:	f04f 0800 	mov.w	r8, #0
{
 800061c:	4604      	mov	r4, r0
 800061e:	460f      	mov	r7, r1
 8000620:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 8000622:	46c1      	mov	r9, r8
                    portYIELD_WITHIN_API();
 8000624:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8000714 <xQueueGenericSend+0x100>
{
 8000628:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 800062a:	f7ff fe83 	bl	8000334 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800062e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000632:	429a      	cmp	r2, r3
 8000634:	d301      	bcc.n	800063a <xQueueGenericSend+0x26>
 8000636:	2e02      	cmp	r6, #2
 8000638:	d119      	bne.n	800066e <xQueueGenericSend+0x5a>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800063a:	4632      	mov	r2, r6
 800063c:	4639      	mov	r1, r7
 800063e:	4620      	mov	r0, r4
 8000640:	f7ff ff09 	bl	8000456 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000646:	b11b      	cbz	r3, 8000650 <xQueueGenericSend+0x3c>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000648:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800064c:	f000 fc68 	bl	8000f20 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 8000650:	b138      	cbz	r0, 8000662 <xQueueGenericSend+0x4e>
                            queueYIELD_IF_USING_PREEMPTION();
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <xQueueGenericSend+0x100>)
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8000662:	f7ff fe77 	bl	8000354 <vPortExitCritical>
                return pdPASS;
 8000666:	2001      	movs	r0, #1
}
 8000668:	b004      	add	sp, #16
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 800066e:	9d01      	ldr	r5, [sp, #4]
 8000670:	b91d      	cbnz	r5, 800067a <xQueueGenericSend+0x66>
                    taskEXIT_CRITICAL();
 8000672:	f7ff fe6f 	bl	8000354 <vPortExitCritical>
            return errQUEUE_FULL;
 8000676:	2000      	movs	r0, #0
 8000678:	e7f6      	b.n	8000668 <xQueueGenericSend+0x54>
                else if( xEntryTimeSet == pdFALSE )
 800067a:	f1b8 0f00 	cmp.w	r8, #0
 800067e:	d102      	bne.n	8000686 <xQueueGenericSend+0x72>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000680:	a802      	add	r0, sp, #8
 8000682:	f000 fca7 	bl	8000fd4 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8000686:	f7ff fe65 	bl	8000354 <vPortExitCritical>
        vTaskSuspendAll();
 800068a:	f000 faa7 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800068e:	f7ff fe51 	bl	8000334 <vPortEnterCritical>
 8000692:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000696:	2bff      	cmp	r3, #255	; 0xff
 8000698:	bf08      	it	eq
 800069a:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800069e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	bf08      	it	eq
 80006a6:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80006aa:	f7ff fe53 	bl	8000354 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006ae:	a901      	add	r1, sp, #4
 80006b0:	a802      	add	r0, sp, #8
 80006b2:	f000 fc99 	bl	8000fe8 <xTaskCheckForTimeOut>
 80006b6:	bb30      	cbnz	r0, 8000706 <xQueueGenericSend+0xf2>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80006b8:	f7ff fe3c 	bl	8000334 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80006bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d10f      	bne.n	80006e4 <xQueueGenericSend+0xd0>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80006c4:	f7ff fe46 	bl	8000354 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	f104 0010 	add.w	r0, r4, #16
 80006ce:	f000 fc17 	bl	8000f00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006d2:	4620      	mov	r0, r4
 80006d4:	f7ff fef4 	bl	80004c0 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80006d8:	f000 fb22 	bl	8000d20 <xTaskResumeAll>
 80006dc:	b150      	cbz	r0, 80006f4 <xQueueGenericSend+0xe0>
{
 80006de:	f04f 0801 	mov.w	r8, #1
 80006e2:	e7a2      	b.n	800062a <xQueueGenericSend+0x16>
    taskEXIT_CRITICAL();
 80006e4:	f7ff fe36 	bl	8000354 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80006e8:	4620      	mov	r0, r4
 80006ea:	f7ff fee9 	bl	80004c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006ee:	f000 fb17 	bl	8000d20 <xTaskResumeAll>
 80006f2:	e7f4      	b.n	80006de <xQueueGenericSend+0xca>
                    portYIELD_WITHIN_API();
 80006f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f8:	f8ca 3000 	str.w	r3, [sl]
 80006fc:	f3bf 8f4f 	dsb	sy
 8000700:	f3bf 8f6f 	isb	sy
 8000704:	e7eb      	b.n	80006de <xQueueGenericSend+0xca>
            prvUnlockQueue( pxQueue );
 8000706:	4620      	mov	r0, r4
 8000708:	f7ff feda 	bl	80004c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800070c:	f000 fb08 	bl	8000d20 <xTaskResumeAll>
 8000710:	e7b1      	b.n	8000676 <xQueueGenericSend+0x62>
 8000712:	bf00      	nop
 8000714:	e000ed04 	.word	0xe000ed04

08000718 <xQueueCreateMutex>:
    {
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	4606      	mov	r6, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800071c:	2050      	movs	r0, #80	; 0x50
 800071e:	f7ff fd17 	bl	8000150 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8000722:	4604      	mov	r4, r0
 8000724:	b188      	cbz	r0, 800074a <xQueueCreateMutex+0x32>
    pxNewQueue->uxItemSize = uxItemSize;
 8000726:	2500      	movs	r5, #0
 8000728:	2101      	movs	r1, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800072a:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 800072c:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000730:	f7ff fefe 	bl	8000530 <xQueueGenericReset>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000734:	462b      	mov	r3, r5
 8000736:	462a      	mov	r2, r5
 8000738:	4629      	mov	r1, r5
 800073a:	4620      	mov	r0, r4
            pxNewQueue->ucQueueType = ucQueueType;
 800073c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000740:	60a5      	str	r5, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000742:	6025      	str	r5, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000744:	60e5      	str	r5, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000746:	f7ff ff65 	bl	8000614 <xQueueGenericSend>
    }
 800074a:	4620      	mov	r0, r4
 800074c:	bd70      	pop	{r4, r5, r6, pc}

0800074e <xQueueGiveFromISR>:
{
 800074e:	b538      	push	{r3, r4, r5, lr}
 8000750:	460c      	mov	r4, r1
	__asm volatile
 8000752:	f3ef 8511 	mrs	r5, BASEPRI
 8000756:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800075a:	f383 8811 	msr	BASEPRI, r3
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	f3bf 8f4f 	dsb	sy
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000766:	6b82      	ldr	r2, [r0, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000768:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800076a:	4293      	cmp	r3, r2
 800076c:	d91b      	bls.n	80007a6 <xQueueGiveFromISR+0x58>
            const int8_t cTxLock = pxQueue->cTxLock;
 800076e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000772:	3201      	adds	r2, #1
            if( cTxLock == queueUNLOCKED )
 8000774:	29ff      	cmp	r1, #255	; 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
 8000776:	b24b      	sxtb	r3, r1
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000778:	6382      	str	r2, [r0, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 800077a:	d10f      	bne.n	800079c <xQueueGiveFromISR+0x4e>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800077c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800077e:	b90b      	cbnz	r3, 8000784 <xQueueGiveFromISR+0x36>
            xReturn = pdPASS;
 8000780:	2001      	movs	r0, #1
 8000782:	e008      	b.n	8000796 <xQueueGiveFromISR+0x48>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000784:	3024      	adds	r0, #36	; 0x24
 8000786:	f000 fbcb 	bl	8000f20 <xTaskRemoveFromEventList>
 800078a:	2800      	cmp	r0, #0
 800078c:	d0f8      	beq.n	8000780 <xQueueGiveFromISR+0x32>
                                if( pxHigherPriorityTaskWoken != NULL )
 800078e:	2c00      	cmp	r4, #0
 8000790:	d0f6      	beq.n	8000780 <xQueueGiveFromISR+0x32>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000792:	2001      	movs	r0, #1
 8000794:	6020      	str	r0, [r4, #0]
	__asm volatile
 8000796:	f385 8811 	msr	BASEPRI, r5
}
 800079a:	bd38      	pop	{r3, r4, r5, pc}
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800079c:	3301      	adds	r3, #1
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80007a4:	e7ec      	b.n	8000780 <xQueueGiveFromISR+0x32>
            xReturn = errQUEUE_FULL;
 80007a6:	2000      	movs	r0, #0
 80007a8:	e7f5      	b.n	8000796 <xQueueGiveFromISR+0x48>
	...

080007ac <xQueueSemaphoreTake>:
{
 80007ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        BaseType_t xInheritanceOccurred = pdFALSE;
 80007b0:	2500      	movs	r5, #0
{
 80007b2:	4604      	mov	r4, r0
    BaseType_t xEntryTimeSet = pdFALSE;
 80007b4:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 80007b6:	462e      	mov	r6, r5
{
 80007b8:	b085      	sub	sp, #20
                    portYIELD_WITHIN_API();
 80007ba:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80008d0 <xQueueSemaphoreTake+0x124>
{
 80007be:	9101      	str	r1, [sp, #4]
        taskENTER_CRITICAL();
 80007c0:	f7ff fdb8 	bl	8000334 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80007c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80007c6:	b1e3      	cbz	r3, 8000802 <xQueueSemaphoreTake+0x56>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80007c8:	3b01      	subs	r3, #1
 80007ca:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	b913      	cbnz	r3, 80007d6 <xQueueSemaphoreTake+0x2a>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80007d0:	f000 fd06 	bl	80011e0 <pvTaskIncrementMutexHeldCount>
 80007d4:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007d6:	6923      	ldr	r3, [r4, #16]
 80007d8:	b163      	cbz	r3, 80007f4 <xQueueSemaphoreTake+0x48>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007da:	f104 0010 	add.w	r0, r4, #16
 80007de:	f000 fb9f 	bl	8000f20 <xTaskRemoveFromEventList>
 80007e2:	b138      	cbz	r0, 80007f4 <xQueueSemaphoreTake+0x48>
                        queueYIELD_IF_USING_PREEMPTION();
 80007e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e8:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <xQueueSemaphoreTake+0x124>)
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80007f4:	f7ff fdae 	bl	8000354 <vPortExitCritical>
                return pdPASS;
 80007f8:	2501      	movs	r5, #1
}
 80007fa:	4628      	mov	r0, r5
 80007fc:	b005      	add	sp, #20
 80007fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8000802:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000806:	f1b8 0f00 	cmp.w	r8, #0
 800080a:	d103      	bne.n	8000814 <xQueueSemaphoreTake+0x68>
                            taskEXIT_CRITICAL();
 800080c:	f7ff fda2 	bl	8000354 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8000810:	2500      	movs	r5, #0
 8000812:	e7f2      	b.n	80007fa <xQueueSemaphoreTake+0x4e>
                else if( xEntryTimeSet == pdFALSE )
 8000814:	b917      	cbnz	r7, 800081c <xQueueSemaphoreTake+0x70>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000816:	a802      	add	r0, sp, #8
 8000818:	f000 fbdc 	bl	8000fd4 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800081c:	f7ff fd9a 	bl	8000354 <vPortExitCritical>
        vTaskSuspendAll();
 8000820:	f000 f9dc 	bl	8000bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000824:	f7ff fd86 	bl	8000334 <vPortEnterCritical>
 8000828:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800082c:	2bff      	cmp	r3, #255	; 0xff
 800082e:	bf08      	it	eq
 8000830:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 8000834:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	bf08      	it	eq
 800083c:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 8000840:	f7ff fd88 	bl	8000354 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000844:	a901      	add	r1, sp, #4
 8000846:	a802      	add	r0, sp, #8
 8000848:	f000 fbce 	bl	8000fe8 <xTaskCheckForTimeOut>
 800084c:	bb40      	cbnz	r0, 80008a0 <xQueueSemaphoreTake+0xf4>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff fdf6 	bl	8000440 <prvIsQueueEmpty>
 8000854:	b1f0      	cbz	r0, 8000894 <xQueueSemaphoreTake+0xe8>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	b93b      	cbnz	r3, 800086a <xQueueSemaphoreTake+0xbe>
                            taskENTER_CRITICAL();
 800085a:	f7ff fd6b 	bl	8000334 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800085e:	68a0      	ldr	r0, [r4, #8]
 8000860:	f000 fbf0 	bl	8001044 <xTaskPriorityInherit>
 8000864:	4605      	mov	r5, r0
                            taskEXIT_CRITICAL();
 8000866:	f7ff fd75 	bl	8000354 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800086a:	9901      	ldr	r1, [sp, #4]
 800086c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000870:	f000 fb46 	bl	8000f00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff fe23 	bl	80004c0 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800087a:	f000 fa51 	bl	8000d20 <xTaskResumeAll>
 800087e:	b938      	cbnz	r0, 8000890 <xQueueSemaphoreTake+0xe4>
                    portYIELD_WITHIN_API();
 8000880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000884:	f8c9 3000 	str.w	r3, [r9]
 8000888:	f3bf 8f4f 	dsb	sy
 800088c:	f3bf 8f6f 	isb	sy
{
 8000890:	2701      	movs	r7, #1
 8000892:	e795      	b.n	80007c0 <xQueueSemaphoreTake+0x14>
                prvUnlockQueue( pxQueue );
 8000894:	4620      	mov	r0, r4
 8000896:	f7ff fe13 	bl	80004c0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800089a:	f000 fa41 	bl	8000d20 <xTaskResumeAll>
 800089e:	e7f7      	b.n	8000890 <xQueueSemaphoreTake+0xe4>
            prvUnlockQueue( pxQueue );
 80008a0:	4620      	mov	r0, r4
 80008a2:	f7ff fe0d 	bl	80004c0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008a6:	f000 fa3b 	bl	8000d20 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008aa:	4620      	mov	r0, r4
 80008ac:	f7ff fdc8 	bl	8000440 <prvIsQueueEmpty>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d0ed      	beq.n	8000890 <xQueueSemaphoreTake+0xe4>
                        if( xInheritanceOccurred != pdFALSE )
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d0a0      	beq.n	80007fa <xQueueSemaphoreTake+0x4e>
                            taskENTER_CRITICAL();
 80008b8:	f7ff fd3c 	bl	8000334 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80008bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008be:	b119      	cbz	r1, 80008c8 <xQueueSemaphoreTake+0x11c>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80008c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	f1c1 0105 	rsb	r1, r1, #5
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80008c8:	68a0      	ldr	r0, [r4, #8]
 80008ca:	f000 fc47 	bl	800115c <vTaskPriorityDisinheritAfterTimeout>
 80008ce:	e79d      	b.n	800080c <xQueueSemaphoreTake+0x60>
 80008d0:	e000ed04 	.word	0xe000ed04

080008d4 <uxQueueMessagesWaiting>:
{
 80008d4:	b510      	push	{r4, lr}
 80008d6:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80008d8:	f7ff fd2c 	bl	8000334 <vPortEnterCritical>
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80008dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    taskEXIT_CRITICAL();
 80008de:	f7ff fd39 	bl	8000354 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80008e2:	4620      	mov	r0, r4
 80008e4:	bd10      	pop	{r4, pc}
	...

080008e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80008ea:	4c1e      	ldr	r4, [pc, #120]	; (8000964 <prvAddCurrentTaskToDelayedList+0x7c>)
{
 80008ec:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 80008ee:	6825      	ldr	r5, [r4, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80008f0:	6860      	ldr	r0, [r4, #4]
{
 80008f2:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80008f4:	3004      	adds	r0, #4
 80008f6:	f7ff fcc6 	bl	8000286 <uxListRemove>
 80008fa:	b938      	cbnz	r0, 800090c <prvAddCurrentTaskToDelayedList+0x24>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80008fc:	6862      	ldr	r2, [r4, #4]
 80008fe:	68a3      	ldr	r3, [r4, #8]
 8000900:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000902:	2201      	movs	r2, #1
 8000904:	408a      	lsls	r2, r1
 8000906:	ea23 0302 	bic.w	r3, r3, r2
 800090a:	60a3      	str	r3, [r4, #8]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800090c:	1c73      	adds	r3, r6, #1
 800090e:	d114      	bne.n	800093a <prvAddCurrentTaskToDelayedList+0x52>
 8000910:	b19f      	cbz	r7, 800093a <prvAddCurrentTaskToDelayedList+0x52>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000912:	6862      	ldr	r2, [r4, #4]
 8000914:	6923      	ldr	r3, [r4, #16]
 8000916:	6899      	ldr	r1, [r3, #8]
 8000918:	6093      	str	r3, [r2, #8]
 800091a:	6862      	ldr	r2, [r4, #4]
 800091c:	60d1      	str	r1, [r2, #12]
 800091e:	6862      	ldr	r2, [r4, #4]
 8000920:	6899      	ldr	r1, [r3, #8]
 8000922:	3204      	adds	r2, #4
 8000924:	604a      	str	r2, [r1, #4]
 8000926:	6862      	ldr	r2, [r4, #4]
 8000928:	3204      	adds	r2, #4
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <prvAddCurrentTaskToDelayedList+0x80>)
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	68e3      	ldr	r3, [r4, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60e3      	str	r3, [r4, #12]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	19ad      	adds	r5, r5, r6
 800093e:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000940:	d306      	bcc.n	8000950 <prvAddCurrentTaskToDelayedList+0x68>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000942:	6a20      	ldr	r0, [r4, #32]
 8000944:	6861      	ldr	r1, [r4, #4]
}
 8000946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800094a:	3104      	adds	r1, #4
 800094c:	f7ff bc84 	b.w	8000258 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000950:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000952:	6861      	ldr	r1, [r4, #4]
 8000954:	3104      	adds	r1, #4
 8000956:	f7ff fc7f 	bl	8000258 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800095a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800095c:	42ab      	cmp	r3, r5
                        xNextTaskUnblockTime = xTimeToWake;
 800095e:	bf88      	it	hi
 8000960:	62a5      	strhi	r5, [r4, #40]	; 0x28
}
 8000962:	e7e9      	b.n	8000938 <prvAddCurrentTaskToDelayedList+0x50>
 8000964:	200044b8 	.word	0x200044b8
 8000968:	200044c4 	.word	0x200044c4

0800096c <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <prvResetNextTaskUnblockTime+0x18>)
 800096e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	b91a      	cbnz	r2, 800097c <prvResetNextTaskUnblockTime+0x10>
        xNextTaskUnblockTime = portMAX_DELAY;
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800097a:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800097c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800097e:	68d2      	ldr	r2, [r2, #12]
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	e7f9      	b.n	8000978 <prvResetNextTaskUnblockTime+0xc>
 8000984:	200044b8 	.word	0x200044b8

08000988 <prvIdleTask>:
{
 8000988:	b580      	push	{r7, lr}
                    taskYIELD();
 800098a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800098e:	4c11      	ldr	r4, [pc, #68]	; (80009d4 <prvIdleTask+0x4c>)
                    taskYIELD();
 8000990:	4e11      	ldr	r6, [pc, #68]	; (80009d8 <prvIdleTask+0x50>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000992:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000994:	b943      	cbnz	r3, 80009a8 <prvIdleTask+0x20>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000998:	2b01      	cmp	r3, #1
 800099a:	d9fa      	bls.n	8000992 <prvIdleTask+0xa>
                    taskYIELD();
 800099c:	6037      	str	r7, [r6, #0]
 800099e:	f3bf 8f4f 	dsb	sy
 80009a2:	f3bf 8f6f 	isb	sy
 80009a6:	e7f4      	b.n	8000992 <prvIdleTask+0xa>
                taskENTER_CRITICAL();
 80009a8:	f7ff fcc4 	bl	8000334 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009ae:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80009b0:	1d28      	adds	r0, r5, #4
 80009b2:	f7ff fc68 	bl	8000286 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	3b01      	subs	r3, #1
 80009ba:	6423      	str	r3, [r4, #64]	; 0x40
                    --uxDeletedTasksWaitingCleanUp;
 80009bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009be:	3b01      	subs	r3, #1
 80009c0:	6463      	str	r3, [r4, #68]	; 0x44
                taskEXIT_CRITICAL();
 80009c2:	f7ff fcc7 	bl	8000354 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 80009c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80009c8:	f7ff fc18 	bl	80001fc <vPortFree>
                vPortFree( pxTCB );
 80009cc:	4628      	mov	r0, r5
 80009ce:	f7ff fc15 	bl	80001fc <vPortFree>
    }
 80009d2:	e7de      	b.n	8000992 <prvIdleTask+0xa>
 80009d4:	200044b8 	.word	0x200044b8
 80009d8:	e000ed04 	.word	0xe000ed04

080009dc <xTaskCreate>:
    {
 80009dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80009e0:	0096      	lsls	r6, r2, #2
    {
 80009e2:	4680      	mov	r8, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80009e4:	4630      	mov	r0, r6
    {
 80009e6:	460d      	mov	r5, r1
 80009e8:	4699      	mov	r9, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80009ea:	f7ff fbb1 	bl	8000150 <pvPortMalloc>
                if( pxStack != NULL )
 80009ee:	4607      	mov	r7, r0
 80009f0:	b198      	cbz	r0, 8000a1a <xTaskCreate+0x3e>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80009f2:	205c      	movs	r0, #92	; 0x5c
 80009f4:	f7ff fbac 	bl	8000150 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 80009f8:	4604      	mov	r4, r0
 80009fa:	b158      	cbz	r0, 8000a14 <xTaskCreate+0x38>
                        pxNewTCB->pxStack = pxStack;
 80009fc:	6307      	str	r7, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80009fe:	4632      	mov	r2, r6
 8000a00:	21a5      	movs	r1, #165	; 0xa5
 8000a02:	4638      	mov	r0, r7
 8000a04:	f001 fc9c 	bl	8002340 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a08:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8000a0c:	b945      	cbnz	r5, 8000a20 <xTaskCreate+0x44>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000a0e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8000a12:	e014      	b.n	8000a3e <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 8000a14:	4638      	mov	r0, r7
 8000a16:	f7ff fbf1 	bl	80001fc <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a1a:	f04f 36ff 	mov.w	r6, #4294967295
 8000a1e:	e09e      	b.n	8000b5e <xTaskCreate+0x182>
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8000a26:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000a28:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000a2c:	f802 1b01 	strb.w	r1, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8000a30:	7819      	ldrb	r1, [r3, #0]
 8000a32:	b109      	cbz	r1, 8000a38 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a34:	42ab      	cmp	r3, r5
 8000a36:	d1f7      	bne.n	8000a28 <xTaskCreate+0x4c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8000a40:	f04f 0a00 	mov.w	sl, #0
 8000a44:	2d04      	cmp	r5, #4
 8000a46:	bf28      	it	cs
 8000a48:	2504      	movcs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a4a:	1d27      	adds	r7, r4, #4
 8000a4c:	4638      	mov	r0, r7
    pxNewTCB->uxPriority = uxPriority;
 8000a4e:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8000a50:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000a52:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a56:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a58:	f7ff fbfb 	bl	8000252 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a5c:	f1c5 0505 	rsb	r5, r5, #5
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a60:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000a64:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a66:	f7ff fbf4 	bl	8000252 <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	4641      	mov	r1, r8
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a6e:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a70:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a72:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000a74:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000a78:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a7c:	f026 0007 	bic.w	r0, r6, #7
 8000a80:	f7ff fc32 	bl	80002e8 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8000a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a86:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8000a88:	b103      	cbz	r3, 8000a8c <xTaskCreate+0xb0>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a8a:	601c      	str	r4, [r3, #0]
        uxCurrentNumberOfTasks++;
 8000a8c:	4d3b      	ldr	r5, [pc, #236]	; (8000b7c <xTaskCreate+0x1a0>)
    taskENTER_CRITICAL();
 8000a8e:	f7ff fc51 	bl	8000334 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8000a92:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000a94:	f105 0848 	add.w	r8, r5, #72	; 0x48
 8000a98:	3301      	adds	r3, #1
 8000a9a:	642b      	str	r3, [r5, #64]	; 0x40
        if( pxCurrentTCB == NULL )
 8000a9c:	686b      	ldr	r3, [r5, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d160      	bne.n	8000b64 <xTaskCreate+0x188>
            pxCurrentTCB = pxNewTCB;
 8000aa2:	606c      	str	r4, [r5, #4]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000aa4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d12b      	bne.n	8000b02 <xTaskCreate+0x126>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000aaa:	4640      	mov	r0, r8
 8000aac:	f7ff fbc6 	bl	800023c <vListInitialise>
 8000ab0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8000ab4:	f7ff fbc2 	bl	800023c <vListInitialise>
 8000ab8:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8000abc:	f7ff fbbe 	bl	800023c <vListInitialise>
 8000ac0:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8000ac4:	f7ff fbba 	bl	800023c <vListInitialise>
    vListInitialise( &xDelayedTaskList1 );
 8000ac8:	f105 09ac 	add.w	r9, r5, #172	; 0xac
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000acc:	f105 0098 	add.w	r0, r5, #152	; 0x98
 8000ad0:	f7ff fbb4 	bl	800023c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000ad4:	f105 06c0 	add.w	r6, r5, #192	; 0xc0
    vListInitialise( &xDelayedTaskList1 );
 8000ad8:	4648      	mov	r0, r9
 8000ada:	f7ff fbaf 	bl	800023c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000ade:	4630      	mov	r0, r6
 8000ae0:	f7ff fbac 	bl	800023c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ae4:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 8000ae8:	f7ff fba8 	bl	800023c <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8000aec:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8000af0:	f7ff fba4 	bl	800023c <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8000af4:	f105 000c 	add.w	r0, r5, #12
 8000af8:	f7ff fba0 	bl	800023c <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8000afc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000b00:	622e      	str	r6, [r5, #32]
        prvAddTaskToReadyList( pxNewTCB );
 8000b02:	2601      	movs	r6, #1
        uxTaskNumber++;
 8000b04:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
        prvAddTaskToReadyList( pxNewTCB );
 8000b08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        uxTaskNumber++;
 8000b0a:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000b0c:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8000b0e:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
        prvAddTaskToReadyList( pxNewTCB );
 8000b12:	68ab      	ldr	r3, [r5, #8]
 8000b14:	fa06 f201 	lsl.w	r2, r6, r1
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	434b      	muls	r3, r1
 8000b1e:	18e8      	adds	r0, r5, r3
 8000b20:	60aa      	str	r2, [r5, #8]
 8000b22:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000b24:	4443      	add	r3, r8
 8000b26:	6891      	ldr	r1, [r2, #8]
 8000b28:	60a2      	str	r2, [r4, #8]
 8000b2a:	60e1      	str	r1, [r4, #12]
 8000b2c:	6891      	ldr	r1, [r2, #8]
 8000b2e:	604f      	str	r7, [r1, #4]
 8000b30:	6097      	str	r7, [r2, #8]
 8000b32:	6163      	str	r3, [r4, #20]
 8000b34:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000b36:	4433      	add	r3, r6
 8000b38:	6483      	str	r3, [r0, #72]	; 0x48
    taskEXIT_CRITICAL();
 8000b3a:	f7ff fc0b 	bl	8000354 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8000b3e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8000b42:	b163      	cbz	r3, 8000b5e <xTaskCreate+0x182>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b44:	686b      	ldr	r3, [r5, #4]
 8000b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d207      	bcs.n	8000b5e <xTaskCreate+0x182>
            taskYIELD_IF_USING_PREEMPTION();
 8000b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <xTaskCreate+0x1a4>)
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	f3bf 8f6f 	isb	sy
    }
 8000b5e:	4630      	mov	r0, r6
 8000b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8000b64:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1ca      	bne.n	8000b02 <xTaskCreate+0x126>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000b6c:	686b      	ldr	r3, [r5, #4]
 8000b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b72:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8000b74:	bf28      	it	cs
 8000b76:	606c      	strcs	r4, [r5, #4]
 8000b78:	e7c3      	b.n	8000b02 <xTaskCreate+0x126>
 8000b7a:	bf00      	nop
 8000b7c:	200044b8 	.word	0x200044b8
 8000b80:	e000ed04 	.word	0xe000ed04

08000b84 <vTaskStartScheduler>:
{
 8000b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
            xReturn = xTaskCreate( prvIdleTask,
 8000b86:	2500      	movs	r5, #0
 8000b88:	4c10      	ldr	r4, [pc, #64]	; (8000bcc <vTaskStartScheduler+0x48>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <vTaskStartScheduler+0x4c>)
 8000b94:	462b      	mov	r3, r5
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <vTaskStartScheduler+0x50>)
 8000b98:	9500      	str	r5, [sp, #0]
 8000b9a:	f7ff ff1f 	bl	80009dc <xTaskCreate>
    if( xReturn == pdPASS )
 8000b9e:	2801      	cmp	r0, #1
 8000ba0:	d10f      	bne.n	8000bc2 <vTaskStartScheduler+0x3e>
	__asm volatile
 8000ba2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ba6:	f383 8811 	msr	BASEPRI, r3
 8000baa:	f3bf 8f6f 	isb	sy
 8000bae:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	62a3      	str	r3, [r4, #40]	; 0x28
        xSchedulerRunning = pdTRUE;
 8000bb8:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bbc:	6025      	str	r5, [r4, #0]
        if( xPortStartScheduler() != pdFALSE )
 8000bbe:	f7ff fc23 	bl	8000408 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <vTaskStartScheduler+0x54>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
}
 8000bc6:	b003      	add	sp, #12
 8000bc8:	bd30      	pop	{r4, r5, pc}
 8000bca:	bf00      	nop
 8000bcc:	200044b8 	.word	0x200044b8
 8000bd0:	080030bd 	.word	0x080030bd
 8000bd4:	08000989 	.word	0x08000989
 8000bd8:	20000008 	.word	0x20000008

08000bdc <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <vTaskSuspendAll+0x10>)
 8000bde:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8000be2:	3301      	adds	r3, #1
 8000be4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200044b8 	.word	0x200044b8

08000bf0 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <xTaskGetTickCount+0x8>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200044b8 	.word	0x200044b8

08000bfc <xTaskIncrementTick>:
{
 8000bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <xTaskIncrementTick+0x11c>)
 8000c02:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000c06:	4619      	mov	r1, r3
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	d17e      	bne.n	8000d0a <xTaskIncrementTick+0x10e>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c0c:	681c      	ldr	r4, [r3, #0]
 8000c0e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8000c10:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c12:	b954      	cbnz	r4, 8000c2a <xTaskIncrementTick+0x2e>
            taskSWITCH_DELAYED_LISTS();
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	6a0a      	ldr	r2, [r1, #32]
 8000c18:	624a      	str	r2, [r1, #36]	; 0x24
 8000c1a:	620b      	str	r3, [r1, #32]
 8000c1c:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000c20:	3301      	adds	r3, #1
 8000c22:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
 8000c26:	f7ff fea1 	bl	800096c <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000c2a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    BaseType_t xSwitchRequired = pdFALSE;
 8000c2c:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000c2e:	429c      	cmp	r4, r3
 8000c30:	d20f      	bcs.n	8000c52 <xTaskIncrementTick+0x56>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c32:	2214      	movs	r2, #20
 8000c34:	684b      	ldr	r3, [r1, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	fb02 1303 	mla	r3, r2, r3, r1
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    xSwitchRequired = pdTRUE;
 8000c3e:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 8000c40:	f8d1 30f4 	ldr.w	r3, [r1, #244]	; 0xf4
                    xSwitchRequired = pdTRUE;
 8000c44:	bf28      	it	cs
 8000c46:	2001      	movcs	r0, #1
                    xSwitchRequired = pdTRUE;
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf18      	it	ne
 8000c4c:	2001      	movne	r0, #1
}
 8000c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    prvAddTaskToReadyList( pxTCB );
 8000c52:	f04f 0801 	mov.w	r8, #1
 8000c56:	f04f 0e14 	mov.w	lr, #20
 8000c5a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8000d1c <xTaskIncrementTick+0x120>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c5e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	b91b      	cbnz	r3, 8000c6c <xTaskIncrementTick+0x70>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	628b      	str	r3, [r1, #40]	; 0x28
                    break;
 8000c6a:	e7e2      	b.n	8000c32 <xTaskIncrementTick+0x36>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c6c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000c72:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8000c74:	4294      	cmp	r4, r2
 8000c76:	d201      	bcs.n	8000c7c <xTaskIncrementTick+0x80>
                        xNextTaskUnblockTime = xItemValue;
 8000c78:	628a      	str	r2, [r1, #40]	; 0x28
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000c7a:	e7da      	b.n	8000c32 <xTaskIncrementTick+0x36>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c7c:	695f      	ldr	r7, [r3, #20]
 8000c7e:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 8000c82:	f8c2 9008 	str.w	r9, [r2, #8]
 8000c86:	f8c9 2004 	str.w	r2, [r9, #4]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	1d1d      	adds	r5, r3, #4
 8000c8e:	42aa      	cmp	r2, r5
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	bf08      	it	eq
 8000c96:	f8c7 9004 	streq.w	r9, [r7, #4]
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	3a01      	subs	r2, #1
 8000ca0:	603a      	str	r2, [r7, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ca2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8000ca4:	b18f      	cbz	r7, 8000cca <xTaskIncrementTick+0xce>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ca6:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 8000caa:	f8c9 2008 	str.w	r2, [r9, #8]
 8000cae:	6a1a      	ldr	r2, [r3, #32]
 8000cb0:	687e      	ldr	r6, [r7, #4]
 8000cb2:	f8c2 9004 	str.w	r9, [r2, #4]
 8000cb6:	f103 0918 	add.w	r9, r3, #24
 8000cba:	454e      	cmp	r6, r9
 8000cbc:	bf08      	it	eq
 8000cbe:	607a      	streq	r2, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	3a01      	subs	r2, #1
 8000cc8:	603a      	str	r2, [r7, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cca:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
 8000cce:	688f      	ldr	r7, [r1, #8]
 8000cd0:	fa08 f20a 	lsl.w	r2, r8, sl
 8000cd4:	433a      	orrs	r2, r7
 8000cd6:	608a      	str	r2, [r1, #8]
 8000cd8:	fb0e f20a 	mul.w	r2, lr, sl
 8000cdc:	eb01 0b02 	add.w	fp, r1, r2
 8000ce0:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 8000ce4:	4462      	add	r2, ip
 8000ce6:	68be      	ldr	r6, [r7, #8]
 8000ce8:	609f      	str	r7, [r3, #8]
 8000cea:	60de      	str	r6, [r3, #12]
 8000cec:	68be      	ldr	r6, [r7, #8]
 8000cee:	6075      	str	r5, [r6, #4]
 8000cf0:	60bd      	str	r5, [r7, #8]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cfe:	684b      	ldr	r3, [r1, #4]
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8000d02:	459a      	cmp	sl, r3
 8000d04:	bf28      	it	cs
 8000d06:	2001      	movcs	r0, #1
 8000d08:	e7a9      	b.n	8000c5e <xTaskIncrementTick+0x62>
        ++xPendedTicks;
 8000d0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    BaseType_t xSwitchRequired = pdFALSE;
 8000d0e:	2000      	movs	r0, #0
        ++xPendedTicks;
 8000d10:	3201      	adds	r2, #1
 8000d12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    return xSwitchRequired;
 8000d16:	e79a      	b.n	8000c4e <xTaskIncrementTick+0x52>
 8000d18:	200044b8 	.word	0x200044b8
 8000d1c:	20004500 	.word	0x20004500

08000d20 <xTaskResumeAll>:
{
 8000d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        --uxSchedulerSuspended;
 8000d24:	4c3e      	ldr	r4, [pc, #248]	; (8000e20 <xTaskResumeAll+0x100>)
    taskENTER_CRITICAL();
 8000d26:	f7ff fb05 	bl	8000334 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8000d2a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d34:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8000d38:	b12b      	cbz	r3, 8000d46 <xTaskResumeAll+0x26>
    BaseType_t xAlreadyYielded = pdFALSE;
 8000d3a:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8000d3c:	f7ff fb0a 	bl	8000354 <vPortExitCritical>
}
 8000d40:	4620      	mov	r0, r4
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d0f6      	beq.n	8000d3a <xTaskResumeAll+0x1a>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d4c:	469c      	mov	ip, r3
                    prvAddTaskToReadyList( pxTCB );
 8000d4e:	f04f 0a01 	mov.w	sl, #1
 8000d52:	f04f 0e14 	mov.w	lr, #20
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d56:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
                    prvAddTaskToReadyList( pxTCB );
 8000d5a:	f104 0848 	add.w	r8, r4, #72	; 0x48
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d5e:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 8000d62:	b9ea      	cbnz	r2, 8000da0 <xTaskResumeAll+0x80>
                if( pxTCB != NULL )
 8000d64:	b10b      	cbz	r3, 8000d6a <xTaskResumeAll+0x4a>
                    prvResetNextTaskUnblockTime();
 8000d66:	f7ff fe01 	bl	800096c <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d6a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d6e:	b14d      	cbz	r5, 8000d84 <xTaskResumeAll+0x64>
                                xYieldPending = pdTRUE;
 8000d70:	2601      	movs	r6, #1
                            if( xTaskIncrementTick() != pdFALSE )
 8000d72:	f7ff ff43 	bl	8000bfc <xTaskIncrementTick>
 8000d76:	b108      	cbz	r0, 8000d7c <xTaskResumeAll+0x5c>
                                xYieldPending = pdTRUE;
 8000d78:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d7c:	3d01      	subs	r5, #1
 8000d7e:	d1f8      	bne.n	8000d72 <xTaskResumeAll+0x52>
                        xPendedTicks = 0;
 8000d80:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
                if( xYieldPending != pdFALSE )
 8000d84:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0d6      	beq.n	8000d3a <xTaskResumeAll+0x1a>
                    taskYIELD_IF_USING_PREEMPTION();
 8000d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <xTaskResumeAll+0x104>)
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8000d9c:	2401      	movs	r4, #1
 8000d9e:	e7cd      	b.n	8000d3c <xTaskResumeAll+0x1c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da0:	68f3      	ldr	r3, [r6, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000da2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000da4:	e9d3 7007 	ldrd	r7, r0, [r3, #28]
 8000da8:	60b8      	str	r0, [r7, #8]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000dac:	f103 0904 	add.w	r9, r3, #4
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000db0:	6057      	str	r7, [r2, #4]
 8000db2:	684a      	ldr	r2, [r1, #4]
 8000db4:	f103 0718 	add.w	r7, r3, #24
 8000db8:	42ba      	cmp	r2, r7
 8000dba:	680a      	ldr	r2, [r1, #0]
 8000dbc:	bf08      	it	eq
 8000dbe:	6048      	streq	r0, [r1, #4]
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 8000dc6:	600a      	str	r2, [r1, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000dc8:	6959      	ldr	r1, [r3, #20]
 8000dca:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
 8000dce:	60ba      	str	r2, [r7, #8]
 8000dd0:	684a      	ldr	r2, [r1, #4]
 8000dd2:	68d8      	ldr	r0, [r3, #12]
 8000dd4:	454a      	cmp	r2, r9
 8000dd6:	680a      	ldr	r2, [r1, #0]
 8000dd8:	6047      	str	r7, [r0, #4]
 8000dda:	f102 32ff 	add.w	r2, r2, #4294967295
 8000dde:	bf08      	it	eq
 8000de0:	6048      	streq	r0, [r1, #4]
 8000de2:	600a      	str	r2, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000de6:	68a0      	ldr	r0, [r4, #8]
 8000de8:	fa0a f201 	lsl.w	r2, sl, r1
 8000dec:	4302      	orrs	r2, r0
 8000dee:	60a2      	str	r2, [r4, #8]
 8000df0:	fb0e f201 	mul.w	r2, lr, r1
 8000df4:	18a0      	adds	r0, r4, r2
 8000df6:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8000df8:	4442      	add	r2, r8
 8000dfa:	68bd      	ldr	r5, [r7, #8]
 8000dfc:	609f      	str	r7, [r3, #8]
 8000dfe:	60dd      	str	r5, [r3, #12]
 8000e00:	68bd      	ldr	r5, [r7, #8]
 8000e02:	f8c5 9004 	str.w	r9, [r5, #4]
 8000e06:	f8c7 9008 	str.w	r9, [r7, #8]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000e0e:	3201      	adds	r2, #1
 8000e10:	6482      	str	r2, [r0, #72]	; 0x48
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e12:	6862      	ldr	r2, [r4, #4]
 8000e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e16:	4291      	cmp	r1, r2
                        xYieldPending = pdTRUE;
 8000e18:	bf28      	it	cs
 8000e1a:	f8c4 a0f4 	strcs.w	sl, [r4, #244]	; 0xf4
 8000e1e:	e79e      	b.n	8000d5e <xTaskResumeAll+0x3e>
 8000e20:	200044b8 	.word	0x200044b8
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <xTaskDelayUntil>:
    {
 8000e28:	b538      	push	{r3, r4, r5, lr}
        vTaskSuspendAll();
 8000e2a:	f7ff fed7 	bl	8000bdc <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <xTaskDelayUntil+0x50>)
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000e30:	6805      	ldr	r5, [r0, #0]
            const TickType_t xConstTickCount = xTickCount;
 8000e32:	681a      	ldr	r2, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000e34:	186b      	adds	r3, r5, r1
 8000e36:	bf2c      	ite	cs
 8000e38:	2401      	movcs	r4, #1
 8000e3a:	2400      	movcc	r4, #0
            if( xConstTickCount < *pxPreviousWakeTime )
 8000e3c:	4295      	cmp	r5, r2
            *pxPreviousWakeTime = xTimeToWake;
 8000e3e:	6003      	str	r3, [r0, #0]
            if( xConstTickCount < *pxPreviousWakeTime )
 8000e40:	d911      	bls.n	8000e66 <xTaskDelayUntil+0x3e>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000e42:	b964      	cbnz	r4, 8000e5e <xTaskDelayUntil+0x36>
        xAlreadyYielded = xTaskResumeAll();
 8000e44:	f7ff ff6c 	bl	8000d20 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8000e48:	b938      	cbnz	r0, 8000e5a <xTaskDelayUntil+0x32>
            portYIELD_WITHIN_API();
 8000e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <xTaskDelayUntil+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	f3bf 8f4f 	dsb	sy
 8000e56:	f3bf 8f6f 	isb	sy
    }
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d304      	bcc.n	8000e6c <xTaskDelayUntil+0x44>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000e62:	2400      	movs	r4, #0
 8000e64:	e7ee      	b.n	8000e44 <xTaskDelayUntil+0x1c>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000e66:	b90c      	cbnz	r4, 8000e6c <xTaskDelayUntil+0x44>
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d2eb      	bcs.n	8000e44 <xTaskDelayUntil+0x1c>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	1a98      	subs	r0, r3, r2
 8000e70:	f7ff fd3a 	bl	80008e8 <prvAddCurrentTaskToDelayedList>
 8000e74:	2401      	movs	r4, #1
 8000e76:	e7e5      	b.n	8000e44 <xTaskDelayUntil+0x1c>
 8000e78:	200044b8 	.word	0x200044b8
 8000e7c:	e000ed04 	.word	0xe000ed04

08000e80 <vTaskDelay>:
    {
 8000e80:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000e82:	b940      	cbnz	r0, 8000e96 <vTaskDelay+0x16>
            portYIELD_WITHIN_API();
 8000e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <vTaskDelay+0x2c>)
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	f3bf 8f4f 	dsb	sy
 8000e90:	f3bf 8f6f 	isb	sy
    }
 8000e94:	bd08      	pop	{r3, pc}
            vTaskSuspendAll();
 8000e96:	f7ff fea1 	bl	8000bdc <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f7ff fd24 	bl	80008e8 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8000ea0:	f7ff ff3e 	bl	8000d20 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d0ed      	beq.n	8000e84 <vTaskDelay+0x4>
 8000ea8:	e7f4      	b.n	8000e94 <vTaskDelay+0x14>
 8000eaa:	bf00      	nop
 8000eac:	e000ed04 	.word	0xe000ed04

08000eb0 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <vTaskSwitchContext+0x4c>)
{
 8000eb2:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000eb4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	b119      	cbz	r1, 8000ec4 <vTaskSwitchContext+0x14>
        xYieldPending = pdTRUE;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 8000ec2:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8000ec4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ec8:	689b      	ldr	r3, [r3, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	2014      	movs	r0, #20
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f1c3 031f 	rsb	r3, r3, #31
 8000ed6:	fb00 f103 	mul.w	r1, r0, r3
 8000eda:	1854      	adds	r4, r2, r1
 8000edc:	4621      	mov	r1, r4
 8000ede:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8000ee0:	3150      	adds	r1, #80	; 0x50
 8000ee2:	686d      	ldr	r5, [r5, #4]
 8000ee4:	fb00 2303 	mla	r3, r0, r3, r2
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	bf08      	it	eq
 8000eec:	6869      	ldreq	r1, [r5, #4]
 8000eee:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000ef0:	bf08      	it	eq
 8000ef2:	64e1      	streq	r1, [r4, #76]	; 0x4c
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	6053      	str	r3, [r2, #4]
}
 8000efa:	e7e2      	b.n	8000ec2 <vTaskSwitchContext+0x12>
 8000efc:	200044b8 	.word	0x200044b8

08000f00 <vTaskPlaceOnEventList>:
{
 8000f00:	b510      	push	{r4, lr}
 8000f02:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <vTaskPlaceOnEventList+0x1c>)
 8000f06:	6859      	ldr	r1, [r3, #4]
 8000f08:	3118      	adds	r1, #24
 8000f0a:	f7ff f9a5 	bl	8000258 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f0e:	4620      	mov	r0, r4
}
 8000f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8000f14:	2101      	movs	r1, #1
 8000f16:	f7ff bce7 	b.w	80008e8 <prvAddCurrentTaskToDelayedList>
 8000f1a:	bf00      	nop
 8000f1c:	200044b8 	.word	0x200044b8

08000f20 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f20:	68c3      	ldr	r3, [r0, #12]
{
 8000f22:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f24:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8000f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f28:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8000f2c:	6854      	ldr	r4, [r2, #4]
 8000f2e:	6081      	str	r1, [r0, #8]
 8000f30:	6048      	str	r0, [r1, #4]
 8000f32:	f103 0018 	add.w	r0, r3, #24
 8000f36:	4284      	cmp	r4, r0
 8000f38:	bf08      	it	eq
 8000f3a:	6051      	streq	r1, [r2, #4]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6299      	str	r1, [r3, #40]	; 0x28
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000f44:	3901      	subs	r1, #1
 8000f46:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f48:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <xTaskRemoveFromEventList+0xac>)
 8000f4a:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	d12b      	bne.n	8000faa <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8000f52:	e9d3 5002 	ldrd	r5, r0, [r3, #8]
 8000f56:	6959      	ldr	r1, [r3, #20]
 8000f58:	60a8      	str	r0, [r5, #8]
 8000f5a:	68d8      	ldr	r0, [r3, #12]
 8000f5c:	1d1e      	adds	r6, r3, #4
 8000f5e:	6045      	str	r5, [r0, #4]
 8000f60:	684d      	ldr	r5, [r1, #4]
 8000f62:	42b5      	cmp	r5, r6
 8000f64:	bf08      	it	eq
 8000f66:	6048      	streq	r0, [r1, #4]
 8000f68:	6808      	ldr	r0, [r1, #0]
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8000f6e:	2101      	movs	r1, #1
 8000f70:	6890      	ldr	r0, [r2, #8]
 8000f72:	40a1      	lsls	r1, r4
 8000f74:	4301      	orrs	r1, r0
 8000f76:	6091      	str	r1, [r2, #8]
 8000f78:	2114      	movs	r1, #20
 8000f7a:	4361      	muls	r1, r4
 8000f7c:	1855      	adds	r5, r2, r1
 8000f7e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000f80:	6887      	ldr	r7, [r0, #8]
 8000f82:	6098      	str	r0, [r3, #8]
 8000f84:	60df      	str	r7, [r3, #12]
 8000f86:	6887      	ldr	r7, [r0, #8]
 8000f88:	607e      	str	r6, [r7, #4]
 8000f8a:	6086      	str	r6, [r0, #8]
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <xTaskRemoveFromEventList+0xb0>)
 8000f8e:	4401      	add	r1, r0
 8000f90:	6159      	str	r1, [r3, #20]
 8000f92:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000f94:	3301      	adds	r3, #1
 8000f96:	64ab      	str	r3, [r5, #72]	; 0x48
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f98:	6853      	ldr	r3, [r2, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	429c      	cmp	r4, r3
        xYieldPending = pdTRUE;
 8000f9e:	bf8a      	itet	hi
 8000fa0:	2001      	movhi	r0, #1
        xReturn = pdFALSE;
 8000fa2:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 8000fa4:	f8c2 00f4 	strhi.w	r0, [r2, #244]	; 0xf4
}
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000faa:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
 8000fae:	688d      	ldr	r5, [r1, #8]
 8000fb0:	61d9      	str	r1, [r3, #28]
 8000fb2:	621d      	str	r5, [r3, #32]
 8000fb4:	688d      	ldr	r5, [r1, #8]
 8000fb6:	6068      	str	r0, [r5, #4]
 8000fb8:	6088      	str	r0, [r1, #8]
 8000fba:	f102 01d4 	add.w	r1, r2, #212	; 0xd4
 8000fbe:	6299      	str	r1, [r3, #40]	; 0x28
 8000fc0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fca:	e7e5      	b.n	8000f98 <xTaskRemoveFromEventList+0x78>
 8000fcc:	200044b8 	.word	0x200044b8
 8000fd0:	20004500 	.word	0x20004500

08000fd4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <vTaskInternalSetTimeOutState+0x10>)
 8000fd6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    pxTimeOut->xTimeOnEntering = xTickCount;
 8000fda:	681b      	ldr	r3, [r3, #0]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000fdc:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8000fde:	6043      	str	r3, [r0, #4]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200044b8 	.word	0x200044b8

08000fe8 <xTaskCheckForTimeOut>:
{
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	460d      	mov	r5, r1
 8000fec:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8000fee:	f7ff f9a1 	bl	8000334 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 8000ff2:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <xTaskCheckForTimeOut+0x48>)
            if( *pxTicksToWait == portMAX_DELAY )
 8000ff6:	1c5a      	adds	r2, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 8000ff8:	6801      	ldr	r1, [r0, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8000ffa:	d017      	beq.n	800102c <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8000ffc:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8001000:	6826      	ldr	r6, [r4, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001002:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001004:	4286      	cmp	r6, r0
 8001006:	d008      	beq.n	800101a <xTaskCheckForTimeOut+0x32>
 8001008:	428a      	cmp	r2, r1
 800100a:	d806      	bhi.n	800101a <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 800100c:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800100e:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8001010:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8001012:	f7ff f99f 	bl	8000354 <vPortExitCritical>
}
 8001016:	4620      	mov	r0, r4
 8001018:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800101a:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800101c:	4283      	cmp	r3, r0
 800101e:	d9f5      	bls.n	800100c <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001024:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8001026:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001028:	f7ff ffd4 	bl	8000fd4 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 800102c:	2400      	movs	r4, #0
 800102e:	e7f0      	b.n	8001012 <xTaskCheckForTimeOut+0x2a>
 8001030:	200044b8 	.word	0x200044b8

08001034 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8001034:	2201      	movs	r2, #1
 8001036:	4b02      	ldr	r3, [pc, #8]	; (8001040 <vTaskMissedYield+0xc>)
 8001038:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200044b8 	.word	0x200044b8

08001044 <xTaskPriorityInherit>:
    {
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8001046:	4604      	mov	r4, r0
 8001048:	2800      	cmp	r0, #0
 800104a:	d039      	beq.n	80010c0 <xTaskPriorityInherit+0x7c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800104c:	4a23      	ldr	r2, [pc, #140]	; (80010dc <xTaskPriorityInherit+0x98>)
 800104e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001050:	6851      	ldr	r1, [r2, #4]
 8001052:	4615      	mov	r5, r2
 8001054:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001056:	428b      	cmp	r3, r1
 8001058:	d238      	bcs.n	80010cc <xTaskPriorityInherit+0x88>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800105a:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800105c:	4e20      	ldr	r6, [pc, #128]	; (80010e0 <xTaskPriorityInherit+0x9c>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800105e:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001060:	bfa1      	itttt	ge
 8001062:	686a      	ldrge	r2, [r5, #4]
 8001064:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8001066:	f1c2 0205 	rsbge	r2, r2, #5
 800106a:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800106c:	2214      	movs	r2, #20
 800106e:	fb02 6303 	mla	r3, r2, r3, r6
 8001072:	6942      	ldr	r2, [r0, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	d124      	bne.n	80010c2 <xTaskPriorityInherit+0x7e>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001078:	1d07      	adds	r7, r0, #4
 800107a:	4638      	mov	r0, r7
 800107c:	f7ff f903 	bl	8000286 <uxListRemove>
 8001080:	b930      	cbnz	r0, 8001090 <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001082:	2201      	movs	r2, #1
 8001084:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001086:	68ab      	ldr	r3, [r5, #8]
 8001088:	408a      	lsls	r2, r1
 800108a:	ea23 0302 	bic.w	r3, r3, r2
 800108e:	60ab      	str	r3, [r5, #8]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001090:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001092:	686b      	ldr	r3, [r5, #4]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001094:	68a9      	ldr	r1, [r5, #8]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001098:	fa00 f302 	lsl.w	r3, r0, r2
 800109c:	430b      	orrs	r3, r1
 800109e:	60ab      	str	r3, [r5, #8]
 80010a0:	2314      	movs	r3, #20
 80010a2:	4353      	muls	r3, r2
 80010a4:	441d      	add	r5, r3
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80010a6:	62e2      	str	r2, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80010a8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80010aa:	441e      	add	r6, r3
 80010ac:	6891      	ldr	r1, [r2, #8]
 80010ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80010b0:	60e1      	str	r1, [r4, #12]
 80010b2:	6891      	ldr	r1, [r2, #8]
 80010b4:	4403      	add	r3, r0
 80010b6:	60a2      	str	r2, [r4, #8]
 80010b8:	604f      	str	r7, [r1, #4]
 80010ba:	6097      	str	r7, [r2, #8]
 80010bc:	6166      	str	r6, [r4, #20]
 80010be:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 80010c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80010c2:	686b      	ldr	r3, [r5, #4]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	62c3      	str	r3, [r0, #44]	; 0x2c
                xReturn = pdTRUE;
 80010c8:	2001      	movs	r0, #1
 80010ca:	e7f9      	b.n	80010c0 <xTaskPriorityInherit+0x7c>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80010cc:	6853      	ldr	r3, [r2, #4]
 80010ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010d0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80010d2:	42a0      	cmp	r0, r4
 80010d4:	bf2c      	ite	cs
 80010d6:	2000      	movcs	r0, #0
 80010d8:	2001      	movcc	r0, #1
 80010da:	e7f1      	b.n	80010c0 <xTaskPriorityInherit+0x7c>
 80010dc:	200044b8 	.word	0x200044b8
 80010e0:	20004500 	.word	0x20004500

080010e4 <xTaskPriorityDisinherit>:
    {
 80010e4:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 80010e6:	4604      	mov	r4, r0
 80010e8:	b908      	cbnz	r0, 80010ee <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 80010ea:	2000      	movs	r0, #0
    }
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
            ( pxTCB->uxMutexesHeld )--;
 80010ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80010f0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010f2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 80010f4:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80010f6:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 80010f8:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80010fa:	d0f6      	beq.n	80010ea <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f4      	bne.n	80010ea <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001100:	1d05      	adds	r5, r0, #4
 8001102:	4628      	mov	r0, r5
 8001104:	f7ff f8bf 	bl	8000286 <uxListRemove>
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <xTaskPriorityDisinherit+0x70>)
 800110a:	b930      	cbnz	r0, 800111a <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800110c:	2101      	movs	r1, #1
 800110e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4081      	lsls	r1, r0
 8001114:	ea22 0201 	bic.w	r2, r2, r1
 8001118:	609a      	str	r2, [r3, #8]
                    prvAddTaskToReadyList( pxTCB );
 800111a:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800111c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 800111e:	689e      	ldr	r6, [r3, #8]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001120:	f1c1 0205 	rsb	r2, r1, #5
 8001124:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001126:	fa00 f201 	lsl.w	r2, r0, r1
 800112a:	4332      	orrs	r2, r6
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	2214      	movs	r2, #20
 8001130:	434a      	muls	r2, r1
 8001132:	4413      	add	r3, r2
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001134:	62e1      	str	r1, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8001136:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001138:	688e      	ldr	r6, [r1, #8]
 800113a:	60a1      	str	r1, [r4, #8]
 800113c:	60e6      	str	r6, [r4, #12]
 800113e:	688e      	ldr	r6, [r1, #8]
 8001140:	6075      	str	r5, [r6, #4]
 8001142:	608d      	str	r5, [r1, #8]
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <xTaskPriorityDisinherit+0x74>)
 8001146:	440a      	add	r2, r1
 8001148:	6162      	str	r2, [r4, #20]
 800114a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800114c:	4402      	add	r2, r0
 800114e:	649a      	str	r2, [r3, #72]	; 0x48
        return xReturn;
 8001150:	e7cc      	b.n	80010ec <xTaskPriorityDisinherit+0x8>
 8001152:	bf00      	nop
 8001154:	200044b8 	.word	0x200044b8
 8001158:	20004500 	.word	0x20004500

0800115c <vTaskPriorityDisinheritAfterTimeout>:
    {
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800115e:	4604      	mov	r4, r0
 8001160:	2800      	cmp	r0, #0
 8001162:	d03a      	beq.n	80011da <vTaskPriorityDisinheritAfterTimeout+0x7e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001164:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001166:	4299      	cmp	r1, r3
 8001168:	bf38      	it	cc
 800116a:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 800116c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800116e:	428b      	cmp	r3, r1
 8001170:	d033      	beq.n	80011da <vTaskPriorityDisinheritAfterTimeout+0x7e>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001172:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001174:	2a01      	cmp	r2, #1
 8001176:	d130      	bne.n	80011da <vTaskPriorityDisinheritAfterTimeout+0x7e>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001178:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800117a:	4d18      	ldr	r5, [pc, #96]	; (80011dc <vTaskPriorityDisinheritAfterTimeout+0x80>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800117c:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800117e:	f04f 0214 	mov.w	r2, #20
 8001182:	f105 0648 	add.w	r6, r5, #72	; 0x48
 8001186:	fb02 6303 	mla	r3, r2, r3, r6
 800118a:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 800118c:	62c1      	str	r1, [r0, #44]	; 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800118e:	bfa4      	itt	ge
 8001190:	f1c1 0105 	rsbge	r1, r1, #5
 8001194:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001196:	429a      	cmp	r2, r3
 8001198:	d11f      	bne.n	80011da <vTaskPriorityDisinheritAfterTimeout+0x7e>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800119a:	1d07      	adds	r7, r0, #4
 800119c:	4638      	mov	r0, r7
 800119e:	f7ff f872 	bl	8000286 <uxListRemove>
 80011a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011a4:	b928      	cbnz	r0, 80011b2 <vTaskPriorityDisinheritAfterTimeout+0x56>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80011a6:	2101      	movs	r1, #1
 80011a8:	68ab      	ldr	r3, [r5, #8]
 80011aa:	4091      	lsls	r1, r2
 80011ac:	ea23 0301 	bic.w	r3, r3, r1
 80011b0:	60ab      	str	r3, [r5, #8]
                        prvAddTaskToReadyList( pxTCB );
 80011b2:	2301      	movs	r3, #1
 80011b4:	68a9      	ldr	r1, [r5, #8]
 80011b6:	4093      	lsls	r3, r2
 80011b8:	430b      	orrs	r3, r1
 80011ba:	60ab      	str	r3, [r5, #8]
 80011bc:	2314      	movs	r3, #20
 80011be:	4353      	muls	r3, r2
 80011c0:	441d      	add	r5, r3
 80011c2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80011c4:	441e      	add	r6, r3
 80011c6:	6891      	ldr	r1, [r2, #8]
 80011c8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80011ca:	60e1      	str	r1, [r4, #12]
 80011cc:	6891      	ldr	r1, [r2, #8]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60a2      	str	r2, [r4, #8]
 80011d2:	604f      	str	r7, [r1, #4]
 80011d4:	6097      	str	r7, [r2, #8]
 80011d6:	6166      	str	r6, [r4, #20]
 80011d8:	64ab      	str	r3, [r5, #72]	; 0x48
    }
 80011da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011dc:	200044b8 	.word	0x200044b8

080011e0 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <pvTaskIncrementMutexHeldCount+0x14>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	b11a      	cbz	r2, 80011ee <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80011ea:	3201      	adds	r2, #1
 80011ec:	650a      	str	r2, [r1, #80]	; 0x50
        return pxCurrentTCB;
 80011ee:	6858      	ldr	r0, [r3, #4]
    }
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200044b8 	.word	0x200044b8

080011f8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <NVIC_PriorityGroupConfig+0x10>)
 80011fa:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011fe:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001202:	60d8      	str	r0, [r3, #12]
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	2501      	movs	r5, #1
 8001210:	7801      	ldrb	r1, [r0, #0]
 8001212:	f001 031f 	and.w	r3, r1, #31
 8001216:	409d      	lsls	r5, r3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001218:	78c3      	ldrb	r3, [r0, #3]
 800121a:	094c      	lsrs	r4, r1, #5
 800121c:	b1c3      	cbz	r3, 8001250 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <NVIC_Init+0x50>)
 8001220:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001222:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001224:	43d2      	mvns	r2, r2
 8001226:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 800122a:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800122e:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001232:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 8001234:	200f      	movs	r0, #15
 8001236:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800123a:	4013      	ands	r3, r2
 800123c:	4333      	orrs	r3, r6
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <NVIC_Init+0x54>)
    tmppriority = tmppriority << 0x04;
 8001240:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4411      	add	r1, r2
 8001246:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800124a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800124e:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <NVIC_Init+0x54>)
 8001252:	3420      	adds	r4, #32
 8001254:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 8001258:	e7f9      	b.n	800124e <NVIC_Init+0x42>
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	e000e100 	.word	0xe000e100

08001264 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001264:	7902      	ldrb	r2, [r0, #4]
{
 8001266:	b530      	push	{r4, r5, lr}
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001268:	7983      	ldrb	r3, [r0, #6]
 800126a:	6805      	ldr	r5, [r0, #0]
 800126c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001270:	43e9      	mvns	r1, r5
 8001272:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8001276:	b323      	cbz	r3, 80012c2 <EXTI_Init+0x5e>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <EXTI_Init+0x68>)
 800127a:	681c      	ldr	r4, [r3, #0]
 800127c:	400c      	ands	r4, r1
 800127e:	601c      	str	r4, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001280:	685c      	ldr	r4, [r3, #4]
 8001282:	4021      	ands	r1, r4
 8001284:	6059      	str	r1, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001286:	6811      	ldr	r1, [r2, #0]
 8001288:	4329      	orrs	r1, r5
 800128a:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800128c:	6899      	ldr	r1, [r3, #8]
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	ea21 0102 	bic.w	r1, r1, r2
 8001294:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001296:	68d9      	ldr	r1, [r3, #12]
 8001298:	ea21 0102 	bic.w	r1, r1, r2
 800129c:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800129e:	7941      	ldrb	r1, [r0, #5]
 80012a0:	2910      	cmp	r1, #16
 80012a2:	d106      	bne.n	80012b2 <EXTI_Init+0x4e>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80012a4:	6899      	ldr	r1, [r3, #8]
 80012a6:	4311      	orrs	r1, r2
 80012a8:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80012aa:	68d9      	ldr	r1, [r3, #12]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80012b0:	bd30      	pop	{r4, r5, pc}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80012b2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80012b6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e7f6      	b.n	80012b0 <EXTI_Init+0x4c>
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	400b      	ands	r3, r1
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	e7f2      	b.n	80012b0 <EXTI_Init+0x4c>
 80012ca:	bf00      	nop
 80012cc:	40010400 	.word	0x40010400

080012d0 <EXTI_ClearITPendingBit>:
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <EXTI_ClearITPendingBit+0x8>)
 80012d2:	6158      	str	r0, [r3, #20]
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40010400 	.word	0x40010400

080012dc <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <FLASH_SetLatency+0x10>)
 80012de:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80012e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 80012e4:	4303      	orrs	r3, r0
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000

080012f0 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <FLASH_PrefetchBufferCmd+0x14>)
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	f021 0110 	bic.w	r1, r1, #16
 80012f8:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4302      	orrs	r2, r0
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000

08001308 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800130c:	78cb      	ldrb	r3, [r1, #3]
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800130e:	880e      	ldrh	r6, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001310:	06da      	lsls	r2, r3, #27
 8001312:	bf48      	it	mi
 8001314:	788a      	ldrbmi	r2, [r1, #2]
 8001316:	f003 050f 	and.w	r5, r3, #15
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800131a:	bf48      	it	mi
 800131c:	4315      	orrmi	r5, r2
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800131e:	780a      	ldrb	r2, [r1, #0]
 8001320:	b1d2      	cbz	r2, 8001358 <GPIO_Init+0x50>
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001322:	2100      	movs	r1, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001324:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001328:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRL;
 800132c:	6802      	ldr	r2, [r0, #0]
      pos = ((uint32_t)0x01) << pinpos;
 800132e:	fa0c f701 	lsl.w	r7, ip, r1
      if (currentpin == pos)
 8001332:	ea37 0406 	bics.w	r4, r7, r6
 8001336:	d10b      	bne.n	8001350 <GPIO_Init+0x48>
        pos = pinpos << 2;
 8001338:	008c      	lsls	r4, r1, #2
        pinmask = ((uint32_t)0x0F) << pos;
 800133a:	fa0e f804 	lsl.w	r8, lr, r4
        tmpreg &= ~pinmask;
 800133e:	ea22 0208 	bic.w	r2, r2, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001342:	fa05 f404 	lsl.w	r4, r5, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001346:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8001348:	ea42 0204 	orr.w	r2, r2, r4
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800134c:	d124      	bne.n	8001398 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800134e:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001350:	3101      	adds	r1, #1
 8001352:	2908      	cmp	r1, #8
 8001354:	d1eb      	bne.n	800132e <GPIO_Init+0x26>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001356:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001358:	2eff      	cmp	r6, #255	; 0xff
 800135a:	d91b      	bls.n	8001394 <GPIO_Init+0x8c>
  {
    tmpreg = GPIOx->CRH;
 800135c:	2408      	movs	r4, #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800135e:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001362:	f04f 0e0f 	mov.w	lr, #15
    tmpreg = GPIOx->CRH;
 8001366:	6841      	ldr	r1, [r0, #4]
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001368:	fa0c f704 	lsl.w	r7, ip, r4
      if (currentpin == pos)
 800136c:	ea37 0206 	bics.w	r2, r7, r6
 8001370:	d10c      	bne.n	800138c <GPIO_Init+0x84>
        pos = pinpos << 2;
 8001372:	00a2      	lsls	r2, r4, #2
 8001374:	3a20      	subs	r2, #32
        pinmask = ((uint32_t)0x0F) << pos;
 8001376:	fa0e f802 	lsl.w	r8, lr, r2
        tmpreg &= ~pinmask;
 800137a:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800137e:	fa05 f202 	lsl.w	r2, r5, r2
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001382:	2b28      	cmp	r3, #40	; 0x28
        tmpreg |= (currentmode << pos);
 8001384:	ea41 0102 	orr.w	r1, r1, r2
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001388:	d10a      	bne.n	80013a0 <GPIO_Init+0x98>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800138a:	6147      	str	r7, [r0, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800138c:	3401      	adds	r4, #1
 800138e:	2c10      	cmp	r4, #16
 8001390:	d1ea      	bne.n	8001368 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001392:	6041      	str	r1, [r0, #4]
  }
}
 8001394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001398:	2b48      	cmp	r3, #72	; 0x48
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800139a:	bf08      	it	eq
 800139c:	6107      	streq	r7, [r0, #16]
 800139e:	e7d7      	b.n	8001350 <GPIO_Init+0x48>
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013a0:	2b48      	cmp	r3, #72	; 0x48
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013a2:	bf08      	it	eq
 80013a4:	6107      	streq	r7, [r0, #16]
 80013a6:	e7f1      	b.n	800138c <GPIO_Init+0x84>

080013a8 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80013a8:	68c3      	ldr	r3, [r0, #12]
 80013aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80013ac:	bf14      	ite	ne
 80013ae:	2001      	movne	r0, #1
 80013b0:	2000      	moveq	r0, #0
 80013b2:	4770      	bx	lr

080013b4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80013b4:	6101      	str	r1, [r0, #16]
}
 80013b6:	4770      	bx	lr

080013b8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80013b8:	6141      	str	r1, [r0, #20]
}
 80013ba:	4770      	bx	lr

080013bc <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80013bc:	b10a      	cbz	r2, 80013c2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013be:	6101      	str	r1, [r0, #16]
 80013c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80013c2:	6141      	str	r1, [r0, #20]
  }
}
 80013c4:	4770      	bx	lr
	...

080013c8 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80013c8:	2800      	cmp	r0, #0
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <GPIO_PinRemapConfig+0x5c>)
{
 80013cc:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80013ce:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80013d2:	bfb4      	ite	lt
 80013d4:	69d3      	ldrlt	r3, [r2, #28]
    tmpreg = AFIO->MAPR;
 80013d6:	6853      	ldrge	r3, [r2, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80013d8:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  tmp = GPIO_Remap & LSB_MASK;
 80013dc:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80013de:	d110      	bne.n	8001402 <GPIO_PinRemapConfig+0x3a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80013e0:	6855      	ldr	r5, [r2, #4]
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80013e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80013e6:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80013ea:	6055      	str	r5, [r2, #4]
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80013ec:	b119      	cbz	r1, 80013f6 <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80013ee:	0d42      	lsrs	r2, r0, #21
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	4094      	lsls	r4, r2
 80013f4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <GPIO_PinRemapConfig+0x5c>)
 80013f8:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 80013fa:	bfb4      	ite	lt
 80013fc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80013fe:	6053      	strge	r3, [r2, #4]
  }  
}
 8001400:	bd30      	pop	{r4, r5, pc}
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001402:	02c2      	lsls	r2, r0, #11
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001404:	bf4d      	iteet	mi
 8001406:	2203      	movmi	r2, #3
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001408:	0d42      	lsrpl	r2, r0, #21
 800140a:	0112      	lslpl	r2, r2, #4
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800140c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001410:	bf4c      	ite	mi
 8001412:	40aa      	lslmi	r2, r5
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001414:	fa04 f202 	lslpl.w	r2, r4, r2
 8001418:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800141c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001420:	e7e4      	b.n	80013ec <GPIO_PinRemapConfig+0x24>
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000

08001428 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001428:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800142a:	240f      	movs	r4, #15
 800142c:	f001 0303 	and.w	r3, r1, #3
 8001430:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8001434:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001438:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800143c:	688a      	ldr	r2, [r1, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	409c      	lsls	r4, r3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001442:	ea22 0204 	bic.w	r2, r2, r4
 8001446:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001448:	688a      	ldr	r2, [r1, #8]
 800144a:	4098      	lsls	r0, r3
 800144c:	4310      	orrs	r0, r2
 800144e:	6088      	str	r0, [r1, #8]
}
 8001450:	bd10      	pop	{r4, pc}
	...

08001454 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <RCC_DeInit+0x38>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <RCC_DeInit+0x3c>)
 8001462:	400a      	ands	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800146c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001470:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001478:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001480:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001482:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001486:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	f8ff0000 	.word	0xf8ff0000

08001494 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001496:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014a0:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014a8:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 80014aa:	d003      	beq.n	80014b4 <RCC_HSEConfig+0x20>
 80014ac:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80014b0:	d005      	beq.n	80014be <RCC_HSEConfig+0x2a>
 80014b2:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80014ba:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 80014bc:	4770      	bx	lr
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80014c4:	e7f9      	b.n	80014ba <RCC_HSEConfig+0x26>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <RCC_PLLConfig+0x10>)
 80014ce:	6853      	ldr	r3, [r2, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80014d0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80014d4:	430b      	orrs	r3, r1
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80014d6:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014d8:	6053      	str	r3, [r2, #4]
}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000

080014e0 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80014e0:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <RCC_PLLCmd+0x8>)
 80014e2:	6018      	str	r0, [r3, #0]
}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	42420060 	.word	0x42420060

080014ec <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80014ec:	4a03      	ldr	r2, [pc, #12]	; (80014fc <RCC_SYSCLKConfig+0x10>)
 80014ee:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80014f0:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80014f4:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014f6:	6053      	str	r3, [r2, #4]
}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <RCC_GetSYSCLKSource+0xc>)
 8001502:	6858      	ldr	r0, [r3, #4]
}
 8001504:	f000 000c 	and.w	r0, r0, #12
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <RCC_HCLKConfig+0x10>)
 8001512:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001518:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800151a:	6053      	str	r3, [r2, #4]
}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <RCC_PCLK1Config+0x10>)
 8001526:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001528:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800152c:	4303      	orrs	r3, r0
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800152e:	6053      	str	r3, [r2, #4]
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <RCC_PCLK2Config+0x10>)
 800153a:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800153c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001540:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001544:	6053      	str	r3, [r2, #4]
}
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <RCC_GetClocksFreq+0x78>)
{
 800154e:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001550:	6853      	ldr	r3, [r2, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001556:	2b04      	cmp	r3, #4
 8001558:	d021      	beq.n	800159e <RCC_GetClocksFreq+0x52>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d021      	beq.n	80015a2 <RCC_GetClocksFreq+0x56>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <RCC_GetClocksFreq+0x7c>)
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001560:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001562:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001564:	4919      	ldr	r1, [pc, #100]	; (80015cc <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
 8001566:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800156a:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	40e3      	lsrs	r3, r4
 8001570:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001572:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8001574:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8001578:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800157a:	fa23 f404 	lsr.w	r4, r3, r4
 800157e:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001580:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8001582:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8001586:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001588:	40e3      	lsrs	r3, r4
 800158a:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800158c:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800158e:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8001592:	4411      	add	r1, r2
 8001594:	7c0a      	ldrb	r2, [r1, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001596:	fbb3 f3f2 	udiv	r3, r3, r2
 800159a:	6103      	str	r3, [r0, #16]
}
 800159c:	bd10      	pop	{r4, pc}
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <RCC_GetClocksFreq+0x84>)
 80015a0:	e7de      	b.n	8001560 <RCC_GetClocksFreq+0x14>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80015a2:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80015a4:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80015a6:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80015aa:	03cc      	lsls	r4, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80015ac:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80015b0:	d402      	bmi.n	80015b8 <RCC_GetClocksFreq+0x6c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <RCC_GetClocksFreq+0x88>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80015b4:	434b      	muls	r3, r1
 80015b6:	e7d3      	b.n	8001560 <RCC_GetClocksFreq+0x14>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80015b8:	6851      	ldr	r1, [r2, #4]
 80015ba:	0389      	lsls	r1, r1, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80015bc:	bf4c      	ite	mi
 80015be:	4906      	ldrmi	r1, [pc, #24]	; (80015d8 <RCC_GetClocksFreq+0x8c>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80015c0:	4903      	ldrpl	r1, [pc, #12]	; (80015d0 <RCC_GetClocksFreq+0x84>)
 80015c2:	e7f7      	b.n	80015b4 <RCC_GetClocksFreq+0x68>
 80015c4:	40021000 	.word	0x40021000
 80015c8:	007a1200 	.word	0x007a1200
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	00b71b00 	.word	0x00b71b00
 80015d4:	003d0900 	.word	0x003d0900
 80015d8:	005b8d80 	.word	0x005b8d80

080015dc <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <RCC_APB2PeriphClockCmd+0x14>)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015de:	699a      	ldr	r2, [r3, #24]
  if (NewState != DISABLE)
 80015e0:	b111      	cbz	r1, 80015e8 <RCC_APB2PeriphClockCmd+0xc>
    RCC->APB2ENR |= RCC_APB2Periph;
 80015e2:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015e4:	6198      	str	r0, [r3, #24]
  }
}
 80015e6:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80015e8:	ea22 0000 	bic.w	r0, r2, r0
 80015ec:	e7fa      	b.n	80015e4 <RCC_APB2PeriphClockCmd+0x8>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80015f6:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 80015f8:	b111      	cbz	r1, 8001600 <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80015fa:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80015fc:	61d8      	str	r0, [r3, #28]
  }
}
 80015fe:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001600:	ea22 0000 	bic.w	r0, r2, r0
 8001604:	e7fa      	b.n	80015fc <RCC_APB1PeriphClockCmd+0x8>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800160c:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800160e:	2a01      	cmp	r2, #1
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <RCC_GetFlagStatus+0x24>)
 8001612:	d107      	bne.n	8001624 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8001614:	681b      	ldr	r3, [r3, #0]
  {
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001616:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800161a:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 800161e:	f000 0001 	and.w	r0, r0, #1
 8001622:	4770      	bx	lr
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001624:	2a02      	cmp	r2, #2
    statusreg = RCC->BDCR;
 8001626:	bf0c      	ite	eq
 8001628:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 800162a:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 800162c:	e7f3      	b.n	8001616 <RCC_GetFlagStatus+0xa>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <RCC_WaitForHSEStartUp>:
  __IO uint32_t StartUpCounter = 0;
 8001634:	2300      	movs	r3, #0
{
 8001636:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8001638:	9301      	str	r3, [sp, #4]
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800163a:	2031      	movs	r0, #49	; 0x31
 800163c:	f7ff ffe6 	bl	800160c <RCC_GetFlagStatus>
    StartUpCounter++;  
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001646:	9b01      	ldr	r3, [sp, #4]
 8001648:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800164c:	d001      	beq.n	8001652 <RCC_WaitForHSEStartUp+0x1e>
 800164e:	2800      	cmp	r0, #0
 8001650:	d0f3      	beq.n	800163a <RCC_WaitForHSEStartUp+0x6>
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001652:	2031      	movs	r0, #49	; 0x31
 8001654:	f7ff ffda 	bl	800160c <RCC_GetFlagStatus>
}
 8001658:	3800      	subs	r0, #0
 800165a:	bf18      	it	ne
 800165c:	2001      	movne	r0, #1
 800165e:	b003      	add	sp, #12
 8001660:	f85d fb04 	ldr.w	pc, [sp], #4

08001664 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001664:	8803      	ldrh	r3, [r0, #0]
{
 8001666:	b510      	push	{r4, lr}
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001668:	f403 5241 	and.w	r2, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800166c:	884c      	ldrh	r4, [r1, #2]
 800166e:	880b      	ldrh	r3, [r1, #0]
 8001670:	4323      	orrs	r3, r4
 8001672:	888c      	ldrh	r4, [r1, #4]
 8001674:	4323      	orrs	r3, r4
 8001676:	88cc      	ldrh	r4, [r1, #6]
 8001678:	4323      	orrs	r3, r4
 800167a:	890c      	ldrh	r4, [r1, #8]
 800167c:	4323      	orrs	r3, r4
 800167e:	894c      	ldrh	r4, [r1, #10]
 8001680:	4323      	orrs	r3, r4
 8001682:	898c      	ldrh	r4, [r1, #12]
 8001684:	4323      	orrs	r3, r4
 8001686:	89cc      	ldrh	r4, [r1, #14]
 8001688:	4323      	orrs	r3, r4
 800168a:	4313      	orrs	r3, r2
 800168c:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800168e:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001690:	8b83      	ldrh	r3, [r0, #28]
 8001692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	0c1b      	lsrs	r3, r3, #16
 800169a:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800169c:	8a0b      	ldrh	r3, [r1, #16]
 800169e:	8203      	strh	r3, [r0, #16]
}
 80016a0:	bd10      	pop	{r4, pc}

080016a2 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80016a2:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80016a4:	b121      	cbz	r1, 80016b0 <SPI_Cmd+0xe>
    SPIx->CR1 |= CR1_SPE_Set;
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 80016ac:	8003      	strh	r3, [r0, #0]
  }
}
 80016ae:	4770      	bx	lr
    SPIx->CR1 &= CR1_SPE_Reset;
 80016b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	e7f8      	b.n	80016ac <SPI_Cmd+0xa>

080016ba <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80016ba:	8181      	strh	r1, [r0, #12]
}
 80016bc:	4770      	bx	lr

080016be <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80016be:	8980      	ldrh	r0, [r0, #12]
}
 80016c0:	b280      	uxth	r0, r0
 80016c2:	4770      	bx	lr

080016c4 <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80016c4:	8903      	ldrh	r3, [r0, #8]
 80016c6:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 80016c8:	bf14      	ite	ne
 80016ca:	2001      	movne	r0, #1
 80016cc:	2000      	moveq	r0, #0
 80016ce:	4770      	bx	lr

080016d0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80016d0:	b530      	push	{r4, r5, lr}
 80016d2:	460d      	mov	r5, r1
 80016d4:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80016d6:	8a03      	ldrh	r3, [r0, #16]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 80016d8:	898a      	ldrh	r2, [r1, #12]
  tmpreg = USARTx->CR2;
 80016da:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80016dc:	88c9      	ldrh	r1, [r1, #6]
 80016de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016e2:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80016e4:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80016e6:	8983      	ldrh	r3, [r0, #12]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016e8:	88a9      	ldrh	r1, [r5, #4]
 80016ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016ee:	f023 030c 	bic.w	r3, r3, #12
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	430b      	orrs	r3, r1
 80016f8:	8929      	ldrh	r1, [r5, #8]
{
 80016fa:	b087      	sub	sp, #28
 80016fc:	430b      	orrs	r3, r1
 80016fe:	8969      	ldrh	r1, [r5, #10]
 8001700:	430b      	orrs	r3, r1
 8001702:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001704:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001706:	8a83      	ldrh	r3, [r0, #20]
 8001708:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800170a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170e:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001710:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001712:	a801      	add	r0, sp, #4
 8001714:	f7ff ff1a 	bl	800154c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001718:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <USART_Init+0xa4>)
 800171e:	4294      	cmp	r4, r2
 8001720:	bf08      	it	eq
 8001722:	4619      	moveq	r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001724:	2319      	movs	r3, #25
 8001726:	89a2      	ldrh	r2, [r4, #12]
 8001728:	434b      	muls	r3, r1
 800172a:	6829      	ldr	r1, [r5, #0]
 800172c:	0410      	lsls	r0, r2, #16
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800172e:	bf4c      	ite	mi
 8001730:	0049      	lslmi	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001732:	0089      	lslpl	r1, r1, #2
 8001734:	fbb3 f1f1 	udiv	r1, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8001738:	2564      	movs	r5, #100	; 0x64
 800173a:	fbb1 f3f5 	udiv	r3, r1, r5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800173e:	89a2      	ldrh	r2, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8001740:	0118      	lsls	r0, r3, #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001742:	0412      	lsls	r2, r2, #16
 8001744:	fb05 1313 	mls	r3, r5, r3, r1
 8001748:	d50b      	bpl.n	8001762 <USART_Init+0x92>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800174a:	00da      	lsls	r2, r3, #3
 800174c:	3232      	adds	r2, #50	; 0x32
 800174e:	fbb2 f2f5 	udiv	r2, r2, r5
 8001752:	f002 0207 	and.w	r2, r2, #7
 8001756:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800175a:	b29b      	uxth	r3, r3
 800175c:	8123      	strh	r3, [r4, #8]
}
 800175e:	b007      	add	sp, #28
 8001760:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	3332      	adds	r3, #50	; 0x32
 8001766:	fbb3 f3f5 	udiv	r3, r3, r5
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4303      	orrs	r3, r0
 8001770:	e7f3      	b.n	800175a <USART_Init+0x8a>
 8001772:	bf00      	nop
 8001774:	40013800 	.word	0x40013800

08001778 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001778:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 800177a:	b121      	cbz	r1, 8001786 <USART_Cmd+0xe>
    USARTx->CR1 |= CR1_UE_Set;
 800177c:	b29b      	uxth	r3, r3
 800177e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001782:	8183      	strh	r3, [r0, #12]
  }
}
 8001784:	4770      	bx	lr
    USARTx->CR1 &= CR1_UE_Reset;
 8001786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	e7f8      	b.n	8001782 <USART_Cmd+0xa>

08001790 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8001790:	2301      	movs	r3, #1
{
 8001792:	b510      	push	{r4, lr}
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001794:	f3c1 1442 	ubfx	r4, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001798:	429c      	cmp	r4, r3
  itpos = USART_IT & IT_Mask;
 800179a:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 800179e:	fa03 f101 	lsl.w	r1, r3, r1
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80017a2:	d105      	bne.n	80017b0 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
 80017a4:	300c      	adds	r0, #12
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017a6:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80017a8:	b13a      	cbz	r2, 80017ba <USART_ITConfig+0x2a>
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017aa:	4319      	orrs	r1, r3
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017ac:	6001      	str	r1, [r0, #0]
  }
}
 80017ae:	bd10      	pop	{r4, pc}
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80017b0:	2c02      	cmp	r4, #2
    usartxbase += 0x10;
 80017b2:	bf0c      	ite	eq
 80017b4:	3010      	addeq	r0, #16
    usartxbase += 0x14; 
 80017b6:	3014      	addne	r0, #20
 80017b8:	e7f5      	b.n	80017a6 <USART_ITConfig+0x16>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017ba:	ea23 0101 	bic.w	r1, r3, r1
 80017be:	e7f5      	b.n	80017ac <USART_ITConfig+0x1c>

080017c0 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80017c0:	2301      	movs	r3, #1
 80017c2:	0a09      	lsrs	r1, r1, #8
 80017c4:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80017c6:	43db      	mvns	r3, r3
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	8003      	strh	r3, [r0, #0]
}
 80017cc:	4770      	bx	lr

080017ce <lcd_delay_pool>:
}


void lcd_delay_pool(uint16_t time2delay)
{
	volatile uint32_t dummy = 0;
 80017ce:	2300      	movs	r3, #0
{
 80017d0:	b082      	sub	sp, #8
	volatile uint32_t dummy = 0;
 80017d2:	9301      	str	r3, [sp, #4]

	for (dummy = time2delay*500; dummy > 0 ; dummy--);
 80017d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d8:	4343      	muls	r3, r0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	b90b      	cbnz	r3, 80017e4 <lcd_delay_pool+0x16>
}
 80017e0:	b002      	add	sp, #8
 80017e2:	4770      	bx	lr
	for (dummy = time2delay*500; dummy > 0 ; dummy--);
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	e7f7      	b.n	80017da <lcd_delay_pool+0xc>
	...

080017ec <lcd_spi_send>:
	lcd_spi_send(txData);
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
}

uint8_t lcd_spi_send( uint8_t txByte )
{
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4604      	mov	r4, r0
	/* Loop while DR register in not emplty */
	while( SPI_I2S_GetFlagStatus( SPI1, SPI_I2S_FLAG_TXE ) == RESET );
 80017f0:	4d0b      	ldr	r5, [pc, #44]	; (8001820 <lcd_spi_send+0x34>)
 80017f2:	2102      	movs	r1, #2
 80017f4:	4628      	mov	r0, r5
 80017f6:	f7ff ff65 	bl	80016c4 <SPI_I2S_GetFlagStatus>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0f9      	beq.n	80017f2 <lcd_spi_send+0x6>
	/* Send byte through the SPI2 peripheral */
	SPI_I2S_SendData( SPI1, txByte );
 80017fe:	4621      	mov	r1, r4
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <lcd_spi_send+0x34>)
 8001802:	f7ff ff5a 	bl	80016ba <SPI_I2S_SendData>
	/* Wait to receive a byte */
	while( SPI_I2S_GetFlagStatus( SPI1, SPI_I2S_FLAG_RXNE ) == RESET );
 8001806:	4c06      	ldr	r4, [pc, #24]	; (8001820 <lcd_spi_send+0x34>)
 8001808:	2101      	movs	r1, #1
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ff5a 	bl	80016c4 <SPI_I2S_GetFlagStatus>
 8001810:	2800      	cmp	r0, #0
 8001812:	d0f9      	beq.n	8001808 <lcd_spi_send+0x1c>
	/* Return the byte read from the SPI bus */
	return SPI_I2S_ReceiveData( SPI1 );
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <lcd_spi_send+0x34>)
 8001816:	f7ff ff52 	bl	80016be <SPI_I2S_ReceiveData>
}
 800181a:	b2c0      	uxtb	r0, r0
 800181c:	bd38      	pop	{r3, r4, r5, pc}
 800181e:	bf00      	nop
 8001820:	40013000 	.word	0x40013000

08001824 <lcd_send_commnad>:
{
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4605      	mov	r5, r0
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_RESET);
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <lcd_send_commnad+0x30>)
 800182a:	2200      	movs	r2, #0
 800182c:	4620      	mov	r0, r4
 800182e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001832:	f7ff fdc3 	bl	80013bc <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2110      	movs	r1, #16
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff fdbe 	bl	80013bc <GPIO_WriteBit>
	lcd_spi_send(txCommand);
 8001840:	4628      	mov	r0, r5
 8001842:	f7ff ffd3 	bl	80017ec <lcd_spi_send>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8001846:	4620      	mov	r0, r4
}
 8001848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2110      	movs	r1, #16
 8001850:	f7ff bdb4 	b.w	80013bc <GPIO_WriteBit>
 8001854:	40010800 	.word	0x40010800

08001858 <lcd_send_data>:
{
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4605      	mov	r5, r0
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_SET);
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <lcd_send_data+0x30>)
 800185e:	2201      	movs	r2, #1
 8001860:	4620      	mov	r0, r4
 8001862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001866:	f7ff fda9 	bl	80013bc <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2110      	movs	r1, #16
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fda4 	bl	80013bc <GPIO_WriteBit>
	lcd_spi_send(txData);
 8001874:	4628      	mov	r0, r5
 8001876:	f7ff ffb9 	bl	80017ec <lcd_spi_send>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 800187a:	4620      	mov	r0, r4
}
 800187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2110      	movs	r1, #16
 8001884:	f7ff bd9a 	b.w	80013bc <GPIO_WriteBit>
 8001888:	40010800 	.word	0x40010800

0800188c <lcd_setAddrWindow>:
  GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
}


void lcd_setAddrWindow( uint8_t x,uint8_t y,uint8_t x1,uint8_t y1 )
{
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	4607      	mov	r7, r0
 8001890:	4616      	mov	r6, r2
 8001892:	460d      	mov	r5, r1
 8001894:	461c      	mov	r4, r3
	lcd_send_commnad(ST7735_CASET);
 8001896:	202a      	movs	r0, #42	; 0x2a
 8001898:	f7ff ffc4 	bl	8001824 <lcd_send_commnad>
	lcd_send_data(0x00);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ffdb 	bl	8001858 <lcd_send_data>
	lcd_send_data(x+0);
 80018a2:	4638      	mov	r0, r7
 80018a4:	f7ff ffd8 	bl	8001858 <lcd_send_data>
	lcd_send_data(0x00);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffd5 	bl	8001858 <lcd_send_data>
	lcd_send_data(x1+0);
 80018ae:	4630      	mov	r0, r6
 80018b0:	f7ff ffd2 	bl	8001858 <lcd_send_data>

	lcd_send_commnad(ST7735_RASET);
 80018b4:	202b      	movs	r0, #43	; 0x2b
 80018b6:	f7ff ffb5 	bl	8001824 <lcd_send_commnad>
	lcd_send_data(0x00);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff ffcc 	bl	8001858 <lcd_send_data>
	lcd_send_data(y+0);
 80018c0:	4628      	mov	r0, r5
 80018c2:	f7ff ffc9 	bl	8001858 <lcd_send_data>
	lcd_send_data(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ffc6 	bl	8001858 <lcd_send_data>
	lcd_send_data(y1+0);
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ffc3 	bl	8001858 <lcd_send_data>
	lcd_send_commnad(ST7735_RAMWR);
}
 80018d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lcd_send_commnad(ST7735_RAMWR);
 80018d6:	202c      	movs	r0, #44	; 0x2c
 80018d8:	f7ff bfa4 	b.w	8001824 <lcd_send_commnad>

080018dc <lcd_draw_fillrect>:
{
 80018dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
  lcd_setAddrWindow(x, y, x+w-1, y+h-1);
 80018e4:	3a01      	subs	r2, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	4402      	add	r2, r0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	b2d2      	uxtb	r2, r2
{
 80018f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  lcd_setAddrWindow(x, y, x+w-1, y+h-1);
 80018f4:	f7ff ffca 	bl	800188c <lcd_setAddrWindow>
  GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4812      	ldr	r0, [pc, #72]	; (8001948 <lcd_draw_fillrect+0x6c>)
 8001900:	f7ff fd5c 	bl	80013bc <GPIO_WriteBit>
  GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2110      	movs	r1, #16
 8001908:	480f      	ldr	r0, [pc, #60]	; (8001948 <lcd_draw_fillrect+0x6c>)
 800190a:	f7ff fd57 	bl	80013bc <GPIO_WriteBit>
  for (x=0; x < w; x++) {
 800190e:	f04f 0800 	mov.w	r8, #0
      lcd_spi_send(color>>8 );
 8001912:	ea4f 2916 	mov.w	r9, r6, lsr #8
      lcd_spi_send(color);
 8001916:	b2f6      	uxtb	r6, r6
  for (x=0; x < w; x++) {
 8001918:	45a0      	cmp	r8, r4
 800191a:	d00d      	beq.n	8001938 <lcd_draw_fillrect+0x5c>
 800191c:	2700      	movs	r7, #0
 800191e:	e006      	b.n	800192e <lcd_draw_fillrect+0x52>
      lcd_spi_send(color>>8 );
 8001920:	4648      	mov	r0, r9
 8001922:	f7ff ff63 	bl	80017ec <lcd_spi_send>
      lcd_spi_send(color);
 8001926:	4630      	mov	r0, r6
 8001928:	f7ff ff60 	bl	80017ec <lcd_spi_send>
    for (y=0; y < h; y++) {
 800192c:	3701      	adds	r7, #1
 800192e:	42af      	cmp	r7, r5
 8001930:	d1f6      	bne.n	8001920 <lcd_draw_fillrect+0x44>
  for (x=0; x < w; x++) {
 8001932:	f108 0801 	add.w	r8, r8, #1
 8001936:	e7ef      	b.n	8001918 <lcd_draw_fillrect+0x3c>
  GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8001938:	2201      	movs	r2, #1
}
 800193a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 800193e:	2110      	movs	r1, #16
 8001940:	4801      	ldr	r0, [pc, #4]	; (8001948 <lcd_draw_fillrect+0x6c>)
 8001942:	f7ff bd3b 	b.w	80013bc <GPIO_WriteBit>
 8001946:	bf00      	nop
 8001948:	40010800 	.word	0x40010800

0800194c <lcd_init>:
{
 800194c:	b570      	push	{r4, r5, r6, lr}
	if (lcd_initialized == 0)
 800194e:	4dca      	ldr	r5, [pc, #808]	; (8001c78 <lcd_init+0x32c>)
{
 8001950:	b088      	sub	sp, #32
	if (lcd_initialized == 0)
 8001952:	78ac      	ldrb	r4, [r5, #2]
 8001954:	2c00      	cmp	r4, #0
 8001956:	f040 818d 	bne.w	8001c74 <lcd_init+0x328>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB , ENABLE);
 800195a:	2101      	movs	r1, #1
 800195c:	200c      	movs	r0, #12
 800195e:	f7ff fe3d 	bl	80015dc <RCC_APB2PeriphClockCmd>
		GPIO_WriteBit(GPIOA, GPIO_Pin_0, Bit_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	48c5      	ldr	r0, [pc, #788]	; (8001c7c <lcd_init+0x330>)
 8001966:	4611      	mov	r1, r2
 8001968:	f7ff fd28 	bl	80013bc <GPIO_WriteBit>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA , ENABLE);
 800196c:	2101      	movs	r1, #1
 800196e:	2004      	movs	r0, #4
 8001970:	f7ff fe34 	bl	80015dc <RCC_APB2PeriphClockCmd>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8001974:	4bc2      	ldr	r3, [pc, #776]	; (8001c80 <lcd_init+0x334>)
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001976:	48c1      	ldr	r0, [pc, #772]	; (8001c7c <lcd_init+0x330>)
 8001978:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800197a:	9302      	str	r3, [sp, #8]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800197c:	f7ff fcc4 	bl	8001308 <GPIO_Init>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
 8001980:	4bc0      	ldr	r3, [pc, #768]	; (8001c84 <lcd_init+0x338>)
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001982:	48be      	ldr	r0, [pc, #760]	; (8001c7c <lcd_init+0x330>)
 8001984:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
 8001986:	9302      	str	r3, [sp, #8]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001988:	f7ff fcbe 	bl	8001308 <GPIO_Init>
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 800198c:	4bbe      	ldr	r3, [pc, #760]	; (8001c88 <lcd_init+0x33c>)
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800198e:	48bb      	ldr	r0, [pc, #748]	; (8001c7c <lcd_init+0x330>)
 8001990:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8001992:	9302      	str	r3, [sp, #8]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001994:	f7ff fcb8 	bl	8001308 <GPIO_Init>
		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8;
 8001998:	4bbc      	ldr	r3, [pc, #752]	; (8001c8c <lcd_init+0x340>)
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800199a:	48b8      	ldr	r0, [pc, #736]	; (8001c7c <lcd_init+0x330>)
		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 800199c:	4ebc      	ldr	r6, [pc, #752]	; (8001c90 <lcd_init+0x344>)
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 800199e:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8;
 80019a0:	9302      	str	r3, [sp, #8]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019a2:	f7ff fcb1 	bl	8001308 <GPIO_Init>
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019a6:	48b5      	ldr	r0, [pc, #724]	; (8001c7c <lcd_init+0x330>)
 80019a8:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 80019aa:	9602      	str	r6, [sp, #8]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 80019ac:	f7ff fcac 	bl	8001308 <GPIO_Init>
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);  /*ativar o SS*/
 80019b0:	2201      	movs	r2, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	48b1      	ldr	r0, [pc, #708]	; (8001c7c <lcd_init+0x330>)
 80019b6:	f7ff fd01 	bl	80013bc <GPIO_WriteBit>
		GPIO_PinRemapConfig ( GPIO_Remap_SWJ_NoJTRST, ENABLE ) ;
 80019ba:	2101      	movs	r1, #1
 80019bc:	48b5      	ldr	r0, [pc, #724]	; (8001c94 <lcd_init+0x348>)
 80019be:	f7ff fd03 	bl	80013c8 <GPIO_PinRemapConfig>
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019c2:	48b5      	ldr	r0, [pc, #724]	; (8001c98 <lcd_init+0x34c>)
 80019c4:	a902      	add	r1, sp, #8
		GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 80019c6:	9602      	str	r6, [sp, #8]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019c8:	f7ff fc9e 	bl	8001308 <GPIO_Init>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80019cc:	2101      	movs	r1, #1
 80019ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019d2:	f7ff fe03 	bl	80015dc <RCC_APB2PeriphClockCmd>
		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80019d6:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
 80019da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019de:	e9cd 2303 	strd	r2, r3, [sp, #12]
		SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 80019e2:	4bae      	ldr	r3, [pc, #696]	; (8001c9c <lcd_init+0x350>)
		SPI_Init(SPI1, &SPI_InitStructure);
 80019e4:	48ae      	ldr	r0, [pc, #696]	; (8001ca0 <lcd_init+0x354>)
 80019e6:	a903      	add	r1, sp, #12
		SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80019e8:	e9cd 3405 	strd	r3, r4, [sp, #20]
		SPI_Init(SPI1, &SPI_InitStructure);
 80019ec:	f7ff fe3a 	bl	8001664 <SPI_Init>
		SPI_Cmd(SPI1, ENABLE);
 80019f0:	2101      	movs	r1, #1
 80019f2:	48ab      	ldr	r0, [pc, #684]	; (8001ca0 <lcd_init+0x354>)
 80019f4:	f7ff fe55 	bl	80016a2 <SPI_Cmd>
		GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 80019f8:	4622      	mov	r2, r4
 80019fa:	2110      	movs	r1, #16
 80019fc:	489f      	ldr	r0, [pc, #636]	; (8001c7c <lcd_init+0x330>)
 80019fe:	f7ff fcdd 	bl	80013bc <GPIO_WriteBit>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2110      	movs	r1, #16
 8001a06:	48a4      	ldr	r0, [pc, #656]	; (8001c98 <lcd_init+0x34c>)
 8001a08:	f7ff fcd8 	bl	80013bc <GPIO_WriteBit>
		lcd_delay_pool(500);
 8001a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a10:	f7ff fedd 	bl	80017ce <lcd_delay_pool>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_RESET);
 8001a14:	4622      	mov	r2, r4
 8001a16:	2110      	movs	r1, #16
 8001a18:	489f      	ldr	r0, [pc, #636]	; (8001c98 <lcd_init+0x34c>)
 8001a1a:	f7ff fccf 	bl	80013bc <GPIO_WriteBit>
		lcd_delay_pool(500);
 8001a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a22:	f7ff fed4 	bl	80017ce <lcd_delay_pool>
		GPIO_WriteBit(GPIOB, GPIO_Pin_4, Bit_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2110      	movs	r1, #16
 8001a2a:	489b      	ldr	r0, [pc, #620]	; (8001c98 <lcd_init+0x34c>)
 8001a2c:	f7ff fcc6 	bl	80013bc <GPIO_WriteBit>
		lcd_delay_pool(500);
 8001a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a34:	f7ff fecb 	bl	80017ce <lcd_delay_pool>
		lcd_send_commnad(ST7735_SWRESET); // software reset
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fef3 	bl	8001824 <lcd_send_commnad>
		lcd_delay_pool(150);
 8001a3e:	2096      	movs	r0, #150	; 0x96
 8001a40:	f7ff fec5 	bl	80017ce <lcd_delay_pool>
		lcd_send_commnad(ST7735_SLPOUT);  // out of sleep mode
 8001a44:	2011      	movs	r0, #17
 8001a46:	f7ff feed 	bl	8001824 <lcd_send_commnad>
		lcd_delay_pool(500);
 8001a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4e:	f7ff febe 	bl	80017ce <lcd_delay_pool>
		lcd_send_commnad(ST7735_FRMCTR1);  // frame rate control - normal mode
 8001a52:	20b1      	movs	r0, #177	; 0xb1
 8001a54:	f7ff fee6 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x01);  // frame rate = fosc / (1 x 2 + 40) * (LINE + 2C + 2D)
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fefd 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2C);
 8001a5e:	202c      	movs	r0, #44	; 0x2c
 8001a60:	f7ff fefa 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2D);
 8001a64:	202d      	movs	r0, #45	; 0x2d
 8001a66:	f7ff fef7 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_FRMCTR2);  // frame rate control - idle mode
 8001a6a:	20b2      	movs	r0, #178	; 0xb2
 8001a6c:	f7ff feda 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x01);  // frame rate = fosc / (1 x 2 + 40) * (LINE + 2C + 2D)
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fef1 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2C);
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	f7ff feee 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2D);
 8001a7c:	202d      	movs	r0, #45	; 0x2d
 8001a7e:	f7ff feeb 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_FRMCTR3);  // frame rate control - partial mode
 8001a82:	20b3      	movs	r0, #179	; 0xb3
 8001a84:	f7ff fece 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x01); // dot inversion mode
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fee5 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2C);
 8001a8e:	202c      	movs	r0, #44	; 0x2c
 8001a90:	f7ff fee2 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2D);
 8001a94:	202d      	movs	r0, #45	; 0x2d
 8001a96:	f7ff fedf 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x01); // line inversion mode
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff fedc 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2C);
 8001aa0:	202c      	movs	r0, #44	; 0x2c
 8001aa2:	f7ff fed9 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2D);
 8001aa6:	202d      	movs	r0, #45	; 0x2d
 8001aa8:	f7ff fed6 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_INVCTR);  // display inversion control
 8001aac:	20b4      	movs	r0, #180	; 0xb4
 8001aae:	f7ff feb9 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x07);  // no inversion
 8001ab2:	2007      	movs	r0, #7
 8001ab4:	f7ff fed0 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_PWCTR1);  // power control
 8001ab8:	20c0      	movs	r0, #192	; 0xc0
 8001aba:	f7ff feb3 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0xA2);
 8001abe:	20a2      	movs	r0, #162	; 0xa2
 8001ac0:	f7ff feca 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x02);      // -4.6V
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7ff fec7 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x84);      // AUTO mode
 8001aca:	2084      	movs	r0, #132	; 0x84
 8001acc:	f7ff fec4 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_PWCTR2);  // power control
 8001ad0:	20c1      	movs	r0, #193	; 0xc1
 8001ad2:	f7ff fea7 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0xC5);      // VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8001ad6:	20c5      	movs	r0, #197	; 0xc5
 8001ad8:	f7ff febe 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_PWCTR3);  // power control
 8001adc:	20c2      	movs	r0, #194	; 0xc2
 8001ade:	f7ff fea1 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x0A);      // Opamp current small
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f7ff feb8 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);      // Boost frequency
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff feb5 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_PWCTR4);  // power control
 8001aee:	20c3      	movs	r0, #195	; 0xc3
 8001af0:	f7ff fe98 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x8A);      // BCLK/2, Opamp current small & Medium low
 8001af4:	208a      	movs	r0, #138	; 0x8a
 8001af6:	f7ff feaf 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2A);
 8001afa:	202a      	movs	r0, #42	; 0x2a
 8001afc:	f7ff feac 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_PWCTR5);  // power control
 8001b00:	20c4      	movs	r0, #196	; 0xc4
 8001b02:	f7ff fe8f 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x8A);
 8001b06:	208a      	movs	r0, #138	; 0x8a
 8001b08:	f7ff fea6 	bl	8001858 <lcd_send_data>
		lcd_send_data(0xEE);
 8001b0c:	20ee      	movs	r0, #238	; 0xee
 8001b0e:	f7ff fea3 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_VMCTR1);  // power control
 8001b12:	20c5      	movs	r0, #197	; 0xc5
 8001b14:	f7ff fe86 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x0E);
 8001b18:	200e      	movs	r0, #14
 8001b1a:	f7ff fe9d 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_INVOFF);    // don't invert display
 8001b1e:	2020      	movs	r0, #32
 8001b20:	f7ff fe80 	bl	8001824 <lcd_send_commnad>
		lcd_send_commnad(ST7735_MADCTL);  // memory access control (directions)
 8001b24:	2036      	movs	r0, #54	; 0x36
 8001b26:	f7ff fe7d 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0xC0);  // row address/col address, bottom to top refresh
 8001b2a:	20c0      	movs	r0, #192	; 0xc0
 8001b2c:	f7ff fe94 	bl	8001858 <lcd_send_data>
		madctl = 0xC0;
 8001b30:	22c0      	movs	r2, #192	; 0xc0
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <lcd_init+0x358>)
		lcd_send_commnad(ST7735_COLMOD);  // set color mode
 8001b34:	203a      	movs	r0, #58	; 0x3a
		madctl = 0xC0;
 8001b36:	701a      	strb	r2, [r3, #0]
		lcd_send_commnad(ST7735_COLMOD);  // set color mode
 8001b38:	f7ff fe74 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x05);        // 16-bit color
 8001b3c:	2005      	movs	r0, #5
 8001b3e:	f7ff fe8b 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_CASET);  // column addr set
 8001b42:	202a      	movs	r0, #42	; 0x2a
 8001b44:	f7ff fe6e 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x00);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fe85 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);   // XSTART = 0
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fe82 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fe7f 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x7F);   // XEND = 127
 8001b5a:	207f      	movs	r0, #127	; 0x7f
 8001b5c:	f7ff fe7c 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_RASET);  // row addr set
 8001b60:	202b      	movs	r0, #43	; 0x2b
 8001b62:	f7ff fe5f 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x00);
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fe76 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);    // XSTART = 0
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff fe73 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff fe70 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x9F);    // XEND = 159
 8001b78:	209f      	movs	r0, #159	; 0x9f
 8001b7a:	f7ff fe6d 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_GMCTRP1);
 8001b7e:	20e0      	movs	r0, #224	; 0xe0
 8001b80:	f7ff fe50 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x0f);
 8001b84:	200f      	movs	r0, #15
 8001b86:	f7ff fe67 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x1a);
 8001b8a:	201a      	movs	r0, #26
 8001b8c:	f7ff fe64 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x0f);
 8001b90:	200f      	movs	r0, #15
 8001b92:	f7ff fe61 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x18);
 8001b96:	2018      	movs	r0, #24
 8001b98:	f7ff fe5e 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2f);
 8001b9c:	202f      	movs	r0, #47	; 0x2f
 8001b9e:	f7ff fe5b 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x28);
 8001ba2:	2028      	movs	r0, #40	; 0x28
 8001ba4:	f7ff fe58 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x20);
 8001ba8:	2020      	movs	r0, #32
 8001baa:	f7ff fe55 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x22);
 8001bae:	2022      	movs	r0, #34	; 0x22
 8001bb0:	f7ff fe52 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x1f);
 8001bb4:	201f      	movs	r0, #31
 8001bb6:	f7ff fe4f 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x1b);
 8001bba:	201b      	movs	r0, #27
 8001bbc:	f7ff fe4c 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x23);
 8001bc0:	2023      	movs	r0, #35	; 0x23
 8001bc2:	f7ff fe49 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x37);
 8001bc6:	2037      	movs	r0, #55	; 0x37
 8001bc8:	f7ff fe46 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff fe43 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x07);
 8001bd2:	2007      	movs	r0, #7
 8001bd4:	f7ff fe40 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x02);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff fe3d 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x10);
 8001bde:	2010      	movs	r0, #16
 8001be0:	f7ff fe3a 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_GMCTRN1);
 8001be4:	20e1      	movs	r0, #225	; 0xe1
 8001be6:	f7ff fe1d 	bl	8001824 <lcd_send_commnad>
		lcd_send_data(0x0f);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f7ff fe34 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x1b);
 8001bf0:	201b      	movs	r0, #27
 8001bf2:	f7ff fe31 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x0f);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f7ff fe2e 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x17);
 8001bfc:	2017      	movs	r0, #23
 8001bfe:	f7ff fe2b 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x33);
 8001c02:	2033      	movs	r0, #51	; 0x33
 8001c04:	f7ff fe28 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2c);
 8001c08:	202c      	movs	r0, #44	; 0x2c
 8001c0a:	f7ff fe25 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x29);
 8001c0e:	2029      	movs	r0, #41	; 0x29
 8001c10:	f7ff fe22 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x2e);
 8001c14:	202e      	movs	r0, #46	; 0x2e
 8001c16:	f7ff fe1f 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x30);
 8001c1a:	2030      	movs	r0, #48	; 0x30
 8001c1c:	f7ff fe1c 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x30);
 8001c20:	2030      	movs	r0, #48	; 0x30
 8001c22:	f7ff fe19 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x39);
 8001c26:	2039      	movs	r0, #57	; 0x39
 8001c28:	f7ff fe16 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x3f);
 8001c2c:	203f      	movs	r0, #63	; 0x3f
 8001c2e:	f7ff fe13 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x00);
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff fe10 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x07);
 8001c38:	2007      	movs	r0, #7
 8001c3a:	f7ff fe0d 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x03);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f7ff fe0a 	bl	8001858 <lcd_send_data>
		lcd_send_data(0x10);
 8001c44:	2010      	movs	r0, #16
 8001c46:	f7ff fe07 	bl	8001858 <lcd_send_data>
		lcd_send_commnad(ST7735_DISPON);
 8001c4a:	2029      	movs	r0, #41	; 0x29
 8001c4c:	f7ff fdea 	bl	8001824 <lcd_send_commnad>
		lcd_delay_pool(100);
 8001c50:	2064      	movs	r0, #100	; 0x64
 8001c52:	f7ff fdbc 	bl	80017ce <lcd_delay_pool>
		lcd_send_commnad(ST7735_NORON);  // normal display on
 8001c56:	2013      	movs	r0, #19
 8001c58:	f7ff fde4 	bl	8001824 <lcd_send_commnad>
		lcd_delay_pool(10);
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f7ff fdb6 	bl	80017ce <lcd_delay_pool>
		lcd_draw_fillrect(0, 0 , LCD_WIDTH, LCD_HEIGHT, 0x0000) ;
 8001c62:	23a0      	movs	r3, #160	; 0xa0
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	4621      	mov	r1, r4
 8001c68:	4620      	mov	r0, r4
 8001c6a:	9400      	str	r4, [sp, #0]
 8001c6c:	f7ff fe36 	bl	80018dc <lcd_draw_fillrect>
		lcd_initialized=1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	70ab      	strb	r3, [r5, #2]
}
 8001c74:	b008      	add	sp, #32
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	200045bc 	.word	0x200045bc
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	10030001 	.word	0x10030001
 8001c84:	18030020 	.word	0x18030020
 8001c88:	18030080 	.word	0x18030080
 8001c8c:	10030100 	.word	0x10030100
 8001c90:	10030010 	.word	0x10030010
 8001c94:	00300100 	.word	0x00300100
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	02000001 	.word	0x02000001
 8001ca0:	40013000 	.word	0x40013000
 8001ca4:	200045d0 	.word	0x200045d0

08001ca8 <lcd_draw_pixelFromChar>:

void lcd_draw_pixelFromChar(uint8_t x, uint8_t y, uint16_t color)
{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4614      	mov	r4, r2
	//if ((x >= width) || (y >= height)) return;
	lcd_setAddrWindow(x,y,x+1,y+1);

	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_SET);
 8001cac:	4d0f      	ldr	r5, [pc, #60]	; (8001cec <lcd_draw_pixelFromChar+0x44>)
	lcd_setAddrWindow(x,y,x+1,y+1);
 8001cae:	1c4b      	adds	r3, r1, #1
 8001cb0:	1c42      	adds	r2, r0, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f7ff fde9 	bl	800188c <lcd_setAddrWindow>
	GPIO_WriteBit(GPIOA, GPIO_Pin_8, Bit_SET);
 8001cba:	4628      	mov	r0, r5
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	f7ff fb7b 	bl	80013bc <GPIO_WriteBit>
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff fb76 	bl	80013bc <GPIO_WriteBit>

	lcd_spi_send(color >> 8);
 8001cd0:	0a20      	lsrs	r0, r4, #8
 8001cd2:	f7ff fd8b 	bl	80017ec <lcd_spi_send>
	lcd_spi_send(color);
 8001cd6:	b2e0      	uxtb	r0, r4
 8001cd8:	f7ff fd88 	bl	80017ec <lcd_spi_send>

	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8001cdc:	4628      	mov	r0, r5

}
 8001cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	GPIO_WriteBit(GPIOA, GPIO_Pin_4, Bit_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	f7ff bb69 	b.w	80013bc <GPIO_WriteBit>
 8001cea:	bf00      	nop
 8001cec:	40010800 	.word	0x40010800

08001cf0 <lcd_draw_char>:

void lcd_draw_char(uint8_t x, uint8_t y, unsigned char c, uint16_t color, uint8_t size)
{
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0

	//lcd_setAddrWindow(x,y,x+10,y+16);

	 for(int8_t i=0; i<6; i++ ) {
	      uint8_t line;
	      if(i < 5) line = (uint8_t) font[(c*5)+i];
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	f04f 0800 	mov.w	r8, #0
{
 8001cfc:	4689      	mov	r9, r1
	      if(i < 5) line = (uint8_t) font[(c*5)+i];
 8001cfe:	4925      	ldr	r1, [pc, #148]	; (8001d94 <lcd_draw_char+0xa4>)
{
 8001d00:	b085      	sub	sp, #20
	      if(i < 5) line = (uint8_t) font[(c*5)+i];
 8001d02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
	      if(i < 5) line = (uint8_t) font[(c*5)+i];
 8001d0c:	188b      	adds	r3, r1, r2
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	f1b8 0f05 	cmp.w	r8, #5
	      else      line = 0x0;
 8001d14:	bf08      	it	eq
 8001d16:	f04f 0b00 	moveq.w	fp, #0
 8001d1a:	464f      	mov	r7, r9
 8001d1c:	f04f 0500 	mov.w	r5, #0
	      if(i < 5) line = (uint8_t) font[(c*5)+i];
 8001d20:	bf1c      	itt	ne
 8001d22:	9b03      	ldrne	r3, [sp, #12]
 8001d24:	f813 b008 	ldrbne.w	fp, [r3, r8]
	      for(int8_t j=0; j<8; j++, line >>= 1) {
	        if(line & 0x1) {
 8001d28:	f01b 0f01 	tst.w	fp, #1
 8001d2c:	d027      	beq.n	8001d7e <lcd_draw_char+0x8e>
	          if(size == 1) lcd_draw_pixelFromChar(x+i, y+j, color);
 8001d2e:	f1ba 0f01 	cmp.w	sl, #1
 8001d32:	d11b      	bne.n	8001d6c <lcd_draw_char+0x7c>
 8001d34:	9a02      	ldr	r2, [sp, #8]
 8001d36:	eb09 0105 	add.w	r1, r9, r5
	          else          lcd_draw_fillrect(x+i*size, y+j*size, size, size, color);
	        } else /*if(0x0000 != color)*/ {
	          if(size == 1) lcd_draw_pixelFromChar(x+i, y+j, background_color);
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	b2c9      	uxtb	r1, r1
 8001d3e:	f7ff ffb3 	bl	8001ca8 <lcd_draw_pixelFromChar>
	      for(int8_t j=0; j<8; j++, line >>= 1) {
 8001d42:	3501      	adds	r5, #1
 8001d44:	b2ea      	uxtb	r2, r5
 8001d46:	4457      	add	r7, sl
 8001d48:	2a08      	cmp	r2, #8
 8001d4a:	b26d      	sxtb	r5, r5
 8001d4c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001d50:	b2ff      	uxtb	r7, r7
 8001d52:	d1e9      	bne.n	8001d28 <lcd_draw_char+0x38>
	 for(int8_t i=0; i<6; i++ ) {
 8001d54:	f108 0801 	add.w	r8, r8, #1
 8001d58:	4454      	add	r4, sl
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	f1b8 0f06 	cmp.w	r8, #6
 8001d60:	b2e4      	uxtb	r4, r4
 8001d62:	b2f6      	uxtb	r6, r6
 8001d64:	d1d4      	bne.n	8001d10 <lcd_draw_char+0x20>
	          else          lcd_draw_fillrect(x+i*size, y+j*size, size, size, background_color);
	        }
	      }
	}
}
 8001d66:	b005      	add	sp, #20
 8001d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	          else          lcd_draw_fillrect(x+i*size, y+j*size, size, size, color);
 8001d6c:	9b02      	ldr	r3, [sp, #8]
 8001d6e:	9300      	str	r3, [sp, #0]
	          else          lcd_draw_fillrect(x+i*size, y+j*size, size, size, background_color);
 8001d70:	4653      	mov	r3, sl
 8001d72:	4652      	mov	r2, sl
 8001d74:	4639      	mov	r1, r7
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fdb0 	bl	80018dc <lcd_draw_fillrect>
 8001d7c:	e7e1      	b.n	8001d42 <lcd_draw_char+0x52>
	          if(size == 1) lcd_draw_pixelFromChar(x+i, y+j, background_color);
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <lcd_draw_char+0xa8>)
 8001d80:	f1ba 0f01 	cmp.w	sl, #1
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	d102      	bne.n	8001d8e <lcd_draw_char+0x9e>
 8001d88:	eb09 0105 	add.w	r1, r9, r5
 8001d8c:	e7d5      	b.n	8001d3a <lcd_draw_char+0x4a>
	          else          lcd_draw_fillrect(x+i*size, y+j*size, size, size, background_color);
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	e7ee      	b.n	8001d70 <lcd_draw_char+0x80>
 8001d92:	bf00      	nop
 8001d94:	08002bc0 	.word	0x08002bc0
 8001d98:	200045bc 	.word	0x200045bc

08001d9c <lcd_draw_string>:
{
 8001d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
 8001da4:	4698      	mov	r8, r3
 8001da6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 8001daa:	1e57      	subs	r7, r2, #1
		x += size*6;
 8001dac:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 8001db0:	0076      	lsls	r6, r6, #1
 8001db2:	b2f6      	uxtb	r6, r6
	while (c[0] != 0)
 8001db4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8001db8:	b912      	cbnz	r2, 8001dc0 <lcd_draw_string+0x24>
}
 8001dba:	b003      	add	sp, #12
 8001dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lcd_draw_char(x, y, c[0], color, size);
 8001dc0:	4620      	mov	r0, r4
		x += size*6;
 8001dc2:	4434      	add	r4, r6
		lcd_draw_char(x, y, c[0], color, size);
 8001dc4:	4629      	mov	r1, r5
		x += size*6;
 8001dc6:	b2e4      	uxtb	r4, r4
		lcd_draw_char(x, y, c[0], color, size);
 8001dc8:	4643      	mov	r3, r8
 8001dca:	f8cd 9000 	str.w	r9, [sp]
 8001dce:	f7ff ff8f 	bl	8001cf0 <lcd_draw_char>
		if (x + 5 >= width)
 8001dd2:	2c7a      	cmp	r4, #122	; 0x7a
			y += 10;
 8001dd4:	bf82      	ittt	hi
 8001dd6:	350a      	addhi	r5, #10
			x = 0;
 8001dd8:	2400      	movhi	r4, #0
			y += 10;
 8001dda:	b2ed      	uxtbhi	r5, r5
			x = 0;
 8001ddc:	e7ea      	b.n	8001db4 <lcd_draw_string+0x18>
	...

08001de0 <prvLibertar>:


}

static void prvLibertar(void *pvParameters)
{
 8001de0:	b507      	push	{r0, r1, r2, lr}
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
 8001de2:	f7fe ff05 	bl	8000bf0 <xTaskGetTickCount>

		vTaskDelayUntil( &xLastExecutionTime, mainUSART_DELAY );
		if (flag_libertar==1)
		{

			xSemaphoreGive( xSemaphoreCount);
 8001de6:	2500      	movs	r5, #0
		if (flag_libertar==1)
 8001de8:	4c09      	ldr	r4, [pc, #36]	; (8001e10 <prvLibertar+0x30>)
			xSemaphoreGive( xSemaphoreCount);
 8001dea:	4e0a      	ldr	r6, [pc, #40]	; (8001e14 <prvLibertar+0x34>)
	xLastExecutionTime = xTaskGetTickCount();
 8001dec:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil( &xLastExecutionTime, mainUSART_DELAY );
 8001dee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001df2:	a801      	add	r0, sp, #4
 8001df4:	f7ff f818 	bl	8000e28 <xTaskDelayUntil>
		if (flag_libertar==1)
 8001df8:	7823      	ldrb	r3, [r4, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d1f7      	bne.n	8001dee <prvLibertar+0xe>
			xSemaphoreGive( xSemaphoreCount);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	6830      	ldr	r0, [r6, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fc05 	bl	8000614 <xQueueGenericSend>
			flag_libertar = 0;
 8001e0a:	7025      	strb	r5, [r4, #0]
 8001e0c:	e7ef      	b.n	8001dee <prvLibertar+0xe>
 8001e0e:	bf00      	nop
 8001e10:	200045e0 	.word	0x200045e0
 8001e14:	200045fc 	.word	0x200045fc

08001e18 <prvCountDisplay>:

	}
}

static void prvCountDisplay(void *pvParameters)
{
 8001e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1c:	b08c      	sub	sp, #48	; 0x30

	char buffer_count[32];
	TickType_t xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
 8001e1e:	f7fe fee7 	bl	8000bf0 <xTaskGetTickCount>
	BaseType_t uxTime;

	for(;;)
	{
		vTaskDelayUntil(&xLastExecutionTime, (TickType_t) 100/portTICK_RATE_MS );
		uxTime = uxSemaphoreGetCount( xSemaphoreCount);
 8001e22:	4e1f      	ldr	r6, [pc, #124]	; (8001ea0 <prvCountDisplay+0x88>)
		sprintf(buffer_count,"Count: %lu",uxTime);
 8001e24:	4f1f      	ldr	r7, [pc, #124]	; (8001ea4 <prvCountDisplay+0x8c>)
		lcd_draw_string(40,78,buffer_count,green,1);
		if(uxTime == 10)
		{
			xSemaphoreTake( xSemaphore1, ( TickType_t)  portMAX_DELAY );
			GPIO_ResetBits(GPIOB, GPIO_Pin_6);
 8001e26:	4d20      	ldr	r5, [pc, #128]	; (8001ea8 <prvCountDisplay+0x90>)
	xLastExecutionTime = xTaskGetTickCount();
 8001e28:	9003      	str	r0, [sp, #12]
		lcd_draw_string(40,78,buffer_count,green,1);
 8001e2a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001eb0 <prvCountDisplay+0x98>
		vTaskDelayUntil(&xLastExecutionTime, (TickType_t) 100/portTICK_RATE_MS );
 8001e2e:	2164      	movs	r1, #100	; 0x64
 8001e30:	a803      	add	r0, sp, #12
 8001e32:	f7fe fff9 	bl	8000e28 <xTaskDelayUntil>
		uxTime = uxSemaphoreGetCount( xSemaphoreCount);
 8001e36:	6830      	ldr	r0, [r6, #0]
 8001e38:	f7fe fd4c 	bl	80008d4 <uxQueueMessagesWaiting>
		sprintf(buffer_count,"Count: %lu",uxTime);
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	4602      	mov	r2, r0
		uxTime = uxSemaphoreGetCount( xSemaphoreCount);
 8001e40:	4604      	mov	r4, r0
		sprintf(buffer_count,"Count: %lu",uxTime);
 8001e42:	a804      	add	r0, sp, #16
 8001e44:	f000 fa84 	bl	8002350 <siprintf>
		lcd_draw_string(40,78,buffer_count,green,1);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	214e      	movs	r1, #78	; 0x4e
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2028      	movs	r0, #40	; 0x28
 8001e50:	f8b8 3000 	ldrh.w	r3, [r8]
 8001e54:	aa04      	add	r2, sp, #16
 8001e56:	f7ff ffa1 	bl	8001d9c <lcd_draw_string>
		if(uxTime == 10)
 8001e5a:	2c0a      	cmp	r4, #10
 8001e5c:	d1e7      	bne.n	8001e2e <prvCountDisplay+0x16>
			xSemaphoreTake( xSemaphore1, ( TickType_t)  portMAX_DELAY );
 8001e5e:	4c13      	ldr	r4, [pc, #76]	; (8001eac <prvCountDisplay+0x94>)
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	f7fe fca1 	bl	80007ac <xQueueSemaphoreTake>
			GPIO_ResetBits(GPIOB, GPIO_Pin_6);
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	f7ff faa3 	bl	80013b8 <GPIO_ResetBits>
			GPIO_SetBits(GPIOB, GPIO_Pin_7);
 8001e72:	4628      	mov	r0, r5
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	f7ff fa9d 	bl	80013b4 <GPIO_SetBits>
			xSemaphoreGive( xSemaphore1 );
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fbc7 	bl	8000614 <xQueueGenericSend>
			vTaskDelayUntil(&xLastExecutionTime, (TickType_t) 100/portTICK_RATE_MS );
 8001e86:	2164      	movs	r1, #100	; 0x64
 8001e88:	a803      	add	r0, sp, #12
 8001e8a:	f7fe ffcd 	bl	8000e28 <xTaskDelayUntil>
			lcd_draw_fillrect(0, 0 , LCD_WIDTH, LCD_HEIGHT, 0x0000);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	23a0      	movs	r3, #160	; 0xa0
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	4608      	mov	r0, r1
 8001e96:	9100      	str	r1, [sp, #0]
 8001e98:	f7ff fd20 	bl	80018dc <lcd_draw_fillrect>
 8001e9c:	e7c5      	b.n	8001e2a <prvCountDisplay+0x12>
 8001e9e:	bf00      	nop
 8001ea0:	200045fc 	.word	0x200045fc
 8001ea4:	080030d1 	.word	0x080030d1
 8001ea8:	40010c00 	.word	0x40010c00
 8001eac:	200045e4 	.word	0x200045e4
 8001eb0:	20000020 	.word	0x20000020

08001eb4 <prvCountBot>:
{
 8001eb4:	b507      	push	{r0, r1, r2, lr}
	xLastExecutionTime = xTaskGetTickCount();
 8001eb6:	f7fe fe9b 	bl	8000bf0 <xTaskGetTickCount>
		xSemaphoreTake( xSemaphoreCount, ( TickType_t ) portMAX_DELAY);
 8001eba:	4e13      	ldr	r6, [pc, #76]	; (8001f08 <prvCountBot+0x54>)
		GPIO_ResetBits(GPIOB, GPIO_Pin_7);
 8001ebc:	4d13      	ldr	r5, [pc, #76]	; (8001f0c <prvCountBot+0x58>)
	xLastExecutionTime = xTaskGetTickCount();
 8001ebe:	9001      	str	r0, [sp, #4]
		xSemaphoreTake( xSemaphore1, ( TickType_t)  portMAX_DELAY );
 8001ec0:	4c13      	ldr	r4, [pc, #76]	; (8001f10 <prvCountBot+0x5c>)
		vTaskDelayUntil( &xLastExecutionTime, mainUSART_DELAY );
 8001ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec6:	a801      	add	r0, sp, #4
 8001ec8:	f7fe ffae 	bl	8000e28 <xTaskDelayUntil>
		xSemaphoreTake( xSemaphoreCount, ( TickType_t ) portMAX_DELAY);
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	6830      	ldr	r0, [r6, #0]
 8001ed2:	f7fe fc6b 	bl	80007ac <xQueueSemaphoreTake>
		xSemaphoreTake( xSemaphore1, ( TickType_t)  portMAX_DELAY );
 8001ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	f7fe fc66 	bl	80007ac <xQueueSemaphoreTake>
		GPIO_ResetBits(GPIOB, GPIO_Pin_7);
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	f7ff fa68 	bl	80013b8 <GPIO_ResetBits>
		GPIO_SetBits(GPIOB, GPIO_Pin_6);
 8001ee8:	4628      	mov	r0, r5
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	f7ff fa62 	bl	80013b4 <GPIO_SetBits>
		xSemaphoreGive( xSemaphore1 );
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fb8c 	bl	8000614 <xQueueGenericSend>
		vTaskDelay( ( TickType_t ) 10000 / portTICK_PERIOD_MS  );
 8001efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f00:	f7fe ffbe 	bl	8000e80 <vTaskDelay>
	for(;;)
 8001f04:	e7dc      	b.n	8001ec0 <prvCountBot+0xc>
 8001f06:	bf00      	nop
 8001f08:	200045fc 	.word	0x200045fc
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	200045e4 	.word	0x200045e4

08001f14 <pvrLED>:
{
 8001f14:	b507      	push	{r0, r1, r2, lr}
	xLastExecutionTime = xTaskGetTickCount();
 8001f16:	f7fe fe6b 	bl	8000bf0 <xTaskGetTickCount>
		xSemaphoreTake( xSemaphore2, ( TickType_t ) portMAX_DELAY);
 8001f1a:	4d0c      	ldr	r5, [pc, #48]	; (8001f4c <pvrLED+0x38>)
		GPIO_WriteBit(GPIOB, GPIO_Pin_0, (1-GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0)));
 8001f1c:	4c0c      	ldr	r4, [pc, #48]	; (8001f50 <pvrLED+0x3c>)
	xLastExecutionTime = xTaskGetTickCount();
 8001f1e:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil( &xLastExecutionTime, mainUSART_DELAY );
 8001f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f24:	a801      	add	r0, sp, #4
 8001f26:	f7fe ff7f 	bl	8000e28 <xTaskDelayUntil>
		xSemaphoreTake( xSemaphore2, ( TickType_t ) portMAX_DELAY);
 8001f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2e:	6828      	ldr	r0, [r5, #0]
 8001f30:	f7fe fc3c 	bl	80007ac <xQueueSemaphoreTake>
		GPIO_WriteBit(GPIOB, GPIO_Pin_0, (1-GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0)));
 8001f34:	2101      	movs	r1, #1
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff fa36 	bl	80013a8 <GPIO_ReadOutputDataBit>
 8001f3c:	f1c0 0201 	rsb	r2, r0, #1
 8001f40:	2101      	movs	r1, #1
 8001f42:	4620      	mov	r0, r4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f7ff fa39 	bl	80013bc <GPIO_WriteBit>
	for(;;)
 8001f4a:	e7e9      	b.n	8001f20 <pvrLED+0xc>
 8001f4c:	200045ec 	.word	0x200045ec
 8001f50:	40010c00 	.word	0x40010c00

08001f54 <main>:
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	b088      	sub	sp, #32
	lcd_init();
 8001f58:	f7ff fcf8 	bl	800194c <lcd_init>
static void prvSetupRCC( void )
{
    /* RCC configuration - 72 MHz */
    ErrorStatus HSEStartUpStatus;

    RCC_DeInit();
 8001f5c:	f7ff fa7a 	bl	8001454 <RCC_DeInit>
    /*Enable the HSE*/
    RCC_HSEConfig(RCC_HSE_ON);
 8001f60:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f64:	f7ff fa96 	bl	8001494 <RCC_HSEConfig>
    /* Wait untill HSE is ready or time out */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8001f68:	f7ff fb64 	bl	8001634 <RCC_WaitForHSEStartUp>
    if(HSEStartUpStatus == SUCCESS)
 8001f6c:	2801      	cmp	r0, #1
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8001f6e:	4604      	mov	r4, r0
    if(HSEStartUpStatus == SUCCESS)
 8001f70:	f040 80d2 	bne.w	8002118 <main+0x1c4>
    {
        /* Enable The Prefetch Buffer */
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8001f74:	2010      	movs	r0, #16
 8001f76:	f7ff f9bb 	bl	80012f0 <FLASH_PrefetchBufferCmd>
        /* 72 MHZ - 2 wait states */
        FLASH_SetLatency(FLASH_Latency_2);
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f7ff f9ae 	bl	80012dc <FLASH_SetLatency>

        /* No division HCLK = SYSCLK */
        RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fac5 	bl	8001510 <RCC_HCLKConfig>
        /* PCLK1 = HCLK/2 (36MHz) */
        RCC_PCLK1Config(RCC_HCLK_Div2);
 8001f86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f8a:	f7ff facb 	bl	8001524 <RCC_PCLK1Config>
        /* PCLK2 = HCLK (72MHz)*/
        RCC_PCLK2Config(RCC_HCLK_Div1);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fad2 	bl	8001538 <RCC_PCLK2Config>

        /* Use PLL with HSE=12MHz */
        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6);
 8001f94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f98:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001f9c:	f7ff fa96 	bl	80014cc <RCC_PLLConfig>
        /* Enable the PLL */
        RCC_PLLCmd(ENABLE);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff fa9d 	bl	80014e0 <RCC_PLLCmd>
        /* Wait for PLL ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET );
 8001fa6:	2039      	movs	r0, #57	; 0x39
 8001fa8:	f7ff fb30 	bl	800160c <RCC_GetFlagStatus>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d0fa      	beq.n	8001fa6 <main+0x52>

        /* Select the PLL as system clock source */
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7ff fa9b 	bl	80014ec <RCC_SYSCLKConfig>
        /* Wait until PLL is used as system clock */
        while( RCC_GetSYSCLKSource() != 0x08 );
 8001fb6:	f7ff faa3 	bl	8001500 <RCC_GetSYSCLKSource>
 8001fba:	2808      	cmp	r0, #8
 8001fbc:	d1fb      	bne.n	8001fb6 <main+0x62>
{
    /* GPIO configuration - GREEN LED*/
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIOB clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB , ENABLE );
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	f7ff fb0c 	bl	80015dc <RCC_APB2PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8001fc4:	4b55      	ldr	r3, [pc, #340]	; (800211c <main+0x1c8>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fc6:	a902      	add	r1, sp, #8
 8001fc8:	4855      	ldr	r0, [pc, #340]	; (8002120 <main+0x1cc>)
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8001fca:	9302      	str	r3, [sp, #8]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fcc:	f7ff f99c 	bl	8001308 <GPIO_Init>

    // Configuração para o GPIOB Pin 6
	GPIO_InitTypeDef GPIOB1_InitStructure;
	GPIOB1_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001fd0:	4b54      	ldr	r3, [pc, #336]	; (8002124 <main+0x1d0>)
	GPIOB1_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIOB1_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIOB1_InitStructure);
 8001fd2:	a903      	add	r1, sp, #12
 8001fd4:	4852      	ldr	r0, [pc, #328]	; (8002120 <main+0x1cc>)
	GPIOB1_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001fd6:	9303      	str	r3, [sp, #12]
	GPIO_Init(GPIOB, &GPIOB1_InitStructure);
 8001fd8:	f7ff f996 	bl	8001308 <GPIO_Init>

	// Configuração para o GPIOB Pin 7
	GPIO_InitTypeDef GPIOB2_InitStructure;
	GPIOB2_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <main+0x1d4>)
	GPIOB2_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIOB2_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIOB2_InitStructure);
 8001fde:	a904      	add	r1, sp, #16
 8001fe0:	484f      	ldr	r0, [pc, #316]	; (8002120 <main+0x1cc>)
	GPIOB2_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8001fe2:	9304      	str	r3, [sp, #16]
	GPIO_Init(GPIOB, &GPIOB2_InitStructure);
 8001fe4:	f7ff f990 	bl	8001308 <GPIO_Init>


    /* Enable GPIOB clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2004      	movs	r0, #4
 8001fec:	f7ff faf6 	bl	80015dc <RCC_APB2PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	; (800212c <main+0x1d8>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ff2:	a902      	add	r1, sp, #8
 8001ff4:	484e      	ldr	r0, [pc, #312]	; (8002130 <main+0x1dc>)
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
 8001ff6:	9302      	str	r3, [sp, #8]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ff8:	f7ff f986 	bl	8001308 <GPIO_Init>
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled */

    /* Enable GPIOA clock */
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA , ENABLE );
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	2004      	movs	r0, #4
 8002000:	f7ff faec 	bl	80015dc <RCC_APB2PeriphClockCmd>

    /* USART Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002004:	2101      	movs	r1, #1
 8002006:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800200a:	f7ff faf3 	bl	80015f4 <RCC_APB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <main+0x1e0>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002010:	a903      	add	r1, sp, #12
 8002012:	4847      	ldr	r0, [pc, #284]	; (8002130 <main+0x1dc>)
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
 8002014:	9303      	str	r3, [sp, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002016:	f7ff f977 	bl	8001308 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <main+0x1e4>)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800201c:	a903      	add	r1, sp, #12
 800201e:	4844      	ldr	r0, [pc, #272]	; (8002130 <main+0x1dc>)



    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002020:	2400      	movs	r4, #0
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_3;
 8002022:	9303      	str	r3, [sp, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002024:	f7ff f970 	bl	8001308 <GPIO_Init>
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002028:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800202c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8002030:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;

    /* Configure the USART2 */
    USART_Init(USART2, &USART_InitStructure);
 8002034:	a904      	add	r1, sp, #16
 8002036:	4841      	ldr	r0, [pc, #260]	; (800213c <main+0x1e8>)
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8002038:	9306      	str	r3, [sp, #24]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800203a:	f8ad 401c 	strh.w	r4, [sp, #28]
    USART_Init(USART2, &USART_InitStructure);
 800203e:	f7ff fb47 	bl	80016d0 <USART_Init>
    /* Enable the USART2 */
    USART_Cmd(USART2, ENABLE);
 8002042:	2101      	movs	r1, #1
 8002044:	483d      	ldr	r0, [pc, #244]	; (800213c <main+0x1e8>)
 8002046:	f7ff fb97 	bl	8001778 <USART_Cmd>
    flag_libertar = 0;
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <main+0x1ec>)
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800204c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    flag_libertar = 0;
 8002050:	701c      	strb	r4, [r3, #0]
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8002052:	f7ff f8d1 	bl	80011f8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <main+0x1f0>)
	NVIC_Init(&NVIC_InitStructure);
 8002058:	a803      	add	r0, sp, #12
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 800205a:	9303      	str	r3, [sp, #12]
	NVIC_Init(&NVIC_InitStructure);
 800205c:	f7ff f8d6 	bl	800120c <NVIC_Init>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1);
 8002060:	2101      	movs	r1, #1
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff f9e0 	bl	8001428 <GPIO_EXTILineConfig>
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002068:	2501      	movs	r5, #1
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800206a:	f44f 6300 	mov.w	r3, #2048	; 0x800
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 800206e:	2602      	movs	r6, #2
	EXTI_Init(&EXTI_InitStructure);
 8002070:	a804      	add	r0, sp, #16
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002072:	f8ad 3014 	strh.w	r3, [sp, #20]
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8002076:	9604      	str	r6, [sp, #16]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002078:	f88d 5016 	strb.w	r5, [sp, #22]
	EXTI_Init(&EXTI_InitStructure);
 800207c:	f7ff f8f2 	bl	8001264 <EXTI_Init>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8002080:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002084:	f7ff f8b8 	bl	80011f8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <main+0x1f4>)
	NVIC_Init(&NVIC_InitStructure);
 800208a:	a804      	add	r0, sp, #16
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 800208c:	9304      	str	r3, [sp, #16]
	NVIC_Init(&NVIC_InitStructure);
 800208e:	f7ff f8bd 	bl	800120c <NVIC_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002092:	462a      	mov	r2, r5
 8002094:	f240 5125 	movw	r1, #1317	; 0x525
 8002098:	4828      	ldr	r0, [pc, #160]	; (800213c <main+0x1e8>)
 800209a:	f7ff fb79 	bl	8001790 <USART_ITConfig>
    xSemaphore1 = xSemaphoreCreateMutex();
 800209e:	4628      	mov	r0, r5
 80020a0:	f7fe fb3a 	bl	8000718 <xQueueCreateMutex>
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <main+0x1f8>)
    xSemaphore2 = xSemaphoreCreateBinary();
 80020a6:	2203      	movs	r2, #3
 80020a8:	4621      	mov	r1, r4
    xSemaphore1 = xSemaphoreCreateMutex();
 80020aa:	6018      	str	r0, [r3, #0]
    xSemaphore2 = xSemaphoreCreateBinary();
 80020ac:	4628      	mov	r0, r5
 80020ae:	f7fe fa7d 	bl	80005ac <xQueueGenericCreate>
 80020b2:	4b27      	ldr	r3, [pc, #156]	; (8002150 <main+0x1fc>)
    xSemaphoreCount = xSemaphoreCreateCounting( uxMaxCount,  uxInitialCount );
 80020b4:	4621      	mov	r1, r4
    xSemaphore2 = xSemaphoreCreateBinary();
 80020b6:	6018      	str	r0, [r3, #0]
    xSemaphoreCount = xSemaphoreCreateCounting( uxMaxCount,  uxInitialCount );
 80020b8:	200a      	movs	r0, #10
 80020ba:	f7fe fa9c 	bl	80005f6 <xQueueCreateCountingSemaphore>
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <main+0x200>)
	xTaskCreate(pvrLED,"Led",configMINIMAL_STACK_SIZE, NULL,TASK_PRIORITY_alin2b, &HandleTask5);
 80020c0:	2280      	movs	r2, #128	; 0x80
    xSemaphoreCount = xSemaphoreCreateCounting( uxMaxCount,  uxInitialCount );
 80020c2:	6018      	str	r0, [r3, #0]
	xTaskCreate(pvrLED,"Led",configMINIMAL_STACK_SIZE, NULL,TASK_PRIORITY_alin2b, &HandleTask5);
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <main+0x204>)
 80020c6:	4925      	ldr	r1, [pc, #148]	; (800215c <main+0x208>)
 80020c8:	e9cd 6300 	strd	r6, r3, [sp]
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <main+0x20c>)
 80020ce:	4623      	mov	r3, r4
 80020d0:	f7fe fc84 	bl	80009dc <xTaskCreate>
    xTaskCreate(prvCountBot, "CountBot",configMINIMAL_STACK_SIZE, NULL,TASK_PRIORITY_alin2a+2, &HandleTask6);
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <main+0x210>)
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2304      	movs	r3, #4
 80020dc:	4922      	ldr	r1, [pc, #136]	; (8002168 <main+0x214>)
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4822      	ldr	r0, [pc, #136]	; (800216c <main+0x218>)
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7fe fc7a 	bl	80009dc <xTaskCreate>
    xTaskCreate(prvLibertar,"Libertar",configMINIMAL_STACK_SIZE, NULL,TASK_PRIORITY_alin2a+1, &HandleTask7);
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <main+0x21c>)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2303      	movs	r3, #3
 80020f0:	4920      	ldr	r1, [pc, #128]	; (8002174 <main+0x220>)
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	4820      	ldr	r0, [pc, #128]	; (8002178 <main+0x224>)
 80020f6:	4623      	mov	r3, r4
 80020f8:	f7fe fc70 	bl	80009dc <xTaskCreate>
    xTaskCreate(prvCountDisplay, "display",configMINIMAL_STACK_SIZE, NULL, mainLCD_TASK_PRIORITY, &HandleTask8);
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <main+0x228>)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	e9cd 5300 	strd	r5, r3, [sp]
 8002104:	491e      	ldr	r1, [pc, #120]	; (8002180 <main+0x22c>)
 8002106:	4623      	mov	r3, r4
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <main+0x230>)
 800210a:	f7fe fc67 	bl	80009dc <xTaskCreate>
	vTaskStartScheduler();
 800210e:	f7fe fd39 	bl	8000b84 <vTaskStartScheduler>
}
 8002112:	4620      	mov	r0, r4
 8002114:	b008      	add	sp, #32
 8002116:	bd70      	pop	{r4, r5, r6, pc}
        while(1);
 8002118:	e7fe      	b.n	8002118 <main+0x1c4>
 800211a:	bf00      	nop
 800211c:	10030001 	.word	0x10030001
 8002120:	40010c00 	.word	0x40010c00
 8002124:	10030040 	.word	0x10030040
 8002128:	10030080 	.word	0x10030080
 800212c:	48030002 	.word	0x48030002
 8002130:	40010800 	.word	0x40010800
 8002134:	18030004 	.word	0x18030004
 8002138:	04030008 	.word	0x04030008
 800213c:	40004400 	.word	0x40004400
 8002140:	200045e0 	.word	0x200045e0
 8002144:	01020007 	.word	0x01020007
 8002148:	01020026 	.word	0x01020026
 800214c:	200045e4 	.word	0x200045e4
 8002150:	200045ec 	.word	0x200045ec
 8002154:	200045fc 	.word	0x200045fc
 8002158:	200045f4 	.word	0x200045f4
 800215c:	080030dc 	.word	0x080030dc
 8002160:	08001f15 	.word	0x08001f15
 8002164:	200045f0 	.word	0x200045f0
 8002168:	080030e0 	.word	0x080030e0
 800216c:	08001eb5 	.word	0x08001eb5
 8002170:	200045dc 	.word	0x200045dc
 8002174:	080030e9 	.word	0x080030e9
 8002178:	08001de1 	.word	0x08001de1
 800217c:	200045e8 	.word	0x200045e8
 8002180:	080030f2 	.word	0x080030f2
 8002184:	08001e19 	.word	0x08001e19

08002188 <WWDG_IRQHandler>:
 8002188:	4770      	bx	lr

0800218a <PVD_IRQHandler>:
 800218a:	4770      	bx	lr

0800218c <TAMPER_IRQHandler>:
 800218c:	4770      	bx	lr

0800218e <RTC_IRQHandler>:
 800218e:	4770      	bx	lr

08002190 <FLASH_IRQHandler>:
 8002190:	4770      	bx	lr

08002192 <RCC_IRQHandler>:
 8002192:	4770      	bx	lr

08002194 <EXTI0_IRQHandler>:
 8002194:	4770      	bx	lr
	...

08002198 <EXTI1_IRQHandler>:
*******************************************************************************/



void EXTI1_IRQHandler(void)
{
 8002198:	b507      	push	{r0, r1, r2, lr}

    BaseType_t pxHigherPriorityTaskWoken;

	xSemaphoreGiveFromISR(xSemaphore2, &pxHigherPriorityTaskWoken);
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <EXTI1_IRQHandler+0x34>)
 800219c:	a901      	add	r1, sp, #4
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	f7fe fad5 	bl	800074e <xQueueGiveFromISR>

	flag_libertar=1;
 80021a4:	2201      	movs	r2, #1
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <EXTI1_IRQHandler+0x38>)
 80021a8:	701a      	strb	r2, [r3, #0]

	if( pxHigherPriorityTaskWoken == pdTRUE )
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d107      	bne.n	80021c0 <EXTI1_IRQHandler+0x28>
	{

		taskYIELD();
 80021b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <EXTI1_IRQHandler+0x3c>)
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	f3bf 8f6f 	isb	sy
	}
		/* forces the context change */
	EXTI_ClearITPendingBit ( EXTI_Line1 );
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7ff f885 	bl	80012d0 <EXTI_ClearITPendingBit>
}
 80021c6:	b003      	add	sp, #12
 80021c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021cc:	200045ec 	.word	0x200045ec
 80021d0:	200045e0 	.word	0x200045e0
 80021d4:	e000ed04 	.word	0xe000ed04

080021d8 <EXTI2_IRQHandler>:
 80021d8:	4770      	bx	lr

080021da <EXTI3_IRQHandler>:
 80021da:	4770      	bx	lr

080021dc <EXTI4_IRQHandler>:
 80021dc:	4770      	bx	lr

080021de <DMA1_Channel1_IRQHandler>:
 80021de:	4770      	bx	lr

080021e0 <DMA1_Channel2_IRQHandler>:
 80021e0:	4770      	bx	lr

080021e2 <DMA1_Channel3_IRQHandler>:
 80021e2:	4770      	bx	lr

080021e4 <DMA1_Channel4_IRQHandler>:
 80021e4:	4770      	bx	lr

080021e6 <DMA1_Channel5_IRQHandler>:
 80021e6:	4770      	bx	lr

080021e8 <DMA1_Channel6_IRQHandler>:
 80021e8:	4770      	bx	lr

080021ea <DMA1_Channel7_IRQHandler>:
 80021ea:	4770      	bx	lr

080021ec <ADC1_2_IRQHandler>:
 80021ec:	4770      	bx	lr

080021ee <EXTI9_5_IRQHandler>:
 80021ee:	4770      	bx	lr

080021f0 <TIM1_BRK_IRQHandler>:
 80021f0:	4770      	bx	lr

080021f2 <TIM1_UP_IRQHandler>:
 80021f2:	4770      	bx	lr

080021f4 <TIM1_TRG_COM_IRQHandler>:
 80021f4:	4770      	bx	lr

080021f6 <TIM1_CC_IRQHandler>:
 80021f6:	4770      	bx	lr

080021f8 <TIM2_IRQHandler>:
 80021f8:	4770      	bx	lr

080021fa <TIM3_IRQHandler>:
 80021fa:	4770      	bx	lr

080021fc <TIM4_IRQHandler>:
 80021fc:	4770      	bx	lr

080021fe <I2C1_EV_IRQHandler>:
 80021fe:	4770      	bx	lr

08002200 <I2C1_ER_IRQHandler>:
 8002200:	4770      	bx	lr

08002202 <I2C2_EV_IRQHandler>:
 8002202:	4770      	bx	lr

08002204 <I2C2_ER_IRQHandler>:
 8002204:	4770      	bx	lr

08002206 <SPI1_IRQHandler>:
 8002206:	4770      	bx	lr

08002208 <SPI2_IRQHandler>:
 8002208:	4770      	bx	lr

0800220a <USART1_IRQHandler>:
 800220a:	4770      	bx	lr

0800220c <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 800220c:	b507      	push	{r0, r1, r2, lr}
	BaseType_t pxHigherPriorityTaskWoken;

	xSemaphoreGiveFromISR(xSemaphore2, &pxHigherPriorityTaskWoken);
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <USART2_IRQHandler+0x34>)
 8002210:	a901      	add	r1, sp, #4
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	f7fe fa9b 	bl	800074e <xQueueGiveFromISR>

	if( pxHigherPriorityTaskWoken == pdTRUE )
 8002218:	9b01      	ldr	r3, [sp, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <USART2_IRQHandler+0x22>
		taskYIELD();
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <USART2_IRQHandler+0x38>)
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	f3bf 8f6f 	isb	sy

	USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800222e:	f240 5125 	movw	r1, #1317	; 0x525
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <USART2_IRQHandler+0x3c>)
 8002234:	f7ff fac4 	bl	80017c0 <USART_ClearITPendingBit>
}
 8002238:	b003      	add	sp, #12
 800223a:	f85d fb04 	ldr.w	pc, [sp], #4
 800223e:	bf00      	nop
 8002240:	200045ec 	.word	0x200045ec
 8002244:	e000ed04 	.word	0xe000ed04
 8002248:	40004400 	.word	0x40004400

0800224c <USART3_IRQHandler>:
 800224c:	4770      	bx	lr

0800224e <EXTI15_10_IRQHandler>:
 800224e:	4770      	bx	lr

08002250 <RTCAlarm_IRQHandler>:
 8002250:	4770      	bx	lr

08002252 <USBWakeUp_IRQHandler>:
 8002252:	4770      	bx	lr

08002254 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002254:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <_sbrk+0x2c>)
{
 8002258:	4602      	mov	r2, r0
	if (heap_end == 0)
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	b909      	cbnz	r1, 8002262 <_sbrk+0xe>
		heap_end = &end;
 800225e:	4909      	ldr	r1, [pc, #36]	; (8002284 <_sbrk+0x30>)
 8002260:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002262:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002264:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002266:	4402      	add	r2, r0
 8002268:	428a      	cmp	r2, r1
 800226a:	d906      	bls.n	800227a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800226c:	f000 f830 	bl	80022d0 <__errno>
 8002270:	230c      	movs	r3, #12
 8002272:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002278:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800227a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800227c:	e7fc      	b.n	8002278 <_sbrk+0x24>
 800227e:	bf00      	nop
 8002280:	200045c0 	.word	0x200045c0
 8002284:	20004618 	.word	0x20004618

08002288 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002288:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800228a:	e003      	b.n	8002294 <LoopCopyDataInit>

0800228c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 800228e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002290:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002292:	3104      	adds	r1, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002294:	4809      	ldr	r0, [pc, #36]	; (80022bc <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8002298:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800229a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800229c:	d3f6      	bcc.n	800228c <CopyDataInit>
	ldr	r2, =_sbss
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 80022a0:	e002      	b.n	80022a8 <LoopFillZerobss>

080022a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022a4:	f842 3b04 	str.w	r3, [r2], #4

080022a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 80022aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022ac:	d3f9      	bcc.n	80022a2 <FillZerobss>

/* Call the clock system intitialization function.*/
/* 	bl  SystemInit */
/* Call static constructors */
    bl __libc_init_array
 80022ae:	f000 f815 	bl	80022dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022b2:	f7ff fe4f 	bl	8001f54 <main>
	bx	lr
 80022b6:	4770      	bx	lr
	ldr	r3, =_sidata
 80022b8:	08003138 	.word	0x08003138
	ldr	r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022c0:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80022c4:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80022c8:	20004614 	.word	0x20004614

080022cc <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <BusFault_Handler>
	...

080022d0 <__errno>:
 80022d0:	4b01      	ldr	r3, [pc, #4]	; (80022d8 <__errno+0x8>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000024 	.word	0x20000024

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	2600      	movs	r6, #0
 80022e0:	4d0c      	ldr	r5, [pc, #48]	; (8002314 <__libc_init_array+0x38>)
 80022e2:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e4:	1b64      	subs	r4, r4, r5
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	42a6      	cmp	r6, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	f000 fc5c 	bl	8002ba8 <_init>
 80022f0:	2600      	movs	r6, #0
 80022f2:	4d0a      	ldr	r5, [pc, #40]	; (800231c <__libc_init_array+0x40>)
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <__libc_init_array+0x44>)
 80022f6:	1b64      	subs	r4, r4, r5
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	42a6      	cmp	r6, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	f855 3b04 	ldr.w	r3, [r5], #4
 8002304:	4798      	blx	r3
 8002306:	3601      	adds	r6, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	f855 3b04 	ldr.w	r3, [r5], #4
 800230e:	4798      	blx	r3
 8002310:	3601      	adds	r6, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	08003130 	.word	0x08003130
 8002318:	08003130 	.word	0x08003130
 800231c:	08003130 	.word	0x08003130
 8002320:	08003134 	.word	0x08003134

08002324 <memcpy>:
 8002324:	440a      	add	r2, r1
 8002326:	4291      	cmp	r1, r2
 8002328:	f100 33ff 	add.w	r3, r0, #4294967295
 800232c:	d100      	bne.n	8002330 <memcpy+0xc>
 800232e:	4770      	bx	lr
 8002330:	b510      	push	{r4, lr}
 8002332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002336:	4291      	cmp	r1, r2
 8002338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800233c:	d1f9      	bne.n	8002332 <memcpy+0xe>
 800233e:	bd10      	pop	{r4, pc}

08002340 <memset>:
 8002340:	4603      	mov	r3, r0
 8002342:	4402      	add	r2, r0
 8002344:	4293      	cmp	r3, r2
 8002346:	d100      	bne.n	800234a <memset+0xa>
 8002348:	4770      	bx	lr
 800234a:	f803 1b01 	strb.w	r1, [r3], #1
 800234e:	e7f9      	b.n	8002344 <memset+0x4>

08002350 <siprintf>:
 8002350:	b40e      	push	{r1, r2, r3}
 8002352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002356:	b500      	push	{lr}
 8002358:	b09c      	sub	sp, #112	; 0x70
 800235a:	ab1d      	add	r3, sp, #116	; 0x74
 800235c:	9002      	str	r0, [sp, #8]
 800235e:	9006      	str	r0, [sp, #24]
 8002360:	9107      	str	r1, [sp, #28]
 8002362:	9104      	str	r1, [sp, #16]
 8002364:	4808      	ldr	r0, [pc, #32]	; (8002388 <siprintf+0x38>)
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <siprintf+0x3c>)
 8002368:	f853 2b04 	ldr.w	r2, [r3], #4
 800236c:	9105      	str	r1, [sp, #20]
 800236e:	6800      	ldr	r0, [r0, #0]
 8002370:	a902      	add	r1, sp, #8
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f000 f868 	bl	8002448 <_svfiprintf_r>
 8002378:	2200      	movs	r2, #0
 800237a:	9b02      	ldr	r3, [sp, #8]
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	b01c      	add	sp, #112	; 0x70
 8002380:	f85d eb04 	ldr.w	lr, [sp], #4
 8002384:	b003      	add	sp, #12
 8002386:	4770      	bx	lr
 8002388:	20000024 	.word	0x20000024
 800238c:	ffff0208 	.word	0xffff0208

08002390 <__ssputs_r>:
 8002390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002394:	688e      	ldr	r6, [r1, #8]
 8002396:	4682      	mov	sl, r0
 8002398:	429e      	cmp	r6, r3
 800239a:	460c      	mov	r4, r1
 800239c:	4690      	mov	r8, r2
 800239e:	461f      	mov	r7, r3
 80023a0:	d838      	bhi.n	8002414 <__ssputs_r+0x84>
 80023a2:	898a      	ldrh	r2, [r1, #12]
 80023a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023a8:	d032      	beq.n	8002410 <__ssputs_r+0x80>
 80023aa:	6825      	ldr	r5, [r4, #0]
 80023ac:	6909      	ldr	r1, [r1, #16]
 80023ae:	3301      	adds	r3, #1
 80023b0:	eba5 0901 	sub.w	r9, r5, r1
 80023b4:	6965      	ldr	r5, [r4, #20]
 80023b6:	444b      	add	r3, r9
 80023b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023c0:	106d      	asrs	r5, r5, #1
 80023c2:	429d      	cmp	r5, r3
 80023c4:	bf38      	it	cc
 80023c6:	461d      	movcc	r5, r3
 80023c8:	0553      	lsls	r3, r2, #21
 80023ca:	d531      	bpl.n	8002430 <__ssputs_r+0xa0>
 80023cc:	4629      	mov	r1, r5
 80023ce:	f000 fb45 	bl	8002a5c <_malloc_r>
 80023d2:	4606      	mov	r6, r0
 80023d4:	b950      	cbnz	r0, 80023ec <__ssputs_r+0x5c>
 80023d6:	230c      	movs	r3, #12
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f8ca 3000 	str.w	r3, [sl]
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e6:	81a3      	strh	r3, [r4, #12]
 80023e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ec:	464a      	mov	r2, r9
 80023ee:	6921      	ldr	r1, [r4, #16]
 80023f0:	f7ff ff98 	bl	8002324 <memcpy>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	6126      	str	r6, [r4, #16]
 8002402:	444e      	add	r6, r9
 8002404:	6026      	str	r6, [r4, #0]
 8002406:	463e      	mov	r6, r7
 8002408:	6165      	str	r5, [r4, #20]
 800240a:	eba5 0509 	sub.w	r5, r5, r9
 800240e:	60a5      	str	r5, [r4, #8]
 8002410:	42be      	cmp	r6, r7
 8002412:	d900      	bls.n	8002416 <__ssputs_r+0x86>
 8002414:	463e      	mov	r6, r7
 8002416:	4632      	mov	r2, r6
 8002418:	4641      	mov	r1, r8
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	f000 fab8 	bl	8002990 <memmove>
 8002420:	68a3      	ldr	r3, [r4, #8]
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	1b9b      	subs	r3, r3, r6
 8002426:	4432      	add	r2, r6
 8002428:	2000      	movs	r0, #0
 800242a:	60a3      	str	r3, [r4, #8]
 800242c:	6022      	str	r2, [r4, #0]
 800242e:	e7db      	b.n	80023e8 <__ssputs_r+0x58>
 8002430:	462a      	mov	r2, r5
 8002432:	f000 fb6d 	bl	8002b10 <_realloc_r>
 8002436:	4606      	mov	r6, r0
 8002438:	2800      	cmp	r0, #0
 800243a:	d1e1      	bne.n	8002400 <__ssputs_r+0x70>
 800243c:	4650      	mov	r0, sl
 800243e:	6921      	ldr	r1, [r4, #16]
 8002440:	f000 fac0 	bl	80029c4 <_free_r>
 8002444:	e7c7      	b.n	80023d6 <__ssputs_r+0x46>
	...

08002448 <_svfiprintf_r>:
 8002448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244c:	4698      	mov	r8, r3
 800244e:	898b      	ldrh	r3, [r1, #12]
 8002450:	4607      	mov	r7, r0
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	460d      	mov	r5, r1
 8002456:	4614      	mov	r4, r2
 8002458:	b09d      	sub	sp, #116	; 0x74
 800245a:	d50e      	bpl.n	800247a <_svfiprintf_r+0x32>
 800245c:	690b      	ldr	r3, [r1, #16]
 800245e:	b963      	cbnz	r3, 800247a <_svfiprintf_r+0x32>
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	f000 fafb 	bl	8002a5c <_malloc_r>
 8002466:	6028      	str	r0, [r5, #0]
 8002468:	6128      	str	r0, [r5, #16]
 800246a:	b920      	cbnz	r0, 8002476 <_svfiprintf_r+0x2e>
 800246c:	230c      	movs	r3, #12
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	e0d1      	b.n	800261a <_svfiprintf_r+0x1d2>
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	616b      	str	r3, [r5, #20]
 800247a:	2300      	movs	r3, #0
 800247c:	9309      	str	r3, [sp, #36]	; 0x24
 800247e:	2320      	movs	r3, #32
 8002480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002484:	2330      	movs	r3, #48	; 0x30
 8002486:	f04f 0901 	mov.w	r9, #1
 800248a:	f8cd 800c 	str.w	r8, [sp, #12]
 800248e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002634 <_svfiprintf_r+0x1ec>
 8002492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002496:	4623      	mov	r3, r4
 8002498:	469a      	mov	sl, r3
 800249a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800249e:	b10a      	cbz	r2, 80024a4 <_svfiprintf_r+0x5c>
 80024a0:	2a25      	cmp	r2, #37	; 0x25
 80024a2:	d1f9      	bne.n	8002498 <_svfiprintf_r+0x50>
 80024a4:	ebba 0b04 	subs.w	fp, sl, r4
 80024a8:	d00b      	beq.n	80024c2 <_svfiprintf_r+0x7a>
 80024aa:	465b      	mov	r3, fp
 80024ac:	4622      	mov	r2, r4
 80024ae:	4629      	mov	r1, r5
 80024b0:	4638      	mov	r0, r7
 80024b2:	f7ff ff6d 	bl	8002390 <__ssputs_r>
 80024b6:	3001      	adds	r0, #1
 80024b8:	f000 80aa 	beq.w	8002610 <_svfiprintf_r+0x1c8>
 80024bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024be:	445a      	add	r2, fp
 80024c0:	9209      	str	r2, [sp, #36]	; 0x24
 80024c2:	f89a 3000 	ldrb.w	r3, [sl]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80a2 	beq.w	8002610 <_svfiprintf_r+0x1c8>
 80024cc:	2300      	movs	r3, #0
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024d6:	f10a 0a01 	add.w	sl, sl, #1
 80024da:	9304      	str	r3, [sp, #16]
 80024dc:	9307      	str	r3, [sp, #28]
 80024de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024e2:	931a      	str	r3, [sp, #104]	; 0x68
 80024e4:	4654      	mov	r4, sl
 80024e6:	2205      	movs	r2, #5
 80024e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ec:	4851      	ldr	r0, [pc, #324]	; (8002634 <_svfiprintf_r+0x1ec>)
 80024ee:	f000 fa41 	bl	8002974 <memchr>
 80024f2:	9a04      	ldr	r2, [sp, #16]
 80024f4:	b9d8      	cbnz	r0, 800252e <_svfiprintf_r+0xe6>
 80024f6:	06d0      	lsls	r0, r2, #27
 80024f8:	bf44      	itt	mi
 80024fa:	2320      	movmi	r3, #32
 80024fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002500:	0711      	lsls	r1, r2, #28
 8002502:	bf44      	itt	mi
 8002504:	232b      	movmi	r3, #43	; 0x2b
 8002506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800250a:	f89a 3000 	ldrb.w	r3, [sl]
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d015      	beq.n	800253e <_svfiprintf_r+0xf6>
 8002512:	4654      	mov	r4, sl
 8002514:	2000      	movs	r0, #0
 8002516:	f04f 0c0a 	mov.w	ip, #10
 800251a:	9a07      	ldr	r2, [sp, #28]
 800251c:	4621      	mov	r1, r4
 800251e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002522:	3b30      	subs	r3, #48	; 0x30
 8002524:	2b09      	cmp	r3, #9
 8002526:	d94e      	bls.n	80025c6 <_svfiprintf_r+0x17e>
 8002528:	b1b0      	cbz	r0, 8002558 <_svfiprintf_r+0x110>
 800252a:	9207      	str	r2, [sp, #28]
 800252c:	e014      	b.n	8002558 <_svfiprintf_r+0x110>
 800252e:	eba0 0308 	sub.w	r3, r0, r8
 8002532:	fa09 f303 	lsl.w	r3, r9, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	46a2      	mov	sl, r4
 800253a:	9304      	str	r3, [sp, #16]
 800253c:	e7d2      	b.n	80024e4 <_svfiprintf_r+0x9c>
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	1d19      	adds	r1, r3, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	9103      	str	r1, [sp, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	bfbb      	ittet	lt
 800254a:	425b      	neglt	r3, r3
 800254c:	f042 0202 	orrlt.w	r2, r2, #2
 8002550:	9307      	strge	r3, [sp, #28]
 8002552:	9307      	strlt	r3, [sp, #28]
 8002554:	bfb8      	it	lt
 8002556:	9204      	strlt	r2, [sp, #16]
 8002558:	7823      	ldrb	r3, [r4, #0]
 800255a:	2b2e      	cmp	r3, #46	; 0x2e
 800255c:	d10c      	bne.n	8002578 <_svfiprintf_r+0x130>
 800255e:	7863      	ldrb	r3, [r4, #1]
 8002560:	2b2a      	cmp	r3, #42	; 0x2a
 8002562:	d135      	bne.n	80025d0 <_svfiprintf_r+0x188>
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	3402      	adds	r4, #2
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	9203      	str	r2, [sp, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	f04f 33ff 	movlt.w	r3, #4294967295
 8002576:	9305      	str	r3, [sp, #20]
 8002578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002644 <_svfiprintf_r+0x1fc>
 800257c:	2203      	movs	r2, #3
 800257e:	4650      	mov	r0, sl
 8002580:	7821      	ldrb	r1, [r4, #0]
 8002582:	f000 f9f7 	bl	8002974 <memchr>
 8002586:	b140      	cbz	r0, 800259a <_svfiprintf_r+0x152>
 8002588:	2340      	movs	r3, #64	; 0x40
 800258a:	eba0 000a 	sub.w	r0, r0, sl
 800258e:	fa03 f000 	lsl.w	r0, r3, r0
 8002592:	9b04      	ldr	r3, [sp, #16]
 8002594:	3401      	adds	r4, #1
 8002596:	4303      	orrs	r3, r0
 8002598:	9304      	str	r3, [sp, #16]
 800259a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800259e:	2206      	movs	r2, #6
 80025a0:	4825      	ldr	r0, [pc, #148]	; (8002638 <_svfiprintf_r+0x1f0>)
 80025a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025a6:	f000 f9e5 	bl	8002974 <memchr>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d038      	beq.n	8002620 <_svfiprintf_r+0x1d8>
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <_svfiprintf_r+0x1f4>)
 80025b0:	bb1b      	cbnz	r3, 80025fa <_svfiprintf_r+0x1b2>
 80025b2:	9b03      	ldr	r3, [sp, #12]
 80025b4:	3307      	adds	r3, #7
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	3308      	adds	r3, #8
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025c0:	4433      	add	r3, r6
 80025c2:	9309      	str	r3, [sp, #36]	; 0x24
 80025c4:	e767      	b.n	8002496 <_svfiprintf_r+0x4e>
 80025c6:	460c      	mov	r4, r1
 80025c8:	2001      	movs	r0, #1
 80025ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ce:	e7a5      	b.n	800251c <_svfiprintf_r+0xd4>
 80025d0:	2300      	movs	r3, #0
 80025d2:	f04f 0c0a 	mov.w	ip, #10
 80025d6:	4619      	mov	r1, r3
 80025d8:	3401      	adds	r4, #1
 80025da:	9305      	str	r3, [sp, #20]
 80025dc:	4620      	mov	r0, r4
 80025de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025e2:	3a30      	subs	r2, #48	; 0x30
 80025e4:	2a09      	cmp	r2, #9
 80025e6:	d903      	bls.n	80025f0 <_svfiprintf_r+0x1a8>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0c5      	beq.n	8002578 <_svfiprintf_r+0x130>
 80025ec:	9105      	str	r1, [sp, #20]
 80025ee:	e7c3      	b.n	8002578 <_svfiprintf_r+0x130>
 80025f0:	4604      	mov	r4, r0
 80025f2:	2301      	movs	r3, #1
 80025f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80025f8:	e7f0      	b.n	80025dc <_svfiprintf_r+0x194>
 80025fa:	ab03      	add	r3, sp, #12
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	462a      	mov	r2, r5
 8002600:	4638      	mov	r0, r7
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <_svfiprintf_r+0x1f8>)
 8002604:	a904      	add	r1, sp, #16
 8002606:	f3af 8000 	nop.w
 800260a:	1c42      	adds	r2, r0, #1
 800260c:	4606      	mov	r6, r0
 800260e:	d1d6      	bne.n	80025be <_svfiprintf_r+0x176>
 8002610:	89ab      	ldrh	r3, [r5, #12]
 8002612:	065b      	lsls	r3, r3, #25
 8002614:	f53f af2c 	bmi.w	8002470 <_svfiprintf_r+0x28>
 8002618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800261a:	b01d      	add	sp, #116	; 0x74
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	ab03      	add	r3, sp, #12
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	462a      	mov	r2, r5
 8002626:	4638      	mov	r0, r7
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <_svfiprintf_r+0x1f8>)
 800262a:	a904      	add	r1, sp, #16
 800262c:	f000 f87c 	bl	8002728 <_printf_i>
 8002630:	e7eb      	b.n	800260a <_svfiprintf_r+0x1c2>
 8002632:	bf00      	nop
 8002634:	080030fa 	.word	0x080030fa
 8002638:	08003104 	.word	0x08003104
 800263c:	00000000 	.word	0x00000000
 8002640:	08002391 	.word	0x08002391
 8002644:	08003100 	.word	0x08003100

08002648 <_printf_common>:
 8002648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800264c:	4616      	mov	r6, r2
 800264e:	4699      	mov	r9, r3
 8002650:	688a      	ldr	r2, [r1, #8]
 8002652:	690b      	ldr	r3, [r1, #16]
 8002654:	4607      	mov	r7, r0
 8002656:	4293      	cmp	r3, r2
 8002658:	bfb8      	it	lt
 800265a:	4613      	movlt	r3, r2
 800265c:	6033      	str	r3, [r6, #0]
 800265e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002662:	460c      	mov	r4, r1
 8002664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002668:	b10a      	cbz	r2, 800266e <_printf_common+0x26>
 800266a:	3301      	adds	r3, #1
 800266c:	6033      	str	r3, [r6, #0]
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	0699      	lsls	r1, r3, #26
 8002672:	bf42      	ittt	mi
 8002674:	6833      	ldrmi	r3, [r6, #0]
 8002676:	3302      	addmi	r3, #2
 8002678:	6033      	strmi	r3, [r6, #0]
 800267a:	6825      	ldr	r5, [r4, #0]
 800267c:	f015 0506 	ands.w	r5, r5, #6
 8002680:	d106      	bne.n	8002690 <_printf_common+0x48>
 8002682:	f104 0a19 	add.w	sl, r4, #25
 8002686:	68e3      	ldr	r3, [r4, #12]
 8002688:	6832      	ldr	r2, [r6, #0]
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	42ab      	cmp	r3, r5
 800268e:	dc28      	bgt.n	80026e2 <_printf_common+0x9a>
 8002690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002694:	1e13      	subs	r3, r2, #0
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	bf18      	it	ne
 800269a:	2301      	movne	r3, #1
 800269c:	0692      	lsls	r2, r2, #26
 800269e:	d42d      	bmi.n	80026fc <_printf_common+0xb4>
 80026a0:	4649      	mov	r1, r9
 80026a2:	4638      	mov	r0, r7
 80026a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026a8:	47c0      	blx	r8
 80026aa:	3001      	adds	r0, #1
 80026ac:	d020      	beq.n	80026f0 <_printf_common+0xa8>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	68e5      	ldr	r5, [r4, #12]
 80026b2:	f003 0306 	and.w	r3, r3, #6
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf18      	it	ne
 80026ba:	2500      	movne	r5, #0
 80026bc:	6832      	ldr	r2, [r6, #0]
 80026be:	f04f 0600 	mov.w	r6, #0
 80026c2:	68a3      	ldr	r3, [r4, #8]
 80026c4:	bf08      	it	eq
 80026c6:	1aad      	subeq	r5, r5, r2
 80026c8:	6922      	ldr	r2, [r4, #16]
 80026ca:	bf08      	it	eq
 80026cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bfc4      	itt	gt
 80026d4:	1a9b      	subgt	r3, r3, r2
 80026d6:	18ed      	addgt	r5, r5, r3
 80026d8:	341a      	adds	r4, #26
 80026da:	42b5      	cmp	r5, r6
 80026dc:	d11a      	bne.n	8002714 <_printf_common+0xcc>
 80026de:	2000      	movs	r0, #0
 80026e0:	e008      	b.n	80026f4 <_printf_common+0xac>
 80026e2:	2301      	movs	r3, #1
 80026e4:	4652      	mov	r2, sl
 80026e6:	4649      	mov	r1, r9
 80026e8:	4638      	mov	r0, r7
 80026ea:	47c0      	blx	r8
 80026ec:	3001      	adds	r0, #1
 80026ee:	d103      	bne.n	80026f8 <_printf_common+0xb0>
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f8:	3501      	adds	r5, #1
 80026fa:	e7c4      	b.n	8002686 <_printf_common+0x3e>
 80026fc:	2030      	movs	r0, #48	; 0x30
 80026fe:	18e1      	adds	r1, r4, r3
 8002700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800270a:	4422      	add	r2, r4
 800270c:	3302      	adds	r3, #2
 800270e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002712:	e7c5      	b.n	80026a0 <_printf_common+0x58>
 8002714:	2301      	movs	r3, #1
 8002716:	4622      	mov	r2, r4
 8002718:	4649      	mov	r1, r9
 800271a:	4638      	mov	r0, r7
 800271c:	47c0      	blx	r8
 800271e:	3001      	adds	r0, #1
 8002720:	d0e6      	beq.n	80026f0 <_printf_common+0xa8>
 8002722:	3601      	adds	r6, #1
 8002724:	e7d9      	b.n	80026da <_printf_common+0x92>
	...

08002728 <_printf_i>:
 8002728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	460c      	mov	r4, r1
 800272e:	7e27      	ldrb	r7, [r4, #24]
 8002730:	4691      	mov	r9, r2
 8002732:	2f78      	cmp	r7, #120	; 0x78
 8002734:	4680      	mov	r8, r0
 8002736:	469a      	mov	sl, r3
 8002738:	990c      	ldr	r1, [sp, #48]	; 0x30
 800273a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800273e:	d807      	bhi.n	8002750 <_printf_i+0x28>
 8002740:	2f62      	cmp	r7, #98	; 0x62
 8002742:	d80a      	bhi.n	800275a <_printf_i+0x32>
 8002744:	2f00      	cmp	r7, #0
 8002746:	f000 80d9 	beq.w	80028fc <_printf_i+0x1d4>
 800274a:	2f58      	cmp	r7, #88	; 0x58
 800274c:	f000 80a4 	beq.w	8002898 <_printf_i+0x170>
 8002750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002758:	e03a      	b.n	80027d0 <_printf_i+0xa8>
 800275a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800275e:	2b15      	cmp	r3, #21
 8002760:	d8f6      	bhi.n	8002750 <_printf_i+0x28>
 8002762:	a001      	add	r0, pc, #4	; (adr r0, 8002768 <_printf_i+0x40>)
 8002764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002768:	080027c1 	.word	0x080027c1
 800276c:	080027d5 	.word	0x080027d5
 8002770:	08002751 	.word	0x08002751
 8002774:	08002751 	.word	0x08002751
 8002778:	08002751 	.word	0x08002751
 800277c:	08002751 	.word	0x08002751
 8002780:	080027d5 	.word	0x080027d5
 8002784:	08002751 	.word	0x08002751
 8002788:	08002751 	.word	0x08002751
 800278c:	08002751 	.word	0x08002751
 8002790:	08002751 	.word	0x08002751
 8002794:	080028e3 	.word	0x080028e3
 8002798:	08002805 	.word	0x08002805
 800279c:	080028c5 	.word	0x080028c5
 80027a0:	08002751 	.word	0x08002751
 80027a4:	08002751 	.word	0x08002751
 80027a8:	08002905 	.word	0x08002905
 80027ac:	08002751 	.word	0x08002751
 80027b0:	08002805 	.word	0x08002805
 80027b4:	08002751 	.word	0x08002751
 80027b8:	08002751 	.word	0x08002751
 80027bc:	080028cd 	.word	0x080028cd
 80027c0:	680b      	ldr	r3, [r1, #0]
 80027c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80027c6:	1d1a      	adds	r2, r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	600a      	str	r2, [r1, #0]
 80027cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0a4      	b.n	800291e <_printf_i+0x1f6>
 80027d4:	6825      	ldr	r5, [r4, #0]
 80027d6:	6808      	ldr	r0, [r1, #0]
 80027d8:	062e      	lsls	r6, r5, #24
 80027da:	f100 0304 	add.w	r3, r0, #4
 80027de:	d50a      	bpl.n	80027f6 <_printf_i+0xce>
 80027e0:	6805      	ldr	r5, [r0, #0]
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	da03      	bge.n	80027f0 <_printf_i+0xc8>
 80027e8:	232d      	movs	r3, #45	; 0x2d
 80027ea:	426d      	negs	r5, r5
 80027ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027f0:	230a      	movs	r3, #10
 80027f2:	485e      	ldr	r0, [pc, #376]	; (800296c <_printf_i+0x244>)
 80027f4:	e019      	b.n	800282a <_printf_i+0x102>
 80027f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80027fa:	6805      	ldr	r5, [r0, #0]
 80027fc:	600b      	str	r3, [r1, #0]
 80027fe:	bf18      	it	ne
 8002800:	b22d      	sxthne	r5, r5
 8002802:	e7ef      	b.n	80027e4 <_printf_i+0xbc>
 8002804:	680b      	ldr	r3, [r1, #0]
 8002806:	6825      	ldr	r5, [r4, #0]
 8002808:	1d18      	adds	r0, r3, #4
 800280a:	6008      	str	r0, [r1, #0]
 800280c:	0628      	lsls	r0, r5, #24
 800280e:	d501      	bpl.n	8002814 <_printf_i+0xec>
 8002810:	681d      	ldr	r5, [r3, #0]
 8002812:	e002      	b.n	800281a <_printf_i+0xf2>
 8002814:	0669      	lsls	r1, r5, #25
 8002816:	d5fb      	bpl.n	8002810 <_printf_i+0xe8>
 8002818:	881d      	ldrh	r5, [r3, #0]
 800281a:	2f6f      	cmp	r7, #111	; 0x6f
 800281c:	bf0c      	ite	eq
 800281e:	2308      	moveq	r3, #8
 8002820:	230a      	movne	r3, #10
 8002822:	4852      	ldr	r0, [pc, #328]	; (800296c <_printf_i+0x244>)
 8002824:	2100      	movs	r1, #0
 8002826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800282a:	6866      	ldr	r6, [r4, #4]
 800282c:	2e00      	cmp	r6, #0
 800282e:	bfa8      	it	ge
 8002830:	6821      	ldrge	r1, [r4, #0]
 8002832:	60a6      	str	r6, [r4, #8]
 8002834:	bfa4      	itt	ge
 8002836:	f021 0104 	bicge.w	r1, r1, #4
 800283a:	6021      	strge	r1, [r4, #0]
 800283c:	b90d      	cbnz	r5, 8002842 <_printf_i+0x11a>
 800283e:	2e00      	cmp	r6, #0
 8002840:	d04d      	beq.n	80028de <_printf_i+0x1b6>
 8002842:	4616      	mov	r6, r2
 8002844:	fbb5 f1f3 	udiv	r1, r5, r3
 8002848:	fb03 5711 	mls	r7, r3, r1, r5
 800284c:	5dc7      	ldrb	r7, [r0, r7]
 800284e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002852:	462f      	mov	r7, r5
 8002854:	42bb      	cmp	r3, r7
 8002856:	460d      	mov	r5, r1
 8002858:	d9f4      	bls.n	8002844 <_printf_i+0x11c>
 800285a:	2b08      	cmp	r3, #8
 800285c:	d10b      	bne.n	8002876 <_printf_i+0x14e>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	07df      	lsls	r7, r3, #31
 8002862:	d508      	bpl.n	8002876 <_printf_i+0x14e>
 8002864:	6923      	ldr	r3, [r4, #16]
 8002866:	6861      	ldr	r1, [r4, #4]
 8002868:	4299      	cmp	r1, r3
 800286a:	bfde      	ittt	le
 800286c:	2330      	movle	r3, #48	; 0x30
 800286e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002872:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002876:	1b92      	subs	r2, r2, r6
 8002878:	6122      	str	r2, [r4, #16]
 800287a:	464b      	mov	r3, r9
 800287c:	4621      	mov	r1, r4
 800287e:	4640      	mov	r0, r8
 8002880:	f8cd a000 	str.w	sl, [sp]
 8002884:	aa03      	add	r2, sp, #12
 8002886:	f7ff fedf 	bl	8002648 <_printf_common>
 800288a:	3001      	adds	r0, #1
 800288c:	d14c      	bne.n	8002928 <_printf_i+0x200>
 800288e:	f04f 30ff 	mov.w	r0, #4294967295
 8002892:	b004      	add	sp, #16
 8002894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002898:	4834      	ldr	r0, [pc, #208]	; (800296c <_printf_i+0x244>)
 800289a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800289e:	680e      	ldr	r6, [r1, #0]
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80028a6:	061f      	lsls	r7, r3, #24
 80028a8:	600e      	str	r6, [r1, #0]
 80028aa:	d514      	bpl.n	80028d6 <_printf_i+0x1ae>
 80028ac:	07d9      	lsls	r1, r3, #31
 80028ae:	bf44      	itt	mi
 80028b0:	f043 0320 	orrmi.w	r3, r3, #32
 80028b4:	6023      	strmi	r3, [r4, #0]
 80028b6:	b91d      	cbnz	r5, 80028c0 <_printf_i+0x198>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f023 0320 	bic.w	r3, r3, #32
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	2310      	movs	r3, #16
 80028c2:	e7af      	b.n	8002824 <_printf_i+0xfc>
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f043 0320 	orr.w	r3, r3, #32
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	2378      	movs	r3, #120	; 0x78
 80028ce:	4828      	ldr	r0, [pc, #160]	; (8002970 <_printf_i+0x248>)
 80028d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028d4:	e7e3      	b.n	800289e <_printf_i+0x176>
 80028d6:	065e      	lsls	r6, r3, #25
 80028d8:	bf48      	it	mi
 80028da:	b2ad      	uxthmi	r5, r5
 80028dc:	e7e6      	b.n	80028ac <_printf_i+0x184>
 80028de:	4616      	mov	r6, r2
 80028e0:	e7bb      	b.n	800285a <_printf_i+0x132>
 80028e2:	680b      	ldr	r3, [r1, #0]
 80028e4:	6826      	ldr	r6, [r4, #0]
 80028e6:	1d1d      	adds	r5, r3, #4
 80028e8:	6960      	ldr	r0, [r4, #20]
 80028ea:	600d      	str	r5, [r1, #0]
 80028ec:	0635      	lsls	r5, r6, #24
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	d501      	bpl.n	80028f6 <_printf_i+0x1ce>
 80028f2:	6018      	str	r0, [r3, #0]
 80028f4:	e002      	b.n	80028fc <_printf_i+0x1d4>
 80028f6:	0671      	lsls	r1, r6, #25
 80028f8:	d5fb      	bpl.n	80028f2 <_printf_i+0x1ca>
 80028fa:	8018      	strh	r0, [r3, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	4616      	mov	r6, r2
 8002900:	6123      	str	r3, [r4, #16]
 8002902:	e7ba      	b.n	800287a <_printf_i+0x152>
 8002904:	680b      	ldr	r3, [r1, #0]
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	600a      	str	r2, [r1, #0]
 800290a:	681e      	ldr	r6, [r3, #0]
 800290c:	2100      	movs	r1, #0
 800290e:	4630      	mov	r0, r6
 8002910:	6862      	ldr	r2, [r4, #4]
 8002912:	f000 f82f 	bl	8002974 <memchr>
 8002916:	b108      	cbz	r0, 800291c <_printf_i+0x1f4>
 8002918:	1b80      	subs	r0, r0, r6
 800291a:	6060      	str	r0, [r4, #4]
 800291c:	6863      	ldr	r3, [r4, #4]
 800291e:	6123      	str	r3, [r4, #16]
 8002920:	2300      	movs	r3, #0
 8002922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002926:	e7a8      	b.n	800287a <_printf_i+0x152>
 8002928:	4632      	mov	r2, r6
 800292a:	4649      	mov	r1, r9
 800292c:	4640      	mov	r0, r8
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	47d0      	blx	sl
 8002932:	3001      	adds	r0, #1
 8002934:	d0ab      	beq.n	800288e <_printf_i+0x166>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	079b      	lsls	r3, r3, #30
 800293a:	d413      	bmi.n	8002964 <_printf_i+0x23c>
 800293c:	68e0      	ldr	r0, [r4, #12]
 800293e:	9b03      	ldr	r3, [sp, #12]
 8002940:	4298      	cmp	r0, r3
 8002942:	bfb8      	it	lt
 8002944:	4618      	movlt	r0, r3
 8002946:	e7a4      	b.n	8002892 <_printf_i+0x16a>
 8002948:	2301      	movs	r3, #1
 800294a:	4632      	mov	r2, r6
 800294c:	4649      	mov	r1, r9
 800294e:	4640      	mov	r0, r8
 8002950:	47d0      	blx	sl
 8002952:	3001      	adds	r0, #1
 8002954:	d09b      	beq.n	800288e <_printf_i+0x166>
 8002956:	3501      	adds	r5, #1
 8002958:	68e3      	ldr	r3, [r4, #12]
 800295a:	9903      	ldr	r1, [sp, #12]
 800295c:	1a5b      	subs	r3, r3, r1
 800295e:	42ab      	cmp	r3, r5
 8002960:	dcf2      	bgt.n	8002948 <_printf_i+0x220>
 8002962:	e7eb      	b.n	800293c <_printf_i+0x214>
 8002964:	2500      	movs	r5, #0
 8002966:	f104 0619 	add.w	r6, r4, #25
 800296a:	e7f5      	b.n	8002958 <_printf_i+0x230>
 800296c:	0800310b 	.word	0x0800310b
 8002970:	0800311c 	.word	0x0800311c

08002974 <memchr>:
 8002974:	4603      	mov	r3, r0
 8002976:	b510      	push	{r4, lr}
 8002978:	b2c9      	uxtb	r1, r1
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	4618      	mov	r0, r3
 8002980:	d101      	bne.n	8002986 <memchr+0x12>
 8002982:	2000      	movs	r0, #0
 8002984:	e003      	b.n	800298e <memchr+0x1a>
 8002986:	7804      	ldrb	r4, [r0, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	428c      	cmp	r4, r1
 800298c:	d1f6      	bne.n	800297c <memchr+0x8>
 800298e:	bd10      	pop	{r4, pc}

08002990 <memmove>:
 8002990:	4288      	cmp	r0, r1
 8002992:	b510      	push	{r4, lr}
 8002994:	eb01 0402 	add.w	r4, r1, r2
 8002998:	d902      	bls.n	80029a0 <memmove+0x10>
 800299a:	4284      	cmp	r4, r0
 800299c:	4623      	mov	r3, r4
 800299e:	d807      	bhi.n	80029b0 <memmove+0x20>
 80029a0:	1e43      	subs	r3, r0, #1
 80029a2:	42a1      	cmp	r1, r4
 80029a4:	d008      	beq.n	80029b8 <memmove+0x28>
 80029a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029ae:	e7f8      	b.n	80029a2 <memmove+0x12>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4402      	add	r2, r0
 80029b4:	428a      	cmp	r2, r1
 80029b6:	d100      	bne.n	80029ba <memmove+0x2a>
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029c2:	e7f7      	b.n	80029b4 <memmove+0x24>

080029c4 <_free_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4605      	mov	r5, r0
 80029c8:	2900      	cmp	r1, #0
 80029ca:	d043      	beq.n	8002a54 <_free_r+0x90>
 80029cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d0:	1f0c      	subs	r4, r1, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bfb8      	it	lt
 80029d6:	18e4      	addlt	r4, r4, r3
 80029d8:	f000 f8d0 	bl	8002b7c <__malloc_lock>
 80029dc:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <_free_r+0x94>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	4610      	mov	r0, r2
 80029e2:	b933      	cbnz	r3, 80029f2 <_free_r+0x2e>
 80029e4:	6063      	str	r3, [r4, #4]
 80029e6:	6014      	str	r4, [r2, #0]
 80029e8:	4628      	mov	r0, r5
 80029ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029ee:	f000 b8cb 	b.w	8002b88 <__malloc_unlock>
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	d90a      	bls.n	8002a0c <_free_r+0x48>
 80029f6:	6821      	ldr	r1, [r4, #0]
 80029f8:	1862      	adds	r2, r4, r1
 80029fa:	4293      	cmp	r3, r2
 80029fc:	bf01      	itttt	eq
 80029fe:	681a      	ldreq	r2, [r3, #0]
 8002a00:	685b      	ldreq	r3, [r3, #4]
 8002a02:	1852      	addeq	r2, r2, r1
 8002a04:	6022      	streq	r2, [r4, #0]
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	6004      	str	r4, [r0, #0]
 8002a0a:	e7ed      	b.n	80029e8 <_free_r+0x24>
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	b10b      	cbz	r3, 8002a16 <_free_r+0x52>
 8002a12:	42a3      	cmp	r3, r4
 8002a14:	d9fa      	bls.n	8002a0c <_free_r+0x48>
 8002a16:	6811      	ldr	r1, [r2, #0]
 8002a18:	1850      	adds	r0, r2, r1
 8002a1a:	42a0      	cmp	r0, r4
 8002a1c:	d10b      	bne.n	8002a36 <_free_r+0x72>
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	4401      	add	r1, r0
 8002a22:	1850      	adds	r0, r2, r1
 8002a24:	4283      	cmp	r3, r0
 8002a26:	6011      	str	r1, [r2, #0]
 8002a28:	d1de      	bne.n	80029e8 <_free_r+0x24>
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4401      	add	r1, r0
 8002a30:	6011      	str	r1, [r2, #0]
 8002a32:	6053      	str	r3, [r2, #4]
 8002a34:	e7d8      	b.n	80029e8 <_free_r+0x24>
 8002a36:	d902      	bls.n	8002a3e <_free_r+0x7a>
 8002a38:	230c      	movs	r3, #12
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	e7d4      	b.n	80029e8 <_free_r+0x24>
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	1821      	adds	r1, r4, r0
 8002a42:	428b      	cmp	r3, r1
 8002a44:	bf01      	itttt	eq
 8002a46:	6819      	ldreq	r1, [r3, #0]
 8002a48:	685b      	ldreq	r3, [r3, #4]
 8002a4a:	1809      	addeq	r1, r1, r0
 8002a4c:	6021      	streq	r1, [r4, #0]
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	6054      	str	r4, [r2, #4]
 8002a52:	e7c9      	b.n	80029e8 <_free_r+0x24>
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	bf00      	nop
 8002a58:	200045c8 	.word	0x200045c8

08002a5c <_malloc_r>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	1ccd      	adds	r5, r1, #3
 8002a60:	f025 0503 	bic.w	r5, r5, #3
 8002a64:	3508      	adds	r5, #8
 8002a66:	2d0c      	cmp	r5, #12
 8002a68:	bf38      	it	cc
 8002a6a:	250c      	movcc	r5, #12
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	4606      	mov	r6, r0
 8002a70:	db01      	blt.n	8002a76 <_malloc_r+0x1a>
 8002a72:	42a9      	cmp	r1, r5
 8002a74:	d903      	bls.n	8002a7e <_malloc_r+0x22>
 8002a76:	230c      	movs	r3, #12
 8002a78:	6033      	str	r3, [r6, #0]
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7e:	f000 f87d 	bl	8002b7c <__malloc_lock>
 8002a82:	4921      	ldr	r1, [pc, #132]	; (8002b08 <_malloc_r+0xac>)
 8002a84:	680a      	ldr	r2, [r1, #0]
 8002a86:	4614      	mov	r4, r2
 8002a88:	b99c      	cbnz	r4, 8002ab2 <_malloc_r+0x56>
 8002a8a:	4f20      	ldr	r7, [pc, #128]	; (8002b0c <_malloc_r+0xb0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b923      	cbnz	r3, 8002a9a <_malloc_r+0x3e>
 8002a90:	4621      	mov	r1, r4
 8002a92:	4630      	mov	r0, r6
 8002a94:	f000 f862 	bl	8002b5c <_sbrk_r>
 8002a98:	6038      	str	r0, [r7, #0]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f000 f85d 	bl	8002b5c <_sbrk_r>
 8002aa2:	1c43      	adds	r3, r0, #1
 8002aa4:	d123      	bne.n	8002aee <_malloc_r+0x92>
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	6033      	str	r3, [r6, #0]
 8002aac:	f000 f86c 	bl	8002b88 <__malloc_unlock>
 8002ab0:	e7e3      	b.n	8002a7a <_malloc_r+0x1e>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	1b5b      	subs	r3, r3, r5
 8002ab6:	d417      	bmi.n	8002ae8 <_malloc_r+0x8c>
 8002ab8:	2b0b      	cmp	r3, #11
 8002aba:	d903      	bls.n	8002ac4 <_malloc_r+0x68>
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	441c      	add	r4, r3
 8002ac0:	6025      	str	r5, [r4, #0]
 8002ac2:	e004      	b.n	8002ace <_malloc_r+0x72>
 8002ac4:	6863      	ldr	r3, [r4, #4]
 8002ac6:	42a2      	cmp	r2, r4
 8002ac8:	bf0c      	ite	eq
 8002aca:	600b      	streq	r3, [r1, #0]
 8002acc:	6053      	strne	r3, [r2, #4]
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f000 f85a 	bl	8002b88 <__malloc_unlock>
 8002ad4:	f104 000b 	add.w	r0, r4, #11
 8002ad8:	1d23      	adds	r3, r4, #4
 8002ada:	f020 0007 	bic.w	r0, r0, #7
 8002ade:	1ac2      	subs	r2, r0, r3
 8002ae0:	d0cc      	beq.n	8002a7c <_malloc_r+0x20>
 8002ae2:	1a1b      	subs	r3, r3, r0
 8002ae4:	50a3      	str	r3, [r4, r2]
 8002ae6:	e7c9      	b.n	8002a7c <_malloc_r+0x20>
 8002ae8:	4622      	mov	r2, r4
 8002aea:	6864      	ldr	r4, [r4, #4]
 8002aec:	e7cc      	b.n	8002a88 <_malloc_r+0x2c>
 8002aee:	1cc4      	adds	r4, r0, #3
 8002af0:	f024 0403 	bic.w	r4, r4, #3
 8002af4:	42a0      	cmp	r0, r4
 8002af6:	d0e3      	beq.n	8002ac0 <_malloc_r+0x64>
 8002af8:	1a21      	subs	r1, r4, r0
 8002afa:	4630      	mov	r0, r6
 8002afc:	f000 f82e 	bl	8002b5c <_sbrk_r>
 8002b00:	3001      	adds	r0, #1
 8002b02:	d1dd      	bne.n	8002ac0 <_malloc_r+0x64>
 8002b04:	e7cf      	b.n	8002aa6 <_malloc_r+0x4a>
 8002b06:	bf00      	nop
 8002b08:	200045c8 	.word	0x200045c8
 8002b0c:	200045cc 	.word	0x200045cc

08002b10 <_realloc_r>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	4607      	mov	r7, r0
 8002b14:	4614      	mov	r4, r2
 8002b16:	460e      	mov	r6, r1
 8002b18:	b921      	cbnz	r1, 8002b24 <_realloc_r+0x14>
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b20:	f7ff bf9c 	b.w	8002a5c <_malloc_r>
 8002b24:	b922      	cbnz	r2, 8002b30 <_realloc_r+0x20>
 8002b26:	f7ff ff4d 	bl	80029c4 <_free_r>
 8002b2a:	4625      	mov	r5, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b30:	f000 f830 	bl	8002b94 <_malloc_usable_size_r>
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	d20f      	bcs.n	8002b58 <_realloc_r+0x48>
 8002b38:	4621      	mov	r1, r4
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	f7ff ff8e 	bl	8002a5c <_malloc_r>
 8002b40:	4605      	mov	r5, r0
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d0f2      	beq.n	8002b2c <_realloc_r+0x1c>
 8002b46:	4631      	mov	r1, r6
 8002b48:	4622      	mov	r2, r4
 8002b4a:	f7ff fbeb 	bl	8002324 <memcpy>
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4638      	mov	r0, r7
 8002b52:	f7ff ff37 	bl	80029c4 <_free_r>
 8002b56:	e7e9      	b.n	8002b2c <_realloc_r+0x1c>
 8002b58:	4635      	mov	r5, r6
 8002b5a:	e7e7      	b.n	8002b2c <_realloc_r+0x1c>

08002b5c <_sbrk_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4d05      	ldr	r5, [pc, #20]	; (8002b78 <_sbrk_r+0x1c>)
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	f7ff fb74 	bl	8002254 <_sbrk>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_sbrk_r+0x1a>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_sbrk_r+0x1a>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	20004604 	.word	0x20004604

08002b7c <__malloc_lock>:
 8002b7c:	4801      	ldr	r0, [pc, #4]	; (8002b84 <__malloc_lock+0x8>)
 8002b7e:	f000 b811 	b.w	8002ba4 <__retarget_lock_acquire_recursive>
 8002b82:	bf00      	nop
 8002b84:	2000460c 	.word	0x2000460c

08002b88 <__malloc_unlock>:
 8002b88:	4801      	ldr	r0, [pc, #4]	; (8002b90 <__malloc_unlock+0x8>)
 8002b8a:	f000 b80c 	b.w	8002ba6 <__retarget_lock_release_recursive>
 8002b8e:	bf00      	nop
 8002b90:	2000460c 	.word	0x2000460c

08002b94 <_malloc_usable_size_r>:
 8002b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b98:	1f18      	subs	r0, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bfbc      	itt	lt
 8002b9e:	580b      	ldrlt	r3, [r1, r0]
 8002ba0:	18c0      	addlt	r0, r0, r3
 8002ba2:	4770      	bx	lr

08002ba4 <__retarget_lock_acquire_recursive>:
 8002ba4:	4770      	bx	lr

08002ba6 <__retarget_lock_release_recursive>:
 8002ba6:	4770      	bx	lr

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
